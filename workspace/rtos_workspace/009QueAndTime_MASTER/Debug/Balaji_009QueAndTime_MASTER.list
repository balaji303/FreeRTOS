
Balaji_009QueAndTime_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e48  08006e48  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e50  08006e50  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012eac  20000018  08006e70  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ec4  08006e70  00022ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197cf  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000349f  00000000  00000000  00039817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0003ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d7f  00000000  00000000  0003f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ce2  00000000  00000000  00063f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1bf2  00000000  00000000  0007bc51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d843  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005024  00000000  00000000  0015d898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c6c 	.word	0x08006c6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	08006c6c 	.word	0x08006c6c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ledEffectStop>:
 *      Author: Balaji
 */
#include "main.h"

void ledEffectStop(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <ledEffect>:

void ledEffect(int effectNum)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]

}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fdf1 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f919 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f9d9 	bl	80008f0 <MX_GPIO_Init>
  MX_RTC_Init();
 800053e:	f000 f987 	bl	8000850 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f9ab 	bl	800089c <MX_USART2_UART_Init>
  //To Start the Sysview recording we have to Call these
//  SEGGER_UART_init(250000);//UART
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0); //Set the zeroth bit to one //SEGGER UART
 8000546:	4b71      	ldr	r3, [pc, #452]	; (800070c <main+0x1e0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a70      	ldr	r2, [pc, #448]	; (800070c <main+0x1e0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6013      	str	r3, [r2, #0]

//  SEGGER_SYSVIEW_Conf();
//  SEGGER_SYSVIEW_Start(); //Already done in UART

  status = xTaskCreate( menuTask, "Menu_Task", 250, NULL , 2, &menuTaskHandle );
 8000552:	4b6f      	ldr	r3, [pc, #444]	; (8000710 <main+0x1e4>)
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2302      	movs	r3, #2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	22fa      	movs	r2, #250	; 0xfa
 800055e:	496d      	ldr	r1, [pc, #436]	; (8000714 <main+0x1e8>)
 8000560:	486d      	ldr	r0, [pc, #436]	; (8000718 <main+0x1ec>)
 8000562:	f004 fb1b 	bl	8004b9c <xTaskCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a6c      	ldr	r2, [pc, #432]	; (800071c <main+0x1f0>)
 800056a:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800056c:	4b6b      	ldr	r3, [pc, #428]	; (800071c <main+0x1f0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d00a      	beq.n	800058a <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000586:	bf00      	nop
 8000588:	e7fe      	b.n	8000588 <main+0x5c>
  status = xTaskCreate( cmdTask, "Cmd_Task", 250, NULL , 2, &cmdTaskHandle );
 800058a:	4b65      	ldr	r3, [pc, #404]	; (8000720 <main+0x1f4>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22fa      	movs	r2, #250	; 0xfa
 8000596:	4963      	ldr	r1, [pc, #396]	; (8000724 <main+0x1f8>)
 8000598:	4863      	ldr	r0, [pc, #396]	; (8000728 <main+0x1fc>)
 800059a:	f004 faff 	bl	8004b9c <xTaskCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a5e      	ldr	r2, [pc, #376]	; (800071c <main+0x1f0>)
 80005a2:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005a4:	4b5d      	ldr	r3, [pc, #372]	; (800071c <main+0x1f0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x96>
        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	617b      	str	r3, [r7, #20]
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x94>
  status = xTaskCreate( printTask, "Print_Task", 250, NULL , 2, &printTaskHandle );
 80005c2:	4b5a      	ldr	r3, [pc, #360]	; (800072c <main+0x200>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22fa      	movs	r2, #250	; 0xfa
 80005ce:	4958      	ldr	r1, [pc, #352]	; (8000730 <main+0x204>)
 80005d0:	4858      	ldr	r0, [pc, #352]	; (8000734 <main+0x208>)
 80005d2:	f004 fae3 	bl	8004b9c <xTaskCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a50      	ldr	r2, [pc, #320]	; (800071c <main+0x1f0>)
 80005da:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005dc:	4b4f      	ldr	r3, [pc, #316]	; (800071c <main+0x1f0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00a      	beq.n	80005fa <main+0xce>
        __asm volatile
 80005e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e8:	f383 8811 	msr	BASEPRI, r3
 80005ec:	f3bf 8f6f 	isb	sy
 80005f0:	f3bf 8f4f 	dsb	sy
 80005f4:	613b      	str	r3, [r7, #16]
    }
 80005f6:	bf00      	nop
 80005f8:	e7fe      	b.n	80005f8 <main+0xcc>
  status = xTaskCreate( ledTask, "Led_Task", 250, NULL , 2, &ledTaskHandle );
 80005fa:	4b4f      	ldr	r3, [pc, #316]	; (8000738 <main+0x20c>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22fa      	movs	r2, #250	; 0xfa
 8000606:	494d      	ldr	r1, [pc, #308]	; (800073c <main+0x210>)
 8000608:	484d      	ldr	r0, [pc, #308]	; (8000740 <main+0x214>)
 800060a:	f004 fac7 	bl	8004b9c <xTaskCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a42      	ldr	r2, [pc, #264]	; (800071c <main+0x1f0>)
 8000612:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000614:	4b41      	ldr	r3, [pc, #260]	; (800071c <main+0x1f0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d00a      	beq.n	8000632 <main+0x106>
        __asm volatile
 800061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000620:	f383 8811 	msr	BASEPRI, r3
 8000624:	f3bf 8f6f 	isb	sy
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	60fb      	str	r3, [r7, #12]
    }
 800062e:	bf00      	nop
 8000630:	e7fe      	b.n	8000630 <main+0x104>
  status = xTaskCreate( rtcTask, "Rtc_Task", 250, NULL , 2, &rtcTaskHandle );
 8000632:	4b44      	ldr	r3, [pc, #272]	; (8000744 <main+0x218>)
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	22fa      	movs	r2, #250	; 0xfa
 800063e:	4942      	ldr	r1, [pc, #264]	; (8000748 <main+0x21c>)
 8000640:	4842      	ldr	r0, [pc, #264]	; (800074c <main+0x220>)
 8000642:	f004 faab 	bl	8004b9c <xTaskCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	4a34      	ldr	r2, [pc, #208]	; (800071c <main+0x1f0>)
 800064a:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <main+0x1f0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00a      	beq.n	800066a <main+0x13e>
        __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	60bb      	str	r3, [r7, #8]
    }
 8000666:	bf00      	nop
 8000668:	e7fe      	b.n	8000668 <main+0x13c>

  qData = xQueueCreate(10,sizeof(char)); //(10*1)
 800066a:	2200      	movs	r2, #0
 800066c:	2101      	movs	r1, #1
 800066e:	200a      	movs	r0, #10
 8000670:	f003 fd34 	bl	80040dc <xQueueGenericCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a36      	ldr	r2, [pc, #216]	; (8000750 <main+0x224>)
 8000678:	6013      	str	r3, [r2, #0]
  configASSERT(qData != NULL);
 800067a:	4b35      	ldr	r3, [pc, #212]	; (8000750 <main+0x224>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10a      	bne.n	8000698 <main+0x16c>
        __asm volatile
 8000682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000686:	f383 8811 	msr	BASEPRI, r3
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	f3bf 8f4f 	dsb	sy
 8000692:	607b      	str	r3, [r7, #4]
    }
 8000694:	bf00      	nop
 8000696:	e7fe      	b.n	8000696 <main+0x16a>

  qPrint = xQueueCreate(10,sizeof(long unsigned int)); //(10*4)
 8000698:	2200      	movs	r2, #0
 800069a:	2104      	movs	r1, #4
 800069c:	200a      	movs	r0, #10
 800069e:	f003 fd1d 	bl	80040dc <xQueueGenericCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <main+0x228>)
 80006a6:	6013      	str	r3, [r2, #0]
  configASSERT(qData != NULL);
 80006a8:	4b29      	ldr	r3, [pc, #164]	; (8000750 <main+0x224>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10a      	bne.n	80006c6 <main+0x19a>
        __asm volatile
 80006b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b4:	f383 8811 	msr	BASEPRI, r3
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	603b      	str	r3, [r7, #0]
    }
 80006c2:	bf00      	nop
 80006c4:	e7fe      	b.n	80006c4 <main+0x198>

  for(int i=0;i<4;i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
 80006ca:	e013      	b.n	80006f4 <main+0x1c8>
  {
	  ledTimerHandle[i] = xTimerCreate("led Timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	3301      	adds	r3, #1
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <main+0x22c>)
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	4613      	mov	r3, r2
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006de:	481f      	ldr	r0, [pc, #124]	; (800075c <main+0x230>)
 80006e0:	f005 fb74 	bl	8005dcc <xTimerCreate>
 80006e4:	4602      	mov	r2, r0
 80006e6:	491e      	ldr	r1, [pc, #120]	; (8000760 <main+0x234>)
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0;i<4;i++)
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3301      	adds	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	dde8      	ble.n	80006cc <main+0x1a0>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&rxByte , sizeof(rxByte));
 80006fa:	2201      	movs	r2, #1
 80006fc:	4919      	ldr	r1, [pc, #100]	; (8000764 <main+0x238>)
 80006fe:	481a      	ldr	r0, [pc, #104]	; (8000768 <main+0x23c>)
 8000700:	f002 fd2d 	bl	800315e <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000704:	f004 fbc4 	bl	8004e90 <vTaskStartScheduler>
  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0x1dc>
 800070a:	bf00      	nop
 800070c:	e0001000 	.word	0xe0001000
 8000710:	20012e2c 	.word	0x20012e2c
 8000714:	08006c84 	.word	0x08006c84
 8000718:	08000dad 	.word	0x08000dad
 800071c:	20012e34 	.word	0x20012e34
 8000720:	20012dbc 	.word	0x20012dbc
 8000724:	08006c90 	.word	0x08006c90
 8000728:	08000e85 	.word	0x08000e85
 800072c:	20012de4 	.word	0x20012de4
 8000730:	08006c9c 	.word	0x08006c9c
 8000734:	08000eb5 	.word	0x08000eb5
 8000738:	20012db4 	.word	0x20012db4
 800073c:	08006ca8 	.word	0x08006ca8
 8000740:	08000ed5 	.word	0x08000ed5
 8000744:	20012de0 	.word	0x20012de0
 8000748:	08006cb4 	.word	0x08006cb4
 800074c:	08000fb9 	.word	0x08000fb9
 8000750:	20012db0 	.word	0x20012db0
 8000754:	20012e30 	.word	0x20012e30
 8000758:	08000ab5 	.word	0x08000ab5
 800075c:	08006cc0 	.word	0x08006cc0
 8000760:	20012da0 	.word	0x20012da0
 8000764:	20012db8 	.word	0x20012db8
 8000768:	20012de8 	.word	0x20012de8

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2234      	movs	r2, #52	; 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f006 fa6e 	bl	8006c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <SystemClock_Config+0xdc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a2b      	ldr	r2, [pc, #172]	; (8000848 <SystemClock_Config+0xdc>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <SystemClock_Config+0xdc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ac:	2300      	movs	r3, #0
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <SystemClock_Config+0xe0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b8:	4a24      	ldr	r2, [pc, #144]	; (800084c <SystemClock_Config+0xe0>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <SystemClock_Config+0xe0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007cc:	230a      	movs	r3, #10
 80007ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e8:	2310      	movs	r3, #16
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fe2e 	bl	8002464 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800080e:	f000 f98f 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2302      	movs	r3, #2
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fff0 	bl	8001814 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800083a:	f000 f979 	bl	8000b30 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	; 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_RTC_Init+0x44>)
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <MX_RTC_Init+0x48>)
 8000858:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_RTC_Init+0x44>)
 800085c:	2240      	movs	r2, #64	; 0x40
 800085e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_RTC_Init+0x44>)
 8000862:	227f      	movs	r2, #127	; 0x7f
 8000864:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_RTC_Init+0x44>)
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_RTC_Init+0x44>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_RTC_Init+0x44>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_RTC_Init+0x44>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_RTC_Init+0x44>)
 8000880:	f002 f88e 	bl	80029a0 <HAL_RTC_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800088a:	f000 f951 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20012dc0 	.word	0x20012dc0
 8000898:	40002800 	.word	0x40002800

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f002 fbf6 	bl	80030c4 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f927 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20012de8 	.word	0x20012de8
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <MX_GPIO_Init+0x120>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a40      	ldr	r2, [pc, #256]	; (8000a10 <MX_GPIO_Init+0x120>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <MX_GPIO_Init+0x120>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_GPIO_Init+0x120>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a39      	ldr	r2, [pc, #228]	; (8000a10 <MX_GPIO_Init+0x120>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_GPIO_Init+0x120>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <MX_GPIO_Init+0x120>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a32      	ldr	r2, [pc, #200]	; (8000a10 <MX_GPIO_Init+0x120>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <MX_GPIO_Init+0x120>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <MX_GPIO_Init+0x120>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <MX_GPIO_Init+0x120>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MX_GPIO_Init+0x120>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7108 	mov.w	r1, #544	; 0x220
 800097c:	4825      	ldr	r0, [pc, #148]	; (8000a14 <MX_GPIO_Init+0x124>)
 800097e:	f000 ff15 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4824      	ldr	r0, [pc, #144]	; (8000a18 <MX_GPIO_Init+0x128>)
 8000988:	f000 ff10 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2140      	movs	r1, #64	; 0x40
 8000990:	4822      	ldr	r0, [pc, #136]	; (8000a1c <MX_GPIO_Init+0x12c>)
 8000992:	f000 ff0b 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	481a      	ldr	r0, [pc, #104]	; (8000a18 <MX_GPIO_Init+0x128>)
 80009ae:	f000 fd69 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80009b2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_GPIO_Init+0x124>)
 80009cc:	f000 fd5a 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_GPIO_Init+0x128>)
 80009e8:	f000 fd4c 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_GPIO_Init+0x12c>)
 8000a04:	f000 fd3e 	bl	8001484 <HAL_GPIO_Init>

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020400 	.word	0x40020400

08000a20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
	BaseType_t isQueueFull;
	uint8_t deleteLastByte;
	isQueueFull = xQueueIsQueueFullFromISR(qData);
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_UART_RxCpltCallback+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 f80c 	bl	8004a4a <xQueueIsQueueFullFromISR>
 8000a32:	60f8      	str	r0, [r7, #12]
if(isQueueFull == pdTRUE)/*Check if the queue is full or not*/
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d107      	bne.n	8000a4a <HAL_UART_RxCpltCallback+0x2a>
{
	/*Queue is full*/
	/*Enqueue the data bytes*/
	xQueueSendFromISR(qData,(void *)&rxByte,NULL);
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_UART_RxCpltCallback+0x80>)
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	4918      	ldr	r1, [pc, #96]	; (8000aa4 <HAL_UART_RxCpltCallback+0x84>)
 8000a44:	f003 fcba 	bl	80043bc <xQueueGenericSendFromISR>
	}

	/*Enable uart data byte reception again in Interrupt mode*/
	HAL_UART_Receive_IT(&huart2, &rxByte ,1);
}
}/* end of HAL_UART_RxCpltCallback()*/
 8000a48:	e025      	b.n	8000a96 <HAL_UART_RxCpltCallback+0x76>
	if(rxByte == "\n")/*Check if the rxByte is \n ?*/
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_UART_RxCpltCallback+0x84>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_UART_RxCpltCallback+0x88>)
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d119      	bne.n	8000a8c <HAL_UART_RxCpltCallback+0x6c>
		xQueueReceiveFromISR(qData,(void *)&deleteLastByte,NULL);
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_RxCpltCallback+0x80>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f107 010b 	add.w	r1, r7, #11
 8000a60:	2200      	movs	r2, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 fe34 	bl	80046d0 <xQueueReceiveFromISR>
		xQueueSendFromISR(qData,(void *)&rxByte,NULL);
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_UART_RxCpltCallback+0x80>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2200      	movs	r2, #0
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <HAL_UART_RxCpltCallback+0x84>)
 8000a72:	f003 fca3 	bl	80043bc <xQueueGenericSendFromISR>
		xTaskNotifyFromISR(cmdTaskHandle,0,eNoAction,NULL);
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_UART_RxCpltCallback+0x8c>)
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2300      	movs	r3, #0
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	f005 f806 	bl	8005a98 <xTaskGenericNotifyFromISR>
	HAL_UART_Receive_IT(&huart2, &rxByte ,1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4905      	ldr	r1, [pc, #20]	; (8000aa4 <HAL_UART_RxCpltCallback+0x84>)
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <HAL_UART_RxCpltCallback+0x90>)
 8000a92:	f002 fb64 	bl	800315e <HAL_UART_Receive_IT>
}/* end of HAL_UART_RxCpltCallback()*/
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20012db0 	.word	0x20012db0
 8000aa4:	20012db8 	.word	0x20012db8
 8000aa8:	08006ccc 	.word	0x08006ccc
 8000aac:	20012dbc 	.word	0x20012dbc
 8000ab0:	20012de8 	.word	0x20012de8

08000ab4 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	int iD;
	iD = (uint32_t) pvTimerGetTimerID( xTimer );
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f005 fc2f 	bl	8006320 <pvTimerGetTimerID>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d81a      	bhi.n	8000b04 <led_effect_callback+0x50>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <led_effect_callback+0x20>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000ae5 	.word	0x08000ae5
 8000ad8:	08000aed 	.word	0x08000aed
 8000adc:	08000af5 	.word	0x08000af5
 8000ae0:	08000afd 	.word	0x08000afd

	switch(iD)
	{
	case 1:
		ledEffect(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fd16 	bl	8000516 <ledEffect>
		break;
 8000aea:	e00b      	b.n	8000b04 <led_effect_callback+0x50>
	case 2:
		ledEffect(2);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff fd12 	bl	8000516 <ledEffect>
		break;
 8000af2:	e007      	b.n	8000b04 <led_effect_callback+0x50>
	case 3:
		ledEffect(3);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f7ff fd0e 	bl	8000516 <ledEffect>
		break;
 8000afa:	e003      	b.n	8000b04 <led_effect_callback+0x50>
	case 4:
		ledEffect(4);
 8000afc:	2004      	movs	r0, #4
 8000afe:	f7ff fd0a 	bl	8000516 <ledEffect>
		break;
 8000b02:	bf00      	nop
	}
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1e:	f000 fb1d 	bl	800115c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40000c00 	.word	0x40000c00

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09a      	sub	sp, #104	; 0x68
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	225c      	movs	r2, #92	; 0x5c
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f006 f85d 	bl	8006c5c <memset>
  if(hrtc->Instance==RTC)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <HAL_RTC_MspInit+0x4c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d111      	bne.n	8000bd0 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bac:	2320      	movs	r3, #32
 8000bae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 ff76 	bl	8001aac <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000bc6:	f7ff ffb3 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_RTC_MspInit+0x50>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3768      	adds	r7, #104	; 0x68
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40002800 	.word	0x40002800
 8000bdc:	42470e3c 	.word	0x42470e3c

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <HAL_UART_MspInit+0x94>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d133      	bne.n	8000c6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_UART_MspInit+0x98>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <HAL_UART_MspInit+0x98>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_UART_MspInit+0x98>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_UART_MspInit+0x98>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <HAL_UART_MspInit+0x98>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_UART_MspInit+0x98>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <HAL_UART_MspInit+0x9c>)
 8000c56:	f000 fc15 	bl	8001484 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2026      	movs	r0, #38	; 0x26
 8000c60:	f000 fb54 	bl	800130c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c64:	2026      	movs	r0, #38	; 0x26
 8000c66:	f000 fb6d 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	2032      	movs	r0, #50	; 0x32
 8000c96:	f000 fb39 	bl	800130c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c9a:	2032      	movs	r0, #50	; 0x32
 8000c9c:	f000 fb52 	bl	8001344 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <HAL_InitTick+0xa4>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <HAL_InitTick+0xa4>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_InitTick+0xa4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbc:	f107 0210 	add.w	r2, r7, #16
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 febe 	bl	8001a48 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ccc:	f000 fe94 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <HAL_InitTick+0xa8>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	0c9b      	lsrs	r3, r3, #18
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_InitTick+0xac>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_InitTick+0xb0>)
 8000ce8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_InitTick+0xac>)
 8000cec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_InitTick+0xac>)
 8000cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_InitTick+0xac>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_InitTick+0xac>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <HAL_InitTick+0xac>)
 8000d06:	f001 ff30 	bl	8002b6a <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d104      	bne.n	8000d1a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <HAL_InitTick+0xac>)
 8000d12:	f001 ff83 	bl	8002c1c <HAL_TIM_Base_Start_IT>
 8000d16:	4603      	mov	r3, r0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3730      	adds	r7, #48	; 0x30
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	431bde83 	.word	0x431bde83
 8000d2c:	20012e38 	.word	0x20012e38
 8000d30:	40000c00 	.word	0x40000c00

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <USART2_IRQHandler+0x10>)
 8000d66:	f002 fa2b 	bl	80031c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20012de8 	.word	0x20012de8

08000d74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <TIM5_IRQHandler+0x10>)
 8000d7a:	f001 ffbf 	bl	8002cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20012e38 	.word	0x20012e38

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <menuTask>:
void process_command( CommandType_t *command );

/* Function Definition */

void menuTask(void *parameter)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6078      	str	r0, [r7, #4]
	uint32_t cmdNotifyWait;
	CommandType_t *commandReceieved;
	int options;
	const char* msgMenu = 	"@@@@@@@@@@@@@@@@@@\n"
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <menuTask+0xc4>)
 8000db6:	60bb      	str	r3, [r7, #8]
							"DATE AND TIME ->1 \n"
							"EXIT          ->2 \n"
							"ENTER YOUR CHOICE :";
	while(1)
	{
		xQueueSend(qPrint, &msgMenu, portMAX_DELAY);
 8000db8:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <menuTask+0xc8>)
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f107 0108 	add.w	r1, r7, #8
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc6:	f003 f9fb 	bl	80041c0 <xQueueGenericSend>
		/* Wait Until a Notification is receieved */
		xTaskNotifyWait(0,0,&cmdNotifyWait,portMAX_DELAY);
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd2:	9200      	str	r2, [sp, #0]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f004 fcfd 	bl	80057d8 <xTaskGenericNotifyWait>
		commandReceieved = (CommandType_t*) cmdNotifyWait;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	617b      	str	r3, [r7, #20]

		if( commandReceieved->length == 1 )
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d12d      	bne.n	8000e46 <menuTask+0x9a>
		{
			/* Converting ASCII to number by subtracting with 1 */
			options = commandReceieved->payload[0] - 48;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	3b30      	subs	r3, #48	; 0x30
 8000df0:	613b      	str	r3, [r7, #16]
			switch(options)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d02f      	beq.n	8000e58 <menuTask+0xac>
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	dc1a      	bgt.n	8000e34 <menuTask+0x88>
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <menuTask+0x60>
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d00a      	beq.n	8000e20 <menuTask+0x74>
 8000e0a:	e013      	b.n	8000e34 <menuTask+0x88>
			{
				case 0:
						/* Process LED menu */
						xTaskNotify(ledTaskHandle,0,eNoAction);
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <menuTask+0xcc>)
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	2300      	movs	r3, #0
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2300      	movs	r3, #0
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f004 fd5d 	bl	80058d8 <xTaskGenericNotify>
						break;
 8000e1e:	e01c      	b.n	8000e5a <menuTask+0xae>
				case 1:
						/* Process RTC menu */
						xTaskNotify(rtcTaskHandle,0,eNoAction);
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <menuTask+0xd0>)
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	2300      	movs	r3, #0
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f004 fd53 	bl	80058d8 <xTaskGenericNotify>
						break;
 8000e32:	e012      	b.n	8000e5a <menuTask+0xae>
				case 2:
						/* Exits */
						break;
				default:
						/* Process invalid number entry */
						xQueueSend(qPrint, &msgInvalid, portMAX_DELAY);
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <menuTask+0xc8>)
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3e:	4910      	ldr	r1, [pc, #64]	; (8000e80 <menuTask+0xd4>)
 8000e40:	f003 f9be 	bl	80041c0 <xQueueGenericSend>
						continue;
 8000e44:	e012      	b.n	8000e6c <menuTask+0xc0>
			}

		}
		else
		{
			xQueueSend(qPrint, &msgInvalid, portMAX_DELAY);
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <menuTask+0xc8>)
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	490b      	ldr	r1, [pc, #44]	; (8000e80 <menuTask+0xd4>)
 8000e52:	f003 f9b5 	bl	80041c0 <xQueueGenericSend>
 8000e56:	e000      	b.n	8000e5a <menuTask+0xae>
						break;
 8000e58:	bf00      	nop
		}

		/* Wait for the command */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2000      	movs	r0, #0
 8000e68:	f004 fcb6 	bl	80057d8 <xTaskGenericNotifyWait>
		xQueueSend(qPrint, &msgMenu, portMAX_DELAY);
 8000e6c:	e7a4      	b.n	8000db8 <menuTask+0xc>
 8000e6e:	bf00      	nop
 8000e70:	08006ce8 	.word	0x08006ce8
 8000e74:	20012e30 	.word	0x20012e30
 8000e78:	20012db4 	.word	0x20012db4
 8000e7c:	20012de0 	.word	0x20012de0
 8000e80:	20000004 	.word	0x20000004

08000e84 <cmdTask>:
	}/*End of Infinite Loop*/
}

void cmdTask(void *parameter)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	6078      	str	r0, [r7, #4]
	BaseType_t notifyTaskStatus;
	CommandType_t cmd;
	while(1)
	{
		/*Implement notify wait */
		notifyTaskStatus = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2300      	movs	r3, #0
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f004 fc9d 	bl	80057d8 <xTaskGenericNotifyWait>
 8000e9e:	61f8      	str	r0, [r7, #28]
		if (notifyTaskStatus == pdTRUE)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d1f2      	bne.n	8000e8c <cmdTask+0x8>
		{
			/*Receieved a notification*/
			process_command(&cmd); /*Helper Function*/
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f894 	bl	8000fd8 <process_command>
		notifyTaskStatus = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000eb0:	e7ec      	b.n	8000e8c <cmdTask+0x8>
	...

08000eb4 <printTask>:
		//		SEGGER_SYSVIEW_PrintfTarget("RED LED Task");
	}/*End of Infinite Loop*/
}

void printTask(void *parameter)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <printTask+0x1c>)
 8000ec0:	f000 fc8d 	bl	80017de <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec8:	f003 ffae 	bl	8004e28 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000ecc:	e7f6      	b.n	8000ebc <printTask+0x8>
 8000ece:	bf00      	nop
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <ledTask>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void ledTask(void *parameter)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
	uint32_t cmdNotifyWait;
	CommandType_t *commandReceieved;
	int options;
	const char* msgMenu = 	"@@@@@@@@@@@@@@@@@@\n"
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <ledTask+0xd0>)
 8000ede:	60bb      	str	r3, [r7, #8]
							"LED EFFECT   ->4 \n"
							"ENTER YOUR CHOICE :";
	while(1)
	{
		/* Wait for the command */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	2000      	movs	r0, #0
 8000eee:	f004 fc73 	bl	80057d8 <xTaskGenericNotifyWait>

		xQueueSend(qPrint, &msgMenu, portMAX_DELAY);
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <ledTask+0xd4>)
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	f107 0108 	add.w	r1, r7, #8
 8000efa:	2300      	movs	r3, #0
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	f003 f95e 	bl	80041c0 <xQueueGenericSend>
		/* Wait Until a Notification is receieved */
		xTaskNotifyWait(0,0,&cmdNotifyWait,portMAX_DELAY);
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	9200      	str	r2, [sp, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2000      	movs	r0, #0
 8000f14:	f004 fc60 	bl	80057d8 <xTaskGenericNotifyWait>
		commandReceieved = (CommandType_t*) cmdNotifyWait;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	617b      	str	r3, [r7, #20]

		if( commandReceieved->length == 1 )
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d12a      	bne.n	8000f7a <ledTask+0xa6>
		{
			/* Converting ASCII to number by subtracting with 1 */
			options = commandReceieved->payload[0] - 48;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	3b30      	subs	r3, #48	; 0x30
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d81a      	bhi.n	8000f68 <ledTask+0x94>
 8000f32:	a201      	add	r2, pc, #4	; (adr r2, 8000f38 <ledTask+0x64>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000f4d 	.word	0x08000f4d
 8000f3c:	08000f51 	.word	0x08000f51
 8000f40:	08000f57 	.word	0x08000f57
 8000f44:	08000f5d 	.word	0x08000f5d
 8000f48:	08000f63 	.word	0x08000f63
			switch(options)
			{
				case 0:
						ledEffectStop();
 8000f4c:	f7ff fadc 	bl	8000508 <ledEffectStop>
				case 1:
						ledEffect(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff fae0 	bl	8000516 <ledEffect>
				case 2:
						ledEffect(2);
 8000f56:	2002      	movs	r0, #2
 8000f58:	f7ff fadd 	bl	8000516 <ledEffect>
				case 3:
						ledEffect(3);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f7ff fada 	bl	8000516 <ledEffect>
				case 4:
						ledEffect(4);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f7ff fad7 	bl	8000516 <ledEffect>
				default:
						xQueueSend(qPrint, &msgInvalid, portMAX_DELAY);
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <ledTask+0xd4>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <ledTask+0xd8>)
 8000f74:	f003 f924 	bl	80041c0 <xQueueGenericSend>
 8000f78:	e007      	b.n	8000f8a <ledTask+0xb6>
			}

		}
		else
		{
			xQueueSend(qPrint, &msgInvalid, portMAX_DELAY);
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <ledTask+0xd4>)
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	4909      	ldr	r1, [pc, #36]	; (8000fac <ledTask+0xd8>)
 8000f86:	f003 f91b 	bl	80041c0 <xQueueGenericSend>
		}
		currentState = sMainMenu;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <ledTask+0xdc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
		xTaskNotify( menuTaskHandle, 0, eNoAction);
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <ledTask+0xe0>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	2300      	movs	r3, #0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f004 fc9b 	bl	80058d8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000fa2:	e79d      	b.n	8000ee0 <ledTask+0xc>
 8000fa4:	08006d70 	.word	0x08006d70
 8000fa8:	20012e30 	.word	0x20012e30
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	20000034 	.word	0x20000034
 8000fb4:	20012e2c 	.word	0x20012e2c

08000fb8 <rtcTask>:

	}/*End of Infinite Loop*/
}

void rtcTask(void *parameter)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <rtcTask+0x1c>)
 8000fc4:	f000 fc0b 	bl	80017de <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000fc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fcc:	f003 ff2c 	bl	8004e28 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000fd0:	e7f6      	b.n	8000fc0 <rtcTask+0x8>
 8000fd2:	bf00      	nop
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <process_command>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void process_command( CommandType_t *command )
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
	extract_command(command);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f835 	bl	8001050 <extract_command>

	switch(currentState)
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <process_command+0x68>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	dc24      	bgt.n	8001038 <process_command+0x60>
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	da18      	bge.n	8001024 <process_command+0x4c>
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <process_command+0x24>
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d00a      	beq.n	8001010 <process_command+0x38>
		case sRtcDateConfig:
		case sRtcReport:
			xTaskNotify( rtcTaskHandle, ( uint32_t )command, eSetValueWithOverwrite);
			break;
	}/* end of switch*/
}/* end of process_command() */
 8000ffa:	e01d      	b.n	8001038 <process_command+0x60>
			xTaskNotify( menuTaskHandle, ( uint32_t )command, eSetValueWithOverwrite);
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <process_command+0x6c>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	2300      	movs	r3, #0
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2303      	movs	r3, #3
 8001008:	2100      	movs	r1, #0
 800100a:	f004 fc65 	bl	80058d8 <xTaskGenericNotify>
			break;
 800100e:	e013      	b.n	8001038 <process_command+0x60>
			xTaskNotify( ledTaskHandle, ( uint32_t )command, eSetValueWithOverwrite);
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <process_command+0x70>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	2300      	movs	r3, #0
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2303      	movs	r3, #3
 800101c:	2100      	movs	r1, #0
 800101e:	f004 fc5b 	bl	80058d8 <xTaskGenericNotify>
			break;
 8001022:	e009      	b.n	8001038 <process_command+0x60>
			xTaskNotify( rtcTaskHandle, ( uint32_t )command, eSetValueWithOverwrite);
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <process_command+0x74>)
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	2300      	movs	r3, #0
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2303      	movs	r3, #3
 8001030:	2100      	movs	r1, #0
 8001032:	f004 fc51 	bl	80058d8 <xTaskGenericNotify>
			break;
 8001036:	bf00      	nop
}/* end of process_command() */
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000034 	.word	0x20000034
 8001044:	20012e2c 	.word	0x20012e2c
 8001048:	20012db4 	.word	0x20012db4
 800104c:	20012de0 	.word	0x20012de0

08001050 <extract_command>:

void extract_command(CommandType_t *cmd)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
	uint8_t iteration = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;
	status = uxQueueMessagesWaiting(qData);
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <extract_command+0x70>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fbc2 	bl	80047ee <uxQueueMessagesWaiting>
 800106a:	4603      	mov	r3, r0
 800106c:	613b      	str	r3, [r7, #16]
	if ( status == pdFALSE )
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d100      	bne.n	8001076 <extract_command+0x26>
	{
		/* Queue is empty */
		for(;;);
 8001074:	e7fe      	b.n	8001074 <extract_command+0x24>
	}

	do
	{
		status = xQueueReceive(qData,&rxByte,0);
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <extract_command+0x70>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f107 010f 	add.w	r1, r7, #15
 800107e:	2200      	movs	r2, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f003 fa45 	bl	8004510 <xQueueReceive>
 8001086:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d106      	bne.n	800109c <extract_command+0x4c>
		{
			/* Receieve is Success */
			/* Store the data byte in payload */
			cmd->payload[ iteration++ ] = rxByte;
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	75fa      	strb	r2, [r7, #23]
 8001094:	461a      	mov	r2, r3
 8001096:	7bf9      	ldrb	r1, [r7, #15]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	5499      	strb	r1, [r3, r2]
		}
	}while(	rxByte != '\n');
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	d1e9      	bne.n	8001076 <extract_command+0x26>
	/* Replace \n with \0 */
	cmd->payload[ iteration - 1 ] = '\0';
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	2100      	movs	r1, #0
 80010aa:	54d1      	strb	r1, [r2, r3]
	/* Save the length of the command excluding the null char */
	cmd->length = iteration - 1;
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60da      	str	r2, [r3, #12]
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20012db0 	.word	0x20012db0

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e0:	4c0b      	ldr	r4, [pc, #44]	; (8001110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ee:	f7ff fe4b 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f005 fd81 	bl	8006bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff fa19 	bl	800052c <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001108:	08006e58 	.word	0x08006e58
  ldr r2, =_sbss
 800110c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001110:	20012ec4 	.word	0x20012ec4

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_Init+0x40>)
 8001122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_Init+0x40>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x40>)
 800113a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f8d8 	bl	80012f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fd9a 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fcf6 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023c00 	.word	0x40023c00

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000000c 	.word	0x2000000c
 8001180:	20012e80 	.word	0x20012e80

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20012e80 	.word	0x20012e80

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff4c 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131e:	f7ff ff61 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001322:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	6978      	ldr	r0, [r7, #20]
 800132a:	f7ff ffb1 	bl	8001290 <NVIC_EncodePriority>
 800132e:	4602      	mov	r2, r0
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff80 	bl	800123c <__NVIC_SetPriority>
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff54 	bl	8001200 <__NVIC_EnableIRQ>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800136e:	f7ff ff09 	bl	8001184 <HAL_GetTick>
 8001372:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d008      	beq.n	8001392 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e052      	b.n	8001438 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0216 	bic.w	r2, r2, #22
 80013a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <HAL_DMA_Abort+0x62>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0208 	bic.w	r2, r2, #8
 80013d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e2:	e013      	b.n	800140c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e4:	f7ff fece 	bl	8001184 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d90c      	bls.n	800140c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2203      	movs	r2, #3
 80013fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e015      	b.n	8001438 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1e4      	bne.n	80013e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	223f      	movs	r2, #63	; 0x3f
 8001420:	409a      	lsls	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d004      	beq.n	800145e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00c      	b.n	8001478 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2205      	movs	r2, #5
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	e165      	b.n	800176c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	f040 8154 	bne.w	8001766 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d005      	beq.n	80014d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d130      	bne.n	8001538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 0201 	and.w	r2, r3, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b03      	cmp	r3, #3
 8001542:	d017      	beq.n	8001574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d123      	bne.n	80015c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	08da      	lsrs	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3208      	adds	r2, #8
 8001588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3208      	adds	r2, #8
 80015c2:	69b9      	ldr	r1, [r7, #24]
 80015c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0203 	and.w	r2, r3, #3
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80ae 	beq.w	8001766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b5d      	ldr	r3, [pc, #372]	; (8001784 <HAL_GPIO_Init+0x300>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a5c      	ldr	r2, [pc, #368]	; (8001784 <HAL_GPIO_Init+0x300>)
 8001614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <HAL_GPIO_Init+0x300>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001626:	4a58      	ldr	r2, [pc, #352]	; (8001788 <HAL_GPIO_Init+0x304>)
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4f      	ldr	r2, [pc, #316]	; (800178c <HAL_GPIO_Init+0x308>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d025      	beq.n	800169e <HAL_GPIO_Init+0x21a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4e      	ldr	r2, [pc, #312]	; (8001790 <HAL_GPIO_Init+0x30c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01f      	beq.n	800169a <HAL_GPIO_Init+0x216>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4d      	ldr	r2, [pc, #308]	; (8001794 <HAL_GPIO_Init+0x310>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d019      	beq.n	8001696 <HAL_GPIO_Init+0x212>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4c      	ldr	r2, [pc, #304]	; (8001798 <HAL_GPIO_Init+0x314>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0x20e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4b      	ldr	r2, [pc, #300]	; (800179c <HAL_GPIO_Init+0x318>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00d      	beq.n	800168e <HAL_GPIO_Init+0x20a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4a      	ldr	r2, [pc, #296]	; (80017a0 <HAL_GPIO_Init+0x31c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d007      	beq.n	800168a <HAL_GPIO_Init+0x206>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <HAL_GPIO_Init+0x320>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x202>
 8001682:	2306      	movs	r3, #6
 8001684:	e00c      	b.n	80016a0 <HAL_GPIO_Init+0x21c>
 8001686:	2307      	movs	r3, #7
 8001688:	e00a      	b.n	80016a0 <HAL_GPIO_Init+0x21c>
 800168a:	2305      	movs	r3, #5
 800168c:	e008      	b.n	80016a0 <HAL_GPIO_Init+0x21c>
 800168e:	2304      	movs	r3, #4
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x21c>
 8001692:	2303      	movs	r3, #3
 8001694:	e004      	b.n	80016a0 <HAL_GPIO_Init+0x21c>
 8001696:	2302      	movs	r3, #2
 8001698:	e002      	b.n	80016a0 <HAL_GPIO_Init+0x21c>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_GPIO_Init+0x21c>
 800169e:	2300      	movs	r3, #0
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f002 0203 	and.w	r2, r2, #3
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	4093      	lsls	r3, r2
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b0:	4935      	ldr	r1, [pc, #212]	; (8001788 <HAL_GPIO_Init+0x304>)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	3302      	adds	r3, #2
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016be:	4b3a      	ldr	r3, [pc, #232]	; (80017a8 <HAL_GPIO_Init+0x324>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e2:	4a31      	ldr	r2, [pc, #196]	; (80017a8 <HAL_GPIO_Init+0x324>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <HAL_GPIO_Init+0x324>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <HAL_GPIO_Init+0x324>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_GPIO_Init+0x324>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001736:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <HAL_GPIO_Init+0x324>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HAL_GPIO_Init+0x324>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <HAL_GPIO_Init+0x324>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3301      	adds	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2b0f      	cmp	r3, #15
 8001770:	f67f ae96 	bls.w	80014a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40013800 	.word	0x40013800
 800178c:	40020000 	.word	0x40020000
 8001790:	40020400 	.word	0x40020400
 8001794:	40020800 	.word	0x40020800
 8001798:	40020c00 	.word	0x40020c00
 800179c:	40021000 	.word	0x40021000
 80017a0:	40021400 	.word	0x40021400
 80017a4:	40021800 	.word	0x40021800
 80017a8:	40013c00 	.word	0x40013c00

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	041a      	lsls	r2, r3, #16
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	400b      	ands	r3, r1
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0cc      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d90c      	bls.n	8001850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b65      	ldr	r3, [pc, #404]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800188a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	494d      	ldr	r1, [pc, #308]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d044      	beq.n	8001934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d119      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e06f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e067      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f023 0203 	bic.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4934      	ldr	r1, [pc, #208]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001904:	f7ff fc3e 	bl	8001184 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff fc3a 	bl	8001184 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e04f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 020c 	and.w	r2, r3, #12
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1eb      	bne.n	800190c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d20c      	bcs.n	800195c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e032      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4916      	ldr	r1, [pc, #88]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490e      	ldr	r1, [pc, #56]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800199a:	f000 fbb1 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	490a      	ldr	r1, [pc, #40]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	5ccb      	ldrb	r3, [r1, r3]
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f960 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08006e30 	.word	0x08006e30
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019fc:	f7ff fff0 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0a9b      	lsrs	r3, r3, #10
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08006e40 	.word	0x08006e40

08001a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a24:	f7ff ffdc 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0b5b      	lsrs	r3, r3, #13
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4903      	ldr	r1, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	08006e40 	.word	0x08006e40

08001a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	220f      	movs	r2, #15
 8001a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0203 	and.w	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_RCC_GetClockConfig+0x60>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 020f 	and.w	r2, r3, #15
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	601a      	str	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ae4:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	496c      	ldr	r1, [pc, #432]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001b02:	2301      	movs	r3, #1
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001b12:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b18:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	4960      	ldr	r1, [pc, #384]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001b30:	2301      	movs	r3, #1
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d017      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4955      	ldr	r1, [pc, #340]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001b60:	2301      	movs	r3, #1
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d017      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b7c:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8a:	4946      	ldr	r1, [pc, #280]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 808a 	beq.w	8001cce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a38      	ldr	r2, [pc, #224]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a33      	ldr	r2, [pc, #204]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001be2:	f7ff facf 	bl	8001184 <HAL_GetTick>
 8001be6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff facb 	bl	8001184 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e278      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c10:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d02f      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d028      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c3c:	4a19      	ldr	r2, [pc, #100]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d114      	bne.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fa99 	bl	8001184 <HAL_GetTick>
 8001c52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff fa95 	bl	8001184 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e240      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ee      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c84:	d114      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c9a:	4902      	ldr	r1, [pc, #8]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
 8001ca0:	e00c      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	42470e40 	.word	0x42470e40
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a49      	ldr	r2, [pc, #292]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001cba:	6093      	str	r3, [r2, #8]
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc8:	4944      	ldr	r1, [pc, #272]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001ce2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00a      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001cf0:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	4937      	ldr	r1, [pc, #220]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d20:	492e      	ldr	r1, [pc, #184]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d011      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d42:	4926      	ldr	r1, [pc, #152]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d52:	d101      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00a      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	491a      	ldr	r1, [pc, #104]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d011      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d94:	4911      	ldr	r1, [pc, #68]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001da4:	d101      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001da6:	2301      	movs	r3, #1
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001db8:	f040 80ff 	bne.w	8001fba <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc2:	f7ff f9df 	bl	8001184 <HAL_GetTick>
 8001dc6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dc8:	e00e      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dca:	f7ff f9db 	bl	8001184 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d907      	bls.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e188      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	424711e0 	.word	0x424711e0
 8001de4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001de8:	4b7e      	ldr	r3, [pc, #504]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ea      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d028      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d124      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e1c:	4b71      	ldr	r3, [pc, #452]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e34:	0e1b      	lsrs	r3, r3, #24
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	431a      	orrs	r2, r3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	431a      	orrs	r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	071b      	lsls	r3, r3, #28
 8001e5e:	4961      	ldr	r1, [pc, #388]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d035      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e90:	d130      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e92:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e98:	0c1b      	lsrs	r3, r3, #16
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ea4:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eaa:	0f1b      	lsrs	r3, r3, #28
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	019b      	lsls	r3, r3, #6
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	071b      	lsls	r3, r3, #28
 8001ed4:	4943      	ldr	r1, [pc, #268]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001edc:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee2:	f023 021f 	bic.w	r2, r3, #31
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	493d      	ldr	r1, [pc, #244]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d029      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f08:	d124      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f0a:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	3301      	adds	r3, #1
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f22:	0f1b      	lsrs	r3, r3, #28
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	019b      	lsls	r3, r3, #6
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	431a      	orrs	r2, r3
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	431a      	orrs	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	071b      	lsls	r3, r3, #28
 8001f4c:	4925      	ldr	r1, [pc, #148]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	071b      	lsls	r3, r3, #28
 8001f86:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f94:	f7ff f8f6 	bl	8001184 <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f9c:	f7ff f8f2 	bl	8001184 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e09f      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 8095 	bne.w	80020ec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7ff f8dc 	bl	8001184 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fd0:	f7ff f8d8 	bl	8001184 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d908      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e085      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	42470068 	.word	0x42470068
 8001fec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ff0:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ffc:	d0e8      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800201a:	2b00      	cmp	r3, #0
 800201c:	d02b      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002022:	2b00      	cmp	r3, #0
 8002024:	d127      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002026:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	431a      	orrs	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	3b01      	subs	r3, #1
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	061b      	lsls	r3, r3, #24
 8002054:	4928      	ldr	r1, [pc, #160]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800205e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002062:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	3b01      	subs	r3, #1
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	4922      	ldr	r1, [pc, #136]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01d      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800208a:	d118      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	0e1b      	lsrs	r3, r3, #24
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	019b      	lsls	r3, r3, #6
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	3b01      	subs	r3, #1
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	4910      	ldr	r1, [pc, #64]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020c4:	f7ff f85e 	bl	8001184 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020cc:	f7ff f85a 	bl	8001184 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e007      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ea:	d1ef      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3730      	adds	r7, #48	; 0x30
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470070 	.word	0x42470070

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002104:	b088      	sub	sp, #32
 8002106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800211c:	4bce      	ldr	r3, [pc, #824]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b0c      	cmp	r3, #12
 8002126:	f200 818d 	bhi.w	8002444 <HAL_RCC_GetSysClockFreq+0x344>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <HAL_RCC_GetSysClockFreq+0x30>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002165 	.word	0x08002165
 8002134:	08002445 	.word	0x08002445
 8002138:	08002445 	.word	0x08002445
 800213c:	08002445 	.word	0x08002445
 8002140:	0800216b 	.word	0x0800216b
 8002144:	08002445 	.word	0x08002445
 8002148:	08002445 	.word	0x08002445
 800214c:	08002445 	.word	0x08002445
 8002150:	08002171 	.word	0x08002171
 8002154:	08002445 	.word	0x08002445
 8002158:	08002445 	.word	0x08002445
 800215c:	08002445 	.word	0x08002445
 8002160:	080022e5 	.word	0x080022e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4bbd      	ldr	r3, [pc, #756]	; (800245c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002166:	61bb      	str	r3, [r7, #24]
       break;
 8002168:	e16f      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216a:	4bbd      	ldr	r3, [pc, #756]	; (8002460 <HAL_RCC_GetSysClockFreq+0x360>)
 800216c:	61bb      	str	r3, [r7, #24]
      break;
 800216e:	e16c      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002170:	4bb9      	ldr	r3, [pc, #740]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002178:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217a:	4bb7      	ldr	r3, [pc, #732]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d053      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002186:	4bb4      	ldr	r3, [pc, #720]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	461a      	mov	r2, r3
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	ea02 0400 	and.w	r4, r2, r0
 800219e:	603c      	str	r4, [r7, #0]
 80021a0:	400b      	ands	r3, r1
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021a8:	4620      	mov	r0, r4
 80021aa:	4629      	mov	r1, r5
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	014b      	lsls	r3, r1, #5
 80021b6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021ba:	0142      	lsls	r2, r0, #5
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	4623      	mov	r3, r4
 80021c2:	1ac0      	subs	r0, r0, r3
 80021c4:	462b      	mov	r3, r5
 80021c6:	eb61 0103 	sbc.w	r1, r1, r3
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	018b      	lsls	r3, r1, #6
 80021d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021d8:	0182      	lsls	r2, r0, #6
 80021da:	1a12      	subs	r2, r2, r0
 80021dc:	eb63 0301 	sbc.w	r3, r3, r1
 80021e0:	f04f 0000 	mov.w	r0, #0
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	00d9      	lsls	r1, r3, #3
 80021ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021ee:	00d0      	lsls	r0, r2, #3
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4621      	mov	r1, r4
 80021f6:	1852      	adds	r2, r2, r1
 80021f8:	4629      	mov	r1, r5
 80021fa:	eb43 0101 	adc.w	r1, r3, r1
 80021fe:	460b      	mov	r3, r1
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0259      	lsls	r1, r3, #9
 800220a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800220e:	0250      	lsls	r0, r2, #9
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	461a      	mov	r2, r3
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f7fd fff6 	bl	8000210 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	e04c      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222e:	4b8a      	ldr	r3, [pc, #552]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	461a      	mov	r2, r3
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800223e:	f04f 0100 	mov.w	r1, #0
 8002242:	ea02 0a00 	and.w	sl, r2, r0
 8002246:	ea03 0b01 	and.w	fp, r3, r1
 800224a:	4650      	mov	r0, sl
 800224c:	4659      	mov	r1, fp
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	014b      	lsls	r3, r1, #5
 8002258:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800225c:	0142      	lsls	r2, r0, #5
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	ebb0 000a 	subs.w	r0, r0, sl
 8002266:	eb61 010b 	sbc.w	r1, r1, fp
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	018b      	lsls	r3, r1, #6
 8002274:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002278:	0182      	lsls	r2, r0, #6
 800227a:	1a12      	subs	r2, r2, r0
 800227c:	eb63 0301 	sbc.w	r3, r3, r1
 8002280:	f04f 0000 	mov.w	r0, #0
 8002284:	f04f 0100 	mov.w	r1, #0
 8002288:	00d9      	lsls	r1, r3, #3
 800228a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800228e:	00d0      	lsls	r0, r2, #3
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	eb12 020a 	adds.w	r2, r2, sl
 8002298:	eb43 030b 	adc.w	r3, r3, fp
 800229c:	f04f 0000 	mov.w	r0, #0
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	0299      	lsls	r1, r3, #10
 80022a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022aa:	0290      	lsls	r0, r2, #10
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	f7fd ffa8 	bl	8000210 <__aeabi_uldivmod>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4613      	mov	r3, r2
 80022c6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022c8:	4b63      	ldr	r3, [pc, #396]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	61bb      	str	r3, [r7, #24]
      break;
 80022e2:	e0b2      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e4:	4b5c      	ldr	r3, [pc, #368]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ee:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d04d      	beq.n	8002396 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fa:	4b57      	ldr	r3, [pc, #348]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	099b      	lsrs	r3, r3, #6
 8002300:	461a      	mov	r2, r3
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	f240 10ff 	movw	r0, #511	; 0x1ff
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	ea02 0800 	and.w	r8, r2, r0
 8002312:	ea03 0901 	and.w	r9, r3, r1
 8002316:	4640      	mov	r0, r8
 8002318:	4649      	mov	r1, r9
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	014b      	lsls	r3, r1, #5
 8002324:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002328:	0142      	lsls	r2, r0, #5
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	ebb0 0008 	subs.w	r0, r0, r8
 8002332:	eb61 0109 	sbc.w	r1, r1, r9
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	018b      	lsls	r3, r1, #6
 8002340:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002344:	0182      	lsls	r2, r0, #6
 8002346:	1a12      	subs	r2, r2, r0
 8002348:	eb63 0301 	sbc.w	r3, r3, r1
 800234c:	f04f 0000 	mov.w	r0, #0
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	00d9      	lsls	r1, r3, #3
 8002356:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800235a:	00d0      	lsls	r0, r2, #3
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	eb12 0208 	adds.w	r2, r2, r8
 8002364:	eb43 0309 	adc.w	r3, r3, r9
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	0259      	lsls	r1, r3, #9
 8002372:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002376:	0250      	lsls	r0, r2, #9
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	461a      	mov	r2, r3
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f7fd ff42 	bl	8000210 <__aeabi_uldivmod>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4613      	mov	r3, r2
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	e04a      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002396:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	461a      	mov	r2, r3
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	ea02 0400 	and.w	r4, r2, r0
 80023ae:	ea03 0501 	and.w	r5, r3, r1
 80023b2:	4620      	mov	r0, r4
 80023b4:	4629      	mov	r1, r5
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	014b      	lsls	r3, r1, #5
 80023c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023c4:	0142      	lsls	r2, r0, #5
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	1b00      	subs	r0, r0, r4
 80023cc:	eb61 0105 	sbc.w	r1, r1, r5
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	018b      	lsls	r3, r1, #6
 80023da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023de:	0182      	lsls	r2, r0, #6
 80023e0:	1a12      	subs	r2, r2, r0
 80023e2:	eb63 0301 	sbc.w	r3, r3, r1
 80023e6:	f04f 0000 	mov.w	r0, #0
 80023ea:	f04f 0100 	mov.w	r1, #0
 80023ee:	00d9      	lsls	r1, r3, #3
 80023f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023f4:	00d0      	lsls	r0, r2, #3
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	1912      	adds	r2, r2, r4
 80023fc:	eb45 0303 	adc.w	r3, r5, r3
 8002400:	f04f 0000 	mov.w	r0, #0
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	0299      	lsls	r1, r3, #10
 800240a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800240e:	0290      	lsls	r0, r2, #10
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	461a      	mov	r2, r3
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	f7fd fef6 	bl	8000210 <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4613      	mov	r3, r2
 800242a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_GetSysClockFreq+0x358>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0f1b      	lsrs	r3, r3, #28
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	61bb      	str	r3, [r7, #24]
      break;
 8002442:	e002      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002446:	61bb      	str	r3, [r7, #24]
      break;
 8002448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244a:	69bb      	ldr	r3, [r7, #24]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	00f42400 	.word	0x00f42400
 8002460:	007a1200 	.word	0x007a1200

08002464 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e28d      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8083 	beq.w	800258a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002484:	4b94      	ldr	r3, [pc, #592]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b04      	cmp	r3, #4
 800248e:	d019      	beq.n	80024c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002490:	4b91      	ldr	r3, [pc, #580]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002498:	2b08      	cmp	r3, #8
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800249c:	4b8e      	ldr	r3, [pc, #568]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b8b      	ldr	r3, [pc, #556]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b6:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c2:	d10b      	bne.n	80024dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	4b84      	ldr	r3, [pc, #528]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05b      	beq.n	8002588 <HAL_RCC_OscConfig+0x124>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d157      	bne.n	8002588 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e25a      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x90>
 80024e6:	4b7c      	ldr	r3, [pc, #496]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7b      	ldr	r2, [pc, #492]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0xcc>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0xb4>
 80024fe:	4b76      	ldr	r3, [pc, #472]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a75      	ldr	r2, [pc, #468]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b73      	ldr	r3, [pc, #460]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a72      	ldr	r2, [pc, #456]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xcc>
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6e      	ldr	r2, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b6c      	ldr	r3, [pc, #432]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a6b      	ldr	r2, [pc, #428]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fe24 	bl	8001184 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002540:	f7fe fe20 	bl	8001184 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e21f      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0xdc>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fe10 	bl	8001184 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe fe0c 	bl	8001184 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e20b      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b57      	ldr	r3, [pc, #348]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x104>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d06f      	beq.n	8002676 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002596:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d017      	beq.n	80025d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025a2:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d105      	bne.n	80025ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ae:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b44      	ldr	r3, [pc, #272]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x186>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1d3      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4937      	ldr	r1, [pc, #220]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_RCC_OscConfig+0x278>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fdb9 	bl	8001184 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002616:	f7fe fdb5 	bl	8001184 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1b4      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4925      	ldr	r1, [pc, #148]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_RCC_OscConfig+0x278>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fd98 	bl	8001184 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002658:	f7fe fd94 	bl	8001184 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e193      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d036      	beq.n	80026f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_RCC_OscConfig+0x27c>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe fd78 	bl	8001184 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe fd74 	bl	8001184 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e173      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x234>
 80026b6:	e01b      	b.n	80026f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_OscConfig+0x27c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7fe fd61 	bl	8001184 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e00e      	b.n	80026e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c6:	f7fe fd5d 	bl	8001184 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d907      	bls.n	80026e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e15c      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	42470000 	.word	0x42470000
 80026e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	4b8a      	ldr	r3, [pc, #552]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ea      	bne.n	80026c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8097 	beq.w	800282c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b83      	ldr	r3, [pc, #524]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b7f      	ldr	r3, [pc, #508]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a7e      	ldr	r2, [pc, #504]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b79      	ldr	r3, [pc, #484]	; (8002914 <HAL_RCC_OscConfig+0x4b0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b76      	ldr	r3, [pc, #472]	; (8002914 <HAL_RCC_OscConfig+0x4b0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a75      	ldr	r2, [pc, #468]	; (8002914 <HAL_RCC_OscConfig+0x4b0>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7fe fd1d 	bl	8001184 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7fe fd19 	bl	8001184 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e118      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_RCC_OscConfig+0x4b0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x31e>
 8002774:	4b66      	ldr	r3, [pc, #408]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a65      	ldr	r2, [pc, #404]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
 8002780:	e01c      	b.n	80027bc <HAL_RCC_OscConfig+0x358>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x340>
 800278a:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a60      	ldr	r2, [pc, #384]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a5d      	ldr	r2, [pc, #372]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0x358>
 80027a4:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a59      	ldr	r2, [pc, #356]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a56      	ldr	r2, [pc, #344]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027b6:	f023 0304 	bic.w	r3, r3, #4
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fcde 	bl	8001184 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fcda 	bl	8001184 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0d7      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ee      	beq.n	80027cc <HAL_RCC_OscConfig+0x368>
 80027ee:	e014      	b.n	800281a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe fcc8 	bl	8001184 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f8:	f7fe fcc4 	bl	8001184 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0c1      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ee      	bne.n	80027f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	4a3a      	ldr	r2, [pc, #232]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80ad 	beq.w	8002990 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002836:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d060      	beq.n	8002904 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d145      	bne.n	80028d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b33      	ldr	r3, [pc, #204]	; (8002918 <HAL_RCC_OscConfig+0x4b4>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fc98 	bl	8001184 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fc94 	bl	8001184 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e093      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	3b01      	subs	r3, #1
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	071b      	lsls	r3, r3, #28
 80028a2:	491b      	ldr	r1, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x4b4>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7fe fc69 	bl	8001184 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe fc65 	bl	8001184 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e064      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x452>
 80028d4:	e05c      	b.n	8002990 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_RCC_OscConfig+0x4b4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fc52 	bl	8001184 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe fc4e 	bl	8001184 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04d      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x480>
 8002902:	e045      	b.n	8002990 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e040      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
 8002910:	40023800 	.word	0x40023800
 8002914:	40007000 	.word	0x40007000
 8002918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_RCC_OscConfig+0x538>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d030      	beq.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d129      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d122      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002954:	4293      	cmp	r3, r2
 8002956:	d119      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d10f      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d107      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e083      	b.n	8002aba <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7f5b      	ldrb	r3, [r3, #29]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe f8e2 	bl	8000b8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	22ca      	movs	r2, #202	; 0xca
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2253      	movs	r2, #83	; 0x53
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f897 	bl	8002b12 <RTC_EnterInitMode>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2204      	movs	r2, #4
 80029f6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e05e      	b.n	8002aba <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a0e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6919      	ldr	r1, [r3, #16]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	041a      	lsls	r2, r3, #16
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a5a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10e      	bne.n	8002a88 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f829 	bl	8002ac2 <HAL_RTC_WaitForSynchro>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	22ff      	movs	r2, #255	; 0xff
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e018      	b.n	8002aba <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	22ff      	movs	r2, #255	; 0xff
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002adc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ade:	f7fe fb51 	bl	8001184 <HAL_GetTick>
 8002ae2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002ae4:	e009      	b.n	8002afa <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ae6:	f7fe fb4d 	bl	8001184 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af4:	d901      	bls.n	8002afa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e007      	b.n	8002b0a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ee      	beq.n	8002ae6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d119      	bne.n	8002b60 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b36:	f7fe fb25 	bl	8001184 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002b3c:	e009      	b.n	8002b52 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b3e:	f7fe fb21 	bl	8001184 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4c:	d901      	bls.n	8002b52 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e007      	b.n	8002b62 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ee      	beq.n	8002b3e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e041      	b.n	8002c00 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f839 	bl	8002c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f000 f9d7 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d001      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e04e      	b.n	8002cd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d022      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d01d      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d018      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_TIM_Base_Start_IT+0xd0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00e      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d111      	bne.n	8002cc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d010      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbe:	e007      	b.n	8002cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40000c00 	.word	0x40000c00
 8002cf0:	40010400 	.word	0x40010400
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40001800 	.word	0x40001800

08002cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d122      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d11b      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0202 	mvn.w	r2, #2
 8002d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8ee 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8e0 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8f1 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d122      	bne.n	8002dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11b      	bne.n	8002dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0204 	mvn.w	r2, #4
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8c4 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8b6 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f8c7 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d122      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d11b      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0208 	mvn.w	r2, #8
 8002dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f89a 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002dec:	e005      	b.n	8002dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f88c 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f89d 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d122      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0210 	mvn.w	r2, #16
 8002e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2208      	movs	r2, #8
 8002e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f870 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f862 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f873 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0201 	mvn.w	r2, #1
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fe46 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e98:	2b80      	cmp	r3, #128	; 0x80
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f902 	bl	80030b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d107      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f838 	bl	8002f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d107      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0220 	mvn.w	r2, #32
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8cc 	bl	800309c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d00f      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3d      	ldr	r2, [pc, #244]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3c      	ldr	r2, [pc, #240]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d108      	bne.n	8002fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d027      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d023      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01f      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d017      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	; (8003084 <TIM_Base_SetConfig+0x128>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <TIM_Base_SetConfig+0x12c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00f      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a26      	ldr	r2, [pc, #152]	; (800308c <TIM_Base_SetConfig+0x130>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a25      	ldr	r2, [pc, #148]	; (8003090 <TIM_Base_SetConfig+0x134>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a24      	ldr	r2, [pc, #144]	; (8003094 <TIM_Base_SetConfig+0x138>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a23      	ldr	r2, [pc, #140]	; (8003098 <TIM_Base_SetConfig+0x13c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d108      	bne.n	8003020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_Base_SetConfig+0xf8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d103      	bne.n	800305c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	615a      	str	r2, [r3, #20]
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40010400 	.word	0x40010400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800
 8003090:	40001800 	.word	0x40001800
 8003094:	40001c00 	.word	0x40001c00
 8003098:	40002000 	.word	0x40002000

0800309c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e03f      	b.n	8003156 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fd78 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fcdb 	bl	8003ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800313c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	4613      	mov	r3, r2
 800316a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	d11d      	bne.n	80031b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_UART_Receive_IT+0x26>
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e016      	b.n	80031b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_UART_Receive_IT+0x38>
 8003192:	2302      	movs	r3, #2
 8003194:	e00f      	b.n	80031b6 <HAL_UART_Receive_IT+0x58>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fab6 	bl	800371c <UART_Start_Receive_IT>
 80031b0:	4603      	mov	r3, r0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0ba      	sub	sp, #232	; 0xe8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_UART_IRQHandler+0x66>
 8003212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fb95 	bl	800394e <UART_Receive_IT>
      return;
 8003224:	e256      	b.n	80036d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80de 	beq.w	80033ec <HAL_UART_IRQHandler+0x22c>
 8003230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d106      	bne.n	800324a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003240:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80d1 	beq.w	80033ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_UART_IRQHandler+0xae>
 8003256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_UART_IRQHandler+0xd2>
 800327a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0202 	orr.w	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_UART_IRQHandler+0xf6>
 800329e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0204 	orr.w	r2, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d011      	beq.n	80032e6 <HAL_UART_IRQHandler+0x126>
 80032c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0208 	orr.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 81ed 	beq.w	80036ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_UART_IRQHandler+0x14e>
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fb20 	bl	800394e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <HAL_UART_IRQHandler+0x17a>
 8003332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d04f      	beq.n	80033da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa28 	bl	8003790 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d141      	bne.n	80033d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800336c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800337a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800337e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1d9      	bne.n	800334e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d013      	beq.n	80033ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	4a7d      	ldr	r2, [pc, #500]	; (800359c <HAL_UART_IRQHandler+0x3dc>)
 80033a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe f846 	bl	8001440 <HAL_DMA_Abort_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033c4:	4610      	mov	r0, r2
 80033c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e00e      	b.n	80033e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f990 	bl	80036f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	e00a      	b.n	80033e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f98c 	bl	80036f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	e006      	b.n	80033e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f988 	bl	80036f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033e6:	e170      	b.n	80036ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e8:	bf00      	nop
    return;
 80033ea:	e16e      	b.n	80036ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	f040 814a 	bne.w	800368a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8143 	beq.w	800368a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 813c 	beq.w	800368a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	f040 80b4 	bne.w	80035a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8140 	beq.w	80036ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003456:	429a      	cmp	r2, r3
 8003458:	f080 8139 	bcs.w	80036ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003462:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346e:	f000 8088 	beq.w	8003582 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800348c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800349e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1d9      	bne.n	8003472 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e1      	bne.n	80034be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800350a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800350c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800351e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800352c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e3      	bne.n	80034fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003552:	f023 0310 	bic.w	r3, r3, #16
 8003556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003564:	65ba      	str	r2, [r7, #88]	; 0x58
 8003566:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800356a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e3      	bne.n	8003540 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd feef 	bl	8001360 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358a:	b29b      	uxth	r3, r3
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	b29b      	uxth	r3, r3
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8b6 	bl	8003704 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003598:	e099      	b.n	80036ce <HAL_UART_IRQHandler+0x50e>
 800359a:	bf00      	nop
 800359c:	08003857 	.word	0x08003857
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 808b 	beq.w	80036d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8086 	beq.w	80036d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035ea:	647a      	str	r2, [r7, #68]	; 0x44
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e3      	bne.n	80035c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3314      	adds	r3, #20
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	623b      	str	r3, [r7, #32]
   return(result);
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3314      	adds	r3, #20
 800361e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003622:	633a      	str	r2, [r7, #48]	; 0x30
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e3      	bne.n	80035fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	60fb      	str	r3, [r7, #12]
   return(result);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0310 	bic.w	r3, r3, #16
 800365a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003668:	61fa      	str	r2, [r7, #28]
 800366a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	617b      	str	r3, [r7, #20]
   return(result);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e3      	bne.n	8003644 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800367c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f83e 	bl	8003704 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003688:	e023      	b.n	80036d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_UART_IRQHandler+0x4ea>
 8003696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8eb 	bl	800387e <UART_Transmit_IT>
    return;
 80036a8:	e014      	b.n	80036d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <HAL_UART_IRQHandler+0x514>
 80036b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f92b 	bl	800391e <UART_EndTransmit_IT>
    return;
 80036c8:	e004      	b.n	80036d4 <HAL_UART_IRQHandler+0x514>
    return;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <HAL_UART_IRQHandler+0x514>
      return;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <HAL_UART_IRQHandler+0x514>
      return;
 80036d2:	bf00      	nop
  }
}
 80036d4:	37e8      	adds	r7, #232	; 0xe8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop

080036dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2222      	movs	r2, #34	; 0x22
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003760:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003790:	b480      	push	{r7}
 8003792:	b095      	sub	sp, #84	; 0x54
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037b8:	643a      	str	r2, [r7, #64]	; 0x40
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e5      	bne.n	8003798 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3314      	adds	r3, #20
 80037d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	61fb      	str	r3, [r7, #28]
   return(result);
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3314      	adds	r3, #20
 80037ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e5      	bne.n	80037cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	2b01      	cmp	r3, #1
 8003806:	d119      	bne.n	800383c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	e853 3f00 	ldrex	r3, [r3]
 8003816:	60bb      	str	r3, [r7, #8]
   return(result);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f023 0310 	bic.w	r3, r3, #16
 800381e:	647b      	str	r3, [r7, #68]	; 0x44
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003828:	61ba      	str	r2, [r7, #24]
 800382a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	613b      	str	r3, [r7, #16]
   return(result);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e5      	bne.n	8003808 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
}
 800384a:	bf00      	nop
 800384c:	3754      	adds	r7, #84	; 0x54
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7ff ff3d 	bl	80036f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b21      	cmp	r3, #33	; 0x21
 8003890:	d13e      	bne.n	8003910 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	d114      	bne.n	80038c6 <UART_Transmit_IT+0x48>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d110      	bne.n	80038c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	1c9a      	adds	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	621a      	str	r2, [r3, #32]
 80038c4:	e008      	b.n	80038d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	1c59      	adds	r1, r3, #1
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6211      	str	r1, [r2, #32]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4619      	mov	r1, r3
 80038e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10f      	bne.n	800390c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800390a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003934:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fecc 	bl	80036dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b08c      	sub	sp, #48	; 0x30
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b22      	cmp	r3, #34	; 0x22
 8003960:	f040 80ab 	bne.w	8003aba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396c:	d117      	bne.n	800399e <UART_Receive_IT+0x50>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d113      	bne.n	800399e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398c:	b29a      	uxth	r2, r3
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	1c9a      	adds	r2, r3, #2
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28
 800399c:	e026      	b.n	80039ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d007      	beq.n	80039c2 <UART_Receive_IT+0x74>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <UART_Receive_IT+0x82>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e008      	b.n	80039e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4619      	mov	r1, r3
 80039fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d15a      	bne.n	8003ab6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0220 	bic.w	r2, r2, #32
 8003a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d135      	bne.n	8003aac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	613b      	str	r3, [r7, #16]
   return(result);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f023 0310 	bic.w	r3, r3, #16
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a66:	623a      	str	r2, [r7, #32]
 8003a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	69f9      	ldr	r1, [r7, #28]
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d10a      	bne.n	8003a9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fe2d 	bl	8003704 <HAL_UARTEx_RxEventCallback>
 8003aaa:	e002      	b.n	8003ab2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fc ffb7 	bl	8000a20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e002      	b.n	8003abc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e000      	b.n	8003abc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
  }
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3730      	adds	r7, #48	; 0x30
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac8:	b09f      	sub	sp, #124	; 0x7c
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ada:	68d9      	ldr	r1, [r3, #12]
 8003adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	ea40 0301 	orr.w	r3, r0, r1
 8003ae4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b08:	f021 010c 	bic.w	r1, r1, #12
 8003b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b12:	430b      	orrs	r3, r1
 8003b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b22:	6999      	ldr	r1, [r3, #24]
 8003b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	ea40 0301 	orr.w	r3, r0, r1
 8003b2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4bc5      	ldr	r3, [pc, #788]	; (8003e48 <UART_SetConfig+0x384>)
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d004      	beq.n	8003b42 <UART_SetConfig+0x7e>
 8003b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4bc3      	ldr	r3, [pc, #780]	; (8003e4c <UART_SetConfig+0x388>)
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d103      	bne.n	8003b4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b42:	f7fd ff6d 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8003b46:	6778      	str	r0, [r7, #116]	; 0x74
 8003b48:	e002      	b.n	8003b50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b4a:	f7fd ff55 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8003b4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	f040 80b6 	bne.w	8003cc8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5e:	461c      	mov	r4, r3
 8003b60:	f04f 0500 	mov.w	r5, #0
 8003b64:	4622      	mov	r2, r4
 8003b66:	462b      	mov	r3, r5
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	6439      	str	r1, [r7, #64]	; 0x40
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b74:	1912      	adds	r2, r2, r4
 8003b76:	eb45 0303 	adc.w	r3, r5, r3
 8003b7a:	f04f 0000 	mov.w	r0, #0
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	00d9      	lsls	r1, r3, #3
 8003b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b88:	00d0      	lsls	r0, r2, #3
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	1911      	adds	r1, r2, r4
 8003b90:	6639      	str	r1, [r7, #96]	; 0x60
 8003b92:	416b      	adcs	r3, r5
 8003b94:	667b      	str	r3, [r7, #100]	; 0x64
 8003b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	1891      	adds	r1, r2, r2
 8003ba2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ba4:	415b      	adcs	r3, r3
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003bb0:	f7fc fb2e 	bl	8000210 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4ba5      	ldr	r3, [pc, #660]	; (8003e50 <UART_SetConfig+0x38c>)
 8003bba:	fba3 2302 	umull	r2, r3, r3, r2
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	011e      	lsls	r6, r3, #4
 8003bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc4:	461c      	mov	r4, r3
 8003bc6:	f04f 0500 	mov.w	r5, #0
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	6339      	str	r1, [r7, #48]	; 0x30
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003bda:	1912      	adds	r2, r2, r4
 8003bdc:	eb45 0303 	adc.w	r3, r5, r3
 8003be0:	f04f 0000 	mov.w	r0, #0
 8003be4:	f04f 0100 	mov.w	r1, #0
 8003be8:	00d9      	lsls	r1, r3, #3
 8003bea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bee:	00d0      	lsls	r0, r2, #3
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	1911      	adds	r1, r2, r4
 8003bf6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bf8:	416b      	adcs	r3, r5
 8003bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	461a      	mov	r2, r3
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	1891      	adds	r1, r2, r2
 8003c08:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c0a:	415b      	adcs	r3, r3
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c16:	f7fc fafb 	bl	8000210 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4b8c      	ldr	r3, [pc, #560]	; (8003e50 <UART_SetConfig+0x38c>)
 8003c20:	fba3 1302 	umull	r1, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2164      	movs	r1, #100	; 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a87      	ldr	r2, [pc, #540]	; (8003e50 <UART_SetConfig+0x38c>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c40:	441e      	add	r6, r3
 8003c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c44:	4618      	mov	r0, r3
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	1894      	adds	r4, r2, r2
 8003c50:	623c      	str	r4, [r7, #32]
 8003c52:	415b      	adcs	r3, r3
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c5a:	1812      	adds	r2, r2, r0
 8003c5c:	eb41 0303 	adc.w	r3, r1, r3
 8003c60:	f04f 0400 	mov.w	r4, #0
 8003c64:	f04f 0500 	mov.w	r5, #0
 8003c68:	00dd      	lsls	r5, r3, #3
 8003c6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c6e:	00d4      	lsls	r4, r2, #3
 8003c70:	4622      	mov	r2, r4
 8003c72:	462b      	mov	r3, r5
 8003c74:	1814      	adds	r4, r2, r0
 8003c76:	653c      	str	r4, [r7, #80]	; 0x50
 8003c78:	414b      	adcs	r3, r1
 8003c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	461a      	mov	r2, r3
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	1891      	adds	r1, r2, r2
 8003c88:	61b9      	str	r1, [r7, #24]
 8003c8a:	415b      	adcs	r3, r3
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c96:	f7fc fabb 	bl	8000210 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4b6c      	ldr	r3, [pc, #432]	; (8003e50 <UART_SetConfig+0x38c>)
 8003ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	2164      	movs	r1, #100	; 0x64
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	3332      	adds	r3, #50	; 0x32
 8003cb2:	4a67      	ldr	r2, [pc, #412]	; (8003e50 <UART_SetConfig+0x38c>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	f003 0207 	and.w	r2, r3, #7
 8003cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4432      	add	r2, r6
 8003cc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc6:	e0b9      	b.n	8003e3c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cca:	461c      	mov	r4, r3
 8003ccc:	f04f 0500 	mov.w	r5, #0
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	462b      	mov	r3, r5
 8003cd4:	1891      	adds	r1, r2, r2
 8003cd6:	6139      	str	r1, [r7, #16]
 8003cd8:	415b      	adcs	r3, r3
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ce0:	1912      	adds	r2, r2, r4
 8003ce2:	eb45 0303 	adc.w	r3, r5, r3
 8003ce6:	f04f 0000 	mov.w	r0, #0
 8003cea:	f04f 0100 	mov.w	r1, #0
 8003cee:	00d9      	lsls	r1, r3, #3
 8003cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cf4:	00d0      	lsls	r0, r2, #3
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	eb12 0804 	adds.w	r8, r2, r4
 8003cfe:	eb43 0905 	adc.w	r9, r3, r5
 8003d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	008b      	lsls	r3, r1, #2
 8003d16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d1a:	0082      	lsls	r2, r0, #2
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	4649      	mov	r1, r9
 8003d20:	f7fc fa76 	bl	8000210 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <UART_SetConfig+0x38c>)
 8003d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	011e      	lsls	r6, r3, #4
 8003d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d34:	4618      	mov	r0, r3
 8003d36:	f04f 0100 	mov.w	r1, #0
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	1894      	adds	r4, r2, r2
 8003d40:	60bc      	str	r4, [r7, #8]
 8003d42:	415b      	adcs	r3, r3
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d4a:	1812      	adds	r2, r2, r0
 8003d4c:	eb41 0303 	adc.w	r3, r1, r3
 8003d50:	f04f 0400 	mov.w	r4, #0
 8003d54:	f04f 0500 	mov.w	r5, #0
 8003d58:	00dd      	lsls	r5, r3, #3
 8003d5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d5e:	00d4      	lsls	r4, r2, #3
 8003d60:	4622      	mov	r2, r4
 8003d62:	462b      	mov	r3, r5
 8003d64:	1814      	adds	r4, r2, r0
 8003d66:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d68:	414b      	adcs	r3, r1
 8003d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	008b      	lsls	r3, r1, #2
 8003d80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d84:	0082      	lsls	r2, r0, #2
 8003d86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d8a:	f7fc fa41 	bl	8000210 <__aeabi_uldivmod>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4b2f      	ldr	r3, [pc, #188]	; (8003e50 <UART_SetConfig+0x38c>)
 8003d94:	fba3 1302 	umull	r1, r3, r3, r2
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	2164      	movs	r1, #100	; 0x64
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	3332      	adds	r3, #50	; 0x32
 8003da6:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <UART_SetConfig+0x38c>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db2:	441e      	add	r6, r3
 8003db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db6:	4618      	mov	r0, r3
 8003db8:	f04f 0100 	mov.w	r1, #0
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	1894      	adds	r4, r2, r2
 8003dc2:	603c      	str	r4, [r7, #0]
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dcc:	1812      	adds	r2, r2, r0
 8003dce:	eb41 0303 	adc.w	r3, r1, r3
 8003dd2:	f04f 0400 	mov.w	r4, #0
 8003dd6:	f04f 0500 	mov.w	r5, #0
 8003dda:	00dd      	lsls	r5, r3, #3
 8003ddc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003de0:	00d4      	lsls	r4, r2, #3
 8003de2:	4622      	mov	r2, r4
 8003de4:	462b      	mov	r3, r5
 8003de6:	eb12 0a00 	adds.w	sl, r2, r0
 8003dea:	eb43 0b01 	adc.w	fp, r3, r1
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	008b      	lsls	r3, r1, #2
 8003e02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e06:	0082      	lsls	r2, r0, #2
 8003e08:	4650      	mov	r0, sl
 8003e0a:	4659      	mov	r1, fp
 8003e0c:	f7fc fa00 	bl	8000210 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <UART_SetConfig+0x38c>)
 8003e16:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2164      	movs	r1, #100	; 0x64
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	3332      	adds	r3, #50	; 0x32
 8003e28:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <UART_SetConfig+0x38c>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	f003 020f 	and.w	r2, r3, #15
 8003e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4432      	add	r2, r6
 8003e3a:	609a      	str	r2, [r3, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	377c      	adds	r7, #124	; 0x7c
 8003e40:	46bd      	mov	sp, r7
 8003e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e46:	bf00      	nop
 8003e48:	40011000 	.word	0x40011000
 8003e4c:	40011400 	.word	0x40011400
 8003e50:	51eb851f 	.word	0x51eb851f

08003e54 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f103 0208 	add.w	r2, r3, #8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f103 0208 	add.w	r2, r3, #8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f103 0208 	add.w	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d103      	bne.n	8003f16 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e00c      	b.n	8003f30 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3308      	adds	r3, #8
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	e002      	b.n	8003f24 <vListInsert+0x2e>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d2f6      	bcs.n	8003f1e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6892      	ldr	r2, [r2, #8]
 8003f7e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6852      	ldr	r2, [r2, #4]
 8003f88:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d103      	bne.n	8003f9c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	1e5a      	subs	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <xQueueGenericReset+0x2e>
        __asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	60fb      	str	r3, [r7, #12]
    }
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d05d      	beq.n	80040ac <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d059      	beq.n	80040ac <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	2100      	movs	r1, #0
 8004002:	fba3 2302 	umull	r2, r3, r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d000      	beq.n	800400c <xQueueGenericReset+0x50>
 800400a:	2101      	movs	r1, #1
 800400c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800400e:	2b00      	cmp	r3, #0
 8004010:	d14c      	bne.n	80040ac <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004012:	f002 fad1 	bl	80065b8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	6939      	ldr	r1, [r7, #16]
 8004020:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	441a      	add	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2200      	movs	r2, #0
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	3b01      	subs	r3, #1
 8004044:	6939      	ldr	r1, [r7, #16]
 8004046:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	441a      	add	r2, r3
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	22ff      	movs	r2, #255	; 0xff
 8004056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	22ff      	movs	r2, #255	; 0xff
 800405e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d114      	bne.n	8004092 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01a      	beq.n	80040a6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	3310      	adds	r3, #16
 8004074:	4618      	mov	r0, r3
 8004076:	f001 f97b 	bl	8005370 <xTaskRemoveFromEventList>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d012      	beq.n	80040a6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <xQueueGenericReset+0x11c>)
 8004082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	e009      	b.n	80040a6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3310      	adds	r3, #16
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fedc 	bl	8003e54 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	3324      	adds	r3, #36	; 0x24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fed7 	bl	8003e54 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80040a6:	f002 fab7 	bl	8006618 <vPortExitCritical>
 80040aa:	e001      	b.n	80040b0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <xQueueGenericReset+0x110>
        __asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	60bb      	str	r3, [r7, #8]
    }
 80040c8:	bf00      	nop
 80040ca:	e7fe      	b.n	80040ca <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80040cc:	697b      	ldr	r3, [r7, #20]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02e      	beq.n	8004152 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80040f4:	2100      	movs	r1, #0
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	fba3 2302 	umull	r2, r3, r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d000      	beq.n	8004104 <xQueueGenericCreate+0x28>
 8004102:	2101      	movs	r1, #1
 8004104:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d123      	bne.n	8004152 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004112:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004116:	d81c      	bhi.n	8004152 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	fb02 f303 	mul.w	r3, r2, r3
 8004120:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	3350      	adds	r3, #80	; 0x50
 8004126:	4618      	mov	r0, r3
 8004128:	f002 fb68 	bl	80067fc <pvPortMalloc>
 800412c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01c      	beq.n	800416e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3350      	adds	r3, #80	; 0x50
 800413c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800413e:	79fa      	ldrb	r2, [r7, #7]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f814 	bl	8004178 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004150:	e00d      	b.n	800416e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueGenericCreate+0x92>
        __asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	613b      	str	r3, [r7, #16]
    }
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800416e:	69fb      	ldr	r3, [r7, #28]
    }
 8004170:	4618      	mov	r0, r3
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e002      	b.n	800419a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041a6:	2101      	movs	r1, #1
 80041a8:	69b8      	ldr	r0, [r7, #24]
 80041aa:	f7ff ff07 	bl	8003fbc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08e      	sub	sp, #56	; 0x38
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041ce:	2300      	movs	r3, #0
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xQueueGenericSend+0x32>
        __asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <xQueueGenericSend+0x40>
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <xQueueGenericSend+0x44>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <xQueueGenericSend+0x46>
 8004204:	2300      	movs	r3, #0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <xQueueGenericSend+0x60>
        __asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d103      	bne.n	800422e <xQueueGenericSend+0x6e>
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <xQueueGenericSend+0x72>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <xQueueGenericSend+0x74>
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueGenericSend+0x8e>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	623b      	str	r3, [r7, #32]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800424e:	f001 fa2b 	bl	80056a8 <xTaskGetSchedulerState>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <xQueueGenericSend+0x9e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <xQueueGenericSend+0xa2>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueGenericSend+0xa4>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueGenericSend+0xbe>
        __asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61fb      	str	r3, [r7, #28]
    }
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800427e:	f002 f99b 	bl	80065b8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <xQueueGenericSend+0xd4>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d129      	bne.n	80042e8 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800429a:	f000 fac6 	bl	800482a <prvCopyDataToQueue>
 800429e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d010      	beq.n	80042ca <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	3324      	adds	r3, #36	; 0x24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 f85f 	bl	8005370 <xTaskRemoveFromEventList>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80042b8:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <xQueueGenericSend+0x1f8>)
 80042ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	e00a      	b.n	80042e0 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80042d0:	4b39      	ldr	r3, [pc, #228]	; (80043b8 <xQueueGenericSend+0x1f8>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80042e0:	f002 f99a 	bl	8006618 <vPortExitCritical>
                return pdPASS;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e063      	b.n	80043b0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80042ee:	f002 f993 	bl	8006618 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e05c      	b.n	80043b0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	4618      	mov	r0, r3
 8004302:	f001 f897 	bl	8005434 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004306:	2301      	movs	r3, #1
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800430a:	f002 f985 	bl	8006618 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800430e:	f000 fe11 	bl	8004f34 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004312:	f002 f951 	bl	80065b8 <vPortEnterCritical>
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800431c:	b25b      	sxtb	r3, r3
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d103      	bne.n	800432c <xQueueGenericSend+0x16c>
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004332:	b25b      	sxtb	r3, r3
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d103      	bne.n	8004342 <xQueueGenericSend+0x182>
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004342:	f002 f969 	bl	8006618 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004346:	1d3a      	adds	r2, r7, #4
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f001 f886 	bl	8005460 <xTaskCheckForTimeOut>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d124      	bne.n	80043a4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800435a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800435c:	f000 fb5d 	bl	8004a1a <prvIsQueueFull>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d018      	beq.n	8004398 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	3310      	adds	r3, #16
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f000 ffae 	bl	80052d0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004376:	f000 fae8 	bl	800494a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800437a:	f000 fde9 	bl	8004f50 <xTaskResumeAll>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	f47f af7c 	bne.w	800427e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <xQueueGenericSend+0x1f8>)
 8004388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	e772      	b.n	800427e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439a:	f000 fad6 	bl	800494a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800439e:	f000 fdd7 	bl	8004f50 <xTaskResumeAll>
 80043a2:	e76c      	b.n	800427e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80043a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a6:	f000 fad0 	bl	800494a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80043aa:	f000 fdd1 	bl	8004f50 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80043ae:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3738      	adds	r7, #56	; 0x38
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b090      	sub	sp, #64	; 0x40
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d103      	bne.n	80043f8 <xQueueGenericSendFromISR+0x3c>
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <xQueueGenericSendFromISR+0x40>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <xQueueGenericSendFromISR+0x42>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d103      	bne.n	8004426 <xQueueGenericSendFromISR+0x6a>
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <xQueueGenericSendFromISR+0x6e>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <xQueueGenericSendFromISR+0x70>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	623b      	str	r3, [r7, #32]
    }
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004446:	f002 f999 	bl	800677c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800444a:	f3ef 8211 	mrs	r2, BASEPRI
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	61fa      	str	r2, [r7, #28]
 8004460:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004462:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <xQueueGenericSendFromISR+0xbc>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d13e      	bne.n	80044f6 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800447e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800448e:	f000 f9cc 	bl	800482a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004492:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449a:	d112      	bne.n	80044c2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d025      	beq.n	80044f0 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	3324      	adds	r3, #36	; 0x24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 ff61 	bl	8005370 <xTaskRemoveFromEventList>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01d      	beq.n	80044f0 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01a      	beq.n	80044f0 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e016      	b.n	80044f0 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80044c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80044c6:	2b7f      	cmp	r3, #127	; 0x7f
 80044c8:	d10a      	bne.n	80044e0 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	617b      	str	r3, [r7, #20]
    }
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044e4:	3301      	adds	r3, #1
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	b25a      	sxtb	r2, r3
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80044f0:	2301      	movs	r3, #1
 80044f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80044f4:	e001      	b.n	80044fa <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004504:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004508:	4618      	mov	r0, r3
 800450a:	3740      	adds	r7, #64	; 0x40
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <xQueueReceive+0x30>
        __asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	623b      	str	r3, [r7, #32]
    }
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <xQueueReceive+0x3e>
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <xQueueReceive+0x42>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <xQueueReceive+0x44>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <xQueueReceive+0x5e>
        __asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	61fb      	str	r3, [r7, #28]
    }
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800456e:	f001 f89b 	bl	80056a8 <xTaskGetSchedulerState>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <xQueueReceive+0x6e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <xQueueReceive+0x72>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <xQueueReceive+0x74>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <xQueueReceive+0x8e>
        __asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	61bb      	str	r3, [r7, #24]
    }
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800459e:	f002 f80b 	bl	80065b8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01f      	beq.n	80045ee <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b2:	f000 f9a4 	bl	80048fe <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1e5a      	subs	r2, r3, #1
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00f      	beq.n	80045e6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	3310      	adds	r3, #16
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fed0 	bl	8005370 <xTaskRemoveFromEventList>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80045d6:	4b3d      	ldr	r3, [pc, #244]	; (80046cc <xQueueReceive+0x1bc>)
 80045d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80045e6:	f002 f817 	bl	8006618 <vPortExitCritical>
                return pdPASS;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e069      	b.n	80046c2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80045f4:	f002 f810 	bl	8006618 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e062      	b.n	80046c2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004602:	f107 0310 	add.w	r3, r7, #16
 8004606:	4618      	mov	r0, r3
 8004608:	f000 ff14 	bl	8005434 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004610:	f002 f802 	bl	8006618 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004614:	f000 fc8e 	bl	8004f34 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004618:	f001 ffce 	bl	80065b8 <vPortEnterCritical>
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004622:	b25b      	sxtb	r3, r3
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d103      	bne.n	8004632 <xQueueReceive+0x122>
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004638:	b25b      	sxtb	r3, r3
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d103      	bne.n	8004648 <xQueueReceive+0x138>
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004648:	f001 ffe6 	bl	8006618 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800464c:	1d3a      	adds	r2, r7, #4
 800464e:	f107 0310 	add.w	r3, r7, #16
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f000 ff03 	bl	8005460 <xTaskCheckForTimeOut>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d123      	bne.n	80046a8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004662:	f000 f9c4 	bl	80049ee <prvIsQueueEmpty>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d017      	beq.n	800469c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	3324      	adds	r3, #36	; 0x24
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4611      	mov	r1, r2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fe2b 	bl	80052d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800467a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800467c:	f000 f965 	bl	800494a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004680:	f000 fc66 	bl	8004f50 <xTaskResumeAll>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d189      	bne.n	800459e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <xQueueReceive+0x1bc>)
 800468c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	e780      	b.n	800459e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800469c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800469e:	f000 f954 	bl	800494a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80046a2:	f000 fc55 	bl	8004f50 <xTaskResumeAll>
 80046a6:	e77a      	b.n	800459e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80046a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046aa:	f000 f94e 	bl	800494a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80046ae:	f000 fc4f 	bl	8004f50 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b4:	f000 f99b 	bl	80049ee <prvIsQueueEmpty>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f43f af6f 	beq.w	800459e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80046c0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3730      	adds	r7, #48	; 0x30
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b090      	sub	sp, #64	; 0x40
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80046e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <xQueueReceiveFromISR+0x3a>
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <xQueueReceiveFromISR+0x3e>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <xQueueReceiveFromISR+0x40>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800472a:	f002 f827 	bl	800677c <vPortValidateInterruptPriority>
        __asm volatile
 800472e:	f3ef 8211 	mrs	r2, BASEPRI
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	623a      	str	r2, [r7, #32]
 8004744:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004746:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004748:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2b00      	cmp	r3, #0
 8004754:	d03e      	beq.n	80047d4 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800475c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004764:	f000 f8cb 	bl	80048fe <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004770:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d112      	bne.n	80047a0 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d025      	beq.n	80047ce <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004784:	3310      	adds	r3, #16
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fdf2 	bl	8005370 <xTaskRemoveFromEventList>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01d      	beq.n	80047ce <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01a      	beq.n	80047ce <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e016      	b.n	80047ce <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80047a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047a4:	2b7f      	cmp	r3, #127	; 0x7f
 80047a6:	d10a      	bne.n	80047be <xQueueReceiveFromISR+0xee>
        __asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	61bb      	str	r3, [r7, #24]
    }
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80047be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047c2:	3301      	adds	r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	b25a      	sxtb	r2, r3
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80047ce:	2301      	movs	r3, #1
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d2:	e001      	b.n	80047d8 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	617b      	str	r3, [r7, #20]
        __asm volatile
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f383 8811 	msr	BASEPRI, r3
    }
 80047e2:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3740      	adds	r7, #64	; 0x40
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	60bb      	str	r3, [r7, #8]
    }
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004812:	f001 fed1 	bl	80065b8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800481c:	f001 fefc 	bl	8006618 <vPortExitCritical>

    return uxReturn;
 8004820:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b086      	sub	sp, #24
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10d      	bne.n	8004864 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d14d      	bne.n	80048ec <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 ff45 	bl	80056e4 <xTaskPriorityDisinherit>
 800485a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
 8004862:	e043      	b.n	80048ec <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d119      	bne.n	800489e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6858      	ldr	r0, [r3, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	461a      	mov	r2, r3
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	f002 f9e3 	bl	8006c40 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	441a      	add	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	d32b      	bcc.n	80048ec <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	e026      	b.n	80048ec <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	68d8      	ldr	r0, [r3, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	461a      	mov	r2, r3
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	f002 f9c9 	bl	8006c40 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	425b      	negs	r3, r3
 80048b8:	441a      	add	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d207      	bcs.n	80048da <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	425b      	negs	r3, r3
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d105      	bne.n	80048ec <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80048f4:	697b      	ldr	r3, [r7, #20]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d018      	beq.n	8004942 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	429a      	cmp	r2, r3
 8004928:	d303      	bcc.n	8004932 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68d9      	ldr	r1, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	461a      	mov	r2, r3
 800493c:	6838      	ldr	r0, [r7, #0]
 800493e:	f002 f97f 	bl	8006c40 <memcpy>
    }
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004952:	f001 fe31 	bl	80065b8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800495c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800495e:	e011      	b.n	8004984 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2b00      	cmp	r3, #0
 8004966:	d012      	beq.n	800498e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3324      	adds	r3, #36	; 0x24
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fcff 	bl	8005370 <xTaskRemoveFromEventList>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004978:	f000 fdd8 	bl	800552c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	3b01      	subs	r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004988:	2b00      	cmp	r3, #0
 800498a:	dce9      	bgt.n	8004960 <prvUnlockQueue+0x16>
 800498c:	e000      	b.n	8004990 <prvUnlockQueue+0x46>
                        break;
 800498e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	22ff      	movs	r2, #255	; 0xff
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004998:	f001 fe3e 	bl	8006618 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800499c:	f001 fe0c 	bl	80065b8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049a6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80049a8:	e011      	b.n	80049ce <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d012      	beq.n	80049d8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3310      	adds	r3, #16
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fcda 	bl	8005370 <xTaskRemoveFromEventList>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80049c2:	f000 fdb3 	bl	800552c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80049c6:	7bbb      	ldrb	r3, [r7, #14]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dce9      	bgt.n	80049aa <prvUnlockQueue+0x60>
 80049d6:	e000      	b.n	80049da <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80049d8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80049e2:	f001 fe19 	bl	8006618 <vPortExitCritical>
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80049f6:	f001 fddf 	bl	80065b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e001      	b.n	8004a0c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004a0c:	f001 fe04 	bl	8006618 <vPortExitCritical>

    return xReturn;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004a22:	f001 fdc9 	bl	80065b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d102      	bne.n	8004a38 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004a32:	2301      	movs	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e001      	b.n	8004a3c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004a3c:	f001 fdec 	bl	8006618 <vPortExitCritical>

    return xReturn;
 8004a40:	68fb      	ldr	r3, [r7, #12]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b087      	sub	sp, #28
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	60fb      	str	r3, [r7, #12]
    }
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d102      	bne.n	8004a84 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e001      	b.n	8004a88 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004a88:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <vQueueAddToRegistry+0x26>
        __asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	60fb      	str	r3, [r7, #12]
    }
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d024      	beq.n	8004b12 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e01e      	b.n	8004b0c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004ace:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <vQueueAddToRegistry+0x98>)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d105      	bne.n	8004aea <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <vQueueAddToRegistry+0x98>)
 8004ae4:	4413      	add	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
                    break;
 8004ae8:	e013      	b.n	8004b12 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <vQueueAddToRegistry+0x6e>
 8004af0:	4a0f      	ldr	r2, [pc, #60]	; (8004b30 <vQueueAddToRegistry+0x98>)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <vQueueAddToRegistry+0x98>)
 8004b02:	4413      	add	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b07      	cmp	r3, #7
 8004b10:	d9dd      	bls.n	8004ace <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004b24:	bf00      	nop
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	20012e84 	.word	0x20012e84

08004b34 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004b44:	f001 fd38 	bl	80065b8 <vPortEnterCritical>
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d103      	bne.n	8004b5e <vQueueWaitForMessageRestricted+0x2a>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b64:	b25b      	sxtb	r3, r3
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d103      	bne.n	8004b74 <vQueueWaitForMessageRestricted+0x40>
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b74:	f001 fd50 	bl	8006618 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d106      	bne.n	8004b8e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3324      	adds	r3, #36	; 0x24
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fbc5 	bl	8005318 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004b8e:	6978      	ldr	r0, [r7, #20]
 8004b90:	f7ff fedb 	bl	800494a <prvUnlockQueue>
    }
 8004b94:	bf00      	nop
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	; 0x30
 8004ba0:	af04      	add	r7, sp, #16
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 fe23 	bl	80067fc <pvPortMalloc>
 8004bb6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00e      	beq.n	8004bdc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bbe:	2058      	movs	r0, #88	; 0x58
 8004bc0:	f001 fe1c 	bl	80067fc <pvPortMalloc>
 8004bc4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8004bd2:	e005      	b.n	8004be0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004bd4:	6978      	ldr	r0, [r7, #20]
 8004bd6:	f001 fef1 	bl	80069bc <vPortFree>
 8004bda:	e001      	b.n	8004be0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d013      	beq.n	8004c0e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	2300      	movs	r3, #0
 8004bea:	9303      	str	r3, [sp, #12]
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	9302      	str	r3, [sp, #8]
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	9301      	str	r3, [sp, #4]
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f80e 	bl	8004c1e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004c02:	69f8      	ldr	r0, [r7, #28]
 8004c04:	f000 f8a2 	bl	8004d4c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	61bb      	str	r3, [r7, #24]
 8004c0c:	e002      	b.n	8004c14 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c12:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004c14:	69bb      	ldr	r3, [r7, #24]
    }
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b088      	sub	sp, #32
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	461a      	mov	r2, r3
 8004c36:	21a5      	movs	r1, #165	; 0xa5
 8004c38:	f002 f810 	bl	8006c5c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c46:	3b01      	subs	r3, #1
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f023 0307 	bic.w	r3, r3, #7
 8004c54:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	617b      	str	r3, [r7, #20]
    }
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01f      	beq.n	8004cbc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	e012      	b.n	8004ca8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	7819      	ldrb	r1, [r3, #0]
 8004c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	3334      	adds	r3, #52	; 0x34
 8004c92:	460a      	mov	r2, r1
 8004c94:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	d9e9      	bls.n	8004c82 <prvInitialiseNewTask+0x64>
 8004cae:	e000      	b.n	8004cb2 <prvInitialiseNewTask+0x94>
            {
                break;
 8004cb0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cba:	e003      	b.n	8004cc4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d901      	bls.n	8004cce <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cca:	2304      	movs	r3, #4
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	2200      	movs	r2, #0
 8004cde:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff f8d5 	bl	8003e94 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	3318      	adds	r3, #24
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff f8d0 	bl	8003e94 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	f1c3 0205 	rsb	r2, r3, #5
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	3350      	adds	r3, #80	; 0x50
 8004d0e:	2204      	movs	r2, #4
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 ffa2 	bl	8006c5c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	3354      	adds	r3, #84	; 0x54
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 ff9b 	bl	8006c5c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	68f9      	ldr	r1, [r7, #12]
 8004d2a:	69b8      	ldr	r0, [r7, #24]
 8004d2c:	f001 fb18 	bl	8006360 <pxPortInitialiseStack>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d42:	bf00      	nop
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004d54:	f001 fc30 	bl	80065b8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004d58:	4b2c      	ldr	r3, [pc, #176]	; (8004e0c <prvAddNewTaskToReadyList+0xc0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	4a2b      	ldr	r2, [pc, #172]	; (8004e0c <prvAddNewTaskToReadyList+0xc0>)
 8004d60:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004d62:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <prvAddNewTaskToReadyList+0xc4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004d6a:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <prvAddNewTaskToReadyList+0xc4>)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d70:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <prvAddNewTaskToReadyList+0xc0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d110      	bne.n	8004d9a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004d78:	f000 fbfc 	bl	8005574 <prvInitialiseTaskLists>
 8004d7c:	e00d      	b.n	8004d9a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004d7e:	4b25      	ldr	r3, [pc, #148]	; (8004e14 <prvAddNewTaskToReadyList+0xc8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <prvAddNewTaskToReadyList+0xc4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d802      	bhi.n	8004d9a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004d94:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <prvAddNewTaskToReadyList+0xc4>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <prvAddNewTaskToReadyList+0xcc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <prvAddNewTaskToReadyList+0xcc>)
 8004da2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004da4:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <prvAddNewTaskToReadyList+0xcc>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	2201      	movs	r2, #1
 8004db2:	409a      	lsls	r2, r3
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <prvAddNewTaskToReadyList+0xd0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	4a18      	ldr	r2, [pc, #96]	; (8004e1c <prvAddNewTaskToReadyList+0xd0>)
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <prvAddNewTaskToReadyList+0xd4>)
 8004dcc:	441a      	add	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f7ff f86a 	bl	8003eae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004dda:	f001 fc1d 	bl	8006618 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <prvAddNewTaskToReadyList+0xc8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00e      	beq.n	8004e04 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004de6:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <prvAddNewTaskToReadyList+0xc4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d207      	bcs.n	8004e04 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <prvAddNewTaskToReadyList+0xd8>)
 8004df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20000110 	.word	0x20000110
 8004e10:	20000038 	.word	0x20000038
 8004e14:	2000011c 	.word	0x2000011c
 8004e18:	2000012c 	.word	0x2000012c
 8004e1c:	20000118 	.word	0x20000118
 8004e20:	2000003c 	.word	0x2000003c
 8004e24:	e000ed04 	.word	0xe000ed04

08004e28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d017      	beq.n	8004e6a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004e3a:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <vTaskDelay+0x60>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <vTaskDelay+0x30>
        __asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	60bb      	str	r3, [r7, #8]
    }
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004e58:	f000 f86c 	bl	8004f34 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 ff1c 	bl	8005c9c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004e64:	f000 f874 	bl	8004f50 <xTaskResumeAll>
 8004e68:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d107      	bne.n	8004e80 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <vTaskDelay+0x64>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000138 	.word	0x20000138
 8004e8c:	e000ed04 	.word	0xe000ed04

08004e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <vTaskStartScheduler+0x88>)
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2282      	movs	r2, #130	; 0x82
 8004ea2:	491e      	ldr	r1, [pc, #120]	; (8004f1c <vTaskStartScheduler+0x8c>)
 8004ea4:	481e      	ldr	r0, [pc, #120]	; (8004f20 <vTaskStartScheduler+0x90>)
 8004ea6:	f7ff fe79 	bl	8004b9c <xTaskCreate>
 8004eaa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d102      	bne.n	8004eb8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004eb2:	f000 ff59 	bl	8005d68 <xTimerCreateTimerTask>
 8004eb6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d116      	bne.n	8004eec <vTaskStartScheduler+0x5c>
        __asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	60bb      	str	r3, [r7, #8]
    }
 8004ed0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <vTaskStartScheduler+0x94>)
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004eda:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <vTaskStartScheduler+0x98>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ee0:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <vTaskStartScheduler+0x9c>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004ee6:	f001 fac5 	bl	8006474 <xPortStartScheduler>
 8004eea:	e00e      	b.n	8004f0a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d10a      	bne.n	8004f0a <vTaskStartScheduler+0x7a>
        __asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	607b      	str	r3, [r7, #4]
    }
 8004f06:	bf00      	nop
 8004f08:	e7fe      	b.n	8004f08 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004f0a:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <vTaskStartScheduler+0xa0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000134 	.word	0x20000134
 8004f1c:	08006e18 	.word	0x08006e18
 8004f20:	08005545 	.word	0x08005545
 8004f24:	20000130 	.word	0x20000130
 8004f28:	2000011c 	.word	0x2000011c
 8004f2c:	20000114 	.word	0x20000114
 8004f30:	20000010 	.word	0x20000010

08004f34 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <vTaskSuspendAll+0x18>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	4a03      	ldr	r2, [pc, #12]	; (8004f4c <vTaskSuspendAll+0x18>)
 8004f40:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	20000138 	.word	0x20000138

08004f50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004f5e:	4b41      	ldr	r3, [pc, #260]	; (8005064 <xTaskResumeAll+0x114>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <xTaskResumeAll+0x2c>
        __asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	603b      	str	r3, [r7, #0]
    }
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004f7c:	f001 fb1c 	bl	80065b8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004f80:	4b38      	ldr	r3, [pc, #224]	; (8005064 <xTaskResumeAll+0x114>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	4a37      	ldr	r2, [pc, #220]	; (8005064 <xTaskResumeAll+0x114>)
 8004f88:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8a:	4b36      	ldr	r3, [pc, #216]	; (8005064 <xTaskResumeAll+0x114>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d161      	bne.n	8005056 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f92:	4b35      	ldr	r3, [pc, #212]	; (8005068 <xTaskResumeAll+0x118>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d05d      	beq.n	8005056 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f9a:	e02e      	b.n	8004ffa <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9c:	4b33      	ldr	r3, [pc, #204]	; (800506c <xTaskResumeAll+0x11c>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fe ffdd 	bl	8003f68 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe ffd8 	bl	8003f68 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <xTaskResumeAll+0x120>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <xTaskResumeAll+0x120>)
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4a27      	ldr	r2, [pc, #156]	; (8005074 <xTaskResumeAll+0x124>)
 8004fd8:	441a      	add	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7fe ff64 	bl	8003eae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	4b23      	ldr	r3, [pc, #140]	; (8005078 <xTaskResumeAll+0x128>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d302      	bcc.n	8004ffa <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <xTaskResumeAll+0x12c>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ffa:	4b1c      	ldr	r3, [pc, #112]	; (800506c <xTaskResumeAll+0x11c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1cc      	bne.n	8004f9c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005008:	f000 fb32 	bl	8005670 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800500c:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <xTaskResumeAll+0x130>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d010      	beq.n	800503a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005018:	f000 f846 	bl	80050a8 <xTaskIncrementTick>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005022:	4b16      	ldr	r3, [pc, #88]	; (800507c <xTaskResumeAll+0x12c>)
 8005024:	2201      	movs	r2, #1
 8005026:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3b01      	subs	r3, #1
 800502c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f1      	bne.n	8005018 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005034:	4b12      	ldr	r3, [pc, #72]	; (8005080 <xTaskResumeAll+0x130>)
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <xTaskResumeAll+0x12c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005042:	2301      	movs	r3, #1
 8005044:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005046:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <xTaskResumeAll+0x134>)
 8005048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005056:	f001 fadf 	bl	8006618 <vPortExitCritical>

    return xAlreadyYielded;
 800505a:	68bb      	ldr	r3, [r7, #8]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000138 	.word	0x20000138
 8005068:	20000110 	.word	0x20000110
 800506c:	200000d0 	.word	0x200000d0
 8005070:	20000118 	.word	0x20000118
 8005074:	2000003c 	.word	0x2000003c
 8005078:	20000038 	.word	0x20000038
 800507c:	20000124 	.word	0x20000124
 8005080:	20000120 	.word	0x20000120
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <xTaskGetTickCount+0x1c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005094:	687b      	ldr	r3, [r7, #4]
}
 8005096:	4618      	mov	r0, r3
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000114 	.word	0x20000114

080050a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050b2:	4b4e      	ldr	r3, [pc, #312]	; (80051ec <xTaskIncrementTick+0x144>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f040 808e 	bne.w	80051d8 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050bc:	4b4c      	ldr	r3, [pc, #304]	; (80051f0 <xTaskIncrementTick+0x148>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80050c4:	4a4a      	ldr	r2, [pc, #296]	; (80051f0 <xTaskIncrementTick+0x148>)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d120      	bne.n	8005112 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80050d0:	4b48      	ldr	r3, [pc, #288]	; (80051f4 <xTaskIncrementTick+0x14c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <xTaskIncrementTick+0x48>
        __asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	603b      	str	r3, [r7, #0]
    }
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <xTaskIncrementTick+0x46>
 80050f0:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <xTaskIncrementTick+0x14c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	4b40      	ldr	r3, [pc, #256]	; (80051f8 <xTaskIncrementTick+0x150>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a3e      	ldr	r2, [pc, #248]	; (80051f4 <xTaskIncrementTick+0x14c>)
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4a3e      	ldr	r2, [pc, #248]	; (80051f8 <xTaskIncrementTick+0x150>)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	4b3d      	ldr	r3, [pc, #244]	; (80051fc <xTaskIncrementTick+0x154>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3301      	adds	r3, #1
 800510a:	4a3c      	ldr	r2, [pc, #240]	; (80051fc <xTaskIncrementTick+0x154>)
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	f000 faaf 	bl	8005670 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005112:	4b3b      	ldr	r3, [pc, #236]	; (8005200 <xTaskIncrementTick+0x158>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	429a      	cmp	r2, r3
 800511a:	d348      	bcc.n	80051ae <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800511c:	4b35      	ldr	r3, [pc, #212]	; (80051f4 <xTaskIncrementTick+0x14c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d104      	bne.n	8005130 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005126:	4b36      	ldr	r3, [pc, #216]	; (8005200 <xTaskIncrementTick+0x158>)
 8005128:	f04f 32ff 	mov.w	r2, #4294967295
 800512c:	601a      	str	r2, [r3, #0]
                    break;
 800512e:	e03e      	b.n	80051ae <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005130:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <xTaskIncrementTick+0x14c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d203      	bcs.n	8005150 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005148:	4a2d      	ldr	r2, [pc, #180]	; (8005200 <xTaskIncrementTick+0x158>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800514e:	e02e      	b.n	80051ae <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	3304      	adds	r3, #4
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe ff07 	bl	8003f68 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3318      	adds	r3, #24
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fefe 	bl	8003f68 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	2201      	movs	r2, #1
 8005172:	409a      	lsls	r2, r3
 8005174:	4b23      	ldr	r3, [pc, #140]	; (8005204 <xTaskIncrementTick+0x15c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4313      	orrs	r3, r2
 800517a:	4a22      	ldr	r2, [pc, #136]	; (8005204 <xTaskIncrementTick+0x15c>)
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <xTaskIncrementTick+0x160>)
 800518c:	441a      	add	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3304      	adds	r3, #4
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f7fe fe8a 	bl	8003eae <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	4b1b      	ldr	r3, [pc, #108]	; (800520c <xTaskIncrementTick+0x164>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3b9      	bcc.n	800511c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80051a8:	2301      	movs	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ac:	e7b6      	b.n	800511c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <xTaskIncrementTick+0x164>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b4:	4914      	ldr	r1, [pc, #80]	; (8005208 <xTaskIncrementTick+0x160>)
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d901      	bls.n	80051ca <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80051ca:	4b11      	ldr	r3, [pc, #68]	; (8005210 <xTaskIncrementTick+0x168>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80051d2:	2301      	movs	r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e004      	b.n	80051e2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <xTaskIncrementTick+0x16c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <xTaskIncrementTick+0x16c>)
 80051e0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80051e2:	697b      	ldr	r3, [r7, #20]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000138 	.word	0x20000138
 80051f0:	20000114 	.word	0x20000114
 80051f4:	200000c8 	.word	0x200000c8
 80051f8:	200000cc 	.word	0x200000cc
 80051fc:	20000128 	.word	0x20000128
 8005200:	20000130 	.word	0x20000130
 8005204:	20000118 	.word	0x20000118
 8005208:	2000003c 	.word	0x2000003c
 800520c:	20000038 	.word	0x20000038
 8005210:	20000124 	.word	0x20000124
 8005214:	20000120 	.word	0x20000120

08005218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800521e:	4b27      	ldr	r3, [pc, #156]	; (80052bc <vTaskSwitchContext+0xa4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005226:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <vTaskSwitchContext+0xa8>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800522c:	e03f      	b.n	80052ae <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800522e:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <vTaskSwitchContext+0xa8>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005234:	4b23      	ldr	r3, [pc, #140]	; (80052c4 <vTaskSwitchContext+0xac>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	f1c3 031f 	rsb	r3, r3, #31
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	491f      	ldr	r1, [pc, #124]	; (80052c8 <vTaskSwitchContext+0xb0>)
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <vTaskSwitchContext+0x5c>
        __asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	607b      	str	r3, [r7, #4]
    }
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <vTaskSwitchContext+0x5a>
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <vTaskSwitchContext+0xb0>)
 8005280:	4413      	add	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3308      	adds	r3, #8
 8005296:	429a      	cmp	r2, r3
 8005298:	d104      	bne.n	80052a4 <vTaskSwitchContext+0x8c>
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	605a      	str	r2, [r3, #4]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	4a08      	ldr	r2, [pc, #32]	; (80052cc <vTaskSwitchContext+0xb4>)
 80052ac:	6013      	str	r3, [r2, #0]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000138 	.word	0x20000138
 80052c0:	20000124 	.word	0x20000124
 80052c4:	20000118 	.word	0x20000118
 80052c8:	2000003c 	.word	0x2000003c
 80052cc:	20000038 	.word	0x20000038

080052d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
    }
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <vTaskPlaceOnEventList+0x44>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3318      	adds	r3, #24
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fe fdf9 	bl	8003ef6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005304:	2101      	movs	r1, #1
 8005306:	6838      	ldr	r0, [r7, #0]
 8005308:	f000 fcc8 	bl	8005c9c <prvAddCurrentTaskToDelayedList>
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000038 	.word	0x20000038

08005318 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	617b      	str	r3, [r7, #20]
    }
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <vTaskPlaceOnEventListRestricted+0x54>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3318      	adds	r3, #24
 8005346:	4619      	mov	r1, r3
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7fe fdb0 	bl	8003eae <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	68b8      	ldr	r0, [r7, #8]
 800535e:	f000 fc9d 	bl	8005c9c <prvAddCurrentTaskToDelayedList>
    }
 8005362:	bf00      	nop
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000038 	.word	0x20000038

08005370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60fb      	str	r3, [r7, #12]
    }
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	3318      	adds	r3, #24
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe fde1 	bl	8003f68 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <xTaskRemoveFromEventList+0xac>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11c      	bne.n	80053e8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe fdd8 	bl	8003f68 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	2201      	movs	r2, #1
 80053be:	409a      	lsls	r2, r3
 80053c0:	4b17      	ldr	r3, [pc, #92]	; (8005420 <xTaskRemoveFromEventList+0xb0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	4a16      	ldr	r2, [pc, #88]	; (8005420 <xTaskRemoveFromEventList+0xb0>)
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4a13      	ldr	r2, [pc, #76]	; (8005424 <xTaskRemoveFromEventList+0xb4>)
 80053d8:	441a      	add	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	3304      	adds	r3, #4
 80053de:	4619      	mov	r1, r3
 80053e0:	4610      	mov	r0, r2
 80053e2:	f7fe fd64 	bl	8003eae <vListInsertEnd>
 80053e6:	e005      	b.n	80053f4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	3318      	adds	r3, #24
 80053ec:	4619      	mov	r1, r3
 80053ee:	480e      	ldr	r0, [pc, #56]	; (8005428 <xTaskRemoveFromEventList+0xb8>)
 80053f0:	f7fe fd5d 	bl	8003eae <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <xTaskRemoveFromEventList+0xbc>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	429a      	cmp	r2, r3
 8005400:	d905      	bls.n	800540e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005402:	2301      	movs	r3, #1
 8005404:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <xTaskRemoveFromEventList+0xc0>)
 8005408:	2201      	movs	r2, #1
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e001      	b.n	8005412 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005412:	697b      	ldr	r3, [r7, #20]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000138 	.word	0x20000138
 8005420:	20000118 	.word	0x20000118
 8005424:	2000003c 	.word	0x2000003c
 8005428:	200000d0 	.word	0x200000d0
 800542c:	20000038 	.word	0x20000038
 8005430:	20000124 	.word	0x20000124

08005434 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <vTaskInternalSetTimeOutState+0x24>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <vTaskInternalSetTimeOutState+0x28>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	605a      	str	r2, [r3, #4]
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	20000128 	.word	0x20000128
 800545c:	20000114 	.word	0x20000114

08005460 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	613b      	str	r3, [r7, #16]
    }
 8005482:	bf00      	nop
 8005484:	e7fe      	b.n	8005484 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60fb      	str	r3, [r7, #12]
    }
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80054a2:	f001 f889 	bl	80065b8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80054a6:	4b1f      	ldr	r3, [pc, #124]	; (8005524 <xTaskCheckForTimeOut+0xc4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d102      	bne.n	80054c6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	e026      	b.n	8005514 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b17      	ldr	r3, [pc, #92]	; (8005528 <xTaskCheckForTimeOut+0xc8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d00a      	beq.n	80054e8 <xTaskCheckForTimeOut+0x88>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d305      	bcc.n	80054e8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80054dc:	2301      	movs	r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e015      	b.n	8005514 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d20b      	bcs.n	800550a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	1ad2      	subs	r2, r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ff98 	bl	8005434 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e004      	b.n	8005514 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005514:	f001 f880 	bl	8006618 <vPortExitCritical>

    return xReturn;
 8005518:	69fb      	ldr	r3, [r7, #28]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000114 	.word	0x20000114
 8005528:	20000128 	.word	0x20000128

0800552c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <vTaskMissedYield+0x14>)
 8005532:	2201      	movs	r2, #1
 8005534:	601a      	str	r2, [r3, #0]
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20000124 	.word	0x20000124

08005544 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800554c:	f000 f852 	bl	80055f4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <prvIdleTask+0x28>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d9f9      	bls.n	800554c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <prvIdleTask+0x2c>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005568:	e7f0      	b.n	800554c <prvIdleTask+0x8>
 800556a:	bf00      	nop
 800556c:	2000003c 	.word	0x2000003c
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	e00c      	b.n	800559a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <prvInitialiseTaskLists+0x60>)
 800558c:	4413      	add	r3, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe fc60 	bl	8003e54 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3301      	adds	r3, #1
 8005598:	607b      	str	r3, [r7, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b04      	cmp	r3, #4
 800559e:	d9ef      	bls.n	8005580 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80055a0:	480d      	ldr	r0, [pc, #52]	; (80055d8 <prvInitialiseTaskLists+0x64>)
 80055a2:	f7fe fc57 	bl	8003e54 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80055a6:	480d      	ldr	r0, [pc, #52]	; (80055dc <prvInitialiseTaskLists+0x68>)
 80055a8:	f7fe fc54 	bl	8003e54 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80055ac:	480c      	ldr	r0, [pc, #48]	; (80055e0 <prvInitialiseTaskLists+0x6c>)
 80055ae:	f7fe fc51 	bl	8003e54 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80055b2:	480c      	ldr	r0, [pc, #48]	; (80055e4 <prvInitialiseTaskLists+0x70>)
 80055b4:	f7fe fc4e 	bl	8003e54 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80055b8:	480b      	ldr	r0, [pc, #44]	; (80055e8 <prvInitialiseTaskLists+0x74>)
 80055ba:	f7fe fc4b 	bl	8003e54 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80055be:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <prvInitialiseTaskLists+0x78>)
 80055c0:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <prvInitialiseTaskLists+0x64>)
 80055c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <prvInitialiseTaskLists+0x7c>)
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <prvInitialiseTaskLists+0x68>)
 80055c8:	601a      	str	r2, [r3, #0]
}
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	2000003c 	.word	0x2000003c
 80055d8:	200000a0 	.word	0x200000a0
 80055dc:	200000b4 	.word	0x200000b4
 80055e0:	200000d0 	.word	0x200000d0
 80055e4:	200000e4 	.word	0x200000e4
 80055e8:	200000fc 	.word	0x200000fc
 80055ec:	200000c8 	.word	0x200000c8
 80055f0:	200000cc 	.word	0x200000cc

080055f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055fa:	e019      	b.n	8005630 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80055fc:	f000 ffdc 	bl	80065b8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005600:	4b10      	ldr	r3, [pc, #64]	; (8005644 <prvCheckTasksWaitingTermination+0x50>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe fcab 	bl	8003f68 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <prvCheckTasksWaitingTermination+0x54>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	4a0b      	ldr	r2, [pc, #44]	; (8005648 <prvCheckTasksWaitingTermination+0x54>)
 800561a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <prvCheckTasksWaitingTermination+0x58>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3b01      	subs	r3, #1
 8005622:	4a0a      	ldr	r2, [pc, #40]	; (800564c <prvCheckTasksWaitingTermination+0x58>)
 8005624:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005626:	f000 fff7 	bl	8006618 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f810 	bl	8005650 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <prvCheckTasksWaitingTermination+0x58>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e1      	bne.n	80055fc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	200000e4 	.word	0x200000e4
 8005648:	20000110 	.word	0x20000110
 800564c:	200000f8 	.word	0x200000f8

08005650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	4618      	mov	r0, r3
 800565e:	f001 f9ad 	bl	80069bc <vPortFree>
                vPortFree( pxTCB );
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 f9aa 	bl	80069bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <prvResetNextTaskUnblockTime+0x30>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800567e:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <prvResetNextTaskUnblockTime+0x34>)
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005686:	e005      	b.n	8005694 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <prvResetNextTaskUnblockTime+0x30>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <prvResetNextTaskUnblockTime+0x34>)
 8005692:	6013      	str	r3, [r2, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	200000c8 	.word	0x200000c8
 80056a4:	20000130 	.word	0x20000130

080056a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <xTaskGetSchedulerState+0x34>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80056b6:	2301      	movs	r3, #1
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	e008      	b.n	80056ce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056bc:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <xTaskGetSchedulerState+0x38>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80056c4:	2302      	movs	r3, #2
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	e001      	b.n	80056ce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80056ca:	2300      	movs	r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80056ce:	687b      	ldr	r3, [r7, #4]
    }
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	2000011c 	.word	0x2000011c
 80056e0:	20000138 	.word	0x20000138

080056e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d063      	beq.n	80057c2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80056fa:	4b34      	ldr	r3, [pc, #208]	; (80057cc <xTaskPriorityDisinherit+0xe8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	429a      	cmp	r2, r3
 8005702:	d00a      	beq.n	800571a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	60fb      	str	r3, [r7, #12]
    }
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	60bb      	str	r3, [r7, #8]
    }
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	1e5a      	subs	r2, r3, #1
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574a:	429a      	cmp	r2, r3
 800574c:	d039      	beq.n	80057c2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d135      	bne.n	80057c2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	3304      	adds	r3, #4
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe fc04 	bl	8003f68 <uxListRemove>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	2201      	movs	r2, #1
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43da      	mvns	r2, r3
 8005772:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <xTaskPriorityDisinherit+0xec>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4013      	ands	r3, r2
 8005778:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <xTaskPriorityDisinherit+0xec>)
 800577a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	f1c3 0205 	rsb	r2, r3, #5
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	2201      	movs	r2, #1
 8005796:	409a      	lsls	r2, r3
 8005798:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <xTaskPriorityDisinherit+0xec>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4313      	orrs	r3, r2
 800579e:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <xTaskPriorityDisinherit+0xec>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <xTaskPriorityDisinherit+0xf0>)
 80057b0:	441a      	add	r2, r3
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f7fe fb78 	bl	8003eae <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80057be:	2301      	movs	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80057c2:	697b      	ldr	r3, [r7, #20]
    }
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20000038 	.word	0x20000038
 80057d0:	20000118 	.word	0x20000118
 80057d4:	2000003c 	.word	0x2000003c

080057d8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	613b      	str	r3, [r7, #16]
    }
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005802:	f000 fed9 	bl	80065b8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005806:	4b32      	ldr	r3, [pc, #200]	; (80058d0 <xTaskGenericNotifyWait+0xf8>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	3354      	adds	r3, #84	; 0x54
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d022      	beq.n	800585e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005818:	4b2d      	ldr	r3, [pc, #180]	; (80058d0 <xTaskGenericNotifyWait+0xf8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	3214      	adds	r2, #20
 8005820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	43d2      	mvns	r2, r2
 8005828:	4011      	ands	r1, r2
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	3214      	adds	r2, #20
 800582e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005832:	4b27      	ldr	r3, [pc, #156]	; (80058d0 <xTaskGenericNotifyWait+0xf8>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	3354      	adds	r3, #84	; 0x54
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005846:	2101      	movs	r1, #1
 8005848:	6a38      	ldr	r0, [r7, #32]
 800584a:	f000 fa27 	bl	8005c9c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <xTaskGenericNotifyWait+0xfc>)
 8005850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800585e:	f000 fedb 	bl	8006618 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005862:	f000 fea9 	bl	80065b8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800586c:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <xTaskGenericNotifyWait+0xf8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	3214      	adds	r2, #20
 8005874:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800587c:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <xTaskGenericNotifyWait+0xf8>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	3354      	adds	r3, #84	; 0x54
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d002      	beq.n	8005894 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e00e      	b.n	80058b2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005894:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <xTaskGenericNotifyWait+0xf8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	3214      	adds	r2, #20
 800589c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	43d2      	mvns	r2, r2
 80058a4:	4011      	ands	r1, r2
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	3214      	adds	r2, #20
 80058aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <xTaskGenericNotifyWait+0xf8>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	3354      	adds	r3, #84	; 0x54
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80058c0:	f000 feaa 	bl	8006618 <vPortExitCritical>

        return xReturn;
 80058c4:	697b      	ldr	r3, [r7, #20]
    }
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000038 	.word	0x20000038
 80058d4:	e000ed04 	.word	0xe000ed04

080058d8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08c      	sub	sp, #48	; 0x30
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80058e6:	2301      	movs	r3, #1
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <xTaskGenericNotify+0x2e>
        __asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	623b      	str	r3, [r7, #32]
    }
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <xTaskGenericNotify+0x4a>
        __asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	61fb      	str	r3, [r7, #28]
    }
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8005926:	f000 fe47 	bl	80065b8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d006      	beq.n	800593e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	3214      	adds	r2, #20
 8005936:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800593e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4413      	add	r3, r2
 8005944:	3354      	adds	r3, #84	; 0x54
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800594c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4413      	add	r3, r2
 8005952:	3354      	adds	r3, #84	; 0x54
 8005954:	2202      	movs	r2, #2
 8005956:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	2b04      	cmp	r3, #4
 800595c:	d83b      	bhi.n	80059d6 <xTaskGenericNotify+0xfe>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <xTaskGenericNotify+0x8c>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	080059f5 	.word	0x080059f5
 8005968:	08005979 	.word	0x08005979
 800596c:	08005995 	.word	0x08005995
 8005970:	080059ad 	.word	0x080059ad
 8005974:	080059bb 	.word	0x080059bb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	3214      	adds	r2, #20
 800597e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	ea42 0103 	orr.w	r1, r2, r3
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	3214      	adds	r2, #20
 800598e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005992:	e032      	b.n	80059fa <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	3214      	adds	r2, #20
 800599a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599e:	1c59      	adds	r1, r3, #1
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	3214      	adds	r2, #20
 80059a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80059aa:	e026      	b.n	80059fa <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	3214      	adds	r2, #20
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80059b8:	e01f      	b.n	80059fa <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d006      	beq.n	80059d0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	3214      	adds	r2, #20
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80059ce:	e014      	b.n	80059fa <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80059d4:	e011      	b.n	80059fa <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80059d6:	4b2b      	ldr	r3, [pc, #172]	; (8005a84 <xTaskGenericNotify+0x1ac>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <xTaskGenericNotify+0x120>
        __asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	61bb      	str	r3, [r7, #24]
    }
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <xTaskGenericNotify+0x11a>
                    break;
 80059f4:	bf00      	nop
 80059f6:	e000      	b.n	80059fa <xTaskGenericNotify+0x122>

                    break;
 80059f8:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80059fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d139      	bne.n	8005a76 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	3304      	adds	r3, #4
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe faae 	bl	8003f68 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	2201      	movs	r2, #1
 8005a12:	409a      	lsls	r2, r3
 8005a14:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <xTaskGenericNotify+0x1b0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <xTaskGenericNotify+0x1b0>)
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <xTaskGenericNotify+0x1b4>)
 8005a2c:	441a      	add	r2, r3
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7fe fa3a 	bl	8003eae <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <xTaskGenericNotify+0x180>
        __asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	617b      	str	r3, [r7, #20]
    }
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <xTaskGenericNotify+0x1b8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d907      	bls.n	8005a76 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <xTaskGenericNotify+0x1bc>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005a76:	f000 fdcf 	bl	8006618 <vPortExitCritical>

        return xReturn;
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3730      	adds	r7, #48	; 0x30
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000114 	.word	0x20000114
 8005a88:	20000118 	.word	0x20000118
 8005a8c:	2000003c 	.word	0x2000003c
 8005a90:	20000038 	.word	0x20000038
 8005a94:	e000ed04 	.word	0xe000ed04

08005a98 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b090      	sub	sp, #64	; 0x40
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ae2:	f000 fe4b 	bl	800677c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8005aea:	f3ef 8211 	mrs	r2, BASEPRI
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	627a      	str	r2, [r7, #36]	; 0x24
 8005b00:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8005b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d006      	beq.n	8005b1a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	3214      	adds	r2, #20
 8005b12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b18:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4413      	add	r3, r2
 8005b20:	3354      	adds	r3, #84	; 0x54
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3354      	adds	r3, #84	; 0x54
 8005b30:	2202      	movs	r2, #2
 8005b32:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d83b      	bhi.n	8005bb2 <xTaskGenericNotifyFromISR+0x11a>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <xTaskGenericNotifyFromISR+0xa8>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005bd1 	.word	0x08005bd1
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b71 	.word	0x08005b71
 8005b4c:	08005b89 	.word	0x08005b89
 8005b50:	08005b97 	.word	0x08005b97
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	3214      	adds	r2, #20
 8005b5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	ea42 0103 	orr.w	r1, r2, r3
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	3214      	adds	r2, #20
 8005b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005b6e:	e032      	b.n	8005bd6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	3214      	adds	r2, #20
 8005b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7a:	1c59      	adds	r1, r3, #1
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	3214      	adds	r2, #20
 8005b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005b86:	e026      	b.n	8005bd6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	3214      	adds	r2, #20
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005b94:	e01f      	b.n	8005bd6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005b96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d006      	beq.n	8005bac <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	3214      	adds	r2, #20
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005baa:	e014      	b.n	8005bd6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8005bb0:	e011      	b.n	8005bd6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005bb2:	4b33      	ldr	r3, [pc, #204]	; (8005c80 <xTaskGenericNotifyFromISR+0x1e8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00c      	beq.n	8005bd4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	61fb      	str	r3, [r7, #28]
    }
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <xTaskGenericNotifyFromISR+0x136>
                    break;
 8005bd0:	bf00      	nop
 8005bd2:	e000      	b.n	8005bd6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8005bd4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005bd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d145      	bne.n	8005c6a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	61bb      	str	r3, [r7, #24]
    }
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bfc:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <xTaskGenericNotifyFromISR+0x1ec>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11c      	bne.n	8005c3e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	3304      	adds	r3, #4
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe f9ad 	bl	8003f68 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	2201      	movs	r2, #1
 8005c14:	409a      	lsls	r2, r3
 8005c16:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <xTaskGenericNotifyFromISR+0x1f0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	4a1a      	ldr	r2, [pc, #104]	; (8005c88 <xTaskGenericNotifyFromISR+0x1f0>)
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <xTaskGenericNotifyFromISR+0x1f4>)
 8005c2e:	441a      	add	r2, r3
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe f939 	bl	8003eae <vListInsertEnd>
 8005c3c:	e005      	b.n	8005c4a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	3318      	adds	r3, #24
 8005c42:	4619      	mov	r1, r3
 8005c44:	4812      	ldr	r0, [pc, #72]	; (8005c90 <xTaskGenericNotifyFromISR+0x1f8>)
 8005c46:	f7fe f932 	bl	8003eae <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <xTaskGenericNotifyFromISR+0x1fc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d908      	bls.n	8005c6a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c60:	2201      	movs	r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <xTaskGenericNotifyFromISR+0x200>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6c:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f383 8811 	msr	BASEPRI, r3
    }
 8005c74:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3740      	adds	r7, #64	; 0x40
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000114 	.word	0x20000114
 8005c84:	20000138 	.word	0x20000138
 8005c88:	20000118 	.word	0x20000118
 8005c8c:	2000003c 	.word	0x2000003c
 8005c90:	200000d0 	.word	0x200000d0
 8005c94:	20000038 	.word	0x20000038
 8005c98:	20000124 	.word	0x20000124

08005c9c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005ca6:	4b29      	ldr	r3, [pc, #164]	; (8005d4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cac:	4b28      	ldr	r3, [pc, #160]	; (8005d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe f958 	bl	8003f68 <uxListRemove>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	43da      	mvns	r2, r3
 8005ccc:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	4a20      	ldr	r2, [pc, #128]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cd4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d10a      	bne.n	8005cf4 <prvAddCurrentTaskToDelayedList+0x58>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce4:	4b1a      	ldr	r3, [pc, #104]	; (8005d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4619      	mov	r1, r3
 8005cec:	481a      	ldr	r0, [pc, #104]	; (8005d58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cee:	f7fe f8de 	bl	8003eae <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005cf2:	e026      	b.n	8005d42 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d209      	bcs.n	8005d20 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d0c:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f7fe f8ec 	bl	8003ef6 <vListInsert>
}
 8005d1e:	e010      	b.n	8005d42 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d20:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f7fe f8e2 	bl	8003ef6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005d32:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d202      	bcs.n	8005d42 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005d3c:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6013      	str	r3, [r2, #0]
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000114 	.word	0x20000114
 8005d50:	20000038 	.word	0x20000038
 8005d54:	20000118 	.word	0x20000118
 8005d58:	200000fc 	.word	0x200000fc
 8005d5c:	200000cc 	.word	0x200000cc
 8005d60:	200000c8 	.word	0x200000c8
 8005d64:	20000130 	.word	0x20000130

08005d68 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005d72:	f000 fa9f 	bl	80062b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005d76:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <xTimerCreateTimerTask+0x54>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005d7e:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <xTimerCreateTimerTask+0x58>)
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	2302      	movs	r3, #2
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	2300      	movs	r3, #0
 8005d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005d8c:	490d      	ldr	r1, [pc, #52]	; (8005dc4 <xTimerCreateTimerTask+0x5c>)
 8005d8e:	480e      	ldr	r0, [pc, #56]	; (8005dc8 <xTimerCreateTimerTask+0x60>)
 8005d90:	f7fe ff04 	bl	8004b9c <xTaskCreate>
 8005d94:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	603b      	str	r3, [r7, #0]
    }
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005db2:	687b      	ldr	r3, [r7, #4]
    }
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	2000016c 	.word	0x2000016c
 8005dc0:	20000170 	.word	0x20000170
 8005dc4:	08006e20 	.word	0x08006e20
 8005dc8:	08005f21 	.word	0x08005f21

08005dcc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005dda:	202c      	movs	r0, #44	; 0x2c
 8005ddc:	f000 fd0e 	bl	80067fc <pvPortMalloc>
 8005de0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00d      	beq.n	8005e04 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f805 	bl	8005e0e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005e04:	697b      	ldr	r3, [r7, #20]
        }
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b086      	sub	sp, #24
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	617b      	str	r3, [r7, #20]
    }
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8005e38:	f000 fa3c 	bl	80062b4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	3304      	adds	r3, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe f81b 	bl	8003e94 <vListInitialiseItem>

        if( uxAutoReload != pdFALSE )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e6a:	f043 0304 	orr.w	r3, r3, #4
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8005e76:	bf00      	nop
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005e8a:	e008      	b.n	8005e9e <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	4413      	add	r3, r2
 8005e94:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	18d1      	adds	r1, r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f8dc 	bl	8006068 <prvInsertTimerInActiveList>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1ea      	bne.n	8005e8c <prvReloadTimer+0xe>
        }
    }
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <prvProcessExpiredTimer+0x5c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe f845 	bl	8003f68 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff ffc4 	bl	8005e7e <prvReloadTimer>
 8005ef6:	e008      	b.n	8005f0a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005efe:	f023 0301 	bic.w	r3, r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	4798      	blx	r3
    }
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000164 	.word	0x20000164

08005f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f28:	f107 0308 	add.w	r3, r7, #8
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f857 	bl	8005fe0 <prvGetNextExpireTime>
 8005f32:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4619      	mov	r1, r3
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f803 	bl	8005f44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005f3e:	f000 f8d5 	bl	80060ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f42:	e7f1      	b.n	8005f28 <prvTimerTask+0x8>

08005f44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005f4e:	f7fe fff1 	bl	8004f34 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f866 	bl	8006028 <prvSampleTimeNow>
 8005f5c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d130      	bne.n	8005fc6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <prvProcessTimerOrBlockTask+0x3c>
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d806      	bhi.n	8005f80 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005f72:	f7fe ffed 	bl	8004f50 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f76:	68f9      	ldr	r1, [r7, #12]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff ffa1 	bl	8005ec0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005f7e:	e024      	b.n	8005fca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d008      	beq.n	8005f98 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <prvProcessTimerOrBlockTask+0x90>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <prvProcessTimerOrBlockTask+0x50>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <prvProcessTimerOrBlockTask+0x52>
 8005f94:	2300      	movs	r3, #0
 8005f96:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f98:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <prvProcessTimerOrBlockTask+0x94>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	f7fe fdc5 	bl	8004b34 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005faa:	f7fe ffd1 	bl	8004f50 <xTaskResumeAll>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005fb4:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <prvProcessTimerOrBlockTask+0x98>)
 8005fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	f3bf 8f6f 	isb	sy
    }
 8005fc4:	e001      	b.n	8005fca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005fc6:	f7fe ffc3 	bl	8004f50 <xTaskResumeAll>
    }
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000168 	.word	0x20000168
 8005fd8:	2000016c 	.word	0x2000016c
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <prvGetNextExpireTime+0x44>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <prvGetNextExpireTime+0x16>
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	e000      	b.n	8005ff8 <prvGetNextExpireTime+0x18>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006004:	4b07      	ldr	r3, [pc, #28]	; (8006024 <prvGetNextExpireTime+0x44>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e001      	b.n	8006014 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006014:	68fb      	ldr	r3, [r7, #12]
    }
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000164 	.word	0x20000164

08006028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006030:	f7ff f82a 	bl	8005088 <xTaskGetTickCount>
 8006034:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006036:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <prvSampleTimeNow+0x3c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	429a      	cmp	r2, r3
 800603e:	d205      	bcs.n	800604c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006040:	f000 f912 	bl	8006268 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e002      	b.n	8006052 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006052:	4a04      	ldr	r2, [pc, #16]	; (8006064 <prvSampleTimeNow+0x3c>)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006058:	68fb      	ldr	r3, [r7, #12]
    }
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000174 	.word	0x20000174

08006068 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d812      	bhi.n	80060b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	1ad2      	subs	r2, r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e01b      	b.n	80060da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060a2:	4b10      	ldr	r3, [pc, #64]	; (80060e4 <prvInsertTimerInActiveList+0x7c>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7fd ff22 	bl	8003ef6 <vListInsert>
 80060b2:	e012      	b.n	80060da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d206      	bcs.n	80060ca <prvInsertTimerInActiveList+0x62>
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d302      	bcc.n	80060ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	e007      	b.n	80060da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060ca:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <prvInsertTimerInActiveList+0x80>)
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7fd ff0e 	bl	8003ef6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80060da:	697b      	ldr	r3, [r7, #20]
    }
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000168 	.word	0x20000168
 80060e8:	20000164 	.word	0x20000164

080060ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060f2:	e0a6      	b.n	8006242 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f2c0 80a2 	blt.w	8006240 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	3304      	adds	r3, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f7fd ff2b 	bl	8003f68 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006112:	1d3b      	adds	r3, r7, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff ff87 	bl	8006028 <prvSampleTimeNow>
 800611a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	3b01      	subs	r3, #1
 8006120:	2b08      	cmp	r3, #8
 8006122:	f200 808e 	bhi.w	8006242 <prvProcessReceivedCommands+0x156>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <prvProcessReceivedCommands+0x40>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006151 	.word	0x08006151
 8006130:	08006151 	.word	0x08006151
 8006134:	080061b9 	.word	0x080061b9
 8006138:	080061cd 	.word	0x080061cd
 800613c:	08006217 	.word	0x08006217
 8006140:	08006151 	.word	0x08006151
 8006144:	08006151 	.word	0x08006151
 8006148:	080061b9 	.word	0x080061b9
 800614c:	080061cd 	.word	0x080061cd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	b2da      	uxtb	r2, r3
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	18d1      	adds	r1, r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	69f8      	ldr	r0, [r7, #28]
 8006170:	f7ff ff7a 	bl	8006068 <prvInsertTimerInActiveList>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d063      	beq.n	8006242 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	4413      	add	r3, r2
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4619      	mov	r1, r3
 8006194:	69f8      	ldr	r0, [r7, #28]
 8006196:	f7ff fe72 	bl	8005e7e <prvReloadTimer>
 800619a:	e008      	b.n	80061ae <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	69f8      	ldr	r0, [r7, #28]
 80061b4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80061b6:	e044      	b.n	8006242 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061be:	f023 0301 	bic.w	r3, r3, #1
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80061ca:	e03a      	b.n	8006242 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	617b      	str	r3, [r7, #20]
    }
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	18d1      	adds	r1, r2, r3
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	69f8      	ldr	r0, [r7, #28]
 8006210:	f7ff ff2a 	bl	8006068 <prvInsertTimerInActiveList>
                        break;
 8006214:	e015      	b.n	8006242 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d103      	bne.n	800622c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8006224:	69f8      	ldr	r0, [r7, #28]
 8006226:	f000 fbc9 	bl	80069bc <vPortFree>
 800622a:	e00a      	b.n	8006242 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	b2da      	uxtb	r2, r3
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800623e:	e000      	b.n	8006242 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006240:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <prvProcessReceivedCommands+0x178>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f107 0108 	add.w	r1, r7, #8
 800624a:	2200      	movs	r2, #0
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe f95f 	bl	8004510 <xQueueReceive>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	f47f af4d 	bne.w	80060f4 <prvProcessReceivedCommands+0x8>
        }
    }
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	2000016c 	.word	0x2000016c

08006268 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800626e:	e009      	b.n	8006284 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006270:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <prvSwitchTimerLists+0x44>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800627a:	f04f 31ff 	mov.w	r1, #4294967295
 800627e:	6838      	ldr	r0, [r7, #0]
 8006280:	f7ff fe1e 	bl	8005ec0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006284:	4b09      	ldr	r3, [pc, #36]	; (80062ac <prvSwitchTimerLists+0x44>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800628e:	4b07      	ldr	r3, [pc, #28]	; (80062ac <prvSwitchTimerLists+0x44>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <prvSwitchTimerLists+0x48>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a04      	ldr	r2, [pc, #16]	; (80062ac <prvSwitchTimerLists+0x44>)
 800629a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800629c:	4a04      	ldr	r2, [pc, #16]	; (80062b0 <prvSwitchTimerLists+0x48>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6013      	str	r3, [r2, #0]
    }
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000164 	.word	0x20000164
 80062b0:	20000168 	.word	0x20000168

080062b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80062b8:	f000 f97e 	bl	80065b8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80062bc:	4b12      	ldr	r3, [pc, #72]	; (8006308 <prvCheckForValidListAndQueue+0x54>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d11d      	bne.n	8006300 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80062c4:	4811      	ldr	r0, [pc, #68]	; (800630c <prvCheckForValidListAndQueue+0x58>)
 80062c6:	f7fd fdc5 	bl	8003e54 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80062ca:	4811      	ldr	r0, [pc, #68]	; (8006310 <prvCheckForValidListAndQueue+0x5c>)
 80062cc:	f7fd fdc2 	bl	8003e54 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80062d0:	4b10      	ldr	r3, [pc, #64]	; (8006314 <prvCheckForValidListAndQueue+0x60>)
 80062d2:	4a0e      	ldr	r2, [pc, #56]	; (800630c <prvCheckForValidListAndQueue+0x58>)
 80062d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80062d6:	4b10      	ldr	r3, [pc, #64]	; (8006318 <prvCheckForValidListAndQueue+0x64>)
 80062d8:	4a0d      	ldr	r2, [pc, #52]	; (8006310 <prvCheckForValidListAndQueue+0x5c>)
 80062da:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80062dc:	2200      	movs	r2, #0
 80062de:	210c      	movs	r1, #12
 80062e0:	200a      	movs	r0, #10
 80062e2:	f7fd fefb 	bl	80040dc <xQueueGenericCreate>
 80062e6:	4603      	mov	r3, r0
 80062e8:	4a07      	ldr	r2, [pc, #28]	; (8006308 <prvCheckForValidListAndQueue+0x54>)
 80062ea:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <prvCheckForValidListAndQueue+0x54>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062f4:	4b04      	ldr	r3, [pc, #16]	; (8006308 <prvCheckForValidListAndQueue+0x54>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4908      	ldr	r1, [pc, #32]	; (800631c <prvCheckForValidListAndQueue+0x68>)
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fbcc 	bl	8004a98 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006300:	f000 f98a 	bl	8006618 <vPortExitCritical>
    }
 8006304:	bf00      	nop
 8006306:	bd80      	pop	{r7, pc}
 8006308:	2000016c 	.word	0x2000016c
 800630c:	2000013c 	.word	0x2000013c
 8006310:	20000150 	.word	0x20000150
 8006314:	20000164 	.word	0x20000164
 8006318:	20000168 	.word	0x20000168
 800631c:	08006e28 	.word	0x08006e28

08006320 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <pvTimerGetTimerID+0x28>
        __asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60fb      	str	r3, [r7, #12]
    }
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006348:	f000 f936 	bl	80065b8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006352:	f000 f961 	bl	8006618 <vPortExitCritical>

        return pvReturn;
 8006356:	693b      	ldr	r3, [r7, #16]
    }
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3b04      	subs	r3, #4
 8006370:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006378:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3b04      	subs	r3, #4
 800637e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b04      	subs	r3, #4
 800638e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006390:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <pxPortInitialiseStack+0x64>)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3b14      	subs	r3, #20
 800639a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3b04      	subs	r3, #4
 80063a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f06f 0202 	mvn.w	r2, #2
 80063ae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3b20      	subs	r3, #32
 80063b4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80063b6:	68fb      	ldr	r3, [r7, #12]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	080063c9 	.word	0x080063c9

080063c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <prvTaskExitError+0x54>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d00a      	beq.n	80063f2 <prvTaskExitError+0x2a>
        __asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60fb      	str	r3, [r7, #12]
    }
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <prvTaskExitError+0x28>
        __asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60bb      	str	r3, [r7, #8]
    }
 8006404:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006406:	bf00      	nop
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0fc      	beq.n	8006408 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800640e:	bf00      	nop
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000014 	.word	0x20000014

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
 800646a:	0000      	.short	0x0000
 800646c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop

08006474 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800647a:	4b46      	ldr	r3, [pc, #280]	; (8006594 <xPortStartScheduler+0x120>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a46      	ldr	r2, [pc, #280]	; (8006598 <xPortStartScheduler+0x124>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d10a      	bne.n	800649a <xPortStartScheduler+0x26>
        __asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	613b      	str	r3, [r7, #16]
    }
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800649a:	4b3e      	ldr	r3, [pc, #248]	; (8006594 <xPortStartScheduler+0x120>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a3f      	ldr	r2, [pc, #252]	; (800659c <xPortStartScheduler+0x128>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d10a      	bne.n	80064ba <xPortStartScheduler+0x46>
        __asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60fb      	str	r3, [r7, #12]
    }
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064ba:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <xPortStartScheduler+0x12c>)
 80064bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	22ff      	movs	r2, #255	; 0xff
 80064ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xPortStartScheduler+0x130>)
 80064e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064e2:	4b31      	ldr	r3, [pc, #196]	; (80065a8 <xPortStartScheduler+0x134>)
 80064e4:	2207      	movs	r2, #7
 80064e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e8:	e009      	b.n	80064fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80064ea:	4b2f      	ldr	r3, [pc, #188]	; (80065a8 <xPortStartScheduler+0x134>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	4a2d      	ldr	r2, [pc, #180]	; (80065a8 <xPortStartScheduler+0x134>)
 80064f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b80      	cmp	r3, #128	; 0x80
 8006508:	d0ef      	beq.n	80064ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800650a:	4b27      	ldr	r3, [pc, #156]	; (80065a8 <xPortStartScheduler+0x134>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f1c3 0307 	rsb	r3, r3, #7
 8006512:	2b04      	cmp	r3, #4
 8006514:	d00a      	beq.n	800652c <xPortStartScheduler+0xb8>
        __asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60bb      	str	r3, [r7, #8]
    }
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800652c:	4b1e      	ldr	r3, [pc, #120]	; (80065a8 <xPortStartScheduler+0x134>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	4a1d      	ldr	r2, [pc, #116]	; (80065a8 <xPortStartScheduler+0x134>)
 8006534:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006536:	4b1c      	ldr	r3, [pc, #112]	; (80065a8 <xPortStartScheduler+0x134>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800653e:	4a1a      	ldr	r2, [pc, #104]	; (80065a8 <xPortStartScheduler+0x134>)
 8006540:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	b2da      	uxtb	r2, r3
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800654a:	4b18      	ldr	r3, [pc, #96]	; (80065ac <xPortStartScheduler+0x138>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a17      	ldr	r2, [pc, #92]	; (80065ac <xPortStartScheduler+0x138>)
 8006550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006554:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006556:	4b15      	ldr	r3, [pc, #84]	; (80065ac <xPortStartScheduler+0x138>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a14      	ldr	r2, [pc, #80]	; (80065ac <xPortStartScheduler+0x138>)
 800655c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006560:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006562:	f000 f8db 	bl	800671c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006566:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <xPortStartScheduler+0x13c>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800656c:	f000 f8fa 	bl	8006764 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006570:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <xPortStartScheduler+0x140>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a0f      	ldr	r2, [pc, #60]	; (80065b4 <xPortStartScheduler+0x140>)
 8006576:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800657a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800657c:	f7ff ff64 	bl	8006448 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006580:	f7fe fe4a 	bl	8005218 <vTaskSwitchContext>
    prvTaskExitError();
 8006584:	f7ff ff20 	bl	80063c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	e000ed00 	.word	0xe000ed00
 8006598:	410fc271 	.word	0x410fc271
 800659c:	410fc270 	.word	0x410fc270
 80065a0:	e000e400 	.word	0xe000e400
 80065a4:	20000178 	.word	0x20000178
 80065a8:	2000017c 	.word	0x2000017c
 80065ac:	e000ed20 	.word	0xe000ed20
 80065b0:	20000014 	.word	0x20000014
 80065b4:	e000ef34 	.word	0xe000ef34

080065b8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
        __asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
    }
 80065d0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80065d2:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <vPortEnterCritical+0x58>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3301      	adds	r3, #1
 80065d8:	4a0d      	ldr	r2, [pc, #52]	; (8006610 <vPortEnterCritical+0x58>)
 80065da:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80065dc:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <vPortEnterCritical+0x58>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d10f      	bne.n	8006604 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <vPortEnterCritical+0x5c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <vPortEnterCritical+0x4c>
        __asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	603b      	str	r3, [r7, #0]
    }
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <vPortEnterCritical+0x4a>
    }
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20000014 	.word	0x20000014
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800661e:	4b12      	ldr	r3, [pc, #72]	; (8006668 <vPortExitCritical+0x50>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <vPortExitCritical+0x24>
        __asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	607b      	str	r3, [r7, #4]
    }
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <vPortExitCritical+0x50>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3b01      	subs	r3, #1
 8006642:	4a09      	ldr	r2, [pc, #36]	; (8006668 <vPortExitCritical+0x50>)
 8006644:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006646:	4b08      	ldr	r3, [pc, #32]	; (8006668 <vPortExitCritical+0x50>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d105      	bne.n	800665a <vPortExitCritical+0x42>
 800664e:	2300      	movs	r3, #0
 8006650:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	f383 8811 	msr	BASEPRI, r3
    }
 8006658:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20000014 	.word	0x20000014
 800666c:	00000000 	.word	0x00000000

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7fe fdba 	bl	8005218 <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
        __asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
    }
 80066f0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7fe fcd9 	bl	80050a8 <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <SysTick_Handler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
    }
 800670e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	20000000 	.word	0x20000000
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
 8006772:	0000      	.short	0x0000
 8006774:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop

0800677c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006782:	f3ef 8305 	mrs	r3, IPSR
 8006786:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b0f      	cmp	r3, #15
 800678c:	d914      	bls.n	80067b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678e:	4a17      	ldr	r2, [pc, #92]	; (80067ec <vPortValidateInterruptPriority+0x70>)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006798:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <vPortValidateInterruptPriority+0x74>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	7afa      	ldrb	r2, [r7, #11]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d20a      	bcs.n	80067b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	607b      	str	r3, [r7, #4]
    }
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067b8:	4b0e      	ldr	r3, [pc, #56]	; (80067f4 <vPortValidateInterruptPriority+0x78>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067c0:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <vPortValidateInterruptPriority+0x7c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d90a      	bls.n	80067de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	603b      	str	r3, [r7, #0]
    }
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <vPortValidateInterruptPriority+0x60>
    }
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	e000e3f0 	.word	0xe000e3f0
 80067f0:	20000178 	.word	0x20000178
 80067f4:	e000ed0c 	.word	0xe000ed0c
 80067f8:	2000017c 	.word	0x2000017c

080067fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	; 0x28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006808:	f7fe fb94 	bl	8004f34 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800680c:	4b65      	ldr	r3, [pc, #404]	; (80069a4 <pvPortMalloc+0x1a8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006814:	f000 f934 	bl	8006a80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006818:	4b63      	ldr	r3, [pc, #396]	; (80069a8 <pvPortMalloc+0x1ac>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	f040 80a7 	bne.w	8006974 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d02d      	beq.n	8006888 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800682c:	2208      	movs	r2, #8
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d227      	bcs.n	8006888 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006838:	2208      	movs	r2, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	2b00      	cmp	r3, #0
 8006848:	d021      	beq.n	800688e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f023 0307 	bic.w	r3, r3, #7
 8006850:	3308      	adds	r3, #8
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d214      	bcs.n	8006882 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f023 0307 	bic.w	r3, r3, #7
 800685e:	3308      	adds	r3, #8
 8006860:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	2b00      	cmp	r3, #0
 800686a:	d010      	beq.n	800688e <pvPortMalloc+0x92>
        __asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	617b      	str	r3, [r7, #20]
    }
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006886:	e002      	b.n	800688e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	e000      	b.n	8006890 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800688e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d06e      	beq.n	8006974 <pvPortMalloc+0x178>
 8006896:	4b45      	ldr	r3, [pc, #276]	; (80069ac <pvPortMalloc+0x1b0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d869      	bhi.n	8006974 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80068a0:	4b43      	ldr	r3, [pc, #268]	; (80069b0 <pvPortMalloc+0x1b4>)
 80068a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80068a4:	4b42      	ldr	r3, [pc, #264]	; (80069b0 <pvPortMalloc+0x1b4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068aa:	e004      	b.n	80068b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d903      	bls.n	80068c8 <pvPortMalloc+0xcc>
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1f1      	bne.n	80068ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80068c8:	4b36      	ldr	r3, [pc, #216]	; (80069a4 <pvPortMalloc+0x1a8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d050      	beq.n	8006974 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2208      	movs	r2, #8
 80068d8:	4413      	add	r3, r2
 80068da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	1ad2      	subs	r2, r2, r3
 80068ec:	2308      	movs	r3, #8
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d91f      	bls.n	8006934 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <pvPortMalloc+0x120>
        __asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	613b      	str	r3, [r7, #16]
    }
 8006918:	bf00      	nop
 800691a:	e7fe      	b.n	800691a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	1ad2      	subs	r2, r2, r3
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800692e:	69b8      	ldr	r0, [r7, #24]
 8006930:	f000 f908 	bl	8006b44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <pvPortMalloc+0x1b0>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	4a1b      	ldr	r2, [pc, #108]	; (80069ac <pvPortMalloc+0x1b0>)
 8006940:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006942:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <pvPortMalloc+0x1b0>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <pvPortMalloc+0x1b8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d203      	bcs.n	8006956 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800694e:	4b17      	ldr	r3, [pc, #92]	; (80069ac <pvPortMalloc+0x1b0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <pvPortMalloc+0x1b8>)
 8006954:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <pvPortMalloc+0x1ac>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	431a      	orrs	r2, r3
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800696a:	4b13      	ldr	r3, [pc, #76]	; (80069b8 <pvPortMalloc+0x1bc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3301      	adds	r3, #1
 8006970:	4a11      	ldr	r2, [pc, #68]	; (80069b8 <pvPortMalloc+0x1bc>)
 8006972:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006974:	f7fe faec 	bl	8004f50 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <pvPortMalloc+0x19c>
        __asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	60fb      	str	r3, [r7, #12]
    }
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <pvPortMalloc+0x19a>
    return pvReturn;
 8006998:	69fb      	ldr	r3, [r7, #28]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3728      	adds	r7, #40	; 0x28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20012d88 	.word	0x20012d88
 80069a8:	20012d9c 	.word	0x20012d9c
 80069ac:	20012d8c 	.word	0x20012d8c
 80069b0:	20012d80 	.word	0x20012d80
 80069b4:	20012d90 	.word	0x20012d90
 80069b8:	20012d94 	.word	0x20012d94

080069bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d04d      	beq.n	8006a6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80069ce:	2308      	movs	r3, #8
 80069d0:	425b      	negs	r3, r3
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <vPortFree+0xb8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <vPortFree+0x44>
        __asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	60fb      	str	r3, [r7, #12]
    }
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <vPortFree+0x62>
        __asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	60bb      	str	r3, [r7, #8]
    }
 8006a1a:	bf00      	nop
 8006a1c:	e7fe      	b.n	8006a1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <vPortFree+0xb8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01e      	beq.n	8006a6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11a      	bne.n	8006a6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <vPortFree+0xb8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	401a      	ands	r2, r3
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006a44:	f7fe fa76 	bl	8004f34 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <vPortFree+0xbc>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4413      	add	r3, r2
 8006a52:	4a09      	ldr	r2, [pc, #36]	; (8006a78 <vPortFree+0xbc>)
 8006a54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a56:	6938      	ldr	r0, [r7, #16]
 8006a58:	f000 f874 	bl	8006b44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006a5c:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <vPortFree+0xc0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	4a06      	ldr	r2, [pc, #24]	; (8006a7c <vPortFree+0xc0>)
 8006a64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006a66:	f7fe fa73 	bl	8004f50 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006a6a:	bf00      	nop
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20012d9c 	.word	0x20012d9c
 8006a78:	20012d8c 	.word	0x20012d8c
 8006a7c:	20012d98 	.word	0x20012d98

08006a80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006a8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006a8c:	4b27      	ldr	r3, [pc, #156]	; (8006b2c <prvHeapInit+0xac>)
 8006a8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00c      	beq.n	8006ab4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3307      	adds	r3, #7
 8006a9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0307 	bic.w	r3, r3, #7
 8006aa6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <prvHeapInit+0xac>)
 8006ab0:	4413      	add	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ab8:	4a1d      	ldr	r2, [pc, #116]	; (8006b30 <prvHeapInit+0xb0>)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006abe:	4b1c      	ldr	r3, [pc, #112]	; (8006b30 <prvHeapInit+0xb0>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	4413      	add	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006acc:	2208      	movs	r2, #8
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1a9b      	subs	r3, r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0307 	bic.w	r3, r3, #7
 8006ada:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a15      	ldr	r2, [pc, #84]	; (8006b34 <prvHeapInit+0xb4>)
 8006ae0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006ae2:	4b14      	ldr	r3, [pc, #80]	; (8006b34 <prvHeapInit+0xb4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006aea:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <prvHeapInit+0xb4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b00:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <prvHeapInit+0xb4>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4a0a      	ldr	r2, [pc, #40]	; (8006b38 <prvHeapInit+0xb8>)
 8006b0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	4a09      	ldr	r2, [pc, #36]	; (8006b3c <prvHeapInit+0xbc>)
 8006b16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b18:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <prvHeapInit+0xc0>)
 8006b1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b1e:	601a      	str	r2, [r3, #0]
}
 8006b20:	bf00      	nop
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	20000180 	.word	0x20000180
 8006b30:	20012d80 	.word	0x20012d80
 8006b34:	20012d88 	.word	0x20012d88
 8006b38:	20012d90 	.word	0x20012d90
 8006b3c:	20012d8c 	.word	0x20012d8c
 8006b40:	20012d9c 	.word	0x20012d9c

08006b44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b4c:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <prvInsertBlockIntoFreeList+0xac>)
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	e002      	b.n	8006b58 <prvInsertBlockIntoFreeList+0x14>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d8f7      	bhi.n	8006b52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d108      	bne.n	8006b86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d118      	bne.n	8006bcc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d00d      	beq.n	8006bc2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	441a      	add	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	e008      	b.n	8006bd4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	e003      	b.n	8006bd4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d002      	beq.n	8006be2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006be2:	bf00      	nop
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20012d80 	.word	0x20012d80
 8006bf4:	20012d88 	.word	0x20012d88

08006bf8 <__libc_init_array>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4d0d      	ldr	r5, [pc, #52]	; (8006c30 <__libc_init_array+0x38>)
 8006bfc:	4c0d      	ldr	r4, [pc, #52]	; (8006c34 <__libc_init_array+0x3c>)
 8006bfe:	1b64      	subs	r4, r4, r5
 8006c00:	10a4      	asrs	r4, r4, #2
 8006c02:	2600      	movs	r6, #0
 8006c04:	42a6      	cmp	r6, r4
 8006c06:	d109      	bne.n	8006c1c <__libc_init_array+0x24>
 8006c08:	4d0b      	ldr	r5, [pc, #44]	; (8006c38 <__libc_init_array+0x40>)
 8006c0a:	4c0c      	ldr	r4, [pc, #48]	; (8006c3c <__libc_init_array+0x44>)
 8006c0c:	f000 f82e 	bl	8006c6c <_init>
 8006c10:	1b64      	subs	r4, r4, r5
 8006c12:	10a4      	asrs	r4, r4, #2
 8006c14:	2600      	movs	r6, #0
 8006c16:	42a6      	cmp	r6, r4
 8006c18:	d105      	bne.n	8006c26 <__libc_init_array+0x2e>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c20:	4798      	blx	r3
 8006c22:	3601      	adds	r6, #1
 8006c24:	e7ee      	b.n	8006c04 <__libc_init_array+0xc>
 8006c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2a:	4798      	blx	r3
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	e7f2      	b.n	8006c16 <__libc_init_array+0x1e>
 8006c30:	08006e50 	.word	0x08006e50
 8006c34:	08006e50 	.word	0x08006e50
 8006c38:	08006e50 	.word	0x08006e50
 8006c3c:	08006e54 	.word	0x08006e54

08006c40 <memcpy>:
 8006c40:	440a      	add	r2, r1
 8006c42:	4291      	cmp	r1, r2
 8006c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c48:	d100      	bne.n	8006c4c <memcpy+0xc>
 8006c4a:	4770      	bx	lr
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c56:	4291      	cmp	r1, r2
 8006c58:	d1f9      	bne.n	8006c4e <memcpy+0xe>
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <memset>:
 8006c5c:	4402      	add	r2, r0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d100      	bne.n	8006c66 <memset+0xa>
 8006c64:	4770      	bx	lr
 8006c66:	f803 1b01 	strb.w	r1, [r3], #1
 8006c6a:	e7f9      	b.n	8006c60 <memset+0x4>

08006c6c <_init>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr

08006c78 <_fini>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr
