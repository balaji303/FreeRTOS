
009QueAndTime_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee0  08005ee0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee8  08005ee8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e74  20000014  08005f04  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e88  08005f04  00022e88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a6b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000329b  00000000  00000000  00038aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022eae  00000000  00000000  0003e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001709d  00000000  00000000  000610b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de91e  00000000  00000000  00078153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156a71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  00156ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e5c 	.word	0x08005e5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08005e5c 	.word	0x08005e5c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b092      	sub	sp, #72	; 0x48
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fbf3 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f8c7 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f987 	bl	8000828 <MX_GPIO_Init>
  MX_RTC_Init();
 800051a:	f000 f935 	bl	8000788 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f959 	bl	80007d4 <MX_USART2_UART_Init>
//  DWT_CTRL |= (1<<0); //Set the zeroth bit to one //SEGGER UART

//  SEGGER_SYSVIEW_Conf();
//  SEGGER_SYSVIEW_Start(); //Already done in UART

  status = xTaskCreate( menuTask, "Menu_Task", 250, NULL , 2, &menuTaskHandle );
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	2302      	movs	r3, #2
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2300      	movs	r3, #0
 800052e:	22fa      	movs	r2, #250	; 0xfa
 8000530:	4952      	ldr	r1, [pc, #328]	; (800067c <main+0x174>)
 8000532:	4853      	ldr	r0, [pc, #332]	; (8000680 <main+0x178>)
 8000534:	f003 fda0 	bl	8004078 <xTaskCreate>
 8000538:	63f8      	str	r0, [r7, #60]	; 0x3c
  configASSERT(status == pdPASS);
 800053a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800053c:	2b01      	cmp	r3, #1
 800053e:	d00a      	beq.n	8000556 <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000544:	f383 8811 	msr	BASEPRI, r3
 8000548:	f3bf 8f6f 	isb	sy
 800054c:	f3bf 8f4f 	dsb	sy
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000552:	bf00      	nop
 8000554:	e7fe      	b.n	8000554 <main+0x4c>
  status = xTaskCreate( cmdTask, "Cmd_Task", 250, NULL , 2, &cmdTaskHandle );
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	2302      	movs	r3, #2
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2300      	movs	r3, #0
 8000562:	22fa      	movs	r2, #250	; 0xfa
 8000564:	4947      	ldr	r1, [pc, #284]	; (8000684 <main+0x17c>)
 8000566:	4848      	ldr	r0, [pc, #288]	; (8000688 <main+0x180>)
 8000568:	f003 fd86 	bl	8004078 <xTaskCreate>
 800056c:	63f8      	str	r0, [r7, #60]	; 0x3c
  configASSERT(status == pdPASS);
 800056e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000570:	2b01      	cmp	r3, #1
 8000572:	d00a      	beq.n	800058a <main+0x82>
        __asm volatile
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8000586:	bf00      	nop
 8000588:	e7fe      	b.n	8000588 <main+0x80>
  status = xTaskCreate( printTask, "Print_Task", 250, NULL , 2, &printTaskHandle );
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2302      	movs	r3, #2
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	22fa      	movs	r2, #250	; 0xfa
 8000598:	493c      	ldr	r1, [pc, #240]	; (800068c <main+0x184>)
 800059a:	483d      	ldr	r0, [pc, #244]	; (8000690 <main+0x188>)
 800059c:	f003 fd6c 	bl	8004078 <xTaskCreate>
 80005a0:	63f8      	str	r0, [r7, #60]	; 0x3c
  configASSERT(status == pdPASS);
 80005a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d00a      	beq.n	80005be <main+0xb6>
        __asm volatile
 80005a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ac:	f383 8811 	msr	BASEPRI, r3
 80005b0:	f3bf 8f6f 	isb	sy
 80005b4:	f3bf 8f4f 	dsb	sy
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80005ba:	bf00      	nop
 80005bc:	e7fe      	b.n	80005bc <main+0xb4>
  status = xTaskCreate( ledTask, "Led_Task", 250, NULL , 2, &ledTaskHandle );
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	22fa      	movs	r2, #250	; 0xfa
 80005cc:	4931      	ldr	r1, [pc, #196]	; (8000694 <main+0x18c>)
 80005ce:	4832      	ldr	r0, [pc, #200]	; (8000698 <main+0x190>)
 80005d0:	f003 fd52 	bl	8004078 <xTaskCreate>
 80005d4:	63f8      	str	r0, [r7, #60]	; 0x3c
  configASSERT(status == pdPASS);
 80005d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00a      	beq.n	80005f2 <main+0xea>
        __asm volatile
 80005dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e0:	f383 8811 	msr	BASEPRI, r3
 80005e4:	f3bf 8f6f 	isb	sy
 80005e8:	f3bf 8f4f 	dsb	sy
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80005ee:	bf00      	nop
 80005f0:	e7fe      	b.n	80005f0 <main+0xe8>
  status = xTaskCreate( rtcTask, "Rtc_Task", 250, NULL , 2, &rtcTaskHandle );
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	22fa      	movs	r2, #250	; 0xfa
 80005fe:	4927      	ldr	r1, [pc, #156]	; (800069c <main+0x194>)
 8000600:	4827      	ldr	r0, [pc, #156]	; (80006a0 <main+0x198>)
 8000602:	f003 fd39 	bl	8004078 <xTaskCreate>
 8000606:	63f8      	str	r0, [r7, #60]	; 0x3c
  configASSERT(status == pdPASS);
 8000608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800060a:	2b01      	cmp	r3, #1
 800060c:	d00a      	beq.n	8000624 <main+0x11c>
        __asm volatile
 800060e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000612:	f383 8811 	msr	BASEPRI, r3
 8000616:	f3bf 8f6f 	isb	sy
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	623b      	str	r3, [r7, #32]
    }
 8000620:	bf00      	nop
 8000622:	e7fe      	b.n	8000622 <main+0x11a>

  qData = xQueueCreate(10,sizeof(char)); //(10*1)
 8000624:	2200      	movs	r2, #0
 8000626:	2101      	movs	r1, #1
 8000628:	200a      	movs	r0, #10
 800062a:	f003 fac3 	bl	8003bb4 <xQueueGenericCreate>
 800062e:	63b8      	str	r0, [r7, #56]	; 0x38
  configASSERT(qData != NULL);
 8000630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10a      	bne.n	800064c <main+0x144>
        __asm volatile
 8000636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063a:	f383 8811 	msr	BASEPRI, r3
 800063e:	f3bf 8f6f 	isb	sy
 8000642:	f3bf 8f4f 	dsb	sy
 8000646:	61fb      	str	r3, [r7, #28]
    }
 8000648:	bf00      	nop
 800064a:	e7fe      	b.n	800064a <main+0x142>

  qPrint = xQueueCreate(10,sizeof(long unsigned int)); //(10*4)
 800064c:	2200      	movs	r2, #0
 800064e:	2104      	movs	r1, #4
 8000650:	200a      	movs	r0, #10
 8000652:	f003 faaf 	bl	8003bb4 <xQueueGenericCreate>
 8000656:	6378      	str	r0, [r7, #52]	; 0x34
  configASSERT(qData != NULL);
 8000658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10a      	bne.n	8000674 <main+0x16c>
        __asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	61bb      	str	r3, [r7, #24]
    }
 8000670:	bf00      	nop
 8000672:	e7fe      	b.n	8000672 <main+0x16a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000674:	f003 ff2e 	bl	80044d4 <vTaskStartScheduler>
  while (1)
 8000678:	e7fe      	b.n	8000678 <main+0x170>
 800067a:	bf00      	nop
 800067c:	08005e74 	.word	0x08005e74
 8000680:	08000bf9 	.word	0x08000bf9
 8000684:	08005e80 	.word	0x08005e80
 8000688:	08000c19 	.word	0x08000c19
 800068c:	08005e8c 	.word	0x08005e8c
 8000690:	08000c45 	.word	0x08000c45
 8000694:	08005e98 	.word	0x08005e98
 8000698:	08000c65 	.word	0x08000c65
 800069c:	08005ea4 	.word	0x08005ea4
 80006a0:	08000c85 	.word	0x08000c85

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2234      	movs	r2, #52	; 0x34
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fbca 	bl	8005e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <SystemClock_Config+0xdc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a2b      	ldr	r2, [pc, #172]	; (8000780 <SystemClock_Config+0xdc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <SystemClock_Config+0xdc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemClock_Config+0xe0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f0:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemClock_Config+0xe0>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemClock_Config+0xe0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000704:	230a      	movs	r3, #10
 8000706:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000720:	2310      	movs	r3, #16
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000724:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072a:	2304      	movs	r3, #4
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fc82 	bl	8002044 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000746:	f000 f919 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fe44 	bl	80013f4 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000772:	f000 f903 	bl	800097c <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_RTC_Init+0x44>)
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MX_RTC_Init+0x48>)
 8000790:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_RTC_Init+0x44>)
 8000794:	2240      	movs	r2, #64	; 0x40
 8000796:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_RTC_Init+0x44>)
 800079a:	227f      	movs	r2, #127	; 0x7f
 800079c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_RTC_Init+0x44>)
 80007a0:	22ff      	movs	r2, #255	; 0xff
 80007a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_RTC_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_RTC_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_RTC_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_RTC_Init+0x44>)
 80007b8:	f001 fee2 	bl	8002580 <HAL_RTC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007c2:	f000 f8db 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20012d98 	.word	0x20012d98
 80007d0:	40002800 	.word	0x40002800

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f002 fa4a 	bl	8002ca4 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f8b1 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20012db8 	.word	0x20012db8
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b41      	ldr	r3, [pc, #260]	; (8000948 <MX_GPIO_Init+0x120>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a40      	ldr	r2, [pc, #256]	; (8000948 <MX_GPIO_Init+0x120>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <MX_GPIO_Init+0x120>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b3a      	ldr	r3, [pc, #232]	; (8000948 <MX_GPIO_Init+0x120>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a39      	ldr	r2, [pc, #228]	; (8000948 <MX_GPIO_Init+0x120>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b37      	ldr	r3, [pc, #220]	; (8000948 <MX_GPIO_Init+0x120>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b33      	ldr	r3, [pc, #204]	; (8000948 <MX_GPIO_Init+0x120>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a32      	ldr	r2, [pc, #200]	; (8000948 <MX_GPIO_Init+0x120>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <MX_GPIO_Init+0x120>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <MX_GPIO_Init+0x120>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2b      	ldr	r2, [pc, #172]	; (8000948 <MX_GPIO_Init+0x120>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_GPIO_Init+0x120>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80008b4:	4825      	ldr	r0, [pc, #148]	; (800094c <MX_GPIO_Init+0x124>)
 80008b6:	f000 fd69 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	4824      	ldr	r0, [pc, #144]	; (8000950 <MX_GPIO_Init+0x128>)
 80008c0:	f000 fd64 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	4822      	ldr	r0, [pc, #136]	; (8000954 <MX_GPIO_Init+0x12c>)
 80008ca:	f000 fd5f 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	481a      	ldr	r0, [pc, #104]	; (8000950 <MX_GPIO_Init+0x128>)
 80008e6:	f000 fbbd 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80008ea:	f44f 7308 	mov.w	r3, #544	; 0x220
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4812      	ldr	r0, [pc, #72]	; (800094c <MX_GPIO_Init+0x124>)
 8000904:	f000 fbae 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_GPIO_Init+0x128>)
 8000920:	f000 fba0 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_GPIO_Init+0x12c>)
 800093c:	f000 fb92 	bl	8001064 <HAL_GPIO_Init>

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020800 	.word	0x40020800
 8000954:	40020400 	.word	0x40020400

08000958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d101      	bne.n	800096e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096a:	f000 f9e7 	bl	8000d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40000c00 	.word	0x40000c00

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09a      	sub	sp, #104	; 0x68
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	225c      	movs	r2, #92	; 0x5c
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f005 fa2f 	bl	8005e4c <memset>
  if(hrtc->Instance==RTC)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <HAL_RTC_MspInit+0x4c>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d111      	bne.n	8000a1c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009f8:	2320      	movs	r3, #32
 80009fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a00:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fe40 	bl	800168c <HAL_RCCEx_PeriphCLKConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a12:	f7ff ffb3 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <HAL_RTC_MspInit+0x50>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3768      	adds	r7, #104	; 0x68
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40002800 	.word	0x40002800
 8000a28:	42470e3c 	.word	0x42470e3c

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_UART_MspInit+0x94>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d133      	bne.n	8000ab6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a96:	2307      	movs	r3, #7
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <HAL_UART_MspInit+0x9c>)
 8000aa2:	f000 fadf 	bl	8001064 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2026      	movs	r0, #38	; 0x26
 8000aac:	f000 fa1e 	bl	8000eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab0:	2026      	movs	r0, #38	; 0x26
 8000ab2:	f000 fa37 	bl	8000f24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	2032      	movs	r0, #50	; 0x32
 8000ae2:	f000 fa03 	bl	8000eec <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ae6:	2032      	movs	r0, #50	; 0x32
 8000ae8:	f000 fa1c 	bl	8000f24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <HAL_InitTick+0xa4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <HAL_InitTick+0xa4>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_InitTick+0xa4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 0308 	and.w	r3, r3, #8
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b08:	f107 0210 	add.w	r2, r7, #16
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fd88 	bl	8001628 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b18:	f000 fd5e 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <HAL_InitTick+0xa8>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	0c9b      	lsrs	r3, r3, #18
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_InitTick+0xac>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <HAL_InitTick+0xb0>)
 8000b34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_InitTick+0xac>)
 8000b38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_InitTick+0xac>)
 8000b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b42:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_InitTick+0xac>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_InitTick+0xac>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_InitTick+0xac>)
 8000b52:	f001 fdfa 	bl	800274a <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d104      	bne.n	8000b66 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <HAL_InitTick+0xac>)
 8000b5e:	f001 fe4d 	bl	80027fc <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	431bde83 	.word	0x431bde83
 8000b78:	20012dfc 	.word	0x20012dfc
 8000b7c:	40000c00 	.word	0x40000c00

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <USART2_IRQHandler+0x10>)
 8000bb2:	f002 f8c5 	bl	8002d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20012db8 	.word	0x20012db8

08000bc0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM5_IRQHandler+0x10>)
 8000bc6:	f001 fe89 	bl	80028dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20012dfc 	.word	0x20012dfc

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <menuTask>:
 *  Created on: Feb 28, 2022
 *      Author: Balaji
 */
#include "main.h"
void menuTask(void *parameter)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //D8 or PA9
 8000c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <menuTask+0x1c>)
 8000c06:	f000 fbda 	bl	80013be <HAL_GPIO_TogglePin>
		vTaskDelay(1000/portTICK_PERIOD_MS);
 8000c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0e:	f003 fc2d 	bl	800446c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //D8 or PA9
 8000c12:	e7f5      	b.n	8000c00 <menuTask+0x8>
 8000c14:	40020000 	.word	0x40020000

08000c18 <cmdTask>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void cmdTask(void *parameter)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000c20:	f003 fdb4 	bl	800478c <xTaskGetTickCount>
 8000c24:	4603      	mov	r3, r0
 8000c26:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //D10 or PB6
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <cmdTask+0x28>)
 8000c2c:	f000 fbc7 	bl	80013be <HAL_GPIO_TogglePin>
//		vTaskDelay(250);
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(250));
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	21fa      	movs	r1, #250	; 0xfa
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fb9a 	bl	8004370 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //D10 or PB6
 8000c3c:	e7f4      	b.n	8000c28 <cmdTask+0x10>
 8000c3e:	bf00      	nop
 8000c40:	40020400 	.word	0x40020400

08000c44 <printTask>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void printTask(void *parameter)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <printTask+0x1c>)
 8000c50:	f000 fbb5 	bl	80013be <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c58:	f003 fc08 	bl	800446c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000c5c:	e7f6      	b.n	8000c4c <printTask+0x8>
 8000c5e:	bf00      	nop
 8000c60:	40020800 	.word	0x40020800

08000c64 <ledTask>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void ledTask(void *parameter)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <ledTask+0x1c>)
 8000c70:	f000 fba5 	bl	80013be <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000c74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c78:	f003 fbf8 	bl	800446c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000c7c:	e7f6      	b.n	8000c6c <ledTask+0x8>
 8000c7e:	bf00      	nop
 8000c80:	40020800 	.word	0x40020800

08000c84 <rtcTask>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void rtcTask(void *parameter)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <rtcTask+0x1c>)
 8000c90:	f000 fb95 	bl	80013be <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c98:	f003 fbe8 	bl	800446c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000c9c:	e7f6      	b.n	8000c8c <rtcTask+0x8>
 8000c9e:	bf00      	nop
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ff81 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f005 f889 	bl	8005de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fc17 	bl	8000508 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ce8:	08005ef0 	.word	0x08005ef0
  ldr r2, =_sbss
 8000cec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cf0:	20012e88 	.word	0x20012e88

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f8d8 	bl	8000ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fed0 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe2c 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20012e44 	.word	0x20012e44

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20012e44 	.word	0x20012e44

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff4c 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efe:	f7ff ff61 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	6978      	ldr	r0, [r7, #20]
 8000f0a:	f7ff ffb1 	bl	8000e70 <NVIC_EncodePriority>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff80 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff54 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f4e:	f7ff ff09 	bl	8000d64 <HAL_GetTick>
 8000f52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d008      	beq.n	8000f72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e052      	b.n	8001018 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0216 	bic.w	r2, r2, #22
 8000f80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <HAL_DMA_Abort+0x62>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0208 	bic.w	r2, r2, #8
 8000fb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0201 	bic.w	r2, r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc2:	e013      	b.n	8000fec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fc4:	f7ff fece 	bl	8000d64 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	d90c      	bls.n	8000fec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2203      	movs	r2, #3
 8000fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e015      	b.n	8001018 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1e4      	bne.n	8000fc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ffe:	223f      	movs	r2, #63	; 0x3f
 8001000:	409a      	lsls	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d004      	beq.n	800103e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00c      	b.n	8001058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2205      	movs	r2, #5
 8001042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0201 	bic.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e165      	b.n	800134c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 8154 	bne.w	8001346 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80ae 	beq.w	8001346 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <HAL_GPIO_Init+0x300>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a5c      	ldr	r2, [pc, #368]	; (8001364 <HAL_GPIO_Init+0x300>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <HAL_GPIO_Init+0x300>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <HAL_GPIO_Init+0x308>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d025      	beq.n	800127e <HAL_GPIO_Init+0x21a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	; (8001370 <HAL_GPIO_Init+0x30c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x216>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	; (8001374 <HAL_GPIO_Init+0x310>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x212>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <HAL_GPIO_Init+0x314>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x20e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_GPIO_Init+0x318>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x20a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_GPIO_Init+0x31c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x206>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a49      	ldr	r2, [pc, #292]	; (8001384 <HAL_GPIO_Init+0x320>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x202>
 8001262:	2306      	movs	r3, #6
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 8001266:	2307      	movs	r3, #7
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c2:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ec:	4a26      	ldr	r2, [pc, #152]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_GPIO_Init+0x324>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x324>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_GPIO_Init+0x324>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae96 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	460b      	mov	r3, r1
 80013c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d0:	887a      	ldrh	r2, [r7, #2]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	041a      	lsls	r2, r3, #16
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43d9      	mvns	r1, r3
 80013dc:	887b      	ldrh	r3, [r7, #2]
 80013de:	400b      	ands	r3, r1
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0cc      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001408:	4b68      	ldr	r3, [pc, #416]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d90c      	bls.n	8001430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b65      	ldr	r3, [pc, #404]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0b8      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4a58      	ldr	r2, [pc, #352]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800146a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146c:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	494d      	ldr	r1, [pc, #308]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	4313      	orrs	r3, r2
 800147c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d044      	beq.n	8001514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d119      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e07f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d003      	beq.n	80014b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e06f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e067      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f023 0203 	bic.w	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4934      	ldr	r1, [pc, #208]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e4:	f7ff fc3e 	bl	8000d64 <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ec:	f7ff fc3a 	bl	8000d64 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e04f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 020c 	and.w	r2, r3, #12
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	429a      	cmp	r2, r3
 8001512:	d1eb      	bne.n	80014ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d20c      	bcs.n	800153c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e032      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4916      	ldr	r1, [pc, #88]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	490e      	ldr	r1, [pc, #56]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800157a:	f000 fbb1 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 800157e:	4602      	mov	r2, r0
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	490a      	ldr	r1, [pc, #40]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	5ccb      	ldrb	r3, [r1, r3]
 800158e:	fa22 f303 	lsr.w	r3, r2, r3
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1c8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fa96 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00
 80015b0:	40023800 	.word	0x40023800
 80015b4:	08005ec8 	.word	0x08005ec8
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000000 	.word	0x20000000

080015d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015dc:	f7ff fff0 	bl	80015c0 <HAL_RCC_GetHCLKFreq>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	0a9b      	lsrs	r3, r3, #10
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	4903      	ldr	r1, [pc, #12]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	08005ed8 	.word	0x08005ed8

08001600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001604:	f7ff ffdc 	bl	80015c0 <HAL_RCC_GetHCLKFreq>
 8001608:	4602      	mov	r2, r0
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	0b5b      	lsrs	r3, r3, #13
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	4903      	ldr	r1, [pc, #12]	; (8001624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001616:	5ccb      	ldrb	r3, [r1, r3]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	08005ed8 	.word	0x08005ed8

08001628 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	220f      	movs	r2, #15
 8001636:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_RCC_GetClockConfig+0x5c>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0203 	and.w	r2, r3, #3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_RCC_GetClockConfig+0x5c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_RCC_GetClockConfig+0x5c>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_RCC_GetClockConfig+0x5c>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	08db      	lsrs	r3, r3, #3
 8001662:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_RCC_GetClockConfig+0x60>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 020f 	and.w	r2, r3, #15
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40023c00 	.word	0x40023c00

0800168c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d010      	beq.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80016c4:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	496c      	ldr	r1, [pc, #432]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80016e2:	2301      	movs	r3, #1
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d010      	beq.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80016f2:	4b64      	ldr	r3, [pc, #400]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001700:	4960      	ldr	r1, [pc, #384]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001702:	4313      	orrs	r3, r2
 8001704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001710:	2301      	movs	r3, #1
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d017      	beq.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001720:	4b58      	ldr	r3, [pc, #352]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001726:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4955      	ldr	r1, [pc, #340]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001730:	4313      	orrs	r3, r2
 8001732:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800173e:	d101      	bne.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001740:	2301      	movs	r3, #1
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800174c:	2301      	movs	r3, #1
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d017      	beq.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800175c:	4b49      	ldr	r3, [pc, #292]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001762:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	4946      	ldr	r1, [pc, #280]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800176c:	4313      	orrs	r3, r2
 800176e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800177a:	d101      	bne.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800177c:	2301      	movs	r3, #1
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001788:	2301      	movs	r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 808a 	beq.w	80018ae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a38      	ldr	r2, [pc, #224]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a33      	ldr	r2, [pc, #204]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017c2:	f7ff facf 	bl	8000d64 <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017ca:	f7ff facb 	bl	8000d64 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e278      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017f0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d02f      	beq.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001800:	6a3a      	ldr	r2, [r7, #32]
 8001802:	429a      	cmp	r2, r3
 8001804:	d028      	beq.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800180e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d114      	bne.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fa99 	bl	8000d64 <HAL_GetTick>
 8001832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001834:	e00a      	b.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001836:	f7ff fa95 	bl	8000d64 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	f241 3288 	movw	r2, #5000	; 0x1388
 8001844:	4293      	cmp	r3, r2
 8001846:	d901      	bls.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e240      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0ee      	beq.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001864:	d114      	bne.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800187a:	4902      	ldr	r1, [pc, #8]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]
 8001880:	e00c      	b.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40007000 	.word	0x40007000
 800188c:	42470e40 	.word	0x42470e40
 8001890:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a49      	ldr	r2, [pc, #292]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001896:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800189a:	6093      	str	r3, [r2, #8]
 800189c:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800189e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a8:	4944      	ldr	r1, [pc, #272]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80018c2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80018d0:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4937      	ldr	r1, [pc, #220]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001900:	492e      	ldr	r1, [pc, #184]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001902:	4313      	orrs	r3, r2
 8001904:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d011      	beq.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	4926      	ldr	r1, [pc, #152]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001924:	4313      	orrs	r3, r2
 8001926:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001932:	d101      	bne.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001934:	2301      	movs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00a      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	491a      	ldr	r1, [pc, #104]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001954:	4313      	orrs	r3, r2
 8001956:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001962:	2b00      	cmp	r3, #0
 8001964:	d011      	beq.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001974:	4911      	ldr	r1, [pc, #68]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001976:	4313      	orrs	r3, r2
 8001978:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001984:	d101      	bne.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001986:	2301      	movs	r3, #1
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198c:	2b01      	cmp	r3, #1
 800198e:	d005      	beq.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001998:	f040 80ff 	bne.w	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019a2:	f7ff f9df 	bl	8000d64 <HAL_GetTick>
 80019a6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019a8:	e00e      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80019aa:	f7ff f9db 	bl	8000d64 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d907      	bls.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e188      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x642>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	424711e0 	.word	0x424711e0
 80019c4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019c8:	4b7e      	ldr	r3, [pc, #504]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ea      	bne.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d028      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d124      	bne.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80019fc:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a0e:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a14:	0e1b      	lsrs	r3, r3, #24
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	019b      	lsls	r3, r3, #6
 8001a26:	431a      	orrs	r2, r3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	085b      	lsrs	r3, r3, #1
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	431a      	orrs	r2, r3
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	071b      	lsls	r3, r3, #28
 8001a3e:	4961      	ldr	r1, [pc, #388]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a5a:	d00a      	beq.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d035      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a70:	d130      	bne.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a84:	4b4f      	ldr	r3, [pc, #316]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a8a:	0f1b      	lsrs	r3, r3, #28
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	019b      	lsls	r3, r3, #6
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	071b      	lsls	r3, r3, #28
 8001ab4:	4943      	ldr	r1, [pc, #268]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001abc:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ac2:	f023 021f 	bic.w	r2, r3, #31
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	3b01      	subs	r3, #1
 8001acc:	493d      	ldr	r1, [pc, #244]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d029      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ae8:	d124      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001aea:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	3301      	adds	r3, #1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b02:	0f1b      	lsrs	r3, r3, #28
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	019b      	lsls	r3, r3, #6
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	085b      	lsrs	r3, r3, #1
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	041b      	lsls	r3, r3, #16
 8001b20:	431a      	orrs	r2, r3
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	431a      	orrs	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	071b      	lsls	r3, r3, #28
 8001b2c:	4925      	ldr	r1, [pc, #148]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d016      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	019b      	lsls	r3, r3, #6
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	085b      	lsrs	r3, r3, #1
 8001b52:	3b01      	subs	r3, #1
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	071b      	lsls	r3, r3, #28
 8001b66:	4917      	ldr	r1, [pc, #92]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b74:	f7ff f8f6 	bl	8000d64 <HAL_GetTick>
 8001b78:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b7c:	f7ff f8f2 	bl	8000d64 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e09f      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f040 8095 	bne.w	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7ff f8dc 	bl	8000d64 <HAL_GetTick>
 8001bac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bae:	e00f      	b.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001bb0:	f7ff f8d8 	bl	8000d64 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d908      	bls.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e085      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	42470068 	.word	0x42470068
 8001bcc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bd0:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bdc:	d0e8      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d02b      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d127      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	3301      	adds	r3, #1
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	085b      	lsrs	r3, r3, #1
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	061b      	lsls	r3, r3, #24
 8001c34:	4928      	ldr	r1, [pc, #160]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c42:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	4922      	ldr	r1, [pc, #136]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01d      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c6a:	d118      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	0e1b      	lsrs	r3, r3, #24
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	019b      	lsls	r3, r3, #6
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	431a      	orrs	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	4910      	ldr	r1, [pc, #64]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f85e 	bl	8000d64 <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cac:	f7ff f85a 	bl	8000d64 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e007      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cca:	d1ef      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3730      	adds	r7, #48	; 0x30
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	42470070 	.word	0x42470070

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce4:	b088      	sub	sp, #32
 8001ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfc:	4bce      	ldr	r3, [pc, #824]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	f200 818d 	bhi.w	8002024 <HAL_RCC_GetSysClockFreq+0x344>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <HAL_RCC_GetSysClockFreq+0x30>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d45 	.word	0x08001d45
 8001d14:	08002025 	.word	0x08002025
 8001d18:	08002025 	.word	0x08002025
 8001d1c:	08002025 	.word	0x08002025
 8001d20:	08001d4b 	.word	0x08001d4b
 8001d24:	08002025 	.word	0x08002025
 8001d28:	08002025 	.word	0x08002025
 8001d2c:	08002025 	.word	0x08002025
 8001d30:	08001d51 	.word	0x08001d51
 8001d34:	08002025 	.word	0x08002025
 8001d38:	08002025 	.word	0x08002025
 8001d3c:	08002025 	.word	0x08002025
 8001d40:	08001ec5 	.word	0x08001ec5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4bbd      	ldr	r3, [pc, #756]	; (800203c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d46:	61bb      	str	r3, [r7, #24]
       break;
 8001d48:	e16f      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4a:	4bbd      	ldr	r3, [pc, #756]	; (8002040 <HAL_RCC_GetSysClockFreq+0x360>)
 8001d4c:	61bb      	str	r3, [r7, #24]
      break;
 8001d4e:	e16c      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d50:	4bb9      	ldr	r3, [pc, #740]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d58:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d5a:	4bb7      	ldr	r3, [pc, #732]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d053      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4bb4      	ldr	r3, [pc, #720]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	ea02 0400 	and.w	r4, r2, r0
 8001d7e:	603c      	str	r4, [r7, #0]
 8001d80:	400b      	ands	r3, r1
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	014b      	lsls	r3, r1, #5
 8001d96:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d9a:	0142      	lsls	r2, r0, #5
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	1ac0      	subs	r0, r0, r3
 8001da4:	462b      	mov	r3, r5
 8001da6:	eb61 0103 	sbc.w	r1, r1, r3
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	018b      	lsls	r3, r1, #6
 8001db4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001db8:	0182      	lsls	r2, r0, #6
 8001dba:	1a12      	subs	r2, r2, r0
 8001dbc:	eb63 0301 	sbc.w	r3, r3, r1
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	00d9      	lsls	r1, r3, #3
 8001dca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dce:	00d0      	lsls	r0, r2, #3
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	1852      	adds	r2, r2, r1
 8001dd8:	4629      	mov	r1, r5
 8001dda:	eb43 0101 	adc.w	r1, r3, r1
 8001dde:	460b      	mov	r3, r1
 8001de0:	f04f 0000 	mov.w	r0, #0
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	0259      	lsls	r1, r3, #9
 8001dea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dee:	0250      	lsls	r0, r2, #9
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	f7fe fa06 	bl	8000210 <__aeabi_uldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4613      	mov	r3, r2
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	e04c      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0e:	4b8a      	ldr	r3, [pc, #552]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	099b      	lsrs	r3, r3, #6
 8001e14:	461a      	mov	r2, r3
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e1e:	f04f 0100 	mov.w	r1, #0
 8001e22:	ea02 0a00 	and.w	sl, r2, r0
 8001e26:	ea03 0b01 	and.w	fp, r3, r1
 8001e2a:	4650      	mov	r0, sl
 8001e2c:	4659      	mov	r1, fp
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	014b      	lsls	r3, r1, #5
 8001e38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e3c:	0142      	lsls	r2, r0, #5
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	ebb0 000a 	subs.w	r0, r0, sl
 8001e46:	eb61 010b 	sbc.w	r1, r1, fp
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	018b      	lsls	r3, r1, #6
 8001e54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e58:	0182      	lsls	r2, r0, #6
 8001e5a:	1a12      	subs	r2, r2, r0
 8001e5c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e60:	f04f 0000 	mov.w	r0, #0
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	00d9      	lsls	r1, r3, #3
 8001e6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e6e:	00d0      	lsls	r0, r2, #3
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	eb12 020a 	adds.w	r2, r2, sl
 8001e78:	eb43 030b 	adc.w	r3, r3, fp
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	0299      	lsls	r1, r3, #10
 8001e86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e8a:	0290      	lsls	r0, r2, #10
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f7fe f9b8 	bl	8000210 <__aeabi_uldivmod>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ea8:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	61bb      	str	r3, [r7, #24]
      break;
 8001ec2:	e0b2      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec4:	4b5c      	ldr	r3, [pc, #368]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ecc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ece:	4b5a      	ldr	r3, [pc, #360]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d04d      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eda:	4b57      	ldr	r3, [pc, #348]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	099b      	lsrs	r3, r3, #6
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	ea02 0800 	and.w	r8, r2, r0
 8001ef2:	ea03 0901 	and.w	r9, r3, r1
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	4649      	mov	r1, r9
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	014b      	lsls	r3, r1, #5
 8001f04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f08:	0142      	lsls	r2, r0, #5
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	ebb0 0008 	subs.w	r0, r0, r8
 8001f12:	eb61 0109 	sbc.w	r1, r1, r9
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	018b      	lsls	r3, r1, #6
 8001f20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f24:	0182      	lsls	r2, r0, #6
 8001f26:	1a12      	subs	r2, r2, r0
 8001f28:	eb63 0301 	sbc.w	r3, r3, r1
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	f04f 0100 	mov.w	r1, #0
 8001f34:	00d9      	lsls	r1, r3, #3
 8001f36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f3a:	00d0      	lsls	r0, r2, #3
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	eb12 0208 	adds.w	r2, r2, r8
 8001f44:	eb43 0309 	adc.w	r3, r3, r9
 8001f48:	f04f 0000 	mov.w	r0, #0
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	0259      	lsls	r1, r3, #9
 8001f52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f56:	0250      	lsls	r0, r2, #9
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	f7fe f952 	bl	8000210 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4613      	mov	r3, r2
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	e04a      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	099b      	lsrs	r3, r3, #6
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f86:	f04f 0100 	mov.w	r1, #0
 8001f8a:	ea02 0400 	and.w	r4, r2, r0
 8001f8e:	ea03 0501 	and.w	r5, r3, r1
 8001f92:	4620      	mov	r0, r4
 8001f94:	4629      	mov	r1, r5
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fa4:	0142      	lsls	r2, r0, #5
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	1b00      	subs	r0, r0, r4
 8001fac:	eb61 0105 	sbc.w	r1, r1, r5
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	018b      	lsls	r3, r1, #6
 8001fba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fbe:	0182      	lsls	r2, r0, #6
 8001fc0:	1a12      	subs	r2, r2, r0
 8001fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	00d9      	lsls	r1, r3, #3
 8001fd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fd4:	00d0      	lsls	r0, r2, #3
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	1912      	adds	r2, r2, r4
 8001fdc:	eb45 0303 	adc.w	r3, r5, r3
 8001fe0:	f04f 0000 	mov.w	r0, #0
 8001fe4:	f04f 0100 	mov.w	r1, #0
 8001fe8:	0299      	lsls	r1, r3, #10
 8001fea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001fee:	0290      	lsls	r0, r2, #10
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	f7fe f906 	bl	8000210 <__aeabi_uldivmod>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4613      	mov	r3, r2
 800200a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_RCC_GetSysClockFreq+0x358>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	0f1b      	lsrs	r3, r3, #28
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	61bb      	str	r3, [r7, #24]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002026:	61bb      	str	r3, [r7, #24]
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	69bb      	ldr	r3, [r7, #24]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	00f42400 	.word	0x00f42400
 8002040:	007a1200 	.word	0x007a1200

08002044 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e28d      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8083 	beq.w	800216a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002064:	4b94      	ldr	r3, [pc, #592]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b04      	cmp	r3, #4
 800206e:	d019      	beq.n	80020a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002070:	4b91      	ldr	r3, [pc, #580]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002078:	2b08      	cmp	r3, #8
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800207c:	4b8e      	ldr	r3, [pc, #568]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002088:	d00c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208a:	4b8b      	ldr	r3, [pc, #556]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d112      	bne.n	80020bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a2:	d10b      	bne.n	80020bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	4b84      	ldr	r3, [pc, #528]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d05b      	beq.n	8002168 <HAL_RCC_OscConfig+0x124>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d157      	bne.n	8002168 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e25a      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c4:	d106      	bne.n	80020d4 <HAL_RCC_OscConfig+0x90>
 80020c6:	4b7c      	ldr	r3, [pc, #496]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a7b      	ldr	r2, [pc, #492]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e01d      	b.n	8002110 <HAL_RCC_OscConfig+0xcc>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0xb4>
 80020de:	4b76      	ldr	r3, [pc, #472]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a75      	ldr	r2, [pc, #468]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b73      	ldr	r3, [pc, #460]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a72      	ldr	r2, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0xcc>
 80020f8:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a6e      	ldr	r2, [pc, #440]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b6c      	ldr	r3, [pc, #432]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a6b      	ldr	r2, [pc, #428]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fe24 	bl	8000d64 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7fe fe20 	bl	8000d64 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e21f      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0xdc>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe fe10 	bl	8000d64 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002148:	f7fe fe0c 	bl	8000d64 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e20b      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	4b57      	ldr	r3, [pc, #348]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x104>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d06f      	beq.n	8002256 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002176:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b00      	cmp	r3, #0
 8002180:	d017      	beq.n	80021b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002182:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800218a:	2b08      	cmp	r3, #8
 800218c:	d105      	bne.n	800219a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d11c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a6:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d116      	bne.n	80021e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_RCC_OscConfig+0x186>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e1d3      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4937      	ldr	r1, [pc, #220]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	e03a      	b.n	8002256 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d020      	beq.n	800222a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e8:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_RCC_OscConfig+0x278>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe fdb9 	bl	8000d64 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f6:	f7fe fdb5 	bl	8000d64 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e1b4      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4925      	ldr	r1, [pc, #148]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
 8002228:	e015      	b.n	8002256 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_OscConfig+0x278>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fd98 	bl	8000d64 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002238:	f7fe fd94 	bl	8000d64 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e193      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d036      	beq.n	80022d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d016      	beq.n	8002298 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_RCC_OscConfig+0x27c>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002270:	f7fe fd78 	bl	8000d64 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002278:	f7fe fd74 	bl	8000d64 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e173      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800228c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x234>
 8002296:	e01b      	b.n	80022d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_OscConfig+0x27c>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7fe fd61 	bl	8000d64 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	e00e      	b.n	80022c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a6:	f7fe fd5d 	bl	8000d64 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d907      	bls.n	80022c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e15c      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
 80022b8:	40023800 	.word	0x40023800
 80022bc:	42470000 	.word	0x42470000
 80022c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	4b8a      	ldr	r3, [pc, #552]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 80022c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ea      	bne.n	80022a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8097 	beq.w	800240c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e2:	4b83      	ldr	r3, [pc, #524]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10f      	bne.n	800230e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	4b7f      	ldr	r3, [pc, #508]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b7c      	ldr	r3, [pc, #496]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230a:	2301      	movs	r3, #1
 800230c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b79      	ldr	r3, [pc, #484]	; (80024f4 <HAL_RCC_OscConfig+0x4b0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d118      	bne.n	800234c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231a:	4b76      	ldr	r3, [pc, #472]	; (80024f4 <HAL_RCC_OscConfig+0x4b0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a75      	ldr	r2, [pc, #468]	; (80024f4 <HAL_RCC_OscConfig+0x4b0>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002326:	f7fe fd1d 	bl	8000d64 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7fe fd19 	bl	8000d64 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e118      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <HAL_RCC_OscConfig+0x4b0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x31e>
 8002354:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	4a65      	ldr	r2, [pc, #404]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6713      	str	r3, [r2, #112]	; 0x70
 8002360:	e01c      	b.n	800239c <HAL_RCC_OscConfig+0x358>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x340>
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a60      	ldr	r2, [pc, #384]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
 8002376:	4b5e      	ldr	r3, [pc, #376]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a5d      	ldr	r2, [pc, #372]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0x358>
 8002384:	4b5a      	ldr	r3, [pc, #360]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a59      	ldr	r2, [pc, #356]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002396:	f023 0304 	bic.w	r3, r3, #4
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7fe fcde 	bl	8000d64 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7fe fcda 	bl	8000d64 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0d7      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	4b4b      	ldr	r3, [pc, #300]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0ee      	beq.n	80023ac <HAL_RCC_OscConfig+0x368>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe fcc8 	bl	8000d64 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7fe fcc4 	bl	8000d64 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0c1      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ee:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ee      	bne.n	80023d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80ad 	beq.w	8002570 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002416:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b08      	cmp	r3, #8
 8002420:	d060      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d145      	bne.n	80024b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242a:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_RCC_OscConfig+0x4b4>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fc98 	bl	8000d64 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fc94 	bl	8000d64 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e093      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	019b      	lsls	r3, r3, #6
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	085b      	lsrs	r3, r3, #1
 800246e:	3b01      	subs	r3, #1
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	071b      	lsls	r3, r3, #28
 8002482:	491b      	ldr	r1, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x4b4>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fc69 	bl	8000d64 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002496:	f7fe fc65 	bl	8000d64 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e064      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x452>
 80024b4:	e05c      	b.n	8002570 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_RCC_OscConfig+0x4b4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fc52 	bl	8000d64 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fc4e 	bl	8000d64 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e04d      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x480>
 80024e2:	e045      	b.n	8002570 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e040      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40007000 	.word	0x40007000
 80024f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_RCC_OscConfig+0x538>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d030      	beq.n	800256c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d129      	bne.n	800256c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d122      	bne.n	800256c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002534:	4293      	cmp	r3, r2
 8002536:	d119      	bne.n	800256c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	3b01      	subs	r3, #1
 8002546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d10f      	bne.n	800256c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d107      	bne.n	800256c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e083      	b.n	800269a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7f5b      	ldrb	r3, [r3, #29]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fa18 	bl	80009d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	22ca      	movs	r2, #202	; 0xca
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2253      	movs	r2, #83	; 0x53
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f897 	bl	80026f2 <RTC_EnterInitMode>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	22ff      	movs	r2, #255	; 0xff
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2204      	movs	r2, #4
 80025d6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e05e      	b.n	800269a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80025ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ee:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68d2      	ldr	r2, [r2, #12]
 8002616:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	041a      	lsls	r2, r3, #16
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10e      	bne.n	8002668 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f829 	bl	80026a2 <HAL_RTC_WaitForSynchro>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2204      	movs	r2, #4
 8002662:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e018      	b.n	800269a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002698:	2300      	movs	r3, #0
  }
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026be:	f7fe fb51 	bl	8000d64 <HAL_GetTick>
 80026c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026c4:	e009      	b.n	80026da <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026c6:	f7fe fb4d 	bl	8000d64 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d4:	d901      	bls.n	80026da <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e007      	b.n	80026ea <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ee      	beq.n	80026c6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d119      	bne.n	8002740 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002716:	f7fe fb25 	bl	8000d64 <HAL_GetTick>
 800271a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800271c:	e009      	b.n	8002732 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800271e:	f7fe fb21 	bl	8000d64 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800272c:	d901      	bls.n	8002732 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e007      	b.n	8002742 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ee      	beq.n	800271e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e041      	b.n	80027e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d106      	bne.n	8002776 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f839 	bl	80027e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 f9d7 	bl	8002b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d001      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e04e      	b.n	80028b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x80>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d01d      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x80>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x80>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x80>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <HAL_TIM_Base_Start_IT+0xd0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x80>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x80>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x80>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d010      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	e007      	b.n	80028b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40010400 	.word	0x40010400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40001800 	.word	0x40001800

080028dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d122      	bne.n	8002938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d11b      	bne.n	8002938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0202 	mvn.w	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8ee 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8e0 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f8f1 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d122      	bne.n	800298c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b04      	cmp	r3, #4
 8002952:	d11b      	bne.n	800298c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0204 	mvn.w	r2, #4
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f8c4 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f8b6 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f8c7 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b08      	cmp	r3, #8
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0208 	mvn.w	r2, #8
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2204      	movs	r2, #4
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f89a 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f88c 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f89d 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0210 	mvn.w	r2, #16
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f870 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f862 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f873 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d107      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0201 	mvn.w	r2, #1
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fd ff7c 	bl	8000958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f902 	bl	8002c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d107      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f838 	bl	8002b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0220 	mvn.w	r2, #32
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8cc 	bl	8002c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a40      	ldr	r2, [pc, #256]	; (8002c50 <TIM_Base_SetConfig+0x114>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d013      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5a:	d00f      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a3d      	ldr	r2, [pc, #244]	; (8002c54 <TIM_Base_SetConfig+0x118>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a3c      	ldr	r2, [pc, #240]	; (8002c58 <TIM_Base_SetConfig+0x11c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3b      	ldr	r2, [pc, #236]	; (8002c5c <TIM_Base_SetConfig+0x120>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d003      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3a      	ldr	r2, [pc, #232]	; (8002c60 <TIM_Base_SetConfig+0x124>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d108      	bne.n	8002b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a2f      	ldr	r2, [pc, #188]	; (8002c50 <TIM_Base_SetConfig+0x114>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02b      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9c:	d027      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <TIM_Base_SetConfig+0x118>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d023      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <TIM_Base_SetConfig+0x11c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01f      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <TIM_Base_SetConfig+0x120>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01b      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <TIM_Base_SetConfig+0x124>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d017      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <TIM_Base_SetConfig+0x128>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a27      	ldr	r2, [pc, #156]	; (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00f      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <TIM_Base_SetConfig+0x130>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00b      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <TIM_Base_SetConfig+0x134>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <TIM_Base_SetConfig+0x138>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d003      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <TIM_Base_SetConfig+0x114>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <TIM_Base_SetConfig+0x124>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d103      	bne.n	8002c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	615a      	str	r2, [r3, #20]
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40010400 	.word	0x40010400
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800
 8002c70:	40001800 	.word	0x40001800
 8002c74:	40001c00 	.word	0x40001c00
 8002c78:	40002000 	.word	0x40002000

08002c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e03f      	b.n	8002d36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fd feae 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2224      	movs	r2, #36	; 0x24
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fc7b 	bl	80035e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b0ba      	sub	sp, #232	; 0xe8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_UART_IRQHandler+0x66>
 8002d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fb65 	bl	800346e <UART_Receive_IT>
      return;
 8002da4:	e256      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80de 	beq.w	8002f6c <HAL_UART_IRQHandler+0x22c>
 8002db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80d1 	beq.w	8002f6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_UART_IRQHandler+0xae>
 8002dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 0201 	orr.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_UART_IRQHandler+0xd2>
 8002dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f043 0202 	orr.w	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_UART_IRQHandler+0xf6>
 8002e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d011      	beq.n	8002e66 <HAL_UART_IRQHandler+0x126>
 8002e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f043 0208 	orr.w	r2, r3, #8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 81ed 	beq.w	800324a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_UART_IRQHandler+0x14e>
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 faf0 	bl	800346e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_UART_IRQHandler+0x17a>
 8002eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d04f      	beq.n	8002f5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f9f8 	bl	80032b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d141      	bne.n	8002f52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3314      	adds	r3, #20
 8002ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3314      	adds	r3, #20
 8002ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002efa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1d9      	bne.n	8002ece <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d013      	beq.n	8002f4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	4a7d      	ldr	r2, [pc, #500]	; (800311c <HAL_UART_IRQHandler+0x3dc>)
 8002f28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe f876 	bl	8001020 <HAL_DMA_Abort_IT>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f44:	4610      	mov	r0, r2
 8002f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e00e      	b.n	8002f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f99a 	bl	8003284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	e00a      	b.n	8002f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f996 	bl	8003284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	e006      	b.n	8002f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f992 	bl	8003284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f66:	e170      	b.n	800324a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	bf00      	nop
    return;
 8002f6a:	e16e      	b.n	800324a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 814a 	bne.w	800320a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8143 	beq.w	800320a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 813c 	beq.w	800320a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	f040 80b4 	bne.w	8003120 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8140 	beq.w	800324e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	f080 8139 	bcs.w	800324e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fee:	f000 8088 	beq.w	8003102 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800300c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800301e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800302a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1d9      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3314      	adds	r3, #20
 8003044:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800304e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3314      	adds	r3, #20
 800305e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003062:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003066:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800306a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e1      	bne.n	800303e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3314      	adds	r3, #20
 8003080:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800308a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3314      	adds	r3, #20
 800309a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800309e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030a6:	e841 2300 	strex	r3, r2, [r1]
 80030aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1e3      	bne.n	800307a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d2:	f023 0310 	bic.w	r3, r3, #16
 80030d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	330c      	adds	r3, #12
 80030e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80030e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e3      	bne.n	80030c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd ff1f 	bl	8000f40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800310a:	b29b      	uxth	r3, r3
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	b29b      	uxth	r3, r3
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8c0 	bl	8003298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003118:	e099      	b.n	800324e <HAL_UART_IRQHandler+0x50e>
 800311a:	bf00      	nop
 800311c:	08003377 	.word	0x08003377
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003128:	b29b      	uxth	r3, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 808b 	beq.w	8003252 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800313c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8086 	beq.w	8003252 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800315c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	330c      	adds	r3, #12
 8003166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800316a:	647a      	str	r2, [r7, #68]	; 0x44
 800316c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003172:	e841 2300 	strex	r3, r2, [r1]
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1e3      	bne.n	8003146 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3314      	adds	r3, #20
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	623b      	str	r3, [r7, #32]
   return(result);
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3314      	adds	r3, #20
 800319e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031a2:	633a      	str	r2, [r7, #48]	; 0x30
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e3      	bne.n	800317e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0310 	bic.w	r3, r3, #16
 80031da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031e8:	61fa      	str	r2, [r7, #28]
 80031ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	69b9      	ldr	r1, [r7, #24]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	617b      	str	r3, [r7, #20]
   return(result);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e3      	bne.n	80031c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f848 	bl	8003298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003208:	e023      	b.n	8003252 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_UART_IRQHandler+0x4ea>
 8003216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f8bb 	bl	800339e <UART_Transmit_IT>
    return;
 8003228:	e014      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800322a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00e      	beq.n	8003254 <HAL_UART_IRQHandler+0x514>
 8003236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f8fb 	bl	800343e <UART_EndTransmit_IT>
    return;
 8003248:	e004      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
    return;
 800324a:	bf00      	nop
 800324c:	e002      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
      return;
 800324e:	bf00      	nop
 8003250:	e000      	b.n	8003254 <HAL_UART_IRQHandler+0x514>
      return;
 8003252:	bf00      	nop
  }
}
 8003254:	37e8      	adds	r7, #232	; 0xe8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop

0800325c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b095      	sub	sp, #84	; 0x54
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032d8:	643a      	str	r2, [r7, #64]	; 0x40
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e5      	bne.n	80032b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	e853 3f00 	ldrex	r3, [r3]
 80032fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	64bb      	str	r3, [r7, #72]	; 0x48
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3314      	adds	r3, #20
 800330a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800330c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e5      	bne.n	80032ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	2b01      	cmp	r3, #1
 8003326:	d119      	bne.n	800335c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	60bb      	str	r3, [r7, #8]
   return(result);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f023 0310 	bic.w	r3, r3, #16
 800333e:	647b      	str	r3, [r7, #68]	; 0x44
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003348:	61ba      	str	r2, [r7, #24]
 800334a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6979      	ldr	r1, [r7, #20]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	613b      	str	r3, [r7, #16]
   return(result);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
}
 800336a:	bf00      	nop
 800336c:	3754      	adds	r7, #84	; 0x54
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7ff ff77 	bl	8003284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b21      	cmp	r3, #33	; 0x21
 80033b0:	d13e      	bne.n	8003430 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	d114      	bne.n	80033e6 <UART_Transmit_IT+0x48>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d110      	bne.n	80033e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	1c9a      	adds	r2, r3, #2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	621a      	str	r2, [r3, #32]
 80033e4:	e008      	b.n	80033f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	1c59      	adds	r1, r3, #1
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6211      	str	r1, [r2, #32]
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29b      	uxth	r3, r3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4619      	mov	r1, r3
 8003406:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10f      	bne.n	800342c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800341a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800342a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003454:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fefc 	bl	800325c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b08c      	sub	sp, #48	; 0x30
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b22      	cmp	r3, #34	; 0x22
 8003480:	f040 80ab 	bne.w	80035da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d117      	bne.n	80034be <UART_Receive_IT+0x50>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d113      	bne.n	80034be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	1c9a      	adds	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
 80034bc:	e026      	b.n	800350c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d0:	d007      	beq.n	80034e2 <UART_Receive_IT+0x74>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <UART_Receive_IT+0x82>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	e008      	b.n	8003502 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29b      	uxth	r3, r3
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4619      	mov	r1, r3
 800351a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800351c:	2b00      	cmp	r3, #0
 800351e:	d15a      	bne.n	80035d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0220 	bic.w	r2, r2, #32
 800352e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800353e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	2b01      	cmp	r3, #1
 800355e:	d135      	bne.n	80035cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	613b      	str	r3, [r7, #16]
   return(result);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f023 0310 	bic.w	r3, r3, #16
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	330c      	adds	r3, #12
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	623a      	str	r2, [r7, #32]
 8003588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	61bb      	str	r3, [r7, #24]
   return(result);
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e5      	bne.n	8003566 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d10a      	bne.n	80035be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fe67 	bl	8003298 <HAL_UARTEx_RxEventCallback>
 80035ca:	e002      	b.n	80035d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fe4f 	bl	8003270 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e002      	b.n	80035dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3730      	adds	r7, #48	; 0x30
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e8:	b09f      	sub	sp, #124	; 0x7c
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fa:	68d9      	ldr	r1, [r3, #12]
 80035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	ea40 0301 	orr.w	r3, r0, r1
 8003604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	431a      	orrs	r2, r3
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	431a      	orrs	r2, r3
 8003616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4313      	orrs	r3, r2
 800361c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003628:	f021 010c 	bic.w	r1, r1, #12
 800362c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003632:	430b      	orrs	r3, r1
 8003634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003642:	6999      	ldr	r1, [r3, #24]
 8003644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	ea40 0301 	orr.w	r3, r0, r1
 800364c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800364e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4bc5      	ldr	r3, [pc, #788]	; (8003968 <UART_SetConfig+0x384>)
 8003654:	429a      	cmp	r2, r3
 8003656:	d004      	beq.n	8003662 <UART_SetConfig+0x7e>
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4bc3      	ldr	r3, [pc, #780]	; (800396c <UART_SetConfig+0x388>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d103      	bne.n	800366a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003662:	f7fd ffcd 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 8003666:	6778      	str	r0, [r7, #116]	; 0x74
 8003668:	e002      	b.n	8003670 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800366a:	f7fd ffb5 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 800366e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003678:	f040 80b6 	bne.w	80037e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800367c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367e:	461c      	mov	r4, r3
 8003680:	f04f 0500 	mov.w	r5, #0
 8003684:	4622      	mov	r2, r4
 8003686:	462b      	mov	r3, r5
 8003688:	1891      	adds	r1, r2, r2
 800368a:	6439      	str	r1, [r7, #64]	; 0x40
 800368c:	415b      	adcs	r3, r3
 800368e:	647b      	str	r3, [r7, #68]	; 0x44
 8003690:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003694:	1912      	adds	r2, r2, r4
 8003696:	eb45 0303 	adc.w	r3, r5, r3
 800369a:	f04f 0000 	mov.w	r0, #0
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	00d9      	lsls	r1, r3, #3
 80036a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036a8:	00d0      	lsls	r0, r2, #3
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	1911      	adds	r1, r2, r4
 80036b0:	6639      	str	r1, [r7, #96]	; 0x60
 80036b2:	416b      	adcs	r3, r5
 80036b4:	667b      	str	r3, [r7, #100]	; 0x64
 80036b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	1891      	adds	r1, r2, r2
 80036c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036c4:	415b      	adcs	r3, r3
 80036c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036d0:	f7fc fd9e 	bl	8000210 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4ba5      	ldr	r3, [pc, #660]	; (8003970 <UART_SetConfig+0x38c>)
 80036da:	fba3 2302 	umull	r2, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	011e      	lsls	r6, r3, #4
 80036e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e4:	461c      	mov	r4, r3
 80036e6:	f04f 0500 	mov.w	r5, #0
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	1891      	adds	r1, r2, r2
 80036f0:	6339      	str	r1, [r7, #48]	; 0x30
 80036f2:	415b      	adcs	r3, r3
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
 80036f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036fa:	1912      	adds	r2, r2, r4
 80036fc:	eb45 0303 	adc.w	r3, r5, r3
 8003700:	f04f 0000 	mov.w	r0, #0
 8003704:	f04f 0100 	mov.w	r1, #0
 8003708:	00d9      	lsls	r1, r3, #3
 800370a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800370e:	00d0      	lsls	r0, r2, #3
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	1911      	adds	r1, r2, r4
 8003716:	65b9      	str	r1, [r7, #88]	; 0x58
 8003718:	416b      	adcs	r3, r5
 800371a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800371c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	461a      	mov	r2, r3
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	1891      	adds	r1, r2, r2
 8003728:	62b9      	str	r1, [r7, #40]	; 0x28
 800372a:	415b      	adcs	r3, r3
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800372e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003732:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003736:	f7fc fd6b 	bl	8000210 <__aeabi_uldivmod>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4b8c      	ldr	r3, [pc, #560]	; (8003970 <UART_SetConfig+0x38c>)
 8003740:	fba3 1302 	umull	r1, r3, r3, r2
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	2164      	movs	r1, #100	; 0x64
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	3332      	adds	r3, #50	; 0x32
 8003752:	4a87      	ldr	r2, [pc, #540]	; (8003970 <UART_SetConfig+0x38c>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003760:	441e      	add	r6, r3
 8003762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003764:	4618      	mov	r0, r3
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	1894      	adds	r4, r2, r2
 8003770:	623c      	str	r4, [r7, #32]
 8003772:	415b      	adcs	r3, r3
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800377a:	1812      	adds	r2, r2, r0
 800377c:	eb41 0303 	adc.w	r3, r1, r3
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	f04f 0500 	mov.w	r5, #0
 8003788:	00dd      	lsls	r5, r3, #3
 800378a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800378e:	00d4      	lsls	r4, r2, #3
 8003790:	4622      	mov	r2, r4
 8003792:	462b      	mov	r3, r5
 8003794:	1814      	adds	r4, r2, r0
 8003796:	653c      	str	r4, [r7, #80]	; 0x50
 8003798:	414b      	adcs	r3, r1
 800379a:	657b      	str	r3, [r7, #84]	; 0x54
 800379c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	461a      	mov	r2, r3
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	1891      	adds	r1, r2, r2
 80037a8:	61b9      	str	r1, [r7, #24]
 80037aa:	415b      	adcs	r3, r3
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037b6:	f7fc fd2b 	bl	8000210 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <UART_SetConfig+0x38c>)
 80037c0:	fba3 1302 	umull	r1, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	4a67      	ldr	r2, [pc, #412]	; (8003970 <UART_SetConfig+0x38c>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	f003 0207 	and.w	r2, r3, #7
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4432      	add	r2, r6
 80037e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037e6:	e0b9      	b.n	800395c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ea:	461c      	mov	r4, r3
 80037ec:	f04f 0500 	mov.w	r5, #0
 80037f0:	4622      	mov	r2, r4
 80037f2:	462b      	mov	r3, r5
 80037f4:	1891      	adds	r1, r2, r2
 80037f6:	6139      	str	r1, [r7, #16]
 80037f8:	415b      	adcs	r3, r3
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003800:	1912      	adds	r2, r2, r4
 8003802:	eb45 0303 	adc.w	r3, r5, r3
 8003806:	f04f 0000 	mov.w	r0, #0
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	00d9      	lsls	r1, r3, #3
 8003810:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003814:	00d0      	lsls	r0, r2, #3
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	eb12 0804 	adds.w	r8, r2, r4
 800381e:	eb43 0905 	adc.w	r9, r3, r5
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4618      	mov	r0, r3
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	008b      	lsls	r3, r1, #2
 8003836:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800383a:	0082      	lsls	r2, r0, #2
 800383c:	4640      	mov	r0, r8
 800383e:	4649      	mov	r1, r9
 8003840:	f7fc fce6 	bl	8000210 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4b49      	ldr	r3, [pc, #292]	; (8003970 <UART_SetConfig+0x38c>)
 800384a:	fba3 2302 	umull	r2, r3, r3, r2
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	011e      	lsls	r6, r3, #4
 8003852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003854:	4618      	mov	r0, r3
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	1894      	adds	r4, r2, r2
 8003860:	60bc      	str	r4, [r7, #8]
 8003862:	415b      	adcs	r3, r3
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800386a:	1812      	adds	r2, r2, r0
 800386c:	eb41 0303 	adc.w	r3, r1, r3
 8003870:	f04f 0400 	mov.w	r4, #0
 8003874:	f04f 0500 	mov.w	r5, #0
 8003878:	00dd      	lsls	r5, r3, #3
 800387a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800387e:	00d4      	lsls	r4, r2, #3
 8003880:	4622      	mov	r2, r4
 8003882:	462b      	mov	r3, r5
 8003884:	1814      	adds	r4, r2, r0
 8003886:	64bc      	str	r4, [r7, #72]	; 0x48
 8003888:	414b      	adcs	r3, r1
 800388a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4618      	mov	r0, r3
 8003892:	f04f 0100 	mov.w	r1, #0
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	008b      	lsls	r3, r1, #2
 80038a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038a4:	0082      	lsls	r2, r0, #2
 80038a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80038aa:	f7fc fcb1 	bl	8000210 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <UART_SetConfig+0x38c>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	; 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <UART_SetConfig+0x38c>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d2:	441e      	add	r6, r3
 80038d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d6:	4618      	mov	r0, r3
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	1894      	adds	r4, r2, r2
 80038e2:	603c      	str	r4, [r7, #0]
 80038e4:	415b      	adcs	r3, r3
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ec:	1812      	adds	r2, r2, r0
 80038ee:	eb41 0303 	adc.w	r3, r1, r3
 80038f2:	f04f 0400 	mov.w	r4, #0
 80038f6:	f04f 0500 	mov.w	r5, #0
 80038fa:	00dd      	lsls	r5, r3, #3
 80038fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003900:	00d4      	lsls	r4, r2, #3
 8003902:	4622      	mov	r2, r4
 8003904:	462b      	mov	r3, r5
 8003906:	eb12 0a00 	adds.w	sl, r2, r0
 800390a:	eb43 0b01 	adc.w	fp, r3, r1
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	f04f 0100 	mov.w	r1, #0
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	008b      	lsls	r3, r1, #2
 8003922:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003926:	0082      	lsls	r2, r0, #2
 8003928:	4650      	mov	r0, sl
 800392a:	4659      	mov	r1, fp
 800392c:	f7fc fc70 	bl	8000210 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <UART_SetConfig+0x38c>)
 8003936:	fba3 1302 	umull	r1, r3, r3, r2
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2164      	movs	r1, #100	; 0x64
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	3332      	adds	r3, #50	; 0x32
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <UART_SetConfig+0x38c>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4432      	add	r2, r6
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	377c      	adds	r7, #124	; 0x7c
 8003960:	46bd      	mov	sp, r7
 8003962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003966:	bf00      	nop
 8003968:	40011000 	.word	0x40011000
 800396c:	40011400 	.word	0x40011400
 8003970:	51eb851f 	.word	0x51eb851f

08003974 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f103 0208 	add.w	r2, r3, #8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f103 0208 	add.w	r2, r3, #8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f103 0208 	add.w	r2, r3, #8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d103      	bne.n	80039ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	e00c      	b.n	8003a08 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3308      	adds	r3, #8
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	e002      	b.n	80039fc <vListInsert+0x2e>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d2f6      	bcs.n	80039f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6892      	ldr	r2, [r2, #8]
 8003a56:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6852      	ldr	r2, [r2, #4]
 8003a60:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d103      	bne.n	8003a74 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1e5a      	subs	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xQueueGenericReset+0x2e>
        __asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	60fb      	str	r3, [r7, #12]
    }
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05d      	beq.n	8003b84 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d059      	beq.n	8003b84 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	2100      	movs	r1, #0
 8003ada:	fba3 2302 	umull	r2, r3, r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d000      	beq.n	8003ae4 <xQueueGenericReset+0x50>
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d14c      	bne.n	8003b84 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003aea:	f001 fe9d 	bl	8005828 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	6939      	ldr	r1, [r7, #16]
 8003af8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	441a      	add	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2200      	movs	r2, #0
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	6939      	ldr	r1, [r7, #16]
 8003b1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	441a      	add	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	22ff      	movs	r2, #255	; 0xff
 8003b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	22ff      	movs	r2, #255	; 0xff
 8003b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d114      	bne.n	8003b6a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01a      	beq.n	8003b7e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3310      	adds	r3, #16
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 f809 	bl	8004b64 <xTaskRemoveFromEventList>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <xQueueGenericReset+0x11c>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	e009      	b.n	8003b7e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	3310      	adds	r3, #16
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ff00 	bl	8003974 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	3324      	adds	r3, #36	; 0x24
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fefb 	bl	8003974 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003b7e:	f001 fe83 	bl	8005888 <vPortExitCritical>
 8003b82:	e001      	b.n	8003b88 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <xQueueGenericReset+0x110>
        __asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	60bb      	str	r3, [r7, #8]
    }
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003ba4:	697b      	ldr	r3, [r7, #20]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02e      	beq.n	8003c2a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003bcc:	2100      	movs	r1, #0
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d000      	beq.n	8003bdc <xQueueGenericCreate+0x28>
 8003bda:	2101      	movs	r1, #1
 8003bdc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d123      	bne.n	8003c2a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003bea:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003bee:	d81c      	bhi.n	8003c2a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	fb02 f303 	mul.w	r3, r2, r3
 8003bf8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3350      	adds	r3, #80	; 0x50
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 fef4 	bl	80059ec <pvPortMalloc>
 8003c04:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01c      	beq.n	8003c46 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3350      	adds	r3, #80	; 0x50
 8003c14:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c16:	79fa      	ldrb	r2, [r7, #7]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f814 	bl	8003c50 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003c28:	e00d      	b.n	8003c46 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <xQueueGenericCreate+0x92>
        __asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	613b      	str	r3, [r7, #16]
    }
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003c46:	69fb      	ldr	r3, [r7, #28]
    }
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c7e:	2101      	movs	r1, #1
 8003c80:	69b8      	ldr	r0, [r7, #24]
 8003c82:	f7ff ff07 	bl	8003a94 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08c      	sub	sp, #48	; 0x30
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <xQueueReceive+0x30>
        __asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	623b      	str	r3, [r7, #32]
    }
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <xQueueReceive+0x3e>
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <xQueueReceive+0x42>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <xQueueReceive+0x44>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <xQueueReceive+0x5e>
        __asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	61fb      	str	r3, [r7, #28]
    }
 8003cf2:	bf00      	nop
 8003cf4:	e7fe      	b.n	8003cf4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cf6:	f001 f945 	bl	8004f84 <xTaskGetSchedulerState>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <xQueueReceive+0x6e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <xQueueReceive+0x72>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <xQueueReceive+0x74>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <xQueueReceive+0x8e>
        __asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	61bb      	str	r3, [r7, #24]
    }
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d26:	f001 fd7f 	bl	8005828 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01f      	beq.n	8003d76 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3a:	f000 f88d 	bl	8003e58 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00f      	beq.n	8003d6e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	3310      	adds	r3, #16
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 ff06 	bl	8004b64 <xTaskRemoveFromEventList>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003d5e:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <xQueueReceive+0x1bc>)
 8003d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003d6e:	f001 fd8b 	bl	8005888 <vPortExitCritical>
                return pdPASS;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e069      	b.n	8003e4a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d103      	bne.n	8003d84 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003d7c:	f001 fd84 	bl	8005888 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e062      	b.n	8003e4a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d8a:	f107 0310 	add.w	r3, r7, #16
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 ffbe 	bl	8004d10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d98:	f001 fd76 	bl	8005888 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d9c:	f000 fbec 	bl	8004578 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003da0:	f001 fd42 	bl	8005828 <vPortEnterCritical>
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d103      	bne.n	8003dba <xQueueReceive+0x122>
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc0:	b25b      	sxtb	r3, r3
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d103      	bne.n	8003dd0 <xQueueReceive+0x138>
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dd0:	f001 fd5a 	bl	8005888 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dd4:	1d3a      	adds	r2, r7, #4
 8003dd6:	f107 0310 	add.w	r3, r7, #16
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 ffad 	bl	8004d3c <xTaskCheckForTimeOut>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d123      	bne.n	8003e30 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dea:	f000 f8ad 	bl	8003f48 <prvIsQueueEmpty>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d017      	beq.n	8003e24 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	3324      	adds	r3, #36	; 0x24
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fe47 	bl	8004a90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e04:	f000 f84e 	bl	8003ea4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003e08:	f000 fbc4 	bl	8004594 <xTaskResumeAll>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d189      	bne.n	8003d26 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <xQueueReceive+0x1bc>)
 8003e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	e780      	b.n	8003d26 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e26:	f000 f83d 	bl	8003ea4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e2a:	f000 fbb3 	bl	8004594 <xTaskResumeAll>
 8003e2e:	e77a      	b.n	8003d26 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e32:	f000 f837 	bl	8003ea4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e36:	f000 fbad 	bl	8004594 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3c:	f000 f884 	bl	8003f48 <prvIsQueueEmpty>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f43f af6f 	beq.w	8003d26 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003e48:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3730      	adds	r7, #48	; 0x30
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d018      	beq.n	8003e9c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	441a      	add	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d303      	bcc.n	8003e8c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68d9      	ldr	r1, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	461a      	mov	r2, r3
 8003e96:	6838      	ldr	r0, [r7, #0]
 8003e98:	f001 ffca 	bl	8005e30 <memcpy>
    }
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003eac:	f001 fcbc 	bl	8005828 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eb6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eb8:	e011      	b.n	8003ede <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d012      	beq.n	8003ee8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3324      	adds	r3, #36	; 0x24
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fe4c 	bl	8004b64 <xTaskRemoveFromEventList>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003ed2:	f000 ff99 	bl	8004e08 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	dce9      	bgt.n	8003eba <prvUnlockQueue+0x16>
 8003ee6:	e000      	b.n	8003eea <prvUnlockQueue+0x46>
                        break;
 8003ee8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	22ff      	movs	r2, #255	; 0xff
 8003eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003ef2:	f001 fcc9 	bl	8005888 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003ef6:	f001 fc97 	bl	8005828 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f00:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f02:	e011      	b.n	8003f28 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d012      	beq.n	8003f32 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3310      	adds	r3, #16
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fe27 	bl	8004b64 <xTaskRemoveFromEventList>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003f1c:	f000 ff74 	bl	8004e08 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003f20:	7bbb      	ldrb	r3, [r7, #14]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	dce9      	bgt.n	8003f04 <prvUnlockQueue+0x60>
 8003f30:	e000      	b.n	8003f34 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003f32:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	22ff      	movs	r2, #255	; 0xff
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003f3c:	f001 fca4 	bl	8005888 <vPortExitCritical>
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f50:	f001 fc6a 	bl	8005828 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e001      	b.n	8003f66 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f66:	f001 fc8f 	bl	8005888 <vPortExitCritical>

    return xReturn;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <vQueueAddToRegistry+0x26>
        __asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	60fb      	str	r3, [r7, #12]
    }
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d024      	beq.n	8003fee <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e01e      	b.n	8003fe8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <vQueueAddToRegistry+0x98>)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d105      	bne.n	8003fc6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4a13      	ldr	r2, [pc, #76]	; (800400c <vQueueAddToRegistry+0x98>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
                    break;
 8003fc4:	e013      	b.n	8003fee <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <vQueueAddToRegistry+0x6e>
 8003fcc:	4a0f      	ldr	r2, [pc, #60]	; (800400c <vQueueAddToRegistry+0x98>)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4a0b      	ldr	r2, [pc, #44]	; (800400c <vQueueAddToRegistry+0x98>)
 8003fde:	4413      	add	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b07      	cmp	r3, #7
 8003fec:	d9dd      	bls.n	8003faa <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20012e48 	.word	0x20012e48

08004010 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004020:	f001 fc02 	bl	8005828 <vPortEnterCritical>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800402a:	b25b      	sxtb	r3, r3
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d103      	bne.n	800403a <vQueueWaitForMessageRestricted+0x2a>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004040:	b25b      	sxtb	r3, r3
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d103      	bne.n	8004050 <vQueueWaitForMessageRestricted+0x40>
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004050:	f001 fc1a 	bl	8005888 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3324      	adds	r3, #36	; 0x24
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fd37 	bl	8004ad8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f7ff ff1a 	bl	8003ea4 <prvUnlockQueue>
    }
 8004070:	bf00      	nop
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af04      	add	r7, sp, #16
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4618      	mov	r0, r3
 800408e:	f001 fcad 	bl	80059ec <pvPortMalloc>
 8004092:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00e      	beq.n	80040b8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800409a:	2058      	movs	r0, #88	; 0x58
 800409c:	f001 fca6 	bl	80059ec <pvPortMalloc>
 80040a0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
 80040ae:	e005      	b.n	80040bc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80040b0:	6978      	ldr	r0, [r7, #20]
 80040b2:	f001 fd7b 	bl	8005bac <vPortFree>
 80040b6:	e001      	b.n	80040bc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d013      	beq.n	80040ea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	2300      	movs	r3, #0
 80040c6:	9303      	str	r3, [sp, #12]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	9302      	str	r3, [sp, #8]
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f80e 	bl	80040fa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80040de:	69f8      	ldr	r0, [r7, #28]
 80040e0:	f000 f8b0 	bl	8004244 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80040e4:	2301      	movs	r3, #1
 80040e6:	61bb      	str	r3, [r7, #24]
 80040e8:	e002      	b.n	80040f0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80040f0:	69bb      	ldr	r3, [r7, #24]
    }
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b088      	sub	sp, #32
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	461a      	mov	r2, r3
 8004112:	21a5      	movs	r1, #165	; 0xa5
 8004114:	f001 fe9a 	bl	8005e4c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004122:	3b01      	subs	r3, #1
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f023 0307 	bic.w	r3, r3, #7
 8004130:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <prvInitialiseNewTask+0x58>
        __asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	617b      	str	r3, [r7, #20]
    }
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01f      	beq.n	8004198 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	e012      	b.n	8004184 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	4413      	add	r3, r2
 8004164:	7819      	ldrb	r1, [r3, #0]
 8004166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	4413      	add	r3, r2
 800416c:	3334      	adds	r3, #52	; 0x34
 800416e:	460a      	mov	r2, r1
 8004170:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	4413      	add	r3, r2
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d006      	beq.n	800418c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3301      	adds	r3, #1
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b09      	cmp	r3, #9
 8004188:	d9e9      	bls.n	800415e <prvInitialiseNewTask+0x64>
 800418a:	e000      	b.n	800418e <prvInitialiseNewTask+0x94>
            {
                break;
 800418c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004196:	e003      	b.n	80041a0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d90a      	bls.n	80041bc <prvInitialiseNewTask+0xc2>
        __asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	613b      	str	r3, [r7, #16]
    }
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d901      	bls.n	80041c6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041c2:	2304      	movs	r3, #4
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041d0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2200      	movs	r2, #0
 80041d6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	3304      	adds	r3, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fbe9 	bl	80039b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	3318      	adds	r3, #24
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fbe4 	bl	80039b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	f1c3 0205 	rsb	r2, r3, #5
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	3350      	adds	r3, #80	; 0x50
 8004206:	2204      	movs	r2, #4
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f001 fe1e 	bl	8005e4c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	3354      	adds	r3, #84	; 0x54
 8004214:	2201      	movs	r2, #1
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f001 fe17 	bl	8005e4c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	68f9      	ldr	r1, [r7, #12]
 8004222:	69b8      	ldr	r0, [r7, #24]
 8004224:	f001 f9d0 	bl	80055c8 <pxPortInitialiseStack>
 8004228:	4602      	mov	r2, r0
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004238:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800423a:	bf00      	nop
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800424c:	f001 faec 	bl	8005828 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004250:	4b40      	ldr	r3, [pc, #256]	; (8004354 <prvAddNewTaskToReadyList+0x110>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a3f      	ldr	r2, [pc, #252]	; (8004354 <prvAddNewTaskToReadyList+0x110>)
 8004258:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800425a:	4b3f      	ldr	r3, [pc, #252]	; (8004358 <prvAddNewTaskToReadyList+0x114>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004262:	4a3d      	ldr	r2, [pc, #244]	; (8004358 <prvAddNewTaskToReadyList+0x114>)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004268:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <prvAddNewTaskToReadyList+0x110>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d110      	bne.n	8004292 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004270:	f000 fdee 	bl	8004e50 <prvInitialiseTaskLists>
 8004274:	e00d      	b.n	8004292 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004276:	4b39      	ldr	r3, [pc, #228]	; (800435c <prvAddNewTaskToReadyList+0x118>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800427e:	4b36      	ldr	r3, [pc, #216]	; (8004358 <prvAddNewTaskToReadyList+0x114>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	429a      	cmp	r2, r3
 800428a:	d802      	bhi.n	8004292 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800428c:	4a32      	ldr	r2, [pc, #200]	; (8004358 <prvAddNewTaskToReadyList+0x114>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004292:	4b33      	ldr	r3, [pc, #204]	; (8004360 <prvAddNewTaskToReadyList+0x11c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3301      	adds	r3, #1
 8004298:	4a31      	ldr	r2, [pc, #196]	; (8004360 <prvAddNewTaskToReadyList+0x11c>)
 800429a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800429c:	4b30      	ldr	r3, [pc, #192]	; (8004360 <prvAddNewTaskToReadyList+0x11c>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	2201      	movs	r2, #1
 80042aa:	409a      	lsls	r2, r3
 80042ac:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <prvAddNewTaskToReadyList+0x120>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	4a2c      	ldr	r2, [pc, #176]	; (8004364 <prvAddNewTaskToReadyList+0x120>)
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ba:	492b      	ldr	r1, [pc, #172]	; (8004368 <prvAddNewTaskToReadyList+0x124>)
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	3304      	adds	r3, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	3204      	adds	r2, #4
 80042e2:	605a      	str	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <prvAddNewTaskToReadyList+0x124>)
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	615a      	str	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	4918      	ldr	r1, [pc, #96]	; (8004368 <prvAddNewTaskToReadyList+0x124>)
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	4814      	ldr	r0, [pc, #80]	; (8004368 <prvAddNewTaskToReadyList+0x124>)
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4403      	add	r3, r0
 8004320:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004322:	f001 fab1 	bl	8005888 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <prvAddNewTaskToReadyList+0x118>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00e      	beq.n	800434c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <prvAddNewTaskToReadyList+0x114>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	429a      	cmp	r2, r3
 800433a:	d207      	bcs.n	800434c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <prvAddNewTaskToReadyList+0x128>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000108 	.word	0x20000108
 8004358:	20000030 	.word	0x20000030
 800435c:	20000114 	.word	0x20000114
 8004360:	20000124 	.word	0x20000124
 8004364:	20000110 	.word	0x20000110
 8004368:	20000034 	.word	0x20000034
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800437a:	2300      	movs	r3, #0
 800437c:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xTaskDelayUntil+0x2a>
        __asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	617b      	str	r3, [r7, #20]
    }
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xTaskDelayUntil+0x46>
        __asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	613b      	str	r3, [r7, #16]
    }
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80043b6:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <xTaskDelayUntil+0xf0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <xTaskDelayUntil+0x64>
        __asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60fb      	str	r3, [r7, #12]
    }
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80043d4:	f000 f8d0 	bl	8004578 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <xTaskDelayUntil+0xf4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	4413      	add	r3, r2
 80043e6:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a3a      	ldr	r2, [r7, #32]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d20b      	bcs.n	800440a <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d211      	bcs.n	8004420 <xTaskDelayUntil+0xb0>
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	429a      	cmp	r2, r3
 8004402:	d90d      	bls.n	8004420 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8004404:	2301      	movs	r3, #1
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
 8004408:	e00a      	b.n	8004420 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	429a      	cmp	r2, r3
 8004412:	d303      	bcc.n	800441c <xTaskDelayUntil+0xac>
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	429a      	cmp	r2, r3
 800441a:	d901      	bls.n	8004420 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800441c:	2301      	movs	r3, #1
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fdc3 	bl	8004fc0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800443a:	f000 f8ab 	bl	8004594 <xTaskResumeAll>
 800443e:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <xTaskDelayUntil+0xf8>)
 8004448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004458:	4618      	mov	r0, r3
 800445a:	3728      	adds	r7, #40	; 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000130 	.word	0x20000130
 8004464:	2000010c 	.word	0x2000010c
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <vTaskDelay+0x60>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <vTaskDelay+0x30>
        __asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60bb      	str	r3, [r7, #8]
    }
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800449c:	f000 f86c 	bl	8004578 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044a0:	2100      	movs	r1, #0
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fd8c 	bl	8004fc0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80044a8:	f000 f874 	bl	8004594 <xTaskResumeAll>
 80044ac:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <vTaskDelay+0x64>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000130 	.word	0x20000130
 80044d0:	e000ed04 	.word	0xe000ed04

080044d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <vTaskStartScheduler+0x88>)
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	2300      	movs	r3, #0
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2300      	movs	r3, #0
 80044e4:	2282      	movs	r2, #130	; 0x82
 80044e6:	491e      	ldr	r1, [pc, #120]	; (8004560 <vTaskStartScheduler+0x8c>)
 80044e8:	481e      	ldr	r0, [pc, #120]	; (8004564 <vTaskStartScheduler+0x90>)
 80044ea:	f7ff fdc5 	bl	8004078 <xTaskCreate>
 80044ee:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d102      	bne.n	80044fc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80044f6:	f000 fde3 	bl	80050c0 <xTimerCreateTimerTask>
 80044fa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d116      	bne.n	8004530 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	60bb      	str	r3, [r7, #8]
    }
 8004514:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <vTaskStartScheduler+0x94>)
 8004518:	f04f 32ff 	mov.w	r2, #4294967295
 800451c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <vTaskStartScheduler+0x98>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004524:	4b12      	ldr	r3, [pc, #72]	; (8004570 <vTaskStartScheduler+0x9c>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800452a:	f001 f8db 	bl	80056e4 <xPortStartScheduler>
 800452e:	e00e      	b.n	800454e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d10a      	bne.n	800454e <vTaskStartScheduler+0x7a>
        __asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	607b      	str	r3, [r7, #4]
    }
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <vTaskStartScheduler+0xa0>)
 8004550:	681b      	ldr	r3, [r3, #0]
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	2000012c 	.word	0x2000012c
 8004560:	08005eb0 	.word	0x08005eb0
 8004564:	08004e21 	.word	0x08004e21
 8004568:	20000128 	.word	0x20000128
 800456c:	20000114 	.word	0x20000114
 8004570:	2000010c 	.word	0x2000010c
 8004574:	2000000c 	.word	0x2000000c

08004578 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <vTaskSuspendAll+0x18>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3301      	adds	r3, #1
 8004582:	4a03      	ldr	r2, [pc, #12]	; (8004590 <vTaskSuspendAll+0x18>)
 8004584:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004586:	bf00      	nop
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	20000130 	.word	0x20000130

08004594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80045a2:	4b71      	ldr	r3, [pc, #452]	; (8004768 <xTaskResumeAll+0x1d4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <xTaskResumeAll+0x2c>
        __asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	607b      	str	r3, [r7, #4]
    }
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80045c0:	f001 f932 	bl	8005828 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80045c4:	4b68      	ldr	r3, [pc, #416]	; (8004768 <xTaskResumeAll+0x1d4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	4a67      	ldr	r2, [pc, #412]	; (8004768 <xTaskResumeAll+0x1d4>)
 80045cc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ce:	4b66      	ldr	r3, [pc, #408]	; (8004768 <xTaskResumeAll+0x1d4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 80c0 	bne.w	8004758 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045d8:	4b64      	ldr	r3, [pc, #400]	; (800476c <xTaskResumeAll+0x1d8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80bb 	beq.w	8004758 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045e2:	e08a      	b.n	80046fa <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e4:	4b62      	ldr	r3, [pc, #392]	; (8004770 <xTaskResumeAll+0x1dc>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	6a12      	ldr	r2, [r2, #32]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	69d2      	ldr	r2, [r2, #28]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3318      	adds	r3, #24
 800460e:	429a      	cmp	r2, r3
 8004610:	d103      	bne.n	800461a <xTaskResumeAll+0x86>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2200      	movs	r2, #0
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	68d2      	ldr	r2, [r2, #12]
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	6892      	ldr	r2, [r2, #8]
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	3304      	adds	r3, #4
 800464c:	429a      	cmp	r2, r3
 800464e:	d103      	bne.n	8004658 <xTaskResumeAll+0xc4>
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2200      	movs	r2, #0
 800465c:	615a      	str	r2, [r3, #20]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1e5a      	subs	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	2201      	movs	r2, #1
 800466e:	409a      	lsls	r2, r3
 8004670:	4b40      	ldr	r3, [pc, #256]	; (8004774 <xTaskResumeAll+0x1e0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4313      	orrs	r3, r2
 8004676:	4a3f      	ldr	r2, [pc, #252]	; (8004774 <xTaskResumeAll+0x1e0>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	493e      	ldr	r1, [pc, #248]	; (8004778 <xTaskResumeAll+0x1e4>)
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	3304      	adds	r3, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	3204      	adds	r2, #4
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4a2e      	ldr	r2, [pc, #184]	; (8004778 <xTaskResumeAll+0x1e4>)
 80046be:	441a      	add	r2, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	615a      	str	r2, [r3, #20]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	492b      	ldr	r1, [pc, #172]	; (8004778 <xTaskResumeAll+0x1e4>)
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	1c59      	adds	r1, r3, #1
 80046d8:	4827      	ldr	r0, [pc, #156]	; (8004778 <xTaskResumeAll+0x1e4>)
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4403      	add	r3, r0
 80046e4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <xTaskResumeAll+0x1e8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d302      	bcc.n	80046fa <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80046f4:	4b22      	ldr	r3, [pc, #136]	; (8004780 <xTaskResumeAll+0x1ec>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <xTaskResumeAll+0x1dc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f47f af70 	bne.w	80045e4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800470a:	f000 fc1f 	bl	8004f4c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <xTaskResumeAll+0x1f0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d010      	beq.n	800473c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800471a:	f000 f847 	bl	80047ac <xTaskIncrementTick>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <xTaskResumeAll+0x1ec>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	3b01      	subs	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f1      	bne.n	800471a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <xTaskResumeAll+0x1f0>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xTaskResumeAll+0x1ec>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d009      	beq.n	8004758 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <xTaskResumeAll+0x1f4>)
 800474a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004758:	f001 f896 	bl	8005888 <vPortExitCritical>

    return xAlreadyYielded;
 800475c:	69bb      	ldr	r3, [r7, #24]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000130 	.word	0x20000130
 800476c:	20000108 	.word	0x20000108
 8004770:	200000c8 	.word	0x200000c8
 8004774:	20000110 	.word	0x20000110
 8004778:	20000034 	.word	0x20000034
 800477c:	20000030 	.word	0x20000030
 8004780:	2000011c 	.word	0x2000011c
 8004784:	20000118 	.word	0x20000118
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <xTaskGetTickCount+0x1c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004798:	687b      	ldr	r3, [r7, #4]
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	2000010c 	.word	0x2000010c

080047ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	; 0x28
 80047b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b6:	4b7d      	ldr	r3, [pc, #500]	; (80049ac <xTaskIncrementTick+0x200>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 80ec 	bne.w	8004998 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047c0:	4b7b      	ldr	r3, [pc, #492]	; (80049b0 <xTaskIncrementTick+0x204>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80047c8:	4a79      	ldr	r2, [pc, #484]	; (80049b0 <xTaskIncrementTick+0x204>)
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d120      	bne.n	8004816 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80047d4:	4b77      	ldr	r3, [pc, #476]	; (80049b4 <xTaskIncrementTick+0x208>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <xTaskIncrementTick+0x48>
        __asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	607b      	str	r3, [r7, #4]
    }
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <xTaskIncrementTick+0x46>
 80047f4:	4b6f      	ldr	r3, [pc, #444]	; (80049b4 <xTaskIncrementTick+0x208>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	4b6f      	ldr	r3, [pc, #444]	; (80049b8 <xTaskIncrementTick+0x20c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a6d      	ldr	r2, [pc, #436]	; (80049b4 <xTaskIncrementTick+0x208>)
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4a6d      	ldr	r2, [pc, #436]	; (80049b8 <xTaskIncrementTick+0x20c>)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	4b6c      	ldr	r3, [pc, #432]	; (80049bc <xTaskIncrementTick+0x210>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	4a6b      	ldr	r2, [pc, #428]	; (80049bc <xTaskIncrementTick+0x210>)
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	f000 fb9b 	bl	8004f4c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004816:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <xTaskIncrementTick+0x214>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a3a      	ldr	r2, [r7, #32]
 800481c:	429a      	cmp	r2, r3
 800481e:	f0c0 80a6 	bcc.w	800496e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004822:	4b64      	ldr	r3, [pc, #400]	; (80049b4 <xTaskIncrementTick+0x208>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800482c:	4b64      	ldr	r3, [pc, #400]	; (80049c0 <xTaskIncrementTick+0x214>)
 800482e:	f04f 32ff 	mov.w	r2, #4294967295
 8004832:	601a      	str	r2, [r3, #0]
                    break;
 8004834:	e09b      	b.n	800496e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004836:	4b5f      	ldr	r3, [pc, #380]	; (80049b4 <xTaskIncrementTick+0x208>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004846:	6a3a      	ldr	r2, [r7, #32]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	429a      	cmp	r2, r3
 800484c:	d203      	bcs.n	8004856 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800484e:	4a5c      	ldr	r2, [pc, #368]	; (80049c0 <xTaskIncrementTick+0x214>)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004854:	e08b      	b.n	800496e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	68d2      	ldr	r2, [r2, #12]
 8004864:	609a      	str	r2, [r3, #8]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	6892      	ldr	r2, [r2, #8]
 800486e:	605a      	str	r2, [r3, #4]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	3304      	adds	r3, #4
 8004878:	429a      	cmp	r2, r3
 800487a:	d103      	bne.n	8004884 <xTaskIncrementTick+0xd8>
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2200      	movs	r2, #0
 8004888:	615a      	str	r2, [r3, #20]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	1e5a      	subs	r2, r3, #1
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01e      	beq.n	80048da <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	6a12      	ldr	r2, [r2, #32]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	69d2      	ldr	r2, [r2, #28]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	3318      	adds	r3, #24
 80048be:	429a      	cmp	r2, r3
 80048c0:	d103      	bne.n	80048ca <xTaskIncrementTick+0x11e>
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2200      	movs	r2, #0
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	1e5a      	subs	r2, r3, #1
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	2201      	movs	r2, #1
 80048e0:	409a      	lsls	r2, r3
 80048e2:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <xTaskIncrementTick+0x218>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	4a36      	ldr	r2, [pc, #216]	; (80049c4 <xTaskIncrementTick+0x218>)
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	4935      	ldr	r1, [pc, #212]	; (80049c8 <xTaskIncrementTick+0x21c>)
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3304      	adds	r3, #4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	3204      	adds	r2, #4
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	1d1a      	adds	r2, r3, #4
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	609a      	str	r2, [r3, #8]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <xTaskIncrementTick+0x21c>)
 8004930:	441a      	add	r2, r3
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	615a      	str	r2, [r3, #20]
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493a:	4923      	ldr	r1, [pc, #140]	; (80049c8 <xTaskIncrementTick+0x21c>)
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	1c59      	adds	r1, r3, #1
 800494a:	481f      	ldr	r0, [pc, #124]	; (80049c8 <xTaskIncrementTick+0x21c>)
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4403      	add	r3, r0
 8004956:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <xTaskIncrementTick+0x220>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	429a      	cmp	r2, r3
 8004964:	f4ff af5d 	bcc.w	8004822 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496c:	e759      	b.n	8004822 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <xTaskIncrementTick+0x220>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	4914      	ldr	r1, [pc, #80]	; (80049c8 <xTaskIncrementTick+0x21c>)
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d901      	bls.n	800498a <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <xTaskIncrementTick+0x224>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8004992:	2301      	movs	r3, #1
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	e004      	b.n	80049a2 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <xTaskIncrementTick+0x228>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <xTaskIncrementTick+0x228>)
 80049a0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3728      	adds	r7, #40	; 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000130 	.word	0x20000130
 80049b0:	2000010c 	.word	0x2000010c
 80049b4:	200000c0 	.word	0x200000c0
 80049b8:	200000c4 	.word	0x200000c4
 80049bc:	20000120 	.word	0x20000120
 80049c0:	20000128 	.word	0x20000128
 80049c4:	20000110 	.word	0x20000110
 80049c8:	20000034 	.word	0x20000034
 80049cc:	20000030 	.word	0x20000030
 80049d0:	2000011c 	.word	0x2000011c
 80049d4:	20000118 	.word	0x20000118

080049d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049de:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <vTaskSwitchContext+0xa4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80049e6:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <vTaskSwitchContext+0xa8>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80049ec:	e03f      	b.n	8004a6e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80049ee:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <vTaskSwitchContext+0xa8>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f4:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <vTaskSwitchContext+0xac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004a02:	7afb      	ldrb	r3, [r7, #11]
 8004a04:	f1c3 031f 	rsb	r3, r3, #31
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	491f      	ldr	r1, [pc, #124]	; (8004a88 <vTaskSwitchContext+0xb0>)
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	607b      	str	r3, [r7, #4]
    }
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <vTaskSwitchContext+0x5a>
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <vTaskSwitchContext+0xb0>)
 8004a40:	4413      	add	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3308      	adds	r3, #8
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d104      	bne.n	8004a64 <vTaskSwitchContext+0x8c>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <vTaskSwitchContext+0xb4>)
 8004a6c:	6013      	str	r3, [r2, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000130 	.word	0x20000130
 8004a80:	2000011c 	.word	0x2000011c
 8004a84:	20000110 	.word	0x20000110
 8004a88:	20000034 	.word	0x20000034
 8004a8c:	20000030 	.word	0x20000030

08004a90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60fb      	str	r3, [r7, #12]
    }
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <vTaskPlaceOnEventList+0x44>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3318      	adds	r3, #24
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fe ff85 	bl	80039ce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	6838      	ldr	r0, [r7, #0]
 8004ac8:	f000 fa7a 	bl	8004fc0 <prvAddCurrentTaskToDelayedList>
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000030 	.word	0x20000030

08004ad8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	613b      	str	r3, [r7, #16]
    }
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	61da      	str	r2, [r3, #28]
 8004b0e:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	621a      	str	r2, [r3, #32]
 8004b18:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	3218      	adds	r2, #24
 8004b22:	605a      	str	r2, [r3, #4]
 8004b24:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f103 0218 	add.w	r2, r3, #24
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	68b8      	ldr	r0, [r7, #8]
 8004b52:	f000 fa35 	bl	8004fc0 <prvAddCurrentTaskToDelayedList>
    }
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000030 	.word	0x20000030

08004b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b08b      	sub	sp, #44	; 0x2c
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	60fb      	str	r3, [r7, #12]
    }
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	6a3a      	ldr	r2, [r7, #32]
 8004b9c:	6a12      	ldr	r2, [r2, #32]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	69d2      	ldr	r2, [r2, #28]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d103      	bne.n	8004bbe <xTaskRemoveFromEventList+0x5a>
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	6a1a      	ldr	r2, [r3, #32]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	1e5a      	subs	r2, r3, #1
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bce:	4b4a      	ldr	r3, [pc, #296]	; (8004cf8 <xTaskRemoveFromEventList+0x194>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d15e      	bne.n	8004c94 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	68d2      	ldr	r2, [r2, #12]
 8004be4:	609a      	str	r2, [r3, #8]
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	6892      	ldr	r2, [r2, #8]
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d103      	bne.n	8004c04 <xTaskRemoveFromEventList+0xa0>
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2200      	movs	r2, #0
 8004c08:	615a      	str	r2, [r3, #20]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	1e5a      	subs	r2, r3, #1
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	2201      	movs	r2, #1
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	4b37      	ldr	r3, [pc, #220]	; (8004cfc <xTaskRemoveFromEventList+0x198>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	4a36      	ldr	r2, [pc, #216]	; (8004cfc <xTaskRemoveFromEventList+0x198>)
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2a:	4935      	ldr	r1, [pc, #212]	; (8004d00 <xTaskRemoveFromEventList+0x19c>)
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	3304      	adds	r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	609a      	str	r2, [r3, #8]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	6a3a      	ldr	r2, [r7, #32]
 8004c50:	3204      	adds	r2, #4
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	1d1a      	adds	r2, r3, #4
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4a25      	ldr	r2, [pc, #148]	; (8004d00 <xTaskRemoveFromEventList+0x19c>)
 8004c6a:	441a      	add	r2, r3
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	615a      	str	r2, [r3, #20]
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	4922      	ldr	r1, [pc, #136]	; (8004d00 <xTaskRemoveFromEventList+0x19c>)
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	1c59      	adds	r1, r3, #1
 8004c84:	481e      	ldr	r0, [pc, #120]	; (8004d00 <xTaskRemoveFromEventList+0x19c>)
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4403      	add	r3, r0
 8004c90:	6019      	str	r1, [r3, #0]
 8004c92:	e01b      	b.n	8004ccc <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <xTaskRemoveFromEventList+0x1a0>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	61da      	str	r2, [r3, #28]
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	621a      	str	r2, [r3, #32]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	6a3a      	ldr	r2, [r7, #32]
 8004cae:	3218      	adds	r2, #24
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	f103 0218 	add.w	r2, r3, #24
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	4a11      	ldr	r2, [pc, #68]	; (8004d04 <xTaskRemoveFromEventList+0x1a0>)
 8004cc0:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc2:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <xTaskRemoveFromEventList+0x1a0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	; (8004d04 <xTaskRemoveFromEventList+0x1a0>)
 8004cca:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <xTaskRemoveFromEventList+0x1a4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d905      	bls.n	8004ce6 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <xTaskRemoveFromEventList+0x1a8>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e001      	b.n	8004cea <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	372c      	adds	r7, #44	; 0x2c
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	20000130 	.word	0x20000130
 8004cfc:	20000110 	.word	0x20000110
 8004d00:	20000034 	.word	0x20000034
 8004d04:	200000c8 	.word	0x200000c8
 8004d08:	20000030 	.word	0x20000030
 8004d0c:	2000011c 	.word	0x2000011c

08004d10 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <vTaskInternalSetTimeOutState+0x24>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <vTaskInternalSetTimeOutState+0x28>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	605a      	str	r2, [r3, #4]
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	20000120 	.word	0x20000120
 8004d38:	2000010c 	.word	0x2000010c

08004d3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	613b      	str	r3, [r7, #16]
    }
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	60fb      	str	r3, [r7, #12]
    }
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004d7e:	f000 fd53 	bl	8005828 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004d82:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <xTaskCheckForTimeOut+0xc4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d102      	bne.n	8004da2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e026      	b.n	8004df0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <xTaskCheckForTimeOut+0xc8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d00a      	beq.n	8004dc4 <xTaskCheckForTimeOut+0x88>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d305      	bcc.n	8004dc4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004db8:	2301      	movs	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e015      	b.n	8004df0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d20b      	bcs.n	8004de6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	1ad2      	subs	r2, r2, r3
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff ff98 	bl	8004d10 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e004      	b.n	8004df0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004dec:	2301      	movs	r3, #1
 8004dee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004df0:	f000 fd4a 	bl	8005888 <vPortExitCritical>

    return xReturn;
 8004df4:	69fb      	ldr	r3, [r7, #28]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	2000010c 	.word	0x2000010c
 8004e04:	20000120 	.word	0x20000120

08004e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <vTaskMissedYield+0x14>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	2000011c 	.word	0x2000011c

08004e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004e28:	f000 f852 	bl	8004ed0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <prvIdleTask+0x28>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d9f9      	bls.n	8004e28 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <prvIdleTask+0x2c>)
 8004e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004e44:	e7f0      	b.n	8004e28 <prvIdleTask+0x8>
 8004e46:	bf00      	nop
 8004e48:	20000034 	.word	0x20000034
 8004e4c:	e000ed04 	.word	0xe000ed04

08004e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	e00c      	b.n	8004e76 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4a12      	ldr	r2, [pc, #72]	; (8004eb0 <prvInitialiseTaskLists+0x60>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fd82 	bl	8003974 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3301      	adds	r3, #1
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d9ef      	bls.n	8004e5c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004e7c:	480d      	ldr	r0, [pc, #52]	; (8004eb4 <prvInitialiseTaskLists+0x64>)
 8004e7e:	f7fe fd79 	bl	8003974 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004e82:	480d      	ldr	r0, [pc, #52]	; (8004eb8 <prvInitialiseTaskLists+0x68>)
 8004e84:	f7fe fd76 	bl	8003974 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004e88:	480c      	ldr	r0, [pc, #48]	; (8004ebc <prvInitialiseTaskLists+0x6c>)
 8004e8a:	f7fe fd73 	bl	8003974 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004e8e:	480c      	ldr	r0, [pc, #48]	; (8004ec0 <prvInitialiseTaskLists+0x70>)
 8004e90:	f7fe fd70 	bl	8003974 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004e94:	480b      	ldr	r0, [pc, #44]	; (8004ec4 <prvInitialiseTaskLists+0x74>)
 8004e96:	f7fe fd6d 	bl	8003974 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <prvInitialiseTaskLists+0x78>)
 8004e9c:	4a05      	ldr	r2, [pc, #20]	; (8004eb4 <prvInitialiseTaskLists+0x64>)
 8004e9e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <prvInitialiseTaskLists+0x7c>)
 8004ea2:	4a05      	ldr	r2, [pc, #20]	; (8004eb8 <prvInitialiseTaskLists+0x68>)
 8004ea4:	601a      	str	r2, [r3, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000034 	.word	0x20000034
 8004eb4:	20000098 	.word	0x20000098
 8004eb8:	200000ac 	.word	0x200000ac
 8004ebc:	200000c8 	.word	0x200000c8
 8004ec0:	200000dc 	.word	0x200000dc
 8004ec4:	200000f4 	.word	0x200000f4
 8004ec8:	200000c0 	.word	0x200000c0
 8004ecc:	200000c4 	.word	0x200000c4

08004ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ed6:	e019      	b.n	8004f0c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004ed8:	f000 fca6 	bl	8005828 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <prvCheckTasksWaitingTermination+0x50>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe fda9 	bl	8003a40 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <prvCheckTasksWaitingTermination+0x54>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <prvCheckTasksWaitingTermination+0x54>)
 8004ef6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <prvCheckTasksWaitingTermination+0x58>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <prvCheckTasksWaitingTermination+0x58>)
 8004f00:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004f02:	f000 fcc1 	bl	8005888 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f810 	bl	8004f2c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <prvCheckTasksWaitingTermination+0x58>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e1      	bne.n	8004ed8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200000dc 	.word	0x200000dc
 8004f24:	20000108 	.word	0x20000108
 8004f28:	200000f0 	.word	0x200000f0

08004f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fe37 	bl	8005bac <vPortFree>
                vPortFree( pxTCB );
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fe34 	bl	8005bac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <prvResetNextTaskUnblockTime+0x30>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d104      	bne.n	8004f64 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <prvResetNextTaskUnblockTime+0x34>)
 8004f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f60:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004f62:	e005      	b.n	8004f70 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <prvResetNextTaskUnblockTime+0x30>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <prvResetNextTaskUnblockTime+0x34>)
 8004f6e:	6013      	str	r3, [r2, #0]
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	200000c0 	.word	0x200000c0
 8004f80:	20000128 	.word	0x20000128

08004f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <xTaskGetSchedulerState+0x34>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004f92:	2301      	movs	r3, #1
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	e008      	b.n	8004faa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f98:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <xTaskGetSchedulerState+0x38>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	e001      	b.n	8004faa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004faa:	687b      	ldr	r3, [r7, #4]
    }
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	20000114 	.word	0x20000114
 8004fbc:	20000130 	.word	0x20000130

08004fc0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fd0:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe fd32 	bl	8003a40 <uxListRemove>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004fe2:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	2201      	movs	r2, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	4b2e      	ldr	r3, [pc, #184]	; (80050ac <prvAddCurrentTaskToDelayedList+0xec>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	4a2d      	ldr	r2, [pc, #180]	; (80050ac <prvAddCurrentTaskToDelayedList+0xec>)
 8004ff8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d124      	bne.n	800504c <prvAddCurrentTaskToDelayedList+0x8c>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d021      	beq.n	800504c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005008:	4b29      	ldr	r3, [pc, #164]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	4b26      	ldr	r3, [pc, #152]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	609a      	str	r2, [r3, #8]
 8005016:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	6892      	ldr	r2, [r2, #8]
 800501e:	60da      	str	r2, [r3, #12]
 8005020:	4b21      	ldr	r3, [pc, #132]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	3204      	adds	r2, #4
 800502a:	605a      	str	r2, [r3, #4]
 800502c:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	1d1a      	adds	r2, r3, #4
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800503c:	615a      	str	r2, [r3, #20]
 800503e:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a1a      	ldr	r2, [pc, #104]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800504a:	e026      	b.n	800509a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	429a      	cmp	r2, r3
 8005062:	d209      	bcs.n	8005078 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f7fe fcac 	bl	80039ce <vListInsert>
}
 8005076:	e010      	b.n	800509a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f7fe fca2 	bl	80039ce <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <prvAddCurrentTaskToDelayedList+0xfc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	429a      	cmp	r2, r3
 8005092:	d202      	bcs.n	800509a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8005094:	4a09      	ldr	r2, [pc, #36]	; (80050bc <prvAddCurrentTaskToDelayedList+0xfc>)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6013      	str	r3, [r2, #0]
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	2000010c 	.word	0x2000010c
 80050a8:	20000030 	.word	0x20000030
 80050ac:	20000110 	.word	0x20000110
 80050b0:	200000f4 	.word	0x200000f4
 80050b4:	200000c4 	.word	0x200000c4
 80050b8:	200000c0 	.word	0x200000c0
 80050bc:	20000128 	.word	0x20000128

080050c0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80050ca:	f000 fa47 	bl	800555c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80050ce:	4b11      	ldr	r3, [pc, #68]	; (8005114 <xTimerCreateTimerTask+0x54>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00b      	beq.n	80050ee <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <xTimerCreateTimerTask+0x58>)
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	2302      	movs	r3, #2
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	2300      	movs	r3, #0
 80050e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050e4:	490d      	ldr	r1, [pc, #52]	; (800511c <xTimerCreateTimerTask+0x5c>)
 80050e6:	480e      	ldr	r0, [pc, #56]	; (8005120 <xTimerCreateTimerTask+0x60>)
 80050e8:	f7fe ffc6 	bl	8004078 <xTaskCreate>
 80050ec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	603b      	str	r3, [r7, #0]
    }
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800510a:	687b      	ldr	r3, [r7, #4]
    }
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20000164 	.word	0x20000164
 8005118:	20000168 	.word	0x20000168
 800511c:	08005eb8 	.word	0x08005eb8
 8005120:	080051c9 	.word	0x080051c9

08005124 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005130:	e008      	b.n	8005144 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	4413      	add	r3, r2
 800513a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	18d1      	adds	r1, r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f8dd 	bl	8005310 <prvInsertTimerInActiveList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ea      	bne.n	8005132 <prvReloadTimer+0xe>
        }
    }
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <prvProcessExpiredTimer+0x5c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fc5d 	bl	8003a40 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7ff ffc3 	bl	8005124 <prvReloadTimer>
 800519e:	e008      	b.n	80051b2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	4798      	blx	r3
    }
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	2000015c 	.word	0x2000015c

080051c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051d0:	f107 0308 	add.w	r3, r7, #8
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 f857 	bl	8005288 <prvGetNextExpireTime>
 80051da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4619      	mov	r1, r3
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f803 	bl	80051ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80051e6:	f000 f8d5 	bl	8005394 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051ea:	e7f1      	b.n	80051d0 <prvTimerTask+0x8>

080051ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80051f6:	f7ff f9bf 	bl	8004578 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f866 	bl	80052d0 <prvSampleTimeNow>
 8005204:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d130      	bne.n	800526e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <prvProcessTimerOrBlockTask+0x3c>
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	429a      	cmp	r2, r3
 8005218:	d806      	bhi.n	8005228 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800521a:	f7ff f9bb 	bl	8004594 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ffa1 	bl	8005168 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005226:	e024      	b.n	8005272 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <prvProcessTimerOrBlockTask+0x90>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <prvProcessTimerOrBlockTask+0x50>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <prvProcessTimerOrBlockTask+0x52>
 800523c:	2300      	movs	r3, #0
 800523e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005240:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <prvProcessTimerOrBlockTask+0x94>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	4619      	mov	r1, r3
 800524e:	f7fe fedf 	bl	8004010 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005252:	f7ff f99f 	bl	8004594 <xTaskResumeAll>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <prvProcessTimerOrBlockTask+0x98>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
    }
 800526c:	e001      	b.n	8005272 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800526e:	f7ff f991 	bl	8004594 <xTaskResumeAll>
    }
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000160 	.word	0x20000160
 8005280:	20000164 	.word	0x20000164
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005290:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <prvGetNextExpireTime+0x44>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <prvGetNextExpireTime+0x16>
 800529a:	2201      	movs	r2, #1
 800529c:	e000      	b.n	80052a0 <prvGetNextExpireTime+0x18>
 800529e:	2200      	movs	r2, #0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <prvGetNextExpireTime+0x44>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e001      	b.n	80052bc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80052bc:	68fb      	ldr	r3, [r7, #12]
    }
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	2000015c 	.word	0x2000015c

080052d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80052d8:	f7ff fa58 	bl	800478c <xTaskGetTickCount>
 80052dc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <prvSampleTimeNow+0x3c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d205      	bcs.n	80052f4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80052e8:	f000 f912 	bl	8005510 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e002      	b.n	80052fa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80052fa:	4a04      	ldr	r2, [pc, #16]	; (800530c <prvSampleTimeNow+0x3c>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005300:	68fb      	ldr	r3, [r7, #12]
    }
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	2000016c 	.word	0x2000016c

08005310 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d812      	bhi.n	800535c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e01b      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800534a:	4b10      	ldr	r3, [pc, #64]	; (800538c <prvInsertTimerInActiveList+0x7c>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7fe fb3a 	bl	80039ce <vListInsert>
 800535a:	e012      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d206      	bcs.n	8005372 <prvInsertTimerInActiveList+0x62>
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e007      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005372:	4b07      	ldr	r3, [pc, #28]	; (8005390 <prvInsertTimerInActiveList+0x80>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3304      	adds	r3, #4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f7fe fb26 	bl	80039ce <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005382:	697b      	ldr	r3, [r7, #20]
    }
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000160 	.word	0x20000160
 8005390:	2000015c 	.word	0x2000015c

08005394 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800539a:	e0a6      	b.n	80054ea <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f2c0 80a2 	blt.w	80054e8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fe fb43 	bl	8003a40 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff ff87 	bl	80052d0 <prvSampleTimeNow>
 80053c2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	f200 808e 	bhi.w	80054ea <prvProcessReceivedCommands+0x156>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <prvProcessReceivedCommands+0x40>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	080053f9 	.word	0x080053f9
 80053dc:	08005461 	.word	0x08005461
 80053e0:	08005475 	.word	0x08005475
 80053e4:	080054bf 	.word	0x080054bf
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	080053f9 	.word	0x080053f9
 80053f0:	08005461 	.word	0x08005461
 80053f4:	08005475 	.word	0x08005475
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	b2da      	uxtb	r2, r3
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	18d1      	adds	r1, r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	69f8      	ldr	r0, [r7, #28]
 8005418:	f7ff ff7a 	bl	8005310 <prvInsertTimerInActiveList>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d063      	beq.n	80054ea <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	4413      	add	r3, r2
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4619      	mov	r1, r3
 800543c:	69f8      	ldr	r0, [r7, #28]
 800543e:	f7ff fe71 	bl	8005124 <prvReloadTimer>
 8005442:	e008      	b.n	8005456 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	69f8      	ldr	r0, [r7, #28]
 800545c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800545e:	e044      	b.n	80054ea <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	b2da      	uxtb	r2, r3
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005472:	e03a      	b.n	80054ea <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	b2da      	uxtb	r2, r3
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	617b      	str	r3, [r7, #20]
    }
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	18d1      	adds	r1, r2, r3
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	69f8      	ldr	r0, [r7, #28]
 80054b8:	f7ff ff2a 	bl	8005310 <prvInsertTimerInActiveList>
                        break;
 80054bc:	e015      	b.n	80054ea <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d103      	bne.n	80054d4 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80054cc:	69f8      	ldr	r0, [r7, #28]
 80054ce:	f000 fb6d 	bl	8005bac <vPortFree>
 80054d2:	e00a      	b.n	80054ea <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80054e6:	e000      	b.n	80054ea <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80054e8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054ea:	4b08      	ldr	r3, [pc, #32]	; (800550c <prvProcessReceivedCommands+0x178>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f107 0108 	add.w	r1, r7, #8
 80054f2:	2200      	movs	r2, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fbcf 	bl	8003c98 <xQueueReceive>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f47f af4d 	bne.w	800539c <prvProcessReceivedCommands+0x8>
        }
    }
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000164 	.word	0x20000164

08005510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005516:	e009      	b.n	800552c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005518:	4b0e      	ldr	r3, [pc, #56]	; (8005554 <prvSwitchTimerLists+0x44>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005522:	f04f 31ff 	mov.w	r1, #4294967295
 8005526:	6838      	ldr	r0, [r7, #0]
 8005528:	f7ff fe1e 	bl	8005168 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <prvSwitchTimerLists+0x44>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005536:	4b07      	ldr	r3, [pc, #28]	; (8005554 <prvSwitchTimerLists+0x44>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <prvSwitchTimerLists+0x48>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a04      	ldr	r2, [pc, #16]	; (8005554 <prvSwitchTimerLists+0x44>)
 8005542:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005544:	4a04      	ldr	r2, [pc, #16]	; (8005558 <prvSwitchTimerLists+0x48>)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6013      	str	r3, [r2, #0]
    }
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	2000015c 	.word	0x2000015c
 8005558:	20000160 	.word	0x20000160

0800555c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005560:	f000 f962 	bl	8005828 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005564:	4b12      	ldr	r3, [pc, #72]	; (80055b0 <prvCheckForValidListAndQueue+0x54>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d11d      	bne.n	80055a8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800556c:	4811      	ldr	r0, [pc, #68]	; (80055b4 <prvCheckForValidListAndQueue+0x58>)
 800556e:	f7fe fa01 	bl	8003974 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005572:	4811      	ldr	r0, [pc, #68]	; (80055b8 <prvCheckForValidListAndQueue+0x5c>)
 8005574:	f7fe f9fe 	bl	8003974 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <prvCheckForValidListAndQueue+0x60>)
 800557a:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <prvCheckForValidListAndQueue+0x58>)
 800557c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800557e:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <prvCheckForValidListAndQueue+0x64>)
 8005580:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <prvCheckForValidListAndQueue+0x5c>)
 8005582:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005584:	2200      	movs	r2, #0
 8005586:	210c      	movs	r1, #12
 8005588:	200a      	movs	r0, #10
 800558a:	f7fe fb13 	bl	8003bb4 <xQueueGenericCreate>
 800558e:	4603      	mov	r3, r0
 8005590:	4a07      	ldr	r2, [pc, #28]	; (80055b0 <prvCheckForValidListAndQueue+0x54>)
 8005592:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005594:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <prvCheckForValidListAndQueue+0x54>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <prvCheckForValidListAndQueue+0x54>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4908      	ldr	r1, [pc, #32]	; (80055c4 <prvCheckForValidListAndQueue+0x68>)
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fce6 	bl	8003f74 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80055a8:	f000 f96e 	bl	8005888 <vPortExitCritical>
    }
 80055ac:	bf00      	nop
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000164 	.word	0x20000164
 80055b4:	20000134 	.word	0x20000134
 80055b8:	20000148 	.word	0x20000148
 80055bc:	2000015c 	.word	0x2000015c
 80055c0:	20000160 	.word	0x20000160
 80055c4:	08005ec0 	.word	0x08005ec0

080055c8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3b04      	subs	r3, #4
 80055d8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3b04      	subs	r3, #4
 80055e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f023 0201 	bic.w	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3b04      	subs	r3, #4
 80055f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80055f8:	4a0c      	ldr	r2, [pc, #48]	; (800562c <pxPortInitialiseStack+0x64>)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3b14      	subs	r3, #20
 8005602:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3b04      	subs	r3, #4
 800560e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f06f 0202 	mvn.w	r2, #2
 8005616:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3b20      	subs	r3, #32
 800561c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800561e:	68fb      	ldr	r3, [r7, #12]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	08005631 	.word	0x08005631

08005630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800563a:	4b12      	ldr	r3, [pc, #72]	; (8005684 <prvTaskExitError+0x54>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d00a      	beq.n	800565a <prvTaskExitError+0x2a>
        __asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
    }
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <prvTaskExitError+0x28>
        __asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60bb      	str	r3, [r7, #8]
    }
 800566c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800566e:	bf00      	nop
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0fc      	beq.n	8005670 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	20000010 	.word	0x20000010
	...

08005690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <pxCurrentTCBConst2>)
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	6808      	ldr	r0, [r1, #0]
 8005696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	f380 8809 	msr	PSP, r0
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8811 	msr	BASEPRI, r0
 80056aa:	4770      	bx	lr
 80056ac:	f3af 8000 	nop.w

080056b0 <pxCurrentTCBConst2>:
 80056b0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop

080056b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80056b8:	4808      	ldr	r0, [pc, #32]	; (80056dc <prvPortStartFirstTask+0x24>)
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f380 8808 	msr	MSP, r0
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f380 8814 	msr	CONTROL, r0
 80056ca:	b662      	cpsie	i
 80056cc:	b661      	cpsie	f
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	df00      	svc	0
 80056d8:	bf00      	nop
 80056da:	0000      	.short	0x0000
 80056dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop

080056e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056ea:	4b46      	ldr	r3, [pc, #280]	; (8005804 <xPortStartScheduler+0x120>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a46      	ldr	r2, [pc, #280]	; (8005808 <xPortStartScheduler+0x124>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d10a      	bne.n	800570a <xPortStartScheduler+0x26>
        __asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	613b      	str	r3, [r7, #16]
    }
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800570a:	4b3e      	ldr	r3, [pc, #248]	; (8005804 <xPortStartScheduler+0x120>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a3f      	ldr	r2, [pc, #252]	; (800580c <xPortStartScheduler+0x128>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d10a      	bne.n	800572a <xPortStartScheduler+0x46>
        __asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	60fb      	str	r3, [r7, #12]
    }
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800572a:	4b39      	ldr	r3, [pc, #228]	; (8005810 <xPortStartScheduler+0x12c>)
 800572c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4b31      	ldr	r3, [pc, #196]	; (8005814 <xPortStartScheduler+0x130>)
 8005750:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005752:	4b31      	ldr	r3, [pc, #196]	; (8005818 <xPortStartScheduler+0x134>)
 8005754:	2207      	movs	r2, #7
 8005756:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005758:	e009      	b.n	800576e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800575a:	4b2f      	ldr	r3, [pc, #188]	; (8005818 <xPortStartScheduler+0x134>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3b01      	subs	r3, #1
 8005760:	4a2d      	ldr	r2, [pc, #180]	; (8005818 <xPortStartScheduler+0x134>)
 8005762:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	b2db      	uxtb	r3, r3
 800576c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d0ef      	beq.n	800575a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800577a:	4b27      	ldr	r3, [pc, #156]	; (8005818 <xPortStartScheduler+0x134>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1c3 0307 	rsb	r3, r3, #7
 8005782:	2b04      	cmp	r3, #4
 8005784:	d00a      	beq.n	800579c <xPortStartScheduler+0xb8>
        __asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60bb      	str	r3, [r7, #8]
    }
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800579c:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <xPortStartScheduler+0x134>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <xPortStartScheduler+0x134>)
 80057a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057a6:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <xPortStartScheduler+0x134>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ae:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <xPortStartScheduler+0x134>)
 80057b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80057ba:	4b18      	ldr	r3, [pc, #96]	; (800581c <xPortStartScheduler+0x138>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a17      	ldr	r2, [pc, #92]	; (800581c <xPortStartScheduler+0x138>)
 80057c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80057c6:	4b15      	ldr	r3, [pc, #84]	; (800581c <xPortStartScheduler+0x138>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a14      	ldr	r2, [pc, #80]	; (800581c <xPortStartScheduler+0x138>)
 80057cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80057d2:	f000 f8db 	bl	800598c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <xPortStartScheduler+0x13c>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80057dc:	f000 f8fa 	bl	80059d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057e0:	4b10      	ldr	r3, [pc, #64]	; (8005824 <xPortStartScheduler+0x140>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a0f      	ldr	r2, [pc, #60]	; (8005824 <xPortStartScheduler+0x140>)
 80057e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80057ec:	f7ff ff64 	bl	80056b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80057f0:	f7ff f8f2 	bl	80049d8 <vTaskSwitchContext>
    prvTaskExitError();
 80057f4:	f7ff ff1c 	bl	8005630 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	e000ed00 	.word	0xe000ed00
 8005808:	410fc271 	.word	0x410fc271
 800580c:	410fc270 	.word	0x410fc270
 8005810:	e000e400 	.word	0xe000e400
 8005814:	20000170 	.word	0x20000170
 8005818:	20000174 	.word	0x20000174
 800581c:	e000ed20 	.word	0xe000ed20
 8005820:	20000010 	.word	0x20000010
 8005824:	e000ef34 	.word	0xe000ef34

08005828 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
        __asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	607b      	str	r3, [r7, #4]
    }
 8005840:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005842:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <vPortEnterCritical+0x58>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	4a0d      	ldr	r2, [pc, #52]	; (8005880 <vPortEnterCritical+0x58>)
 800584a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <vPortEnterCritical+0x58>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10f      	bne.n	8005874 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <vPortEnterCritical+0x5c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <vPortEnterCritical+0x4c>
        __asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	603b      	str	r3, [r7, #0]
    }
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <vPortEnterCritical+0x4a>
    }
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	20000010 	.word	0x20000010
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800588e:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <vPortExitCritical+0x50>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <vPortExitCritical+0x24>
        __asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	607b      	str	r3, [r7, #4]
    }
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <vPortExitCritical+0x50>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <vPortExitCritical+0x50>)
 80058b4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80058b6:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <vPortExitCritical+0x50>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d105      	bne.n	80058ca <vPortExitCritical+0x42>
 80058be:	2300      	movs	r3, #0
 80058c0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80058c8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000010 	.word	0x20000010
 80058dc:	00000000 	.word	0x00000000

080058e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80058e0:	f3ef 8009 	mrs	r0, PSP
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	4b15      	ldr	r3, [pc, #84]	; (8005940 <pxCurrentTCBConst>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	f01e 0f10 	tst.w	lr, #16
 80058f0:	bf08      	it	eq
 80058f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fa:	6010      	str	r0, [r2, #0]
 80058fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005904:	f380 8811 	msr	BASEPRI, r0
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f7ff f862 	bl	80049d8 <vTaskSwitchContext>
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f380 8811 	msr	BASEPRI, r0
 800591c:	bc09      	pop	{r0, r3}
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	6808      	ldr	r0, [r1, #0]
 8005922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005926:	f01e 0f10 	tst.w	lr, #16
 800592a:	bf08      	it	eq
 800592c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005930:	f380 8809 	msr	PSP, r0
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst>:
 8005940:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
        __asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	607b      	str	r3, [r7, #4]
    }
 8005960:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005962:	f7fe ff23 	bl	80047ac <xTaskIncrementTick>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <SysTick_Handler+0x40>)
 800596e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	f383 8811 	msr	BASEPRI, r3
    }
 800597e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <vPortSetupTimerInterrupt+0x34>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <vPortSetupTimerInterrupt+0x38>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <vPortSetupTimerInterrupt+0x3c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <vPortSetupTimerInterrupt+0x40>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	099b      	lsrs	r3, r3, #6
 80059a8:	4a09      	ldr	r2, [pc, #36]	; (80059d0 <vPortSetupTimerInterrupt+0x44>)
 80059aa:	3b01      	subs	r3, #1
 80059ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <vPortSetupTimerInterrupt+0x34>)
 80059b0:	2207      	movs	r2, #7
 80059b2:	601a      	str	r2, [r3, #0]
}
 80059b4:	bf00      	nop
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	e000e010 	.word	0xe000e010
 80059c4:	e000e018 	.word	0xe000e018
 80059c8:	20000000 	.word	0x20000000
 80059cc:	10624dd3 	.word	0x10624dd3
 80059d0:	e000e014 	.word	0xe000e014

080059d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80059d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059e4 <vPortEnableVFP+0x10>
 80059d8:	6801      	ldr	r1, [r0, #0]
 80059da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059de:	6001      	str	r1, [r0, #0]
 80059e0:	4770      	bx	lr
 80059e2:	0000      	.short	0x0000
 80059e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop

080059ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80059f8:	f7fe fdbe 	bl	8004578 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80059fc:	4b65      	ldr	r3, [pc, #404]	; (8005b94 <pvPortMalloc+0x1a8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005a04:	f000 f934 	bl	8005c70 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a08:	4b63      	ldr	r3, [pc, #396]	; (8005b98 <pvPortMalloc+0x1ac>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f040 80a7 	bne.w	8005b64 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02d      	beq.n	8005a78 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d227      	bcs.n	8005a78 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005a28:	2208      	movs	r2, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d021      	beq.n	8005a7e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f023 0307 	bic.w	r3, r3, #7
 8005a40:	3308      	adds	r3, #8
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d214      	bcs.n	8005a72 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f023 0307 	bic.w	r3, r3, #7
 8005a4e:	3308      	adds	r3, #8
 8005a50:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d010      	beq.n	8005a7e <pvPortMalloc+0x92>
        __asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	617b      	str	r3, [r7, #20]
    }
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a76:	e002      	b.n	8005a7e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	607b      	str	r3, [r7, #4]
 8005a7c:	e000      	b.n	8005a80 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a7e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d06e      	beq.n	8005b64 <pvPortMalloc+0x178>
 8005a86:	4b45      	ldr	r3, [pc, #276]	; (8005b9c <pvPortMalloc+0x1b0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d869      	bhi.n	8005b64 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005a90:	4b43      	ldr	r3, [pc, #268]	; (8005ba0 <pvPortMalloc+0x1b4>)
 8005a92:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005a94:	4b42      	ldr	r3, [pc, #264]	; (8005ba0 <pvPortMalloc+0x1b4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a9a:	e004      	b.n	8005aa6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d903      	bls.n	8005ab8 <pvPortMalloc+0xcc>
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f1      	bne.n	8005a9c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005ab8:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <pvPortMalloc+0x1a8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d050      	beq.n	8005b64 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	4413      	add	r3, r2
 8005aca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	1ad2      	subs	r2, r2, r3
 8005adc:	2308      	movs	r3, #8
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d91f      	bls.n	8005b24 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4413      	add	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <pvPortMalloc+0x120>
        __asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	613b      	str	r3, [r7, #16]
    }
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	1ad2      	subs	r2, r2, r3
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b1e:	69b8      	ldr	r0, [r7, #24]
 8005b20:	f000 f908 	bl	8005d34 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b24:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <pvPortMalloc+0x1b0>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	4a1b      	ldr	r2, [pc, #108]	; (8005b9c <pvPortMalloc+0x1b0>)
 8005b30:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b32:	4b1a      	ldr	r3, [pc, #104]	; (8005b9c <pvPortMalloc+0x1b0>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <pvPortMalloc+0x1b8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d203      	bcs.n	8005b46 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b3e:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <pvPortMalloc+0x1b0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <pvPortMalloc+0x1b8>)
 8005b44:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <pvPortMalloc+0x1ac>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <pvPortMalloc+0x1bc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <pvPortMalloc+0x1bc>)
 8005b62:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005b64:	f7fe fd16 	bl	8004594 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <pvPortMalloc+0x19c>
        __asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60fb      	str	r3, [r7, #12]
    }
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <pvPortMalloc+0x19a>
    return pvReturn;
 8005b88:	69fb      	ldr	r3, [r7, #28]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3728      	adds	r7, #40	; 0x28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20012d80 	.word	0x20012d80
 8005b98:	20012d94 	.word	0x20012d94
 8005b9c:	20012d84 	.word	0x20012d84
 8005ba0:	20012d78 	.word	0x20012d78
 8005ba4:	20012d88 	.word	0x20012d88
 8005ba8:	20012d8c 	.word	0x20012d8c

08005bac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d04d      	beq.n	8005c5a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	425b      	negs	r3, r3
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <vPortFree+0xb8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <vPortFree+0x44>
        __asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60fb      	str	r3, [r7, #12]
    }
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <vPortFree+0x62>
        __asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60bb      	str	r3, [r7, #8]
    }
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <vPortFree+0xb8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4013      	ands	r3, r2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01e      	beq.n	8005c5a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11a      	bne.n	8005c5a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <vPortFree+0xb8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	401a      	ands	r2, r3
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005c34:	f7fe fca0 	bl	8004578 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <vPortFree+0xbc>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4413      	add	r3, r2
 8005c42:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <vPortFree+0xbc>)
 8005c44:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c46:	6938      	ldr	r0, [r7, #16]
 8005c48:	f000 f874 	bl	8005d34 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005c4c:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <vPortFree+0xc0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	4a06      	ldr	r2, [pc, #24]	; (8005c6c <vPortFree+0xc0>)
 8005c54:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005c56:	f7fe fc9d 	bl	8004594 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005c5a:	bf00      	nop
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20012d94 	.word	0x20012d94
 8005c68:	20012d84 	.word	0x20012d84
 8005c6c:	20012d90 	.word	0x20012d90

08005c70 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c76:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005c7a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005c7c:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <prvHeapInit+0xac>)
 8005c7e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3307      	adds	r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0307 	bic.w	r3, r3, #7
 8005c96:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	4a1f      	ldr	r2, [pc, #124]	; (8005d1c <prvHeapInit+0xac>)
 8005ca0:	4413      	add	r3, r2
 8005ca2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <prvHeapInit+0xb0>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005cae:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <prvHeapInit+0xb0>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	4413      	add	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0307 	bic.w	r3, r3, #7
 8005cca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a15      	ldr	r2, [pc, #84]	; (8005d24 <prvHeapInit+0xb4>)
 8005cd0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005cd2:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <prvHeapInit+0xb4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <prvHeapInit+0xb4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	1ad2      	subs	r2, r2, r3
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <prvHeapInit+0xb4>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <prvHeapInit+0xb8>)
 8005cfe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <prvHeapInit+0xbc>)
 8005d06:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d08:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <prvHeapInit+0xc0>)
 8005d0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d0e:	601a      	str	r2, [r3, #0]
}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20000178 	.word	0x20000178
 8005d20:	20012d78 	.word	0x20012d78
 8005d24:	20012d80 	.word	0x20012d80
 8005d28:	20012d88 	.word	0x20012d88
 8005d2c:	20012d84 	.word	0x20012d84
 8005d30:	20012d94 	.word	0x20012d94

08005d34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d3c:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <prvInsertBlockIntoFreeList+0xac>)
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e002      	b.n	8005d48 <prvInsertBlockIntoFreeList+0x14>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d8f7      	bhi.n	8005d42 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d108      	bne.n	8005d76 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	441a      	add	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	441a      	add	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d118      	bne.n	8005dbc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <prvInsertBlockIntoFreeList+0xb0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d00d      	beq.n	8005db2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	441a      	add	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	e008      	b.n	8005dc4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <prvInsertBlockIntoFreeList+0xb0>)
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e003      	b.n	8005dc4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d002      	beq.n	8005dd2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20012d78 	.word	0x20012d78
 8005de4:	20012d80 	.word	0x20012d80

08005de8 <__libc_init_array>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	4d0d      	ldr	r5, [pc, #52]	; (8005e20 <__libc_init_array+0x38>)
 8005dec:	4c0d      	ldr	r4, [pc, #52]	; (8005e24 <__libc_init_array+0x3c>)
 8005dee:	1b64      	subs	r4, r4, r5
 8005df0:	10a4      	asrs	r4, r4, #2
 8005df2:	2600      	movs	r6, #0
 8005df4:	42a6      	cmp	r6, r4
 8005df6:	d109      	bne.n	8005e0c <__libc_init_array+0x24>
 8005df8:	4d0b      	ldr	r5, [pc, #44]	; (8005e28 <__libc_init_array+0x40>)
 8005dfa:	4c0c      	ldr	r4, [pc, #48]	; (8005e2c <__libc_init_array+0x44>)
 8005dfc:	f000 f82e 	bl	8005e5c <_init>
 8005e00:	1b64      	subs	r4, r4, r5
 8005e02:	10a4      	asrs	r4, r4, #2
 8005e04:	2600      	movs	r6, #0
 8005e06:	42a6      	cmp	r6, r4
 8005e08:	d105      	bne.n	8005e16 <__libc_init_array+0x2e>
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e10:	4798      	blx	r3
 8005e12:	3601      	adds	r6, #1
 8005e14:	e7ee      	b.n	8005df4 <__libc_init_array+0xc>
 8005e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1a:	4798      	blx	r3
 8005e1c:	3601      	adds	r6, #1
 8005e1e:	e7f2      	b.n	8005e06 <__libc_init_array+0x1e>
 8005e20:	08005ee8 	.word	0x08005ee8
 8005e24:	08005ee8 	.word	0x08005ee8
 8005e28:	08005ee8 	.word	0x08005ee8
 8005e2c:	08005eec 	.word	0x08005eec

08005e30 <memcpy>:
 8005e30:	440a      	add	r2, r1
 8005e32:	4291      	cmp	r1, r2
 8005e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e38:	d100      	bne.n	8005e3c <memcpy+0xc>
 8005e3a:	4770      	bx	lr
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e46:	4291      	cmp	r1, r2
 8005e48:	d1f9      	bne.n	8005e3e <memcpy+0xe>
 8005e4a:	bd10      	pop	{r4, pc}

08005e4c <memset>:
 8005e4c:	4402      	add	r2, r0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d100      	bne.n	8005e56 <memset+0xa>
 8005e54:	4770      	bx	lr
 8005e56:	f803 1b01 	strb.w	r1, [r3], #1
 8005e5a:	e7f9      	b.n	8005e50 <memset+0x4>

08005e5c <_init>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr

08005e68 <_fini>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	bf00      	nop
 8005e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6e:	bc08      	pop	{r3}
 8005e70:	469e      	mov	lr, r3
 8005e72:	4770      	bx	lr
