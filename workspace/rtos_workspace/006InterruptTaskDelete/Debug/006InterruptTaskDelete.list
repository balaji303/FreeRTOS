
006InterruptTaskDelete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080072a8  080072a8  000172a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007474  08007474  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800747c  0800747c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001449c  20000014  08007498  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144b0  08007498  000244b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f9d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cd  00000000  00000000  00039fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003e950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d26  00000000  00000000  0003fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158e7  00000000  00000000  0006387e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db753  00000000  00000000  00079165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001548b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a0  00000000  00000000  0015490c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007290 	.word	0x08007290

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08007290 	.word	0x08007290

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014408 	.word	0x20014408

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0b      	blt.n	80005c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 021f 	and.w	r2, r3, #31
 80005b4:	4907      	ldr	r1, [pc, #28]	; (80005d4 <__NVIC_EnableIRQ+0x38>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	095b      	lsrs	r3, r3, #5
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fb8f 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f883 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f8ef 	bl	80007c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0); //Set the zeroth bit to one //SEGGER UART
 80005ea:	4b34      	ldr	r3, [pc, #208]	; (80006bc <main+0xe4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a33      	ldr	r2, [pc, #204]	; (80006bc <main+0xe4>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005f6:	f004 fb95 	bl	8004d24 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start(); //Already done in UART

  status = xTaskCreate( LedGreenTask, "Led_Green_Task", 200, NULL , 2, &GreenTaskHandle );
 80005fa:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <main+0xe8>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	492f      	ldr	r1, [pc, #188]	; (80006c4 <main+0xec>)
 8000608:	482f      	ldr	r0, [pc, #188]	; (80006c8 <main+0xf0>)
 800060a:	f002 f9ef 	bl	80029ec <xTaskCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a2e      	ldr	r2, [pc, #184]	; (80006cc <main+0xf4>)
 8000612:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000614:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <main+0xf4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d00a      	beq.n	8000632 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000620:	f383 8811 	msr	BASEPRI, r3
 8000624:	f3bf 8f6f 	isb	sy
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800062e:	bf00      	nop
 8000630:	e7fe      	b.n	8000630 <main+0x58>

  Next_Task_Handle = GreenTaskHandle;
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <main+0xe8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <main+0xf8>)
 8000638:	6013      	str	r3, [r2, #0]

  status = xTaskCreate( LedRedTask, "Led_Red_Task", 200, NULL , 2, &RedTaskHandle );
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <main+0xfc>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	22c8      	movs	r2, #200	; 0xc8
 8000646:	4924      	ldr	r1, [pc, #144]	; (80006d8 <main+0x100>)
 8000648:	4824      	ldr	r0, [pc, #144]	; (80006dc <main+0x104>)
 800064a:	f002 f9cf 	bl	80029ec <xTaskCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <main+0xf4>)
 8000652:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <main+0xf4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d00a      	beq.n	8000672 <main+0x9a>
        __asm volatile
 800065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000660:	f383 8811 	msr	BASEPRI, r3
 8000664:	f3bf 8f6f 	isb	sy
 8000668:	f3bf 8f4f 	dsb	sy
 800066c:	60bb      	str	r3, [r7, #8]
    }
 800066e:	bf00      	nop
 8000670:	e7fe      	b.n	8000670 <main+0x98>
  status = xTaskCreate( LedYellowTask, "Led_Yellow_Task", 200, NULL , 2, &YellowTaskHandle );
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <main+0x108>)
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2302      	movs	r3, #2
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	22c8      	movs	r2, #200	; 0xc8
 800067e:	4919      	ldr	r1, [pc, #100]	; (80006e4 <main+0x10c>)
 8000680:	4819      	ldr	r0, [pc, #100]	; (80006e8 <main+0x110>)
 8000682:	f002 f9b3 	bl	80029ec <xTaskCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a10      	ldr	r2, [pc, #64]	; (80006cc <main+0xf4>)
 800068a:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <main+0xf4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d00a      	beq.n	80006aa <main+0xd2>
        __asm volatile
 8000694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000698:	f383 8811 	msr	BASEPRI, r3
 800069c:	f3bf 8f6f 	isb	sy
 80006a0:	f3bf 8f4f 	dsb	sy
 80006a4:	607b      	str	r3, [r7, #4]
    }
 80006a6:	bf00      	nop
 80006a8:	e7fe      	b.n	80006a8 <main+0xd0>
  NVIC_EnableIRQ(EXTI15_10_IRQn);      //Enable IRQ and the interrupt occurs btw pin 10 to 15 so that argument
 80006aa:	2028      	movs	r0, #40	; 0x28
 80006ac:	f7ff ff76 	bl	800059c <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006b0:	b662      	cpsie	i
}
 80006b2:	bf00      	nop
  __enable_irq();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 80006b4:	f002 fc1a 	bl	8002eec <vTaskStartScheduler>
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0xe0>
 80006ba:	bf00      	nop
 80006bc:	e0001000 	.word	0xe0001000
 80006c0:	2001437c 	.word	0x2001437c
 80006c4:	080072a8 	.word	0x080072a8
 80006c8:	0800097d 	.word	0x0800097d
 80006cc:	20014380 	.word	0x20014380
 80006d0:	20000030 	.word	0x20000030
 80006d4:	20014374 	.word	0x20014374
 80006d8:	080072b8 	.word	0x080072b8
 80006dc:	080009fd 	.word	0x080009fd
 80006e0:	20014378 	.word	0x20014378
 80006e4:	080072c8 	.word	0x080072c8
 80006e8:	08000a71 	.word	0x08000a71

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 fdc0 	bl	8007280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <SystemClock_Config+0xd4>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a29      	ldr	r2, [pc, #164]	; (80007c0 <SystemClock_Config+0xd4>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <SystemClock_Config+0xd4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <SystemClock_Config+0xd8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000738:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <SystemClock_Config+0xd8>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000760:	2310      	movs	r3, #16
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000764:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000768:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076a:	2304      	movs	r3, #4
 800076c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f8ba 	bl	80018f4 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000786:	f000 f9c3 	bl	8000b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2102      	movs	r1, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fdba 	bl	8001320 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007b2:	f000 f9ad 	bl	8000b10 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b4d      	ldr	r3, [pc, #308]	; (8000918 <MX_GPIO_Init+0x150>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a4c      	ldr	r2, [pc, #304]	; (8000918 <MX_GPIO_Init+0x150>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b4a      	ldr	r3, [pc, #296]	; (8000918 <MX_GPIO_Init+0x150>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b46      	ldr	r3, [pc, #280]	; (8000918 <MX_GPIO_Init+0x150>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a45      	ldr	r2, [pc, #276]	; (8000918 <MX_GPIO_Init+0x150>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b43      	ldr	r3, [pc, #268]	; (8000918 <MX_GPIO_Init+0x150>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <MX_GPIO_Init+0x150>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a3e      	ldr	r2, [pc, #248]	; (8000918 <MX_GPIO_Init+0x150>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <MX_GPIO_Init+0x150>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b38      	ldr	r3, [pc, #224]	; (8000918 <MX_GPIO_Init+0x150>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a37      	ldr	r2, [pc, #220]	; (8000918 <MX_GPIO_Init+0x150>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <MX_GPIO_Init+0x150>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000854:	4831      	ldr	r0, [pc, #196]	; (800091c <MX_GPIO_Init+0x154>)
 8000856:	f000 fd0b 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	4830      	ldr	r0, [pc, #192]	; (8000920 <MX_GPIO_Init+0x158>)
 8000860:	f000 fd06 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2140      	movs	r1, #64	; 0x40
 8000868:	482e      	ldr	r0, [pc, #184]	; (8000924 <MX_GPIO_Init+0x15c>)
 800086a:	f000 fd01 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_GPIO_Init+0x160>)
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4827      	ldr	r0, [pc, #156]	; (8000920 <MX_GPIO_Init+0x158>)
 8000884:	f000 fb60 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000898:	2307      	movs	r3, #7
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	481e      	ldr	r0, [pc, #120]	; (800091c <MX_GPIO_Init+0x154>)
 80008a4:	f000 fb50 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80008a8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <MX_GPIO_Init+0x154>)
 80008c2:	f000 fb41 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <MX_GPIO_Init+0x158>)
 80008de:	f000 fb33 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <MX_GPIO_Init+0x15c>)
 80008fa:	f000 fb25 	bl	8000f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2106      	movs	r1, #6
 8000902:	2028      	movs	r0, #40	; 0x28
 8000904:	f000 faf6 	bl	8000ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000908:	2028      	movs	r0, #40	; 0x28
 800090a:	f000 fb0f 	bl	8000f2c <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020800 	.word	0x40020800
 8000924:	40020400 	.word	0x40020400
 8000928:	10110000 	.word	0x10110000

0800092c <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void){
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af02      	add	r7, sp, #8
	BaseType_t pxHighPriorityTaskWoken;
	pxHighPriorityTaskWoken = pdFALSE;
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
	traceISR_ENTER();
 8000936:	f006 f94b 	bl	8006bd0 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(Next_Task_Handle,0,eNoAction,&pxHighPriorityTaskWoken);
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <button_interrupt_handler+0x48>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2300      	movs	r3, #0
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2300      	movs	r3, #0
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	f003 f908 	bl	8003b60 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(pxHighPriorityTaskWoken);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d007      	beq.n	8000966 <button_interrupt_handler+0x3a>
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <button_interrupt_handler+0x4c>)
 8000958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	f3bf 8f4f 	dsb	sy
 8000962:	f3bf 8f6f 	isb	sy
	traceISR_EXIT();
 8000966:	f006 f975 	bl	8006c54 <SEGGER_SYSVIEW_RecordExitISR>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000030 	.word	0x20000030
 8000978:	e000ed04 	.word	0xe000ed04

0800097c <LedGreenTask>:

void LedGreenTask(void *parameter){
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af02      	add	r7, sp, #8
 8000982:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	BaseType_t NotifyTaskStatus;
	last_wakeup_time = xTaskGetTickCount();
 8000984:	f002 fc22 	bl	80031cc <xTaskGetTickCount>
 8000988:	60f8      	str	r0, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("GREEN LED Task");
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <LedGreenTask+0x6c>)
 800098c:	f006 fbc8 	bl	8007120 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //D8 or PA9
 8000990:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000994:	4815      	ldr	r0, [pc, #84]	; (80009ec <LedGreenTask+0x70>)
 8000996:	f000 fc84 	bl	80012a2 <HAL_GPIO_TogglePin>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2300      	movs	r3, #0
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2000      	movs	r0, #0
 80009a8:	f003 f852 	bl	8003a50 <xTaskGenericNotifyWait>
 80009ac:	60b8      	str	r0, [r7, #8]

		if(NotifyTaskStatus == pdTRUE)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d1ea      	bne.n	800098a <LedGreenTask+0xe>
		{
			SEGGER_SYSVIEW_PrintfTarget("Deleting green led Task");
 80009b4:	480e      	ldr	r0, [pc, #56]	; (80009f0 <LedGreenTask+0x74>)
 80009b6:	f006 fbb3 	bl	8007120 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelay(pdMS_TO_TICKS(500));
 80009ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009be:	f002 fa5d 	bl	8002e7c <vTaskDelay>
			portENTER_CRITICAL();
 80009c2:	f003 fe79 	bl	80046b8 <vPortEnterCritical>
			Next_Task_Handle = YellowTaskHandle;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <LedGreenTask+0x78>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <LedGreenTask+0x7c>)
 80009cc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <LedGreenTask+0x70>)
 80009d6:	f000 fc4b 	bl	8001270 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 80009da:	f003 fe9d 	bl	8004718 <vPortExitCritical>
			vTaskDelete(NULL); //Self-Delete
 80009de:	2000      	movs	r0, #0
 80009e0:	f002 f99e 	bl	8002d20 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("GREEN LED Task");
 80009e4:	e7d1      	b.n	800098a <LedGreenTask+0xe>
 80009e6:	bf00      	nop
 80009e8:	080072d8 	.word	0x080072d8
 80009ec:	40020000 	.word	0x40020000
 80009f0:	080072e8 	.word	0x080072e8
 80009f4:	20014378 	.word	0x20014378
 80009f8:	20000030 	.word	0x20000030

080009fc <LedRedTask>:
		}

	}/*End of Infinite Loop*/
}

void LedRedTask(void *parameter){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	BaseType_t NotifyTaskStatus;
	last_wakeup_time = xTaskGetTickCount();
 8000a04:	f002 fbe2 	bl	80031cc <xTaskGetTickCount>
 8000a08:	60f8      	str	r0, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("RED LED Task");
 8000a0a:	4815      	ldr	r0, [pc, #84]	; (8000a60 <LedRedTask+0x64>)
 8000a0c:	f006 fb88 	bl	8007120 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //D10 or PB6
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <LedRedTask+0x68>)
 8000a14:	f000 fc45 	bl	80012a2 <HAL_GPIO_TogglePin>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f003 f813 	bl	8003a50 <xTaskGenericNotifyWait>
 8000a2a:	60b8      	str	r0, [r7, #8]
		if(NotifyTaskStatus == pdTRUE)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d1eb      	bne.n	8000a0a <LedRedTask+0xe>
		{
			SEGGER_SYSVIEW_PrintfTarget("Deleting red led Task");
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LedRedTask+0x6c>)
 8000a34:	f006 fb74 	bl	8007120 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelay(pdMS_TO_TICKS(500));
 8000a38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a3c:	f002 fa1e 	bl	8002e7c <vTaskDelay>
			portENTER_CRITICAL();
 8000a40:	f003 fe3a 	bl	80046b8 <vPortEnterCritical>
			Next_Task_Handle = NULL;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <LedRedTask+0x70>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <LedRedTask+0x68>)
 8000a50:	f000 fc0e 	bl	8001270 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000a54:	f003 fe60 	bl	8004718 <vPortExitCritical>
			vTaskDelete(NULL); //Self-Delete
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f002 f961 	bl	8002d20 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("RED LED Task");
 8000a5e:	e7d4      	b.n	8000a0a <LedRedTask+0xe>
 8000a60:	08007300 	.word	0x08007300
 8000a64:	40020400 	.word	0x40020400
 8000a68:	08007310 	.word	0x08007310
 8000a6c:	20000030 	.word	0x20000030

08000a70 <LedYellowTask>:
			//Do Nothing
		}
	}/*End of Infinite Loop*/
}

void LedYellowTask(void *parameter){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	BaseType_t NotifyTaskStatus;
	last_wakeup_time = xTaskGetTickCount();
 8000a78:	f002 fba8 	bl	80031cc <xTaskGetTickCount>
 8000a7c:	60f8      	str	r0, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("YELLOW LED Task");
 8000a7e:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <LedYellowTask+0x68>)
 8000a80:	f006 fb4e 	bl	8007120 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	4815      	ldr	r0, [pc, #84]	; (8000adc <LedYellowTask+0x6c>)
 8000a88:	f000 fc0b 	bl	80012a2 <HAL_GPIO_TogglePin>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2300      	movs	r3, #0
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f002 ffd9 	bl	8003a50 <xTaskGenericNotifyWait>
 8000a9e:	60b8      	str	r0, [r7, #8]
		if(NotifyTaskStatus == pdTRUE)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d1eb      	bne.n	8000a7e <LedYellowTask+0xe>
		{
			SEGGER_SYSVIEW_PrintfTarget("Deleting yellow led Task");
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <LedYellowTask+0x70>)
 8000aa8:	f006 fb3a 	bl	8007120 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelay(pdMS_TO_TICKS(500));
 8000aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab0:	f002 f9e4 	bl	8002e7c <vTaskDelay>
			portENTER_CRITICAL();
 8000ab4:	f003 fe00 	bl	80046b8 <vPortEnterCritical>
			Next_Task_Handle = RedTaskHandle;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <LedYellowTask+0x74>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LedYellowTask+0x78>)
 8000abe:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <LedYellowTask+0x6c>)
 8000ac6:	f000 fbd3 	bl	8001270 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000aca:	f003 fe25 	bl	8004718 <vPortExitCritical>
			vTaskDelete(NULL); //Self-Delete
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f002 f926 	bl	8002d20 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("YELLOW LED Task");
 8000ad4:	e7d3      	b.n	8000a7e <LedYellowTask+0xe>
 8000ad6:	bf00      	nop
 8000ad8:	08007328 	.word	0x08007328
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	08007338 	.word	0x08007338
 8000ae4:	20014374 	.word	0x20014374
 8000ae8:	20000030 	.word	0x20000030

08000aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afe:	f000 f921 	bl	8000d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40001000 	.word	0x40001000

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2036      	movs	r0, #54	; 0x36
 8000b86:	f000 f9b5 	bl	8000ef4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000b8a:	2036      	movs	r0, #54	; 0x36
 8000b8c:	f000 f9ce 	bl	8000f2c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <HAL_InitTick+0xa4>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <HAL_InitTick+0xa4>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_InitTick+0xa4>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bac:	f107 0210 	add.w	r2, r7, #16
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 fcb8 	bl	800152c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bbc:	f000 fca2 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <HAL_InitTick+0xa8>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9b      	lsrs	r3, r3, #18
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_InitTick+0xac>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <HAL_InitTick+0xb0>)
 8000bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_InitTick+0xac>)
 8000bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_InitTick+0xac>)
 8000be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_InitTick+0xac>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_InitTick+0xac>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <HAL_InitTick+0xac>)
 8000bf6:	f001 f8d7 	bl	8001da8 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d104      	bne.n	8000c0a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <HAL_InitTick+0xac>)
 8000c02:	f001 f906 	bl	8001e12 <HAL_TIM_Base_Start_IT>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	20014384 	.word	0x20014384
 8000c20:	40001000 	.word	0x40001000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	button_interrupt_handler();
 8000c5c:	f7ff fe66 	bl	800092c <button_interrupt_handler>
	//Clear the EXTI Pending Bit in the EXTI register
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c64:	f000 fb38 	bl	80012d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM6_DAC_IRQHandler+0x10>)
 8000c72:	f001 f8f2 	bl	8001e5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20014384 	.word	0x20014384

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <SystemInit+0x28>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <SystemInit+0x28>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SystemInit+0x28>)
 8000c96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cb2:	e003      	b.n	8000cbc <LoopCopyDataInit>

08000cb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cba:	3104      	adds	r1, #4

08000cbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cc4:	d3f6      	bcc.n	8000cb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cc8:	e002      	b.n	8000cd0 <LoopFillZerobss>

08000cca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ccc:	f842 3b04 	str.w	r3, [r2], #4

08000cd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cd4:	d3f9      	bcc.n	8000cca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cd6:	f7ff ffd3 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f006 fa91 	bl	8007200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fc7b 	bl	80005d8 <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ce8:	08007484 	.word	0x08007484
  ldr  r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cf0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000cf4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000cf8:	200144b0 	.word	0x200144b0

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_Init+0x40>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_Init+0x40>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x40>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f8d8 	bl	8000ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ff1e 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fef4 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	200143c4 	.word	0x200143c4

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200143c4 	.word	0x200143c4

08000d84 <__NVIC_SetPriorityGrouping>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff4c 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f06:	f7ff ff61 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff ffb1 	bl	8000e78 <NVIC_EncodePriority>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff80 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff54 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e165      	b.n	8001230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 8154 	bne.w	800122a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d00b      	beq.n	8000fa2 <HAL_GPIO_Init+0x5a>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f96:	2b11      	cmp	r3, #17
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0xfc>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b12      	cmp	r3, #18
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80ae 	beq.w	800122a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <HAL_GPIO_Init+0x300>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a5c      	ldr	r2, [pc, #368]	; (8001248 <HAL_GPIO_Init+0x300>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <HAL_GPIO_Init+0x300>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ea:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_GPIO_Init+0x304>)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x308>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d025      	beq.n	8001162 <HAL_GPIO_Init+0x21a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x30c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01f      	beq.n	800115e <HAL_GPIO_Init+0x216>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x310>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x212>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x314>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x20e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x318>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x20a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x31c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x206>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a49      	ldr	r2, [pc, #292]	; (8001268 <HAL_GPIO_Init+0x320>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x202>
 8001146:	2306      	movs	r3, #6
 8001148:	e00c      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 800114a:	2307      	movs	r3, #7
 800114c:	e00a      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 800114e:	2305      	movs	r3, #5
 8001150:	e008      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 8001152:	2304      	movs	r3, #4
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 8001156:	2303      	movs	r3, #3
 8001158:	e004      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 800115a:	2302      	movs	r3, #2
 800115c:	e002      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 8001162:	2300      	movs	r3, #0
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	f002 0203 	and.w	r2, r2, #3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	4093      	lsls	r3, r2
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001174:	4935      	ldr	r1, [pc, #212]	; (800124c <HAL_GPIO_Init+0x304>)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <HAL_GPIO_Init+0x324>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a6:	4a31      	ldr	r2, [pc, #196]	; (800126c <HAL_GPIO_Init+0x324>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_GPIO_Init+0x324>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <HAL_GPIO_Init+0x324>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_GPIO_Init+0x324>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_GPIO_Init+0x324>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_GPIO_Init+0x324>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001224:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_GPIO_Init+0x324>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	f67f ae96 	bls.w	8000f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40013800 	.word	0x40013800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40021400 	.word	0x40021400
 8001268:	40021800 	.word	0x40021800
 800126c:	40013c00 	.word	0x40013c00

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695a      	ldr	r2, [r3, #20]
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	401a      	ands	r2, r3
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d104      	bne.n	80012c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	041a      	lsls	r2, r3, #16
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f806 	bl	8001308 <HAL_GPIO_EXTI_Callback>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40013c00 	.word	0x40013c00

08001308 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0cc      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d90c      	bls.n	800135c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b65      	ldr	r3, [pc, #404]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	4b63      	ldr	r3, [pc, #396]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0b8      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d020      	beq.n	80013aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800137e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4b50      	ldr	r3, [pc, #320]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	494d      	ldr	r1, [pc, #308]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d044      	beq.n	8001440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d119      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e07f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d003      	beq.n	80013de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e06f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e067      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4934      	ldr	r1, [pc, #208]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001410:	f7ff fcac 	bl	8000d6c <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fca8 	bl	8000d6c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e04f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d20c      	bcs.n	8001468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e032      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4916      	ldr	r1, [pc, #88]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	490e      	ldr	r1, [pc, #56]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014a6:	f000 f873 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	490a      	ldr	r1, [pc, #40]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fb52 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08007438 	.word	0x08007438
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000004 	.word	0x20000004

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_RCC_GetHCLKFreq+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001508:	f7ff fff0 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4903      	ldr	r1, [pc, #12]	; (8001528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	08007448 	.word	0x08007448

0800152c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	220f      	movs	r2, #15
 800153a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_RCC_GetClockConfig+0x5c>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0203 	and.w	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_RCC_GetClockConfig+0x5c>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_RCC_GetClockConfig+0x5c>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_RCC_GetClockConfig+0x5c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_RCC_GetClockConfig+0x60>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 020f 	and.w	r2, r3, #15
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	601a      	str	r2, [r3, #0]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40023c00 	.word	0x40023c00

08001590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b088      	sub	sp, #32
 8001596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ac:	4bce      	ldr	r3, [pc, #824]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	f200 818d 	bhi.w	80018d4 <HAL_RCC_GetSysClockFreq+0x344>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <HAL_RCC_GetSysClockFreq+0x30>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015f5 	.word	0x080015f5
 80015c4:	080018d5 	.word	0x080018d5
 80015c8:	080018d5 	.word	0x080018d5
 80015cc:	080018d5 	.word	0x080018d5
 80015d0:	080015fb 	.word	0x080015fb
 80015d4:	080018d5 	.word	0x080018d5
 80015d8:	080018d5 	.word	0x080018d5
 80015dc:	080018d5 	.word	0x080018d5
 80015e0:	08001601 	.word	0x08001601
 80015e4:	080018d5 	.word	0x080018d5
 80015e8:	080018d5 	.word	0x080018d5
 80015ec:	080018d5 	.word	0x080018d5
 80015f0:	08001775 	.word	0x08001775
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015f4:	4bbd      	ldr	r3, [pc, #756]	; (80018ec <HAL_RCC_GetSysClockFreq+0x35c>)
 80015f6:	61bb      	str	r3, [r7, #24]
       break;
 80015f8:	e16f      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015fa:	4bbd      	ldr	r3, [pc, #756]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x360>)
 80015fc:	61bb      	str	r3, [r7, #24]
      break;
 80015fe:	e16c      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001600:	4bb9      	ldr	r3, [pc, #740]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001608:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800160a:	4bb7      	ldr	r3, [pc, #732]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d053      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001616:	4bb4      	ldr	r3, [pc, #720]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	099b      	lsrs	r3, r3, #6
 800161c:	461a      	mov	r2, r3
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	ea02 0400 	and.w	r4, r2, r0
 800162e:	603c      	str	r4, [r7, #0]
 8001630:	400b      	ands	r3, r1
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001638:	4620      	mov	r0, r4
 800163a:	4629      	mov	r1, r5
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	014b      	lsls	r3, r1, #5
 8001646:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800164a:	0142      	lsls	r2, r0, #5
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	4623      	mov	r3, r4
 8001652:	1ac0      	subs	r0, r0, r3
 8001654:	462b      	mov	r3, r5
 8001656:	eb61 0103 	sbc.w	r1, r1, r3
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	018b      	lsls	r3, r1, #6
 8001664:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001668:	0182      	lsls	r2, r0, #6
 800166a:	1a12      	subs	r2, r2, r0
 800166c:	eb63 0301 	sbc.w	r3, r3, r1
 8001670:	f04f 0000 	mov.w	r0, #0
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	00d9      	lsls	r1, r3, #3
 800167a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800167e:	00d0      	lsls	r0, r2, #3
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4621      	mov	r1, r4
 8001686:	1852      	adds	r2, r2, r1
 8001688:	4629      	mov	r1, r5
 800168a:	eb43 0101 	adc.w	r1, r3, r1
 800168e:	460b      	mov	r3, r1
 8001690:	f04f 0000 	mov.w	r0, #0
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	0259      	lsls	r1, r3, #9
 800169a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800169e:	0250      	lsls	r0, r2, #9
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	461a      	mov	r2, r3
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	f7fe fdf8 	bl	80002a4 <__aeabi_uldivmod>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4613      	mov	r3, r2
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	e04c      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016be:	4b8a      	ldr	r3, [pc, #552]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	461a      	mov	r2, r3
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	ea02 0a00 	and.w	sl, r2, r0
 80016d6:	ea03 0b01 	and.w	fp, r3, r1
 80016da:	4650      	mov	r0, sl
 80016dc:	4659      	mov	r1, fp
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	014b      	lsls	r3, r1, #5
 80016e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016ec:	0142      	lsls	r2, r0, #5
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	ebb0 000a 	subs.w	r0, r0, sl
 80016f6:	eb61 010b 	sbc.w	r1, r1, fp
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	018b      	lsls	r3, r1, #6
 8001704:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001708:	0182      	lsls	r2, r0, #6
 800170a:	1a12      	subs	r2, r2, r0
 800170c:	eb63 0301 	sbc.w	r3, r3, r1
 8001710:	f04f 0000 	mov.w	r0, #0
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	00d9      	lsls	r1, r3, #3
 800171a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800171e:	00d0      	lsls	r0, r2, #3
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	eb12 020a 	adds.w	r2, r2, sl
 8001728:	eb43 030b 	adc.w	r3, r3, fp
 800172c:	f04f 0000 	mov.w	r0, #0
 8001730:	f04f 0100 	mov.w	r1, #0
 8001734:	0299      	lsls	r1, r3, #10
 8001736:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800173a:	0290      	lsls	r0, r2, #10
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	461a      	mov	r2, r3
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	f7fe fdaa 	bl	80002a4 <__aeabi_uldivmod>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4613      	mov	r3, r2
 8001756:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001758:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	61bb      	str	r3, [r7, #24]
      break;
 8001772:	e0b2      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001774:	4b5c      	ldr	r3, [pc, #368]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800177c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177e:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d04d      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178a:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	099b      	lsrs	r3, r3, #6
 8001790:	461a      	mov	r2, r3
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	f240 10ff 	movw	r0, #511	; 0x1ff
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	ea02 0800 	and.w	r8, r2, r0
 80017a2:	ea03 0901 	and.w	r9, r3, r1
 80017a6:	4640      	mov	r0, r8
 80017a8:	4649      	mov	r1, r9
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	014b      	lsls	r3, r1, #5
 80017b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017b8:	0142      	lsls	r2, r0, #5
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	ebb0 0008 	subs.w	r0, r0, r8
 80017c2:	eb61 0109 	sbc.w	r1, r1, r9
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	018b      	lsls	r3, r1, #6
 80017d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017d4:	0182      	lsls	r2, r0, #6
 80017d6:	1a12      	subs	r2, r2, r0
 80017d8:	eb63 0301 	sbc.w	r3, r3, r1
 80017dc:	f04f 0000 	mov.w	r0, #0
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	00d9      	lsls	r1, r3, #3
 80017e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017ea:	00d0      	lsls	r0, r2, #3
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	eb12 0208 	adds.w	r2, r2, r8
 80017f4:	eb43 0309 	adc.w	r3, r3, r9
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	0259      	lsls	r1, r3, #9
 8001802:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001806:	0250      	lsls	r0, r2, #9
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	461a      	mov	r2, r3
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	f7fe fd44 	bl	80002a4 <__aeabi_uldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4613      	mov	r3, r2
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	e04a      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	461a      	mov	r2, r3
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	ea02 0400 	and.w	r4, r2, r0
 800183e:	ea03 0501 	and.w	r5, r3, r1
 8001842:	4620      	mov	r0, r4
 8001844:	4629      	mov	r1, r5
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	014b      	lsls	r3, r1, #5
 8001850:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001854:	0142      	lsls	r2, r0, #5
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	1b00      	subs	r0, r0, r4
 800185c:	eb61 0105 	sbc.w	r1, r1, r5
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	018b      	lsls	r3, r1, #6
 800186a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800186e:	0182      	lsls	r2, r0, #6
 8001870:	1a12      	subs	r2, r2, r0
 8001872:	eb63 0301 	sbc.w	r3, r3, r1
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	00d9      	lsls	r1, r3, #3
 8001880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001884:	00d0      	lsls	r0, r2, #3
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	1912      	adds	r2, r2, r4
 800188c:	eb45 0303 	adc.w	r3, r5, r3
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	0299      	lsls	r1, r3, #10
 800189a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800189e:	0290      	lsls	r0, r2, #10
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f7fe fcf8 	bl	80002a4 <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2
 80018ba:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x358>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	0f1b      	lsrs	r3, r3, #28
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	61bb      	str	r3, [r7, #24]
      break;
 80018d2:	e002      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetSysClockFreq+0x35c>)
 80018d6:	61bb      	str	r3, [r7, #24]
      break;
 80018d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018da:	69bb      	ldr	r3, [r7, #24]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	00f42400 	.word	0x00f42400
 80018f0:	007a1200 	.word	0x007a1200

080018f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8083 	beq.w	8001a14 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800190e:	4b95      	ldr	r3, [pc, #596]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b04      	cmp	r3, #4
 8001918:	d019      	beq.n	800194e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800191a:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001922:	2b08      	cmp	r3, #8
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001926:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001932:	d00c      	beq.n	800194e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001934:	4b8b      	ldr	r3, [pc, #556]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d112      	bne.n	8001966 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001940:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800194c:	d10b      	bne.n	8001966 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194e:	4b85      	ldr	r3, [pc, #532]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d05b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x11e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d157      	bne.n	8001a12 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e216      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x8a>
 8001970:	4b7c      	ldr	r3, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a7b      	ldr	r2, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e01d      	b.n	80019ba <HAL_RCC_OscConfig+0xc6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0xae>
 8001988:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a75      	ldr	r2, [pc, #468]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 800198e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a72      	ldr	r2, [pc, #456]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 800199a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e00b      	b.n	80019ba <HAL_RCC_OscConfig+0xc6>
 80019a2:	4b70      	ldr	r3, [pc, #448]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6f      	ldr	r2, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6c      	ldr	r2, [pc, #432]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d013      	beq.n	80019ea <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff f9d3 	bl	8000d6c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ca:	f7ff f9cf 	bl	8000d6c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1db      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019dc:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0xd6>
 80019e8:	e014      	b.n	8001a14 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ea:	f7ff f9bf 	bl	8000d6c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f2:	f7ff f9bb 	bl	8000d6c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b64      	cmp	r3, #100	; 0x64
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e1c7      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0xfe>
 8001a10:	e000      	b.n	8001a14 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d06f      	beq.n	8001b00 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d017      	beq.n	8001a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a2c:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d105      	bne.n	8001a44 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a38:	4b4a      	ldr	r3, [pc, #296]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a44:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d11c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a50:	4b44      	ldr	r3, [pc, #272]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d116      	bne.n	8001a8a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5c:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x180>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e18f      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4938      	ldr	r1, [pc, #224]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a88:	e03a      	b.n	8001b00 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d020      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a92:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f968 	bl	8000d6c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f964 	bl	8000d6c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e170      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4925      	ldr	r1, [pc, #148]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
 8001ad2:	e015      	b.n	8001b00 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f947 	bl	8000d6c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f943 	bl	8000d6c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e14f      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d037      	beq.n	8001b7c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d016      	beq.n	8001b42 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_RCC_OscConfig+0x278>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f927 	bl	8000d6c <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b22:	f7ff f923 	bl	8000d6c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e12f      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x22e>
 8001b40:	e01c      	b.n	8001b7c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_RCC_OscConfig+0x278>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff f910 	bl	8000d6c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4e:	e00f      	b.n	8001b70 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff f90c 	bl	8000d6c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d908      	bls.n	8001b70 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e118      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	42470000 	.word	0x42470000
 8001b6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	4b8a      	ldr	r3, [pc, #552]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e9      	bne.n	8001b50 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8097 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4b83      	ldr	r3, [pc, #524]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10f      	bne.n	8001bba <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b7f      	ldr	r3, [pc, #508]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a7e      	ldr	r2, [pc, #504]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b7c      	ldr	r3, [pc, #496]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d118      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc6:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a75      	ldr	r2, [pc, #468]	; (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f8cb 	bl	8000d6c <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bda:	f7ff f8c7 	bl	8000d6c <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0d3      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x31a>
 8001c00:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0c:	e01c      	b.n	8001c48 <HAL_RCC_OscConfig+0x354>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x33c>
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	4a60      	ldr	r2, [pc, #384]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6713      	str	r3, [r2, #112]	; 0x70
 8001c22:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	4a5d      	ldr	r2, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0x354>
 8001c30:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	4a59      	ldr	r2, [pc, #356]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3c:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c42:	f023 0304 	bic.w	r3, r3, #4
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d015      	beq.n	8001c7c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f88c 	bl	8000d6c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff f888 	bl	8000d6c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e092      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0ee      	beq.n	8001c58 <HAL_RCC_OscConfig+0x364>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f876 	bl	8000d6c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7ff f872 	bl	8000d6c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e07c      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ee      	bne.n	8001c84 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cac:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a3a      	ldr	r2, [pc, #232]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d068      	beq.n	8001d92 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d060      	beq.n	8001d8e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d145      	bne.n	8001d60 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd4:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_RCC_OscConfig+0x4b0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff f847 	bl	8000d6c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff f843 	bl	8000d6c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e04f      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	019b      	lsls	r3, r3, #6
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	041b      	lsls	r3, r3, #16
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	071b      	lsls	r3, r3, #28
 8001d2c:	491b      	ldr	r1, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_RCC_OscConfig+0x4b0>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff f818 	bl	8000d6c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff f814 	bl	8000d6c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e020      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x44c>
 8001d5e:	e018      	b.n	8001d92 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_RCC_OscConfig+0x4b0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff f801 	bl	8000d6c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7fe fffd 	bl	8000d6c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e009      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_OscConfig+0x4a8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x47a>
 8001d8c:	e001      	b.n	8001d92 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40007000 	.word	0x40007000
 8001da4:	42470060 	.word	0x42470060

08001da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e01d      	b.n	8001df6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f815 	bl	8001dfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f000 f968 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	d007      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d122      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d11b      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f06f 0202 	mvn.w	r2, #2
 8001e86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8ee 	bl	800207e <HAL_TIM_IC_CaptureCallback>
 8001ea2:	e005      	b.n	8001eb0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f8e0 	bl	800206a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8f1 	bl	8002092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d122      	bne.n	8001f0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d11b      	bne.n	8001f0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f06f 0204 	mvn.w	r2, #4
 8001eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8c4 	bl	800207e <HAL_TIM_IC_CaptureCallback>
 8001ef6:	e005      	b.n	8001f04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8b6 	bl	800206a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8c7 	bl	8002092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d122      	bne.n	8001f5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11b      	bne.n	8001f5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f06f 0208 	mvn.w	r2, #8
 8001f2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f89a 	bl	800207e <HAL_TIM_IC_CaptureCallback>
 8001f4a:	e005      	b.n	8001f58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f88c 	bl	800206a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f89d 	bl	8002092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	d122      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d11b      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f06f 0210 	mvn.w	r2, #16
 8001f82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2208      	movs	r2, #8
 8001f88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f870 	bl	800207e <HAL_TIM_IC_CaptureCallback>
 8001f9e:	e005      	b.n	8001fac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f862 	bl	800206a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f873 	bl	8002092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d10e      	bne.n	8001fde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f06f 0201 	mvn.w	r2, #1
 8001fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7fe fd87 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe8:	2b80      	cmp	r3, #128	; 0x80
 8001fea:	d10e      	bne.n	800200a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d107      	bne.n	800200a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f903 	bl	8002210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d10e      	bne.n	8002036 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d107      	bne.n	8002036 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800202e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f838 	bl	80020a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b20      	cmp	r3, #32
 8002042:	d10e      	bne.n	8002062 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b20      	cmp	r3, #32
 8002050:	d107      	bne.n	8002062 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f06f 0220 	mvn.w	r2, #32
 800205a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8cd 	bl	80021fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <TIM_Base_SetConfig+0x114>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d00f      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3d      	ldr	r2, [pc, #244]	; (80021d4 <TIM_Base_SetConfig+0x118>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00b      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <TIM_Base_SetConfig+0x11c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d007      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <TIM_Base_SetConfig+0x120>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <TIM_Base_SetConfig+0x124>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d108      	bne.n	800210e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2f      	ldr	r2, [pc, #188]	; (80021d0 <TIM_Base_SetConfig+0x114>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d02b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211c:	d027      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <TIM_Base_SetConfig+0x118>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d023      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <TIM_Base_SetConfig+0x11c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2a      	ldr	r2, [pc, #168]	; (80021dc <TIM_Base_SetConfig+0x120>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a29      	ldr	r2, [pc, #164]	; (80021e0 <TIM_Base_SetConfig+0x124>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d017      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <TIM_Base_SetConfig+0x128>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <TIM_Base_SetConfig+0x12c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00f      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a26      	ldr	r2, [pc, #152]	; (80021ec <TIM_Base_SetConfig+0x130>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <TIM_Base_SetConfig+0x134>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <TIM_Base_SetConfig+0x138>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <TIM_Base_SetConfig+0x13c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <TIM_Base_SetConfig+0x114>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <TIM_Base_SetConfig+0xf8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <TIM_Base_SetConfig+0x124>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d103      	bne.n	80021bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	615a      	str	r2, [r3, #20]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800
 80021dc:	40000c00 	.word	0x40000c00
 80021e0:	40010400 	.word	0x40010400
 80021e4:	40014000 	.word	0x40014000
 80021e8:	40014400 	.word	0x40014400
 80021ec:	40014800 	.word	0x40014800
 80021f0:	40001800 	.word	0x40001800
 80021f4:	40001c00 	.word	0x40001c00
 80021f8:	40002000 	.word	0x40002000

080021fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0208 	add.w	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f103 0208 	add.w	r2, r3, #8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f103 0208 	add.w	r2, r3, #8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	601a      	str	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d103      	bne.n	80022e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e00c      	b.n	8002300 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3308      	adds	r3, #8
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e002      	b.n	80022f4 <vListInsert+0x2e>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d2f6      	bcs.n	80022ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6892      	ldr	r2, [r2, #8]
 800234e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6852      	ldr	r2, [r2, #4]
 8002358:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d103      	bne.n	800236c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002396:	2301      	movs	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <xQueueGenericReset+0x2e>
        __asm volatile
 80023a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a8:	f383 8811 	msr	BASEPRI, r3
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	60fb      	str	r3, [r7, #12]
    }
 80023b6:	bf00      	nop
 80023b8:	e7fe      	b.n	80023b8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d05d      	beq.n	800247c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d059      	beq.n	800247c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	2100      	movs	r1, #0
 80023d2:	fba3 2302 	umull	r2, r3, r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d000      	beq.n	80023dc <xQueueGenericReset+0x50>
 80023da:	2101      	movs	r1, #1
 80023dc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d14c      	bne.n	800247c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80023e2:	f002 f969 	bl	80046b8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	6939      	ldr	r1, [r7, #16]
 80023f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	441a      	add	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2200      	movs	r2, #0
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	3b01      	subs	r3, #1
 8002414:	6939      	ldr	r1, [r7, #16]
 8002416:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	441a      	add	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	22ff      	movs	r2, #255	; 0xff
 8002426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d114      	bne.n	8002462 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01a      	beq.n	8002476 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	3310      	adds	r3, #16
 8002444:	4618      	mov	r0, r3
 8002446:	f001 f8d3 	bl	80035f0 <xTaskRemoveFromEventList>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d012      	beq.n	8002476 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <xQueueGenericReset+0x11c>)
 8002452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	e009      	b.n	8002476 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	3310      	adds	r3, #16
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fedc 	bl	8002224 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	3324      	adds	r3, #36	; 0x24
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fed7 	bl	8002224 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002476:	f002 f94f 	bl	8004718 <vPortExitCritical>
 800247a:	e001      	b.n	8002480 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <xQueueGenericReset+0x110>
        __asm volatile
 8002486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248a:	f383 8811 	msr	BASEPRI, r3
 800248e:	f3bf 8f6f 	isb	sy
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	60bb      	str	r3, [r7, #8]
    }
 8002498:	bf00      	nop
 800249a:	e7fe      	b.n	800249a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800249c:	697b      	ldr	r3, [r7, #20]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000ed04 	.word	0xe000ed04

080024ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	; 0x28
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d02e      	beq.n	8002522 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024c4:	2100      	movs	r1, #0
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	fba3 2302 	umull	r2, r3, r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d000      	beq.n	80024d4 <xQueueGenericCreate+0x28>
 80024d2:	2101      	movs	r1, #1
 80024d4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d123      	bne.n	8002522 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024e2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80024e6:	d81c      	bhi.n	8002522 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	3350      	adds	r3, #80	; 0x50
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fa08 	bl	800490c <pvPortMalloc>
 80024fc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01c      	beq.n	800253e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3350      	adds	r3, #80	; 0x50
 800250c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800250e:	79fa      	ldrb	r2, [r7, #7]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f814 	bl	8002548 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002520:	e00d      	b.n	800253e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xQueueGenericCreate+0x92>
        __asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	613b      	str	r3, [r7, #16]
    }
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800253e:	69fb      	ldr	r3, [r7, #28]
    }
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e002      	b.n	800256a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002576:	2101      	movs	r1, #1
 8002578:	69b8      	ldr	r0, [r7, #24]
 800257a:	f7ff ff07 	bl	800238c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	2073      	movs	r0, #115	; 0x73
 800258e:	f003 fe9f 	bl	80062d0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b08f      	sub	sp, #60	; 0x3c
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <xQueueReceive+0x30>
        __asm volatile
 80025b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	623b      	str	r3, [r7, #32]
    }
 80025c8:	bf00      	nop
 80025ca:	e7fe      	b.n	80025ca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <xQueueReceive+0x3e>
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <xQueueReceive+0x42>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <xQueueReceive+0x44>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <xQueueReceive+0x5e>
        __asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	61fb      	str	r3, [r7, #28]
    }
 80025f6:	bf00      	nop
 80025f8:	e7fe      	b.n	80025f8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025fa:	f001 fa0b 	bl	8003a14 <xTaskGetSchedulerState>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <xQueueReceive+0x6e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <xQueueReceive+0x72>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <xQueueReceive+0x74>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10a      	bne.n	800262a <xQueueReceive+0x8e>
        __asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	61bb      	str	r3, [r7, #24]
    }
 8002626:	bf00      	nop
 8002628:	e7fe      	b.n	8002628 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800262a:	f002 f845 	bl	80046b8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	2b00      	cmp	r3, #0
 8002638:	d02f      	beq.n	800269a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800263e:	f000 f8bd 	bl	80027bc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	4618      	mov	r0, r3
 8002646:	f004 fc7f 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 800264a:	4604      	mov	r4, r0
 800264c:	2000      	movs	r0, #0
 800264e:	f004 fc7b 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2101      	movs	r1, #1
 8002658:	9100      	str	r1, [sp, #0]
 800265a:	4621      	mov	r1, r4
 800265c:	205c      	movs	r0, #92	; 0x5c
 800265e:	f003 fead 	bl	80063bc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002668:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00f      	beq.n	8002692 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	3310      	adds	r3, #16
 8002676:	4618      	mov	r0, r3
 8002678:	f000 ffba 	bl	80035f0 <xTaskRemoveFromEventList>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002682:	4b4d      	ldr	r3, [pc, #308]	; (80027b8 <xQueueReceive+0x21c>)
 8002684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002692:	f002 f841 	bl	8004718 <vPortExitCritical>
                return pdPASS;
 8002696:	2301      	movs	r3, #1
 8002698:	e08a      	b.n	80027b0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d113      	bne.n	80026c8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026a0:	f002 f83a 	bl	8004718 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fc4e 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 80026ac:	4604      	mov	r4, r0
 80026ae:	2000      	movs	r0, #0
 80026b0:	f004 fc4a 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 80026b4:	4602      	mov	r2, r0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2101      	movs	r1, #1
 80026ba:	9100      	str	r1, [sp, #0]
 80026bc:	4621      	mov	r1, r4
 80026be:	205c      	movs	r0, #92	; 0x5c
 80026c0:	f003 fe7c 	bl	80063bc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e073      	b.n	80027b0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 f864 	bl	80037a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026d8:	2301      	movs	r3, #1
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026dc:	f002 f81c 	bl	8004718 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026e0:	f000 fc66 	bl	8002fb0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026e4:	f001 ffe8 	bl	80046b8 <vPortEnterCritical>
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d103      	bne.n	80026fe <xQueueReceive+0x162>
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002704:	b25b      	sxtb	r3, r3
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d103      	bne.n	8002714 <xQueueReceive+0x178>
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002714:	f002 f800 	bl	8004718 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002718:	1d3a      	adds	r2, r7, #4
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f001 f853 	bl	80037cc <xTaskCheckForTimeOut>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d124      	bne.n	8002776 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800272c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800272e:	f000 f8bd 	bl	80028ac <prvIsQueueEmpty>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d018      	beq.n	800276a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	3324      	adds	r3, #36	; 0x24
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fee9 	bl	8003518 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002748:	f000 f85e 	bl	8002808 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800274c:	f000 fc3e 	bl	8002fcc <xTaskResumeAll>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	f47f af69 	bne.w	800262a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <xQueueReceive+0x21c>)
 800275a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	e75f      	b.n	800262a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800276a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800276c:	f000 f84c 	bl	8002808 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002770:	f000 fc2c 	bl	8002fcc <xTaskResumeAll>
 8002774:	e759      	b.n	800262a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002778:	f000 f846 	bl	8002808 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800277c:	f000 fc26 	bl	8002fcc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002782:	f000 f893 	bl	80028ac <prvIsQueueEmpty>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	f43f af4e 	beq.w	800262a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	4618      	mov	r0, r3
 8002792:	f004 fbd9 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 8002796:	4604      	mov	r4, r0
 8002798:	2000      	movs	r0, #0
 800279a:	f004 fbd5 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 800279e:	4602      	mov	r2, r0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2101      	movs	r1, #1
 80027a4:	9100      	str	r1, [sp, #0]
 80027a6:	4621      	mov	r1, r4
 80027a8:	205c      	movs	r0, #92	; 0x5c
 80027aa:	f003 fe07 	bl	80063bc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80027ae:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3734      	adds	r7, #52	; 0x34
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd90      	pop	{r4, r7, pc}
 80027b8:	e000ed04 	.word	0xe000ed04

080027bc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d018      	beq.n	8002800 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	441a      	add	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d303      	bcc.n	80027f0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68d9      	ldr	r1, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	461a      	mov	r2, r3
 80027fa:	6838      	ldr	r0, [r7, #0]
 80027fc:	f004 fd32 	bl	8007264 <memcpy>
    }
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002810:	f001 ff52 	bl	80046b8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800281a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800281c:	e011      	b.n	8002842 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3324      	adds	r3, #36	; 0x24
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fee0 	bl	80035f0 <xTaskRemoveFromEventList>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002836:	f001 f82f 	bl	8003898 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	3b01      	subs	r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	dce9      	bgt.n	800281e <prvUnlockQueue+0x16>
 800284a:	e000      	b.n	800284e <prvUnlockQueue+0x46>
                        break;
 800284c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	22ff      	movs	r2, #255	; 0xff
 8002852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002856:	f001 ff5f 	bl	8004718 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800285a:	f001 ff2d 	bl	80046b8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002864:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002866:	e011      	b.n	800288c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3310      	adds	r3, #16
 8002874:	4618      	mov	r0, r3
 8002876:	f000 febb 	bl	80035f0 <xTaskRemoveFromEventList>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002880:	f001 f80a 	bl	8003898 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	3b01      	subs	r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800288c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002890:	2b00      	cmp	r3, #0
 8002892:	dce9      	bgt.n	8002868 <prvUnlockQueue+0x60>
 8002894:	e000      	b.n	8002898 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002896:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	22ff      	movs	r2, #255	; 0xff
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80028a0:	f001 ff3a 	bl	8004718 <vPortExitCritical>
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028b4:	f001 ff00 	bl	80046b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e001      	b.n	80028ca <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028ca:	f001 ff25 	bl	8004718 <vPortExitCritical>

    return xReturn;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <vQueueAddToRegistry+0x26>
        __asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	60fb      	str	r3, [r7, #12]
    }
 80028fa:	bf00      	nop
 80028fc:	e7fe      	b.n	80028fc <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d024      	beq.n	8002952 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e01e      	b.n	800294c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <vQueueAddToRegistry+0xa8>)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d105      	bne.n	800292a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <vQueueAddToRegistry+0xa8>)
 8002924:	4413      	add	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
                    break;
 8002928:	e013      	b.n	8002952 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <vQueueAddToRegistry+0x6e>
 8002930:	4a13      	ldr	r2, [pc, #76]	; (8002980 <vQueueAddToRegistry+0xa8>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d104      	bne.n	8002946 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4a0f      	ldr	r2, [pc, #60]	; (8002980 <vQueueAddToRegistry+0xa8>)
 8002942:	4413      	add	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3301      	adds	r3, #1
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b07      	cmp	r3, #7
 8002950:	d9dd      	bls.n	800290e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00f      	beq.n	8002978 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 faee 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 800296c:	4601      	mov	r1, r0
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	2071      	movs	r0, #113	; 0x71
 8002974:	f003 fc52 	bl	800621c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002978:	bf00      	nop
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	200143c8 	.word	0x200143c8

08002984 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002994:	f001 fe90 	bl	80046b8 <vPortEnterCritical>
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800299e:	b25b      	sxtb	r3, r3
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d103      	bne.n	80029ae <vQueueWaitForMessageRestricted+0x2a>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d103      	bne.n	80029c4 <vQueueWaitForMessageRestricted+0x40>
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029c4:	f001 fea8 	bl	8004718 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3324      	adds	r3, #36	; 0x24
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fdc1 	bl	8003560 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff12 	bl	8002808 <prvUnlockQueue>
    }
 80029e4:	bf00      	nop
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af04      	add	r7, sp, #16
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 ff83 	bl	800490c <pvPortMalloc>
 8002a06:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a0e:	2058      	movs	r0, #88	; 0x58
 8002a10:	f001 ff7c 	bl	800490c <pvPortMalloc>
 8002a14:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
 8002a22:	e005      	b.n	8002a30 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002a24:	6978      	ldr	r0, [r7, #20]
 8002a26:	f002 f851 	bl	8004acc <vPortFree>
 8002a2a:	e001      	b.n	8002a30 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d013      	beq.n	8002a5e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9303      	str	r3, [sp, #12]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f80e 	bl	8002a6e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a52:	69f8      	ldr	r0, [r7, #28]
 8002a54:	f000 f8b0 	bl	8002bb8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e002      	b.n	8002a64 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a64:	69bb      	ldr	r3, [r7, #24]
    }
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b088      	sub	sp, #32
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	461a      	mov	r2, r3
 8002a86:	21a5      	movs	r1, #165	; 0xa5
 8002a88:	f004 fbfa 	bl	8007280 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a96:	3b01      	subs	r3, #1
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f023 0307 	bic.w	r3, r3, #7
 8002aa4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	617b      	str	r3, [r7, #20]
    }
 8002ac2:	bf00      	nop
 8002ac4:	e7fe      	b.n	8002ac4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01f      	beq.n	8002b0c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	e012      	b.n	8002af8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	7819      	ldrb	r1, [r3, #0]
 8002ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	3334      	adds	r3, #52	; 0x34
 8002ae2:	460a      	mov	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	d9e9      	bls.n	8002ad2 <prvInitialiseNewTask+0x64>
 8002afe:	e000      	b.n	8002b02 <prvInitialiseNewTask+0x94>
            {
                break;
 8002b00:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b0a:	e003      	b.n	8002b14 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d90a      	bls.n	8002b30 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	613b      	str	r3, [r7, #16]
    }
 8002b2c:	bf00      	nop
 8002b2e:	e7fe      	b.n	8002b2e <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d901      	bls.n	8002b3a <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b36:	2304      	movs	r3, #4
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b44:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	2200      	movs	r2, #0
 8002b4a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	3304      	adds	r3, #4
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fb87 	bl	8002264 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	3318      	adds	r3, #24
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fb82 	bl	8002264 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b64:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	f1c3 0205 	rsb	r2, r3, #5
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	3350      	adds	r3, #80	; 0x50
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 fb7e 	bl	8007280 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	3354      	adds	r3, #84	; 0x54
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 fb77 	bl	8007280 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	69b8      	ldr	r0, [r7, #24]
 8002b98:	f001 fc60 	bl	800445c <pxPortInitialiseStack>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bae:	bf00      	nop
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002bc0:	f001 fd7a 	bl	80046b8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002bc4:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <prvAddNewTaskToReadyList+0x14c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4a4e      	ldr	r2, [pc, #312]	; (8002d04 <prvAddNewTaskToReadyList+0x14c>)
 8002bcc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <prvAddNewTaskToReadyList+0x150>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002bd6:	4a4c      	ldr	r2, [pc, #304]	; (8002d08 <prvAddNewTaskToReadyList+0x150>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bdc:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <prvAddNewTaskToReadyList+0x14c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d110      	bne.n	8002c06 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002be4:	f000 fe7c 	bl	80038e0 <prvInitialiseTaskLists>
 8002be8:	e00d      	b.n	8002c06 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002bea:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <prvAddNewTaskToReadyList+0x154>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bf2:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <prvAddNewTaskToReadyList+0x150>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d802      	bhi.n	8002c06 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c00:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <prvAddNewTaskToReadyList+0x150>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c06:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <prvAddNewTaskToReadyList+0x158>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4a40      	ldr	r2, [pc, #256]	; (8002d10 <prvAddNewTaskToReadyList+0x158>)
 8002c0e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c10:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <prvAddNewTaskToReadyList+0x158>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <prvAddNewTaskToReadyList+0x94>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f004 f86b 	bl	8006cfc <SEGGER_SYSVIEW_OnTaskCreate>
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	461d      	mov	r5, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461c      	mov	r4, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	1ae3      	subs	r3, r4, r3
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	462b      	mov	r3, r5
 8002c48:	f002 f906 	bl	8004e58 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 f8d8 	bl	8006e04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	2201      	movs	r2, #1
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <prvAddNewTaskToReadyList+0x15c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <prvAddNewTaskToReadyList+0x15c>)
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6a:	492b      	ldr	r1, [pc, #172]	; (8002d18 <prvAddNewTaskToReadyList+0x160>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3304      	adds	r3, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	3204      	adds	r2, #4
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	1d1a      	adds	r2, r3, #4
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <prvAddNewTaskToReadyList+0x160>)
 8002caa:	441a      	add	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	4918      	ldr	r1, [pc, #96]	; (8002d18 <prvAddNewTaskToReadyList+0x160>)
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	4814      	ldr	r0, [pc, #80]	; (8002d18 <prvAddNewTaskToReadyList+0x160>)
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4403      	add	r3, r0
 8002cd0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cd2:	f001 fd21 	bl	8004718 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <prvAddNewTaskToReadyList+0x154>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00e      	beq.n	8002cfc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <prvAddNewTaskToReadyList+0x150>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d207      	bcs.n	8002cfc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <prvAddNewTaskToReadyList+0x164>)
 8002cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bdb0      	pop	{r4, r5, r7, pc}
 8002d04:	2000010c 	.word	0x2000010c
 8002d08:	20000034 	.word	0x20000034
 8002d0c:	20000118 	.word	0x20000118
 8002d10:	20000128 	.word	0x20000128
 8002d14:	20000114 	.word	0x20000114
 8002d18:	20000038 	.word	0x20000038
 8002d1c:	e000ed04 	.word	0xe000ed04

08002d20 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002d28:	f001 fcc6 	bl	80046b8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <vTaskDelete+0x18>
 8002d32:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <vTaskDelete+0x134>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	e000      	b.n	8002d3a <vTaskDelete+0x1a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff faf9 	bl	8002338 <uxListRemove>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d115      	bne.n	8002d78 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	4941      	ldr	r1, [pc, #260]	; (8002e58 <vTaskDelete+0x138>)
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <vTaskDelete+0x58>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	2201      	movs	r2, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <vTaskDelete+0x13c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4013      	ands	r3, r2
 8002d74:	4a39      	ldr	r2, [pc, #228]	; (8002e5c <vTaskDelete+0x13c>)
 8002d76:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3318      	adds	r3, #24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fad7 	bl	8002338 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <vTaskDelete+0x140>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a33      	ldr	r2, [pc, #204]	; (8002e60 <vTaskDelete+0x140>)
 8002d92:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002d94:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <vTaskDelete+0x134>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d118      	bne.n	8002dd0 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4619      	mov	r1, r3
 8002da4:	482f      	ldr	r0, [pc, #188]	; (8002e64 <vTaskDelete+0x144>)
 8002da6:	f7ff fa6a 	bl	800227e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002daa:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <vTaskDelete+0x148>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <vTaskDelete+0x148>)
 8002db2:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 f8c6 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	2022      	movs	r0, #34	; 0x22
 8002dc2:	f003 f9ef 	bl	80061a4 <SEGGER_SYSVIEW_RecordU32>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 f8ad 	bl	8004f28 <SYSVIEW_DeleteTask>
 8002dce:	e013      	b.n	8002df8 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002dd0:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <vTaskDelete+0x14c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <vTaskDelete+0x14c>)
 8002dd8:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f004 f8b3 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	2022      	movs	r0, #34	; 0x22
 8002de8:	f003 f9dc 	bl	80061a4 <SEGGER_SYSVIEW_RecordU32>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 f89a 	bl	8004f28 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002df4:	f000 fdf2 	bl	80039dc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002df8:	f001 fc8e 	bl	8004718 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002dfc:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <vTaskDelete+0x134>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d002      	beq.n	8002e0c <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fdd8 	bl	80039bc <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <vTaskDelete+0x150>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01b      	beq.n	8002e4c <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <vTaskDelete+0x134>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d116      	bne.n	8002e4c <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <vTaskDelete+0x154>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <vTaskDelete+0x11c>
        __asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	60bb      	str	r3, [r7, #8]
    }
 8002e38:	bf00      	nop
 8002e3a:	e7fe      	b.n	8002e3a <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <vTaskDelete+0x158>)
 8002e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000034 	.word	0x20000034
 8002e58:	20000038 	.word	0x20000038
 8002e5c:	20000114 	.word	0x20000114
 8002e60:	20000128 	.word	0x20000128
 8002e64:	200000e0 	.word	0x200000e0
 8002e68:	200000f4 	.word	0x200000f4
 8002e6c:	2000010c 	.word	0x2000010c
 8002e70:	20000118 	.word	0x20000118
 8002e74:	20000134 	.word	0x20000134
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d01b      	beq.n	8002ec6 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <vTaskDelay+0x68>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <vTaskDelay+0x30>
        __asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	60bb      	str	r3, [r7, #8]
    }
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002eac:	f000 f880 	bl	8002fb0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	2023      	movs	r0, #35	; 0x23
 8002eb4:	f003 f976 	bl	80061a4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eb8:	2100      	movs	r1, #0
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 ffbe 	bl	8003e3c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ec0:	f000 f884 	bl	8002fcc <xTaskResumeAll>
 8002ec4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <vTaskDelay+0x6c>)
 8002ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000134 	.word	0x20000134
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ef2:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <vTaskStartScheduler+0xa4>)
 8002ef4:	9301      	str	r3, [sp, #4]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	2300      	movs	r3, #0
 8002efc:	2282      	movs	r2, #130	; 0x82
 8002efe:	4925      	ldr	r1, [pc, #148]	; (8002f94 <vTaskStartScheduler+0xa8>)
 8002f00:	4825      	ldr	r0, [pc, #148]	; (8002f98 <vTaskStartScheduler+0xac>)
 8002f02:	f7ff fd73 	bl	80029ec <xTaskCreate>
 8002f06:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002f0e:	f001 f821 	bl	8003f54 <xTimerCreateTimerTask>
 8002f12:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d124      	bne.n	8002f64 <vTaskStartScheduler+0x78>
        __asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	60bb      	str	r3, [r7, #8]
    }
 8002f2c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <vTaskStartScheduler+0xb0>)
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f36:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <vTaskStartScheduler+0xb4>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <vTaskStartScheduler+0xb8>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <vTaskStartScheduler+0xbc>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <vTaskStartScheduler+0xa4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d102      	bne.n	8002f54 <vTaskStartScheduler+0x68>
 8002f4e:	f003 feb9 	bl	8006cc4 <SEGGER_SYSVIEW_OnIdle>
 8002f52:	e004      	b.n	8002f5e <vTaskStartScheduler+0x72>
 8002f54:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <vTaskStartScheduler+0xbc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 ff11 	bl	8006d80 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f5e:	f001 fb09 	bl	8004574 <xPortStartScheduler>
 8002f62:	e00e      	b.n	8002f82 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d10a      	bne.n	8002f82 <vTaskStartScheduler+0x96>
        __asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	607b      	str	r3, [r7, #4]
    }
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <vTaskStartScheduler+0xc0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000130 	.word	0x20000130
 8002f94:	08007354 	.word	0x08007354
 8002f98:	080038b1 	.word	0x080038b1
 8002f9c:	2000012c 	.word	0x2000012c
 8002fa0:	20000118 	.word	0x20000118
 8002fa4:	20000110 	.word	0x20000110
 8002fa8:	20000034 	.word	0x20000034
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <vTaskSuspendAll+0x18>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	4a03      	ldr	r2, [pc, #12]	; (8002fc8 <vTaskSuspendAll+0x18>)
 8002fbc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	20000134 	.word	0x20000134

08002fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002fda:	4b73      	ldr	r3, [pc, #460]	; (80031a8 <xTaskResumeAll+0x1dc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <xTaskResumeAll+0x2c>
        __asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	607b      	str	r3, [r7, #4]
    }
 8002ff4:	bf00      	nop
 8002ff6:	e7fe      	b.n	8002ff6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002ff8:	f001 fb5e 	bl	80046b8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ffc:	4b6a      	ldr	r3, [pc, #424]	; (80031a8 <xTaskResumeAll+0x1dc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3b01      	subs	r3, #1
 8003002:	4a69      	ldr	r2, [pc, #420]	; (80031a8 <xTaskResumeAll+0x1dc>)
 8003004:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003006:	4b68      	ldr	r3, [pc, #416]	; (80031a8 <xTaskResumeAll+0x1dc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 80c4 	bne.w	8003198 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003010:	4b66      	ldr	r3, [pc, #408]	; (80031ac <xTaskResumeAll+0x1e0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80bf 	beq.w	8003198 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800301a:	e08e      	b.n	800313a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800301c:	4b64      	ldr	r3, [pc, #400]	; (80031b0 <xTaskResumeAll+0x1e4>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	6a12      	ldr	r2, [r2, #32]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	69d2      	ldr	r2, [r2, #28]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3318      	adds	r3, #24
 8003046:	429a      	cmp	r2, r3
 8003048:	d103      	bne.n	8003052 <xTaskResumeAll+0x86>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	2200      	movs	r2, #0
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	68d2      	ldr	r2, [r2, #12]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	6892      	ldr	r2, [r2, #8]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3304      	adds	r3, #4
 8003084:	429a      	cmp	r2, r3
 8003086:	d103      	bne.n	8003090 <xTaskResumeAll+0xc4>
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2200      	movs	r2, #0
 8003094:	615a      	str	r2, [r3, #20]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	1e5a      	subs	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 feae 	bl	8006e04 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	2201      	movs	r2, #1
 80030ae:	409a      	lsls	r2, r3
 80030b0:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <xTaskResumeAll+0x1e8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	4a3f      	ldr	r2, [pc, #252]	; (80031b4 <xTaskResumeAll+0x1e8>)
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	493e      	ldr	r1, [pc, #248]	; (80031b8 <xTaskResumeAll+0x1ec>)
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3304      	adds	r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	3204      	adds	r2, #4
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	1d1a      	adds	r2, r3, #4
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4a2e      	ldr	r2, [pc, #184]	; (80031b8 <xTaskResumeAll+0x1ec>)
 80030fe:	441a      	add	r2, r3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	615a      	str	r2, [r3, #20]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	492b      	ldr	r1, [pc, #172]	; (80031b8 <xTaskResumeAll+0x1ec>)
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	4827      	ldr	r0, [pc, #156]	; (80031b8 <xTaskResumeAll+0x1ec>)
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4403      	add	r3, r0
 8003124:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <xTaskResumeAll+0x1f0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <xTaskResumeAll+0x1f4>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <xTaskResumeAll+0x1e4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f47f af6c 	bne.w	800301c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800314a:	f000 fc47 	bl	80039dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <xTaskResumeAll+0x1f8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800315a:	f000 f859 	bl	8003210 <xTaskIncrementTick>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003164:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <xTaskResumeAll+0x1f4>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3b01      	subs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f1      	bne.n	800315a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <xTaskResumeAll+0x1f8>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <xTaskResumeAll+0x1f4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003184:	2301      	movs	r3, #1
 8003186:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <xTaskResumeAll+0x1fc>)
 800318a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003198:	f001 fabe 	bl	8004718 <vPortExitCritical>

    return xAlreadyYielded;
 800319c:	69bb      	ldr	r3, [r7, #24]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000134 	.word	0x20000134
 80031ac:	2000010c 	.word	0x2000010c
 80031b0:	200000cc 	.word	0x200000cc
 80031b4:	20000114 	.word	0x20000114
 80031b8:	20000038 	.word	0x20000038
 80031bc:	20000034 	.word	0x20000034
 80031c0:	20000120 	.word	0x20000120
 80031c4:	2000011c 	.word	0x2000011c
 80031c8:	e000ed04 	.word	0xe000ed04

080031cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <xTaskGetTickCount+0x1c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031d8:	687b      	ldr	r3, [r7, #4]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000110 	.word	0x20000110

080031ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031f2:	f001 fb4b 	bl	800488c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <xTaskGetTickCountFromISR+0x20>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003200:	683b      	ldr	r3, [r7, #0]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000110 	.word	0x20000110

08003210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800321a:	4b7f      	ldr	r3, [pc, #508]	; (8003418 <xTaskIncrementTick+0x208>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 80f0 	bne.w	8003404 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003224:	4b7d      	ldr	r3, [pc, #500]	; (800341c <xTaskIncrementTick+0x20c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3301      	adds	r3, #1
 800322a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800322c:	4a7b      	ldr	r2, [pc, #492]	; (800341c <xTaskIncrementTick+0x20c>)
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d120      	bne.n	800327a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003238:	4b79      	ldr	r3, [pc, #484]	; (8003420 <xTaskIncrementTick+0x210>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <xTaskIncrementTick+0x48>
        __asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	607b      	str	r3, [r7, #4]
    }
 8003254:	bf00      	nop
 8003256:	e7fe      	b.n	8003256 <xTaskIncrementTick+0x46>
 8003258:	4b71      	ldr	r3, [pc, #452]	; (8003420 <xTaskIncrementTick+0x210>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	4b71      	ldr	r3, [pc, #452]	; (8003424 <xTaskIncrementTick+0x214>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6f      	ldr	r2, [pc, #444]	; (8003420 <xTaskIncrementTick+0x210>)
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4a6f      	ldr	r2, [pc, #444]	; (8003424 <xTaskIncrementTick+0x214>)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b6e      	ldr	r3, [pc, #440]	; (8003428 <xTaskIncrementTick+0x218>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	4a6d      	ldr	r2, [pc, #436]	; (8003428 <xTaskIncrementTick+0x218>)
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	f000 fbb1 	bl	80039dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800327a:	4b6c      	ldr	r3, [pc, #432]	; (800342c <xTaskIncrementTick+0x21c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a3a      	ldr	r2, [r7, #32]
 8003280:	429a      	cmp	r2, r3
 8003282:	f0c0 80aa 	bcc.w	80033da <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003286:	4b66      	ldr	r3, [pc, #408]	; (8003420 <xTaskIncrementTick+0x210>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003290:	4b66      	ldr	r3, [pc, #408]	; (800342c <xTaskIncrementTick+0x21c>)
 8003292:	f04f 32ff 	mov.w	r2, #4294967295
 8003296:	601a      	str	r2, [r3, #0]
                    break;
 8003298:	e09f      	b.n	80033da <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800329a:	4b61      	ldr	r3, [pc, #388]	; (8003420 <xTaskIncrementTick+0x210>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80032aa:	6a3a      	ldr	r2, [r7, #32]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d203      	bcs.n	80032ba <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032b2:	4a5e      	ldr	r2, [pc, #376]	; (800342c <xTaskIncrementTick+0x21c>)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80032b8:	e08f      	b.n	80033da <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	68d2      	ldr	r2, [r2, #12]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	6892      	ldr	r2, [r2, #8]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	3304      	adds	r3, #4
 80032dc:	429a      	cmp	r2, r3
 80032de:	d103      	bne.n	80032e8 <xTaskIncrementTick+0xd8>
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2200      	movs	r2, #0
 80032ec:	615a      	str	r2, [r3, #20]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	1e5a      	subs	r2, r3, #1
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01e      	beq.n	800333e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	6a12      	ldr	r2, [r2, #32]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	69d2      	ldr	r2, [r2, #28]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	3318      	adds	r3, #24
 8003322:	429a      	cmp	r2, r3
 8003324:	d103      	bne.n	800332e <xTaskIncrementTick+0x11e>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	6a1a      	ldr	r2, [r3, #32]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2200      	movs	r2, #0
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1e5a      	subs	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fd5f 	bl	8006e04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	2201      	movs	r2, #1
 800334c:	409a      	lsls	r2, r3
 800334e:	4b38      	ldr	r3, [pc, #224]	; (8003430 <xTaskIncrementTick+0x220>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	4a36      	ldr	r2, [pc, #216]	; (8003430 <xTaskIncrementTick+0x220>)
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	4935      	ldr	r1, [pc, #212]	; (8003434 <xTaskIncrementTick+0x224>)
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	3304      	adds	r3, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	60da      	str	r2, [r3, #12]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	3204      	adds	r2, #4
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	1d1a      	adds	r2, r3, #4
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	609a      	str	r2, [r3, #8]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4a26      	ldr	r2, [pc, #152]	; (8003434 <xTaskIncrementTick+0x224>)
 800339c:	441a      	add	r2, r3
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	615a      	str	r2, [r3, #20]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a6:	4923      	ldr	r1, [pc, #140]	; (8003434 <xTaskIncrementTick+0x224>)
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	1c59      	adds	r1, r3, #1
 80033b6:	481f      	ldr	r0, [pc, #124]	; (8003434 <xTaskIncrementTick+0x224>)
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4403      	add	r3, r0
 80033c2:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <xTaskIncrementTick+0x228>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	f4ff af59 	bcc.w	8003286 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d8:	e755      	b.n	8003286 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <xTaskIncrementTick+0x228>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	4914      	ldr	r1, [pc, #80]	; (8003434 <xTaskIncrementTick+0x224>)
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d901      	bls.n	80033f6 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <xTaskIncrementTick+0x22c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 80033fe:	2301      	movs	r3, #1
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
 8003402:	e004      	b.n	800340e <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003404:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <xTaskIncrementTick+0x230>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3301      	adds	r3, #1
 800340a:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <xTaskIncrementTick+0x230>)
 800340c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003410:	4618      	mov	r0, r3
 8003412:	3728      	adds	r7, #40	; 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000134 	.word	0x20000134
 800341c:	20000110 	.word	0x20000110
 8003420:	200000c4 	.word	0x200000c4
 8003424:	200000c8 	.word	0x200000c8
 8003428:	20000124 	.word	0x20000124
 800342c:	2000012c 	.word	0x2000012c
 8003430:	20000114 	.word	0x20000114
 8003434:	20000038 	.word	0x20000038
 8003438:	20000034 	.word	0x20000034
 800343c:	20000120 	.word	0x20000120
 8003440:	2000011c 	.word	0x2000011c

08003444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <vTaskSwitchContext+0xbc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <vTaskSwitchContext+0xc0>)
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003458:	e04d      	b.n	80034f6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800345a:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <vTaskSwitchContext+0xc0>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <vTaskSwitchContext+0xc4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800346e:	7afb      	ldrb	r3, [r7, #11]
 8003470:	f1c3 031f 	rsb	r3, r3, #31
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	4925      	ldr	r1, [pc, #148]	; (800350c <vTaskSwitchContext+0xc8>)
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <vTaskSwitchContext+0x5c>
        __asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	607b      	str	r3, [r7, #4]
    }
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <vTaskSwitchContext+0x5a>
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4a18      	ldr	r2, [pc, #96]	; (800350c <vTaskSwitchContext+0xc8>)
 80034ac:	4413      	add	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	3308      	adds	r3, #8
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d104      	bne.n	80034d0 <vTaskSwitchContext+0x8c>
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <vTaskSwitchContext+0xcc>)
 80034d8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <vTaskSwitchContext+0xcc>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <vTaskSwitchContext+0xd0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d102      	bne.n	80034ec <vTaskSwitchContext+0xa8>
 80034e6:	f003 fbed 	bl	8006cc4 <SEGGER_SYSVIEW_OnIdle>
}
 80034ea:	e004      	b.n	80034f6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <vTaskSwitchContext+0xcc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 fc45 	bl	8006d80 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000134 	.word	0x20000134
 8003504:	20000120 	.word	0x20000120
 8003508:	20000114 	.word	0x20000114
 800350c:	20000038 	.word	0x20000038
 8003510:	20000034 	.word	0x20000034
 8003514:	20000130 	.word	0x20000130

08003518 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	60fb      	str	r3, [r7, #12]
    }
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <vTaskPlaceOnEventList+0x44>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3318      	adds	r3, #24
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fe febd 	bl	80022c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800354c:	2101      	movs	r1, #1
 800354e:	6838      	ldr	r0, [r7, #0]
 8003550:	f000 fc74 	bl	8003e3c <prvAddCurrentTaskToDelayedList>
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000034 	.word	0x20000034

08003560 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	613b      	str	r3, [r7, #16]
    }
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <vTaskPlaceOnEventListRestricted+0x8c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	61da      	str	r2, [r3, #28]
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <vTaskPlaceOnEventListRestricted+0x8c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	6892      	ldr	r2, [r2, #8]
 800359e:	621a      	str	r2, [r3, #32]
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <vTaskPlaceOnEventListRestricted+0x8c>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	3218      	adds	r2, #24
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <vTaskPlaceOnEventListRestricted+0x8c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f103 0218 	add.w	r2, r3, #24
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <vTaskPlaceOnEventListRestricted+0x8c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295
 80035d4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035d6:	2024      	movs	r0, #36	; 0x24
 80035d8:	f002 fdc6 	bl	8006168 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f000 fc2c 	bl	8003e3c <prvAddCurrentTaskToDelayedList>
    }
 80035e4:	bf00      	nop
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000034 	.word	0x20000034

080035f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	60fb      	str	r3, [r7, #12]
    }
 8003618:	bf00      	nop
 800361a:	e7fe      	b.n	800361a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	6a3a      	ldr	r2, [r7, #32]
 8003628:	6a12      	ldr	r2, [r2, #32]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	69d2      	ldr	r2, [r2, #28]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	3318      	adds	r3, #24
 800363e:	429a      	cmp	r2, r3
 8003640:	d103      	bne.n	800364a <xTaskRemoveFromEventList+0x5a>
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	2200      	movs	r2, #0
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	1e5a      	subs	r2, r3, #1
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365a:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <xTaskRemoveFromEventList+0x198>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d162      	bne.n	8003728 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	68d2      	ldr	r2, [r2, #12]
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	3304      	adds	r3, #4
 8003684:	429a      	cmp	r2, r3
 8003686:	d103      	bne.n	8003690 <xTaskRemoveFromEventList+0xa0>
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2200      	movs	r2, #0
 8003694:	615a      	str	r2, [r3, #20]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 fbae 	bl	8006e04 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2201      	movs	r2, #1
 80036ae:	409a      	lsls	r2, r3
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <xTaskRemoveFromEventList+0x19c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	4a35      	ldr	r2, [pc, #212]	; (800378c <xTaskRemoveFromEventList+0x19c>)
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036be:	4934      	ldr	r1, [pc, #208]	; (8003790 <xTaskRemoveFromEventList+0x1a0>)
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3304      	adds	r3, #4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	609a      	str	r2, [r3, #8]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	3204      	adds	r2, #4
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	1d1a      	adds	r2, r3, #4
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4a24      	ldr	r2, [pc, #144]	; (8003790 <xTaskRemoveFromEventList+0x1a0>)
 80036fe:	441a      	add	r2, r3
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	615a      	str	r2, [r3, #20]
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	4921      	ldr	r1, [pc, #132]	; (8003790 <xTaskRemoveFromEventList+0x1a0>)
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	1c59      	adds	r1, r3, #1
 8003718:	481d      	ldr	r0, [pc, #116]	; (8003790 <xTaskRemoveFromEventList+0x1a0>)
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4403      	add	r3, r0
 8003724:	6019      	str	r1, [r3, #0]
 8003726:	e01b      	b.n	8003760 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <xTaskRemoveFromEventList+0x1a4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	61da      	str	r2, [r3, #28]
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	621a      	str	r2, [r3, #32]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	6a3a      	ldr	r2, [r7, #32]
 8003742:	3218      	adds	r2, #24
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	f103 0218 	add.w	r2, r3, #24
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <xTaskRemoveFromEventList+0x1a4>)
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <xTaskRemoveFromEventList+0x1a4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3301      	adds	r3, #1
 800375c:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <xTaskRemoveFromEventList+0x1a4>)
 800375e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <xTaskRemoveFromEventList+0x1a8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	429a      	cmp	r2, r3
 800376c:	d905      	bls.n	800377a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800376e:	2301      	movs	r3, #1
 8003770:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <xTaskRemoveFromEventList+0x1ac>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e001      	b.n	800377e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003780:	4618      	mov	r0, r3
 8003782:	3728      	adds	r7, #40	; 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000134 	.word	0x20000134
 800378c:	20000114 	.word	0x20000114
 8003790:	20000038 	.word	0x20000038
 8003794:	200000cc 	.word	0x200000cc
 8003798:	20000034 	.word	0x20000034
 800379c:	20000120 	.word	0x20000120

080037a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <vTaskInternalSetTimeOutState+0x24>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <vTaskInternalSetTimeOutState+0x28>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	20000124 	.word	0x20000124
 80037c8:	20000110 	.word	0x20000110

080037cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	613b      	str	r3, [r7, #16]
    }
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	60fb      	str	r3, [r7, #12]
    }
 800380a:	bf00      	nop
 800380c:	e7fe      	b.n	800380c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800380e:	f000 ff53 	bl	80046b8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003812:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <xTaskCheckForTimeOut+0xc4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d102      	bne.n	8003832 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	e026      	b.n	8003880 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <xTaskCheckForTimeOut+0xc8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d00a      	beq.n	8003854 <xTaskCheckForTimeOut+0x88>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	429a      	cmp	r2, r3
 8003846:	d305      	bcc.n	8003854 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003848:	2301      	movs	r3, #1
 800384a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e015      	b.n	8003880 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	429a      	cmp	r2, r3
 800385c:	d20b      	bcs.n	8003876 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	1ad2      	subs	r2, r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff98 	bl	80037a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e004      	b.n	8003880 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800387c:	2301      	movs	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003880:	f000 ff4a 	bl	8004718 <vPortExitCritical>

    return xReturn;
 8003884:	69fb      	ldr	r3, [r7, #28]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000110 	.word	0x20000110
 8003894:	20000124 	.word	0x20000124

08003898 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <vTaskMissedYield+0x14>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	20000120 	.word	0x20000120

080038b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038b8:	f000 f852 	bl	8003960 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <prvIdleTask+0x28>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d9f9      	bls.n	80038b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <prvIdleTask+0x2c>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038d4:	e7f0      	b.n	80038b8 <prvIdleTask+0x8>
 80038d6:	bf00      	nop
 80038d8:	20000038 	.word	0x20000038
 80038dc:	e000ed04 	.word	0xe000ed04

080038e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	e00c      	b.n	8003906 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <prvInitialiseTaskLists+0x60>)
 80038f8:	4413      	add	r3, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fc92 	bl	8002224 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3301      	adds	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d9ef      	bls.n	80038ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800390c:	480d      	ldr	r0, [pc, #52]	; (8003944 <prvInitialiseTaskLists+0x64>)
 800390e:	f7fe fc89 	bl	8002224 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003912:	480d      	ldr	r0, [pc, #52]	; (8003948 <prvInitialiseTaskLists+0x68>)
 8003914:	f7fe fc86 	bl	8002224 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003918:	480c      	ldr	r0, [pc, #48]	; (800394c <prvInitialiseTaskLists+0x6c>)
 800391a:	f7fe fc83 	bl	8002224 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800391e:	480c      	ldr	r0, [pc, #48]	; (8003950 <prvInitialiseTaskLists+0x70>)
 8003920:	f7fe fc80 	bl	8002224 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003924:	480b      	ldr	r0, [pc, #44]	; (8003954 <prvInitialiseTaskLists+0x74>)
 8003926:	f7fe fc7d 	bl	8002224 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <prvInitialiseTaskLists+0x78>)
 800392c:	4a05      	ldr	r2, [pc, #20]	; (8003944 <prvInitialiseTaskLists+0x64>)
 800392e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <prvInitialiseTaskLists+0x7c>)
 8003932:	4a05      	ldr	r2, [pc, #20]	; (8003948 <prvInitialiseTaskLists+0x68>)
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000038 	.word	0x20000038
 8003944:	2000009c 	.word	0x2000009c
 8003948:	200000b0 	.word	0x200000b0
 800394c:	200000cc 	.word	0x200000cc
 8003950:	200000e0 	.word	0x200000e0
 8003954:	200000f8 	.word	0x200000f8
 8003958:	200000c4 	.word	0x200000c4
 800395c:	200000c8 	.word	0x200000c8

08003960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003966:	e019      	b.n	800399c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003968:	f000 fea6 	bl	80046b8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800396c:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <prvCheckTasksWaitingTermination+0x50>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fcdd 	bl	8002338 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <prvCheckTasksWaitingTermination+0x54>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <prvCheckTasksWaitingTermination+0x54>)
 8003986:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <prvCheckTasksWaitingTermination+0x58>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3b01      	subs	r3, #1
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <prvCheckTasksWaitingTermination+0x58>)
 8003990:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003992:	f000 fec1 	bl	8004718 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f810 	bl	80039bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <prvCheckTasksWaitingTermination+0x58>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e1      	bne.n	8003968 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	200000e0 	.word	0x200000e0
 80039b4:	2000010c 	.word	0x2000010c
 80039b8:	200000f4 	.word	0x200000f4

080039bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 f87f 	bl	8004acc <vPortFree>
                vPortFree( pxTCB );
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f001 f87c 	bl	8004acc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <prvResetNextTaskUnblockTime+0x30>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <prvResetNextTaskUnblockTime+0x34>)
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295
 80039f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039f2:	e005      	b.n	8003a00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <prvResetNextTaskUnblockTime+0x30>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <prvResetNextTaskUnblockTime+0x34>)
 80039fe:	6013      	str	r3, [r2, #0]
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	200000c4 	.word	0x200000c4
 8003a10:	2000012c 	.word	0x2000012c

08003a14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <xTaskGetSchedulerState+0x34>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a22:	2301      	movs	r3, #1
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	e008      	b.n	8003a3a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <xTaskGetSchedulerState+0x38>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a30:	2302      	movs	r3, #2
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	e001      	b.n	8003a3a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a3a:	687b      	ldr	r3, [r7, #4]
    }
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	20000118 	.word	0x20000118
 8003a4c:	20000134 	.word	0x20000134

08003a50 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	613b      	str	r3, [r7, #16]
    }
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003a7a:	f000 fe1d 	bl	80046b8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003a7e:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <xTaskGenericNotifyWait+0x108>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	3354      	adds	r3, #84	; 0x54
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d022      	beq.n	8003ad6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003a90:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <xTaskGenericNotifyWait+0x108>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	3214      	adds	r2, #20
 8003a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	43d2      	mvns	r2, r2
 8003aa0:	4011      	ands	r1, r2
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	3214      	adds	r2, #20
 8003aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <xTaskGenericNotifyWait+0x108>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3354      	adds	r3, #84	; 0x54
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003abe:	2101      	movs	r1, #1
 8003ac0:	6a38      	ldr	r0, [r7, #32]
 8003ac2:	f000 f9bb 	bl	8003e3c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <xTaskGenericNotifyWait+0x10c>)
 8003ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ad6:	f000 fe1f 	bl	8004718 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003ada:	f000 fded 	bl	80046b8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	2040      	movs	r0, #64	; 0x40
 8003aec:	f002 fc66 	bl	80063bc <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003af6:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <xTaskGenericNotifyWait+0x108>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	3214      	adds	r2, #20
 8003afe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003b06:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <xTaskGenericNotifyWait+0x108>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3354      	adds	r3, #84	; 0x54
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d002      	beq.n	8003b1e <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e00e      	b.n	8003b3c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <xTaskGenericNotifyWait+0x108>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	3214      	adds	r2, #20
 8003b26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	43d2      	mvns	r2, r2
 8003b2e:	4011      	ands	r1, r2
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	3214      	adds	r2, #20
 8003b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <xTaskGenericNotifyWait+0x108>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	3354      	adds	r3, #84	; 0x54
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003b4a:	f000 fde5 	bl	8004718 <vPortExitCritical>

        return xReturn;
 8003b4e:	697b      	ldr	r3, [r7, #20]
    }
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000034 	.word	0x20000034
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b094      	sub	sp, #80	; 0x50
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003baa:	f000 fe6f 	bl	800488c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003bb2:	f3ef 8211 	mrs	r2, BASEPRI
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	623a      	str	r2, [r7, #32]
 8003bc8:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003bca:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	3214      	adds	r2, #20
 8003bda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4413      	add	r3, r2
 8003be8:	3354      	adds	r3, #84	; 0x54
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3354      	adds	r3, #84	; 0x54
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d83b      	bhi.n	8003c7a <xTaskGenericNotifyFromISR+0x11a>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <xTaskGenericNotifyFromISR+0xa8>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c99 	.word	0x08003c99
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c39 	.word	0x08003c39
 8003c14:	08003c51 	.word	0x08003c51
 8003c18:	08003c5f 	.word	0x08003c5f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	3214      	adds	r2, #20
 8003c22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	ea42 0103 	orr.w	r1, r2, r3
 8003c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	3214      	adds	r2, #20
 8003c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c36:	e032      	b.n	8003c9e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	3214      	adds	r2, #20
 8003c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	3214      	adds	r2, #20
 8003c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c4e:	e026      	b.n	8003c9e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	3214      	adds	r2, #20
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c5c:	e01f      	b.n	8003c9e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003c5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d006      	beq.n	8003c74 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	3214      	adds	r2, #20
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003c72:	e014      	b.n	8003c9e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8003c78:	e011      	b.n	8003c9e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003c7a:	4b69      	ldr	r3, [pc, #420]	; (8003e20 <xTaskGenericNotifyFromISR+0x2c0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00c      	beq.n	8003c9c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	61bb      	str	r3, [r7, #24]
    }
 8003c94:	bf00      	nop
 8003c96:	e7fe      	b.n	8003c96 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003c98:	bf00      	nop
 8003c9a:	e000      	b.n	8003c9e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003c9c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f003 f951 	bl	8006f48 <SEGGER_SYSVIEW_ShrinkId>
 8003ca6:	78f9      	ldrb	r1, [r7, #3]
 8003ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003caa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cac:	9201      	str	r2, [sp, #4]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4601      	mov	r1, r0
 8003cb6:	203f      	movs	r0, #63	; 0x3f
 8003cb8:	f002 fc12 	bl	80064e0 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003cbc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 80a2 	bne.w	8003e0a <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	617b      	str	r3, [r7, #20]
    }
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	; (8003e24 <xTaskGenericNotifyFromISR+0x2c4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d162      	bne.n	8003db2 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cf8:	68d2      	ldr	r2, [r2, #12]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d02:	6892      	ldr	r2, [r2, #8]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d103      	bne.n	8003d1a <xTaskGenericNotifyFromISR+0x1ba>
 8003d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	615a      	str	r2, [r3, #20]
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	1e5a      	subs	r2, r3, #1
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 f869 	bl	8006e04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	2201      	movs	r2, #1
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <xTaskGenericNotifyFromISR+0x2c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	4a39      	ldr	r2, [pc, #228]	; (8003e28 <xTaskGenericNotifyFromISR+0x2c8>)
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d48:	4938      	ldr	r1, [pc, #224]	; (8003e2c <xTaskGenericNotifyFromISR+0x2cc>)
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	3304      	adds	r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d6e:	3204      	adds	r2, #4
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d74:	1d1a      	adds	r2, r3, #4
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <xTaskGenericNotifyFromISR+0x2cc>)
 8003d88:	441a      	add	r2, r3
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8c:	615a      	str	r2, [r3, #20]
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d92:	4926      	ldr	r1, [pc, #152]	; (8003e2c <xTaskGenericNotifyFromISR+0x2cc>)
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	1c59      	adds	r1, r3, #1
 8003da2:	4822      	ldr	r0, [pc, #136]	; (8003e2c <xTaskGenericNotifyFromISR+0x2cc>)
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4403      	add	r3, r0
 8003dae:	6019      	str	r1, [r3, #0]
 8003db0:	e01b      	b.n	8003dea <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <xTaskGenericNotifyFromISR+0x2d0>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
 8003db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dbc:	61da      	str	r2, [r3, #28]
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc4:	621a      	str	r2, [r3, #32]
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dcc:	3218      	adds	r2, #24
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd2:	f103 0218 	add.w	r2, r3, #24
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <xTaskGenericNotifyFromISR+0x2d0>)
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
 8003de0:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <xTaskGenericNotifyFromISR+0x2d0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <xTaskGenericNotifyFromISR+0x2d0>)
 8003de8:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <xTaskGenericNotifyFromISR+0x2d4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d908      	bls.n	8003e0a <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <xTaskGenericNotifyFromISR+0x2d8>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e14:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3748      	adds	r7, #72	; 0x48
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000110 	.word	0x20000110
 8003e24:	20000134 	.word	0x20000134
 8003e28:	20000114 	.word	0x20000114
 8003e2c:	20000038 	.word	0x20000038
 8003e30:	200000cc 	.word	0x200000cc
 8003e34:	20000034 	.word	0x20000034
 8003e38:	20000120 	.word	0x20000120

08003e3c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e46:	4b3c      	ldr	r3, [pc, #240]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3304      	adds	r3, #4
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fa70 	bl	8002338 <uxListRemove>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	2201      	movs	r2, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <prvAddCurrentTaskToDelayedList+0x104>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4013      	ands	r3, r2
 8003e72:	4a33      	ldr	r2, [pc, #204]	; (8003f40 <prvAddCurrentTaskToDelayedList+0x104>)
 8003e74:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d124      	bne.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x8c>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d021      	beq.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e84:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <prvAddCurrentTaskToDelayedList+0x108>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	609a      	str	r2, [r3, #8]
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	6892      	ldr	r2, [r2, #8]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	3204      	adds	r2, #4
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1d1a      	adds	r2, r3, #4
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <prvAddCurrentTaskToDelayedList+0x108>)
 8003eb8:	615a      	str	r2, [r3, #20]
 8003eba:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <prvAddCurrentTaskToDelayedList+0x108>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	4a20      	ldr	r2, [pc, #128]	; (8003f44 <prvAddCurrentTaskToDelayedList+0x108>)
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ec6:	e032      	b.n	8003f2e <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d20f      	bcs.n	8003f00 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003ee0:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f002 ffce 	bl	8006e88 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eec:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7fe f9e4 	bl	80022c6 <vListInsert>
}
 8003efe:	e016      	b.n	8003f2e <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003f00:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2104      	movs	r1, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f002 ffbe 	bl	8006e88 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <prvAddCurrentTaskToDelayedList+0x110>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x100>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f7fe f9d4 	bl	80022c6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <prvAddCurrentTaskToDelayedList+0x114>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d202      	bcs.n	8003f2e <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003f28:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <prvAddCurrentTaskToDelayedList+0x114>)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6013      	str	r3, [r2, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000110 	.word	0x20000110
 8003f3c:	20000034 	.word	0x20000034
 8003f40:	20000114 	.word	0x20000114
 8003f44:	200000f8 	.word	0x200000f8
 8003f48:	200000c8 	.word	0x200000c8
 8003f4c:	200000c4 	.word	0x200000c4
 8003f50:	2000012c 	.word	0x2000012c

08003f54 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f5e:	f000 fa47 	bl	80043f0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f62:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <xTimerCreateTimerTask+0x54>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003f6a:	4b10      	ldr	r3, [pc, #64]	; (8003fac <xTimerCreateTimerTask+0x58>)
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	2302      	movs	r3, #2
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f78:	490d      	ldr	r1, [pc, #52]	; (8003fb0 <xTimerCreateTimerTask+0x5c>)
 8003f7a:	480e      	ldr	r0, [pc, #56]	; (8003fb4 <xTimerCreateTimerTask+0x60>)
 8003f7c:	f7fe fd36 	bl	80029ec <xTaskCreate>
 8003f80:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	603b      	str	r3, [r7, #0]
    }
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f9e:	687b      	ldr	r3, [r7, #4]
    }
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000168 	.word	0x20000168
 8003fac:	2000016c 	.word	0x2000016c
 8003fb0:	0800735c 	.word	0x0800735c
 8003fb4:	0800405d 	.word	0x0800405d

08003fb8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fc4:	e008      	b.n	8003fd8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	4413      	add	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	18d1      	adds	r1, r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f8dd 	bl	80041a4 <prvInsertTimerInActiveList>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1ea      	bne.n	8003fc6 <prvReloadTimer+0xe>
        }
    }
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <prvProcessExpiredTimer+0x5c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3304      	adds	r3, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe f98f 	bl	8002338 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f7ff ffc3 	bl	8003fb8 <prvReloadTimer>
 8004032:	e008      	b.n	8004046 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	4798      	blx	r3
    }
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000160 	.word	0x20000160

0800405c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004064:	f107 0308 	add.w	r3, r7, #8
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f857 	bl	800411c <prvGetNextExpireTime>
 800406e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4619      	mov	r1, r3
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f803 	bl	8004080 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800407a:	f000 f8d5 	bl	8004228 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800407e:	e7f1      	b.n	8004064 <prvTimerTask+0x8>

08004080 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800408a:	f7fe ff91 	bl	8002fb0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800408e:	f107 0308 	add.w	r3, r7, #8
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f866 	bl	8004164 <prvSampleTimeNow>
 8004098:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d130      	bne.n	8004102 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <prvProcessTimerOrBlockTask+0x3c>
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d806      	bhi.n	80040bc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040ae:	f7fe ff8d 	bl	8002fcc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ffa1 	bl	8003ffc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040ba:	e024      	b.n	8004106 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <prvProcessTimerOrBlockTask+0x90>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <prvProcessTimerOrBlockTask+0x50>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <prvProcessTimerOrBlockTask+0x52>
 80040d0:	2300      	movs	r3, #0
 80040d2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <prvProcessTimerOrBlockTask+0x94>)
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7fe fc4f 	bl	8002984 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040e6:	f7fe ff71 	bl	8002fcc <xTaskResumeAll>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <prvProcessTimerOrBlockTask+0x98>)
 80040f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	f3bf 8f6f 	isb	sy
    }
 8004100:	e001      	b.n	8004106 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004102:	f7fe ff63 	bl	8002fcc <xTaskResumeAll>
    }
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000164 	.word	0x20000164
 8004114:	20000168 	.word	0x20000168
 8004118:	e000ed04 	.word	0xe000ed04

0800411c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <prvGetNextExpireTime+0x44>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <prvGetNextExpireTime+0x16>
 800412e:	2201      	movs	r2, #1
 8004130:	e000      	b.n	8004134 <prvGetNextExpireTime+0x18>
 8004132:	2200      	movs	r2, #0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004140:	4b07      	ldr	r3, [pc, #28]	; (8004160 <prvGetNextExpireTime+0x44>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e001      	b.n	8004150 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004150:	68fb      	ldr	r3, [r7, #12]
    }
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000160 	.word	0x20000160

08004164 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800416c:	f7ff f82e 	bl	80031cc <xTaskGetTickCount>
 8004170:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <prvSampleTimeNow+0x3c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	429a      	cmp	r2, r3
 800417a:	d205      	bcs.n	8004188 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800417c:	f000 f912 	bl	80043a4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e002      	b.n	800418e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800418e:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <prvSampleTimeNow+0x3c>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004194:	68fb      	ldr	r3, [r7, #12]
    }
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000170 	.word	0x20000170

080041a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d812      	bhi.n	80041f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	1ad2      	subs	r2, r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e01b      	b.n	8004216 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <prvInsertTimerInActiveList+0x7c>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7fe f86c 	bl	80022c6 <vListInsert>
 80041ee:	e012      	b.n	8004216 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d206      	bcs.n	8004206 <prvInsertTimerInActiveList+0x62>
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004200:	2301      	movs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e007      	b.n	8004216 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <prvInsertTimerInActiveList+0x80>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3304      	adds	r3, #4
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f7fe f858 	bl	80022c6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004216:	697b      	ldr	r3, [r7, #20]
    }
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000164 	.word	0x20000164
 8004224:	20000160 	.word	0x20000160

08004228 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800422e:	e0a6      	b.n	800437e <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f2c0 80a2 	blt.w	800437c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe f875 	bl	8002338 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff ff87 	bl	8004164 <prvSampleTimeNow>
 8004256:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	3b01      	subs	r3, #1
 800425c:	2b08      	cmp	r3, #8
 800425e:	f200 808e 	bhi.w	800437e <prvProcessReceivedCommands+0x156>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <prvProcessReceivedCommands+0x40>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	0800428d 	.word	0x0800428d
 800426c:	0800428d 	.word	0x0800428d
 8004270:	080042f5 	.word	0x080042f5
 8004274:	08004309 	.word	0x08004309
 8004278:	08004353 	.word	0x08004353
 800427c:	0800428d 	.word	0x0800428d
 8004280:	0800428d 	.word	0x0800428d
 8004284:	080042f5 	.word	0x080042f5
 8004288:	08004309 	.word	0x08004309
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	b2da      	uxtb	r2, r3
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	18d1      	adds	r1, r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	69f8      	ldr	r0, [r7, #28]
 80042ac:	f7ff ff7a 	bl	80041a4 <prvInsertTimerInActiveList>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d063      	beq.n	800437e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	4413      	add	r3, r2
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4619      	mov	r1, r3
 80042d0:	69f8      	ldr	r0, [r7, #28]
 80042d2:	f7ff fe71 	bl	8003fb8 <prvReloadTimer>
 80042d6:	e008      	b.n	80042ea <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	69f8      	ldr	r0, [r7, #28]
 80042f0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80042f2:	e044      	b.n	800437e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004306:	e03a      	b.n	800437e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	b2da      	uxtb	r2, r3
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	617b      	str	r3, [r7, #20]
    }
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	18d1      	adds	r1, r2, r3
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	69f8      	ldr	r0, [r7, #28]
 800434c:	f7ff ff2a 	bl	80041a4 <prvInsertTimerInActiveList>
                        break;
 8004350:	e015      	b.n	800437e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d103      	bne.n	8004368 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004360:	69f8      	ldr	r0, [r7, #28]
 8004362:	f000 fbb3 	bl	8004acc <vPortFree>
 8004366:	e00a      	b.n	800437e <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800437a:	e000      	b.n	800437e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800437c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800437e:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <prvProcessReceivedCommands+0x178>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f107 0108 	add.w	r1, r7, #8
 8004386:	2200      	movs	r2, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe f907 	bl	800259c <xQueueReceive>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	f47f af4d 	bne.w	8004230 <prvProcessReceivedCommands+0x8>
        }
    }
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000168 	.word	0x20000168

080043a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043aa:	e009      	b.n	80043c0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <prvSwitchTimerLists+0x44>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80043b6:	f04f 31ff 	mov.w	r1, #4294967295
 80043ba:	6838      	ldr	r0, [r7, #0]
 80043bc:	f7ff fe1e 	bl	8003ffc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <prvSwitchTimerLists+0x44>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <prvSwitchTimerLists+0x44>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <prvSwitchTimerLists+0x48>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <prvSwitchTimerLists+0x44>)
 80043d6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <prvSwitchTimerLists+0x48>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6013      	str	r3, [r2, #0]
    }
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000160 	.word	0x20000160
 80043ec:	20000164 	.word	0x20000164

080043f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043f4:	f000 f960 	bl	80046b8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <prvCheckForValidListAndQueue+0x54>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11d      	bne.n	800443c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004400:	4811      	ldr	r0, [pc, #68]	; (8004448 <prvCheckForValidListAndQueue+0x58>)
 8004402:	f7fd ff0f 	bl	8002224 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004406:	4811      	ldr	r0, [pc, #68]	; (800444c <prvCheckForValidListAndQueue+0x5c>)
 8004408:	f7fd ff0c 	bl	8002224 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <prvCheckForValidListAndQueue+0x60>)
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <prvCheckForValidListAndQueue+0x58>)
 8004410:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <prvCheckForValidListAndQueue+0x64>)
 8004414:	4a0d      	ldr	r2, [pc, #52]	; (800444c <prvCheckForValidListAndQueue+0x5c>)
 8004416:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004418:	2200      	movs	r2, #0
 800441a:	210c      	movs	r1, #12
 800441c:	200a      	movs	r0, #10
 800441e:	f7fe f845 	bl	80024ac <xQueueGenericCreate>
 8004422:	4603      	mov	r3, r0
 8004424:	4a07      	ldr	r2, [pc, #28]	; (8004444 <prvCheckForValidListAndQueue+0x54>)
 8004426:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <prvCheckForValidListAndQueue+0x54>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <prvCheckForValidListAndQueue+0x54>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4908      	ldr	r1, [pc, #32]	; (8004458 <prvCheckForValidListAndQueue+0x68>)
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fa4e 	bl	80028d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800443c:	f000 f96c 	bl	8004718 <vPortExitCritical>
    }
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000168 	.word	0x20000168
 8004448:	20000138 	.word	0x20000138
 800444c:	2000014c 	.word	0x2000014c
 8004450:	20000160 	.word	0x20000160
 8004454:	20000164 	.word	0x20000164
 8004458:	08007364 	.word	0x08007364

0800445c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3b04      	subs	r3, #4
 800446c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004474:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3b04      	subs	r3, #4
 800447a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f023 0201 	bic.w	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3b04      	subs	r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <pxPortInitialiseStack+0x64>)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3b14      	subs	r3, #20
 8004496:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3b04      	subs	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f06f 0202 	mvn.w	r2, #2
 80044aa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b20      	subs	r3, #32
 80044b0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	080044c5 	.word	0x080044c5

080044c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <prvTaskExitError+0x54>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d00a      	beq.n	80044ee <prvTaskExitError+0x2a>
        __asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	60fb      	str	r3, [r7, #12]
    }
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <prvTaskExitError+0x28>
        __asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	60bb      	str	r3, [r7, #8]
    }
 8004500:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004502:	bf00      	nop
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0fc      	beq.n	8004504 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	20000010 	.word	0x20000010
 800451c:	00000000 	.word	0x00000000

08004520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <pxCurrentTCBConst2>)
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	6808      	ldr	r0, [r1, #0]
 8004526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	f380 8809 	msr	PSP, r0
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f380 8811 	msr	BASEPRI, r0
 800453a:	4770      	bx	lr
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst2>:
 8004540:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004548:	4808      	ldr	r0, [pc, #32]	; (800456c <prvPortStartFirstTask+0x24>)
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	6800      	ldr	r0, [r0, #0]
 800454e:	f380 8808 	msr	MSP, r0
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8814 	msr	CONTROL, r0
 800455a:	b662      	cpsie	i
 800455c:	b661      	cpsie	f
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	df00      	svc	0
 8004568:	bf00      	nop
 800456a:	0000      	.short	0x0000
 800456c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop

08004574 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800457a:	4b46      	ldr	r3, [pc, #280]	; (8004694 <xPortStartScheduler+0x120>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a46      	ldr	r2, [pc, #280]	; (8004698 <xPortStartScheduler+0x124>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10a      	bne.n	800459a <xPortStartScheduler+0x26>
        __asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	613b      	str	r3, [r7, #16]
    }
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800459a:	4b3e      	ldr	r3, [pc, #248]	; (8004694 <xPortStartScheduler+0x120>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3f      	ldr	r2, [pc, #252]	; (800469c <xPortStartScheduler+0x128>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10a      	bne.n	80045ba <xPortStartScheduler+0x46>
        __asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	60fb      	str	r3, [r7, #12]
    }
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <xPortStartScheduler+0x12c>)
 80045bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	22ff      	movs	r2, #255	; 0xff
 80045ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <xPortStartScheduler+0x130>)
 80045e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045e2:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <xPortStartScheduler+0x134>)
 80045e4:	2207      	movs	r2, #7
 80045e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045e8:	e009      	b.n	80045fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80045ea:	4b2f      	ldr	r3, [pc, #188]	; (80046a8 <xPortStartScheduler+0x134>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	4a2d      	ldr	r2, [pc, #180]	; (80046a8 <xPortStartScheduler+0x134>)
 80045f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b80      	cmp	r3, #128	; 0x80
 8004608:	d0ef      	beq.n	80045ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800460a:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <xPortStartScheduler+0x134>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1c3 0307 	rsb	r3, r3, #7
 8004612:	2b04      	cmp	r3, #4
 8004614:	d00a      	beq.n	800462c <xPortStartScheduler+0xb8>
        __asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	60bb      	str	r3, [r7, #8]
    }
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800462c:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <xPortStartScheduler+0x134>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <xPortStartScheduler+0x134>)
 8004634:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004636:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <xPortStartScheduler+0x134>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800463e:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <xPortStartScheduler+0x134>)
 8004640:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800464a:	4b18      	ldr	r3, [pc, #96]	; (80046ac <xPortStartScheduler+0x138>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a17      	ldr	r2, [pc, #92]	; (80046ac <xPortStartScheduler+0x138>)
 8004650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004654:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004656:	4b15      	ldr	r3, [pc, #84]	; (80046ac <xPortStartScheduler+0x138>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a14      	ldr	r2, [pc, #80]	; (80046ac <xPortStartScheduler+0x138>)
 800465c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004660:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004662:	f000 f8e3 	bl	800482c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <xPortStartScheduler+0x13c>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800466c:	f000 f902 	bl	8004874 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <xPortStartScheduler+0x140>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0f      	ldr	r2, [pc, #60]	; (80046b4 <xPortStartScheduler+0x140>)
 8004676:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800467a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800467c:	f7ff ff64 	bl	8004548 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004680:	f7fe fee0 	bl	8003444 <vTaskSwitchContext>
    prvTaskExitError();
 8004684:	f7ff ff1e 	bl	80044c4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	e000ed00 	.word	0xe000ed00
 8004698:	410fc271 	.word	0x410fc271
 800469c:	410fc270 	.word	0x410fc270
 80046a0:	e000e400 	.word	0xe000e400
 80046a4:	20000174 	.word	0x20000174
 80046a8:	20000178 	.word	0x20000178
 80046ac:	e000ed20 	.word	0xe000ed20
 80046b0:	20000010 	.word	0x20000010
 80046b4:	e000ef34 	.word	0xe000ef34

080046b8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
        __asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	607b      	str	r3, [r7, #4]
    }
 80046d0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046d2:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <vPortEnterCritical+0x58>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	4a0d      	ldr	r2, [pc, #52]	; (8004710 <vPortEnterCritical+0x58>)
 80046da:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <vPortEnterCritical+0x58>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10f      	bne.n	8004704 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <vPortEnterCritical+0x5c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <vPortEnterCritical+0x4c>
        __asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	603b      	str	r3, [r7, #0]
    }
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <vPortEnterCritical+0x4a>
    }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	20000010 	.word	0x20000010
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <vPortExitCritical+0x50>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <vPortExitCritical+0x24>
        __asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	607b      	str	r3, [r7, #4]
    }
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <vPortExitCritical+0x50>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3b01      	subs	r3, #1
 8004742:	4a09      	ldr	r2, [pc, #36]	; (8004768 <vPortExitCritical+0x50>)
 8004744:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <vPortExitCritical+0x50>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d105      	bne.n	800475a <vPortExitCritical+0x42>
 800474e:	2300      	movs	r3, #0
 8004750:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f383 8811 	msr	BASEPRI, r3
    }
 8004758:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000010 	.word	0x20000010
 800476c:	00000000 	.word	0x00000000

08004770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004770:	f3ef 8009 	mrs	r0, PSP
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <pxCurrentTCBConst>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	f01e 0f10 	tst.w	lr, #16
 8004780:	bf08      	it	eq
 8004782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478a:	6010      	str	r0, [r2, #0]
 800478c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004794:	f380 8811 	msr	BASEPRI, r0
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f7fe fe50 	bl	8003444 <vTaskSwitchContext>
 80047a4:	f04f 0000 	mov.w	r0, #0
 80047a8:	f380 8811 	msr	BASEPRI, r0
 80047ac:	bc09      	pop	{r0, r3}
 80047ae:	6819      	ldr	r1, [r3, #0]
 80047b0:	6808      	ldr	r0, [r1, #0]
 80047b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b6:	f01e 0f10 	tst.w	lr, #16
 80047ba:	bf08      	it	eq
 80047bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047c0:	f380 8809 	msr	PSP, r0
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	f3af 8000 	nop.w

080047d0 <pxCurrentTCBConst>:
 80047d0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop

080047d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
        __asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	607b      	str	r3, [r7, #4]
    }
 80047f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80047f2:	f002 f9ed 	bl	8006bd0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80047f6:	f7fe fd0b 	bl	8003210 <xTaskIncrementTick>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d006      	beq.n	800480e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004800:	f002 fa44 	bl	8006c8c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <SysTick_Handler+0x50>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e001      	b.n	8004812 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800480e:	f002 fa21 	bl	8006c54 <SEGGER_SYSVIEW_RecordExitISR>
 8004812:	2300      	movs	r3, #0
 8004814:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f383 8811 	msr	BASEPRI, r3
    }
 800481c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <vPortSetupTimerInterrupt+0x34>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <vPortSetupTimerInterrupt+0x38>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <vPortSetupTimerInterrupt+0x3c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a0a      	ldr	r2, [pc, #40]	; (800486c <vPortSetupTimerInterrupt+0x40>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	099b      	lsrs	r3, r3, #6
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <vPortSetupTimerInterrupt+0x44>)
 800484a:	3b01      	subs	r3, #1
 800484c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800484e:	4b04      	ldr	r3, [pc, #16]	; (8004860 <vPortSetupTimerInterrupt+0x34>)
 8004850:	2207      	movs	r2, #7
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	e000e010 	.word	0xe000e010
 8004864:	e000e018 	.word	0xe000e018
 8004868:	20000000 	.word	0x20000000
 800486c:	10624dd3 	.word	0x10624dd3
 8004870:	e000e014 	.word	0xe000e014

08004874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004884 <vPortEnableVFP+0x10>
 8004878:	6801      	ldr	r1, [r0, #0]
 800487a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800487e:	6001      	str	r1, [r0, #0]
 8004880:	4770      	bx	lr
 8004882:	0000      	.short	0x0000
 8004884:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop

0800488c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004892:	f3ef 8305 	mrs	r3, IPSR
 8004896:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b0f      	cmp	r3, #15
 800489c:	d914      	bls.n	80048c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800489e:	4a17      	ldr	r2, [pc, #92]	; (80048fc <vPortValidateInterruptPriority+0x70>)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048a8:	4b15      	ldr	r3, [pc, #84]	; (8004900 <vPortValidateInterruptPriority+0x74>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	7afa      	ldrb	r2, [r7, #11]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d20a      	bcs.n	80048c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	607b      	str	r3, [r7, #4]
    }
 80048c4:	bf00      	nop
 80048c6:	e7fe      	b.n	80048c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <vPortValidateInterruptPriority+0x78>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048d0:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <vPortValidateInterruptPriority+0x7c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d90a      	bls.n	80048ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	603b      	str	r3, [r7, #0]
    }
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <vPortValidateInterruptPriority+0x60>
    }
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	e000e3f0 	.word	0xe000e3f0
 8004900:	20000174 	.word	0x20000174
 8004904:	e000ed0c 	.word	0xe000ed0c
 8004908:	20000178 	.word	0x20000178

0800490c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004918:	f7fe fb4a 	bl	8002fb0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800491c:	4b65      	ldr	r3, [pc, #404]	; (8004ab4 <pvPortMalloc+0x1a8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004924:	f000 f934 	bl	8004b90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004928:	4b63      	ldr	r3, [pc, #396]	; (8004ab8 <pvPortMalloc+0x1ac>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 80a7 	bne.w	8004a84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d02d      	beq.n	8004998 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800493c:	2208      	movs	r2, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d227      	bcs.n	8004998 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004948:	2208      	movs	r2, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	2b00      	cmp	r3, #0
 8004958:	d021      	beq.n	800499e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f023 0307 	bic.w	r3, r3, #7
 8004960:	3308      	adds	r3, #8
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d214      	bcs.n	8004992 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f023 0307 	bic.w	r3, r3, #7
 800496e:	3308      	adds	r3, #8
 8004970:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	2b00      	cmp	r3, #0
 800497a:	d010      	beq.n	800499e <pvPortMalloc+0x92>
        __asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	617b      	str	r3, [r7, #20]
    }
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004996:	e002      	b.n	800499e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	e000      	b.n	80049a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800499e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d06e      	beq.n	8004a84 <pvPortMalloc+0x178>
 80049a6:	4b45      	ldr	r3, [pc, #276]	; (8004abc <pvPortMalloc+0x1b0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d869      	bhi.n	8004a84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049b0:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <pvPortMalloc+0x1b4>)
 80049b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049b4:	4b42      	ldr	r3, [pc, #264]	; (8004ac0 <pvPortMalloc+0x1b4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ba:	e004      	b.n	80049c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d903      	bls.n	80049d8 <pvPortMalloc+0xcc>
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f1      	bne.n	80049bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049d8:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <pvPortMalloc+0x1a8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	429a      	cmp	r2, r3
 80049e0:	d050      	beq.n	8004a84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2208      	movs	r2, #8
 80049e8:	4413      	add	r3, r2
 80049ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	2308      	movs	r3, #8
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d91f      	bls.n	8004a44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <pvPortMalloc+0x120>
        __asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	613b      	str	r3, [r7, #16]
    }
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a3e:	69b8      	ldr	r0, [r7, #24]
 8004a40:	f000 f908 	bl	8004c54 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <pvPortMalloc+0x1b0>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <pvPortMalloc+0x1b0>)
 8004a50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a52:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <pvPortMalloc+0x1b0>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <pvPortMalloc+0x1b8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d203      	bcs.n	8004a66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a5e:	4b17      	ldr	r3, [pc, #92]	; (8004abc <pvPortMalloc+0x1b0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <pvPortMalloc+0x1b8>)
 8004a64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <pvPortMalloc+0x1ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <pvPortMalloc+0x1bc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <pvPortMalloc+0x1bc>)
 8004a82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a84:	f7fe faa2 	bl	8002fcc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <pvPortMalloc+0x19c>
        __asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	60fb      	str	r3, [r7, #12]
    }
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3728      	adds	r7, #40	; 0x28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20012d84 	.word	0x20012d84
 8004ab8:	20012d98 	.word	0x20012d98
 8004abc:	20012d88 	.word	0x20012d88
 8004ac0:	20012d7c 	.word	0x20012d7c
 8004ac4:	20012d8c 	.word	0x20012d8c
 8004ac8:	20012d90 	.word	0x20012d90

08004acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d04d      	beq.n	8004b7a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ade:	2308      	movs	r3, #8
 8004ae0:	425b      	negs	r3, r3
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <vPortFree+0xb8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <vPortFree+0x44>
        __asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	60fb      	str	r3, [r7, #12]
    }
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <vPortFree+0x62>
        __asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	60bb      	str	r3, [r7, #8]
    }
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	4b14      	ldr	r3, [pc, #80]	; (8004b84 <vPortFree+0xb8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01e      	beq.n	8004b7a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11a      	bne.n	8004b7a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <vPortFree+0xb8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	401a      	ands	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b54:	f7fe fa2c 	bl	8002fb0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <vPortFree+0xbc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4413      	add	r3, r2
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <vPortFree+0xbc>)
 8004b64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b66:	6938      	ldr	r0, [r7, #16]
 8004b68:	f000 f874 	bl	8004c54 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <vPortFree+0xc0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	4a06      	ldr	r2, [pc, #24]	; (8004b8c <vPortFree+0xc0>)
 8004b74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b76:	f7fe fa29 	bl	8002fcc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20012d98 	.word	0x20012d98
 8004b88:	20012d88 	.word	0x20012d88
 8004b8c:	20012d94 	.word	0x20012d94

08004b90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b96:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004b9c:	4b27      	ldr	r3, [pc, #156]	; (8004c3c <prvHeapInit+0xac>)
 8004b9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3307      	adds	r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0307 	bic.w	r3, r3, #7
 8004bb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <prvHeapInit+0xac>)
 8004bc0:	4413      	add	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <prvHeapInit+0xb0>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bce:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <prvHeapInit+0xb0>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bdc:	2208      	movs	r2, #8
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0307 	bic.w	r3, r3, #7
 8004bea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <prvHeapInit+0xb4>)
 8004bf0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <prvHeapInit+0xb4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <prvHeapInit+0xb4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	1ad2      	subs	r2, r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <prvHeapInit+0xb4>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <prvHeapInit+0xb8>)
 8004c1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <prvHeapInit+0xbc>)
 8004c26:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <prvHeapInit+0xc0>)
 8004c2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c2e:	601a      	str	r2, [r3, #0]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	2000017c 	.word	0x2000017c
 8004c40:	20012d7c 	.word	0x20012d7c
 8004c44:	20012d84 	.word	0x20012d84
 8004c48:	20012d8c 	.word	0x20012d8c
 8004c4c:	20012d88 	.word	0x20012d88
 8004c50:	20012d98 	.word	0x20012d98

08004c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c5c:	4b28      	ldr	r3, [pc, #160]	; (8004d00 <prvInsertBlockIntoFreeList+0xac>)
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e002      	b.n	8004c68 <prvInsertBlockIntoFreeList+0x14>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d8f7      	bhi.n	8004c62 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d108      	bne.n	8004c96 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d118      	bne.n	8004cdc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <prvInsertBlockIntoFreeList+0xb0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d00d      	beq.n	8004cd2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	441a      	add	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e008      	b.n	8004ce4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <prvInsertBlockIntoFreeList+0xb0>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e003      	b.n	8004ce4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d002      	beq.n	8004cf2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20012d7c 	.word	0x20012d7c
 8004d04:	20012d84 	.word	0x20012d84

08004d08 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d0c:	4803      	ldr	r0, [pc, #12]	; (8004d1c <_cbSendSystemDesc+0x14>)
 8004d0e:	f001 ff09 	bl	8006b24 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d12:	4803      	ldr	r0, [pc, #12]	; (8004d20 <_cbSendSystemDesc+0x18>)
 8004d14:	f001 ff06 	bl	8006b24 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d18:	bf00      	nop
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	0800736c 	.word	0x0800736c
 8004d20:	080073b0 	.word	0x080073b0

08004d24 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d32:	4a06      	ldr	r2, [pc, #24]	; (8004d4c <SEGGER_SYSVIEW_Conf+0x28>)
 8004d34:	f001 f9c4 	bl	80060c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d3c:	f001 fa04 	bl	8006148 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d40:	bf00      	nop
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000000 	.word	0x20000000
 8004d48:	08004d09 	.word	0x08004d09
 8004d4c:	08007450 	.word	0x08007450

08004d50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	e033      	b.n	8004dc4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d5c:	491e      	ldr	r1, [pc, #120]	; (8004dd8 <_cbSendTaskList+0x88>)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	491a      	ldr	r1, [pc, #104]	; (8004dd8 <_cbSendTaskList+0x88>)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	4c16      	ldr	r4, [pc, #88]	; (8004dd8 <_cbSendTaskList+0x88>)
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4423      	add	r3, r4
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	681c      	ldr	r4, [r3, #0]
 8004d90:	4d11      	ldr	r5, [pc, #68]	; (8004dd8 <_cbSendTaskList+0x88>)
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	442b      	add	r3, r5
 8004d9e:	330c      	adds	r3, #12
 8004da0:	681d      	ldr	r5, [r3, #0]
 8004da2:	4e0d      	ldr	r6, [pc, #52]	; (8004dd8 <_cbSendTaskList+0x88>)
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4433      	add	r3, r6
 8004db0:	3310      	adds	r3, #16
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	462b      	mov	r3, r5
 8004db8:	4622      	mov	r2, r4
 8004dba:	f000 f971 	bl	80050a0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <_cbSendTaskList+0x8c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d3c6      	bcc.n	8004d5c <_cbSendTaskList+0xc>
  }
}
 8004dce:	bf00      	nop
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd8:	20012d9c 	.word	0x20012d9c
 8004ddc:	20012e3c 	.word	0x20012e3c

08004de0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004de0:	b5b0      	push	{r4, r5, r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004de6:	f7fe fa01 	bl	80031ec <xTaskGetTickCountFromISR>
 8004dea:	4603      	mov	r3, r0
 8004dec:	461a      	mov	r2, r3
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	f04f 0400 	mov.w	r4, #0
 8004e02:	f04f 0500 	mov.w	r5, #0
 8004e06:	015d      	lsls	r5, r3, #5
 8004e08:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004e0c:	0154      	lsls	r4, r2, #5
 8004e0e:	4622      	mov	r2, r4
 8004e10:	462b      	mov	r3, r5
 8004e12:	1a12      	subs	r2, r2, r0
 8004e14:	eb63 0301 	sbc.w	r3, r3, r1
 8004e18:	f04f 0400 	mov.w	r4, #0
 8004e1c:	f04f 0500 	mov.w	r5, #0
 8004e20:	009d      	lsls	r5, r3, #2
 8004e22:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004e26:	0094      	lsls	r4, r2, #2
 8004e28:	4622      	mov	r2, r4
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	1812      	adds	r2, r2, r0
 8004e2e:	eb41 0303 	adc.w	r3, r1, r3
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f04f 0100 	mov.w	r1, #0
 8004e3a:	00d9      	lsls	r1, r3, #3
 8004e3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e40:	00d0      	lsls	r0, r2, #3
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bdb0      	pop	{r4, r5, r7, pc}

08004e58 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e66:	2205      	movs	r2, #5
 8004e68:	492b      	ldr	r1, [pc, #172]	; (8004f18 <SYSVIEW_AddTask+0xc0>)
 8004e6a:	68b8      	ldr	r0, [r7, #8]
 8004e6c:	f002 f9ec 	bl	8007248 <memcmp>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d04b      	beq.n	8004f0e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e76:	4b29      	ldr	r3, [pc, #164]	; (8004f1c <SYSVIEW_AddTask+0xc4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b07      	cmp	r3, #7
 8004e7c:	d903      	bls.n	8004e86 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e7e:	4828      	ldr	r0, [pc, #160]	; (8004f20 <SYSVIEW_AddTask+0xc8>)
 8004e80:	f002 f962 	bl	8007148 <SEGGER_SYSVIEW_Warn>
    return;
 8004e84:	e044      	b.n	8004f10 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e86:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <SYSVIEW_AddTask+0xc4>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4926      	ldr	r1, [pc, #152]	; (8004f24 <SYSVIEW_AddTask+0xcc>)
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e9a:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <SYSVIEW_AddTask+0xc4>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4921      	ldr	r1, [pc, #132]	; (8004f24 <SYSVIEW_AddTask+0xcc>)
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3304      	adds	r3, #4
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <SYSVIEW_AddTask+0xc4>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	491b      	ldr	r1, [pc, #108]	; (8004f24 <SYSVIEW_AddTask+0xcc>)
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <SYSVIEW_AddTask+0xc4>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4916      	ldr	r1, [pc, #88]	; (8004f24 <SYSVIEW_AddTask+0xcc>)
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <SYSVIEW_AddTask+0xc4>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4910      	ldr	r1, [pc, #64]	; (8004f24 <SYSVIEW_AddTask+0xcc>)
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3310      	adds	r3, #16
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <SYSVIEW_AddTask+0xc4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <SYSVIEW_AddTask+0xc4>)
 8004efa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f8ca 	bl	80050a0 <SYSVIEW_SendTaskInfo>
 8004f0c:	e000      	b.n	8004f10 <SYSVIEW_AddTask+0xb8>
    return;
 8004f0e:	bf00      	nop

}
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	080073c0 	.word	0x080073c0
 8004f1c:	20012e3c 	.word	0x20012e3c
 8004f20:	080073c8 	.word	0x080073c8
 8004f24:	20012d9c 	.word	0x20012d9c

08004f28 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004f30:	4b59      	ldr	r3, [pc, #356]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80ab 	beq.w	8005090 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e00d      	b.n	8004f5c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004f40:	4956      	ldr	r1, [pc, #344]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d008      	beq.n	8004f68 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	4b4e      	ldr	r3, [pc, #312]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d3ec      	bcc.n	8004f40 <SYSVIEW_DeleteTask+0x18>
 8004f66:	e000      	b.n	8004f6a <SYSVIEW_DeleteTask+0x42>
      break;
 8004f68:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004f6a:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d111      	bne.n	8004f9a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4a46      	ldr	r2, [pc, #280]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8004f82:	4413      	add	r3, r2
 8004f84:	2214      	movs	r2, #20
 8004f86:	2100      	movs	r1, #0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 f979 	bl	8007280 <memset>
    _NumTasks--;
 8004f8e:	4b42      	ldr	r3, [pc, #264]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	4a40      	ldr	r2, [pc, #256]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	e07b      	b.n	8005092 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004f9a:	4b3f      	ldr	r3, [pc, #252]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d276      	bcs.n	8005092 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004fa4:	4b3c      	ldr	r3, [pc, #240]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	493c      	ldr	r1, [pc, #240]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	6819      	ldr	r1, [r3, #0]
 8004fb8:	4838      	ldr	r0, [pc, #224]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4403      	add	r3, r0
 8004fc6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004fc8:	4b33      	ldr	r3, [pc, #204]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	1e5a      	subs	r2, r3, #1
 8004fce:	4933      	ldr	r1, [pc, #204]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	3304      	adds	r3, #4
 8004fdc:	6819      	ldr	r1, [r3, #0]
 8004fde:	482f      	ldr	r0, [pc, #188]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4403      	add	r3, r0
 8004fec:	3304      	adds	r3, #4
 8004fee:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004ff0:	4b29      	ldr	r3, [pc, #164]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	1e5a      	subs	r2, r3, #1
 8004ff6:	4929      	ldr	r1, [pc, #164]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	3308      	adds	r3, #8
 8005004:	6819      	ldr	r1, [r3, #0]
 8005006:	4825      	ldr	r0, [pc, #148]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4403      	add	r3, r0
 8005014:	3308      	adds	r3, #8
 8005016:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005018:	4b1f      	ldr	r3, [pc, #124]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	1e5a      	subs	r2, r3, #1
 800501e:	491f      	ldr	r1, [pc, #124]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	330c      	adds	r3, #12
 800502c:	6819      	ldr	r1, [r3, #0]
 800502e:	481b      	ldr	r0, [pc, #108]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4403      	add	r3, r0
 800503c:	330c      	adds	r3, #12
 800503e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005040:	4b15      	ldr	r3, [pc, #84]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	1e5a      	subs	r2, r3, #1
 8005046:	4915      	ldr	r1, [pc, #84]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	3310      	adds	r3, #16
 8005054:	6819      	ldr	r1, [r3, #0]
 8005056:	4811      	ldr	r0, [pc, #68]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4403      	add	r3, r0
 8005064:	3310      	adds	r3, #16
 8005066:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	1e5a      	subs	r2, r3, #1
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <SYSVIEW_DeleteTask+0x174>)
 8005078:	4413      	add	r3, r2
 800507a:	2214      	movs	r2, #20
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f002 f8fe 	bl	8007280 <memset>
    _NumTasks--;
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3b01      	subs	r3, #1
 800508a:	4a03      	ldr	r2, [pc, #12]	; (8005098 <SYSVIEW_DeleteTask+0x170>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e000      	b.n	8005092 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005090:	bf00      	nop
  }
}
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20012e3c 	.word	0x20012e3c
 800509c:	20012d9c 	.word	0x20012d9c

080050a0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80050ae:	f107 0314 	add.w	r3, r7, #20
 80050b2:	2214      	movs	r2, #20
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f002 f8e2 	bl	8007280 <memset>
  TaskInfo.TaskID     = TaskID;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80050d0:	f107 0314 	add.w	r3, r7, #20
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 fc2d 	bl	8006934 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80050da:	bf00      	nop
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80050ea:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <USART2_IRQHandler+0x80>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d011      	beq.n	800511e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <USART2_IRQHandler+0x84>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 030b 	and.w	r3, r3, #11
 8005108:	2b00      	cmp	r3, #0
 800510a:	d108      	bne.n	800511e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800510c:	4b17      	ldr	r3, [pc, #92]	; (800516c <USART2_IRQHandler+0x88>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005114:	4b15      	ldr	r3, [pc, #84]	; (800516c <USART2_IRQHandler+0x88>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	79fa      	ldrb	r2, [r7, #7]
 800511a:	4610      	mov	r0, r2
 800511c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01a      	beq.n	800515e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <USART2_IRQHandler+0x8c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d015      	beq.n	800515c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <USART2_IRQHandler+0x8c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	1dfa      	adds	r2, r7, #7
 8005136:	4610      	mov	r0, r2
 8005138:	4798      	blx	r3
 800513a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005142:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <USART2_IRQHandler+0x90>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a0b      	ldr	r2, [pc, #44]	; (8005174 <USART2_IRQHandler+0x90>)
 8005148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e006      	b.n	800515e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <USART2_IRQHandler+0x80>)
 8005152:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005154:	79fa      	ldrb	r2, [r7, #7]
 8005156:	4b04      	ldr	r3, [pc, #16]	; (8005168 <USART2_IRQHandler+0x84>)
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e000      	b.n	800515e <USART2_IRQHandler+0x7a>
      return;
 800515c:	bf00      	nop
    }
  }
}
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40004400 	.word	0x40004400
 8005168:	40004404 	.word	0x40004404
 800516c:	20012e40 	.word	0x20012e40
 8005170:	20012e44 	.word	0x20012e44
 8005174:	4000440c 	.word	0x4000440c

08005178 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800517c:	4b05      	ldr	r3, [pc, #20]	; (8005194 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a04      	ldr	r2, [pc, #16]	; (8005194 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005186:	6013      	str	r3, [r2, #0]
}
 8005188:	bf00      	nop
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	4000440c 	.word	0x4000440c

08005198 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800519e:	4b24      	ldr	r3, [pc, #144]	; (8005230 <_DoInit+0x98>)
 80051a0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2203      	movs	r2, #3
 80051a6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2203      	movs	r2, #3
 80051ac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a20      	ldr	r2, [pc, #128]	; (8005234 <_DoInit+0x9c>)
 80051b2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a20      	ldr	r2, [pc, #128]	; (8005238 <_DoInit+0xa0>)
 80051b8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051c0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a17      	ldr	r2, [pc, #92]	; (8005234 <_DoInit+0x9c>)
 80051d8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a17      	ldr	r2, [pc, #92]	; (800523c <_DoInit+0xa4>)
 80051de:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2210      	movs	r2, #16
 80051e4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3307      	adds	r3, #7
 80051fc:	4a10      	ldr	r2, [pc, #64]	; (8005240 <_DoInit+0xa8>)
 80051fe:	6810      	ldr	r0, [r2, #0]
 8005200:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005202:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <_DoInit+0xac>)
 800520a:	6810      	ldr	r0, [r2, #0]
 800520c:	6018      	str	r0, [r3, #0]
 800520e:	8891      	ldrh	r1, [r2, #4]
 8005210:	7992      	ldrb	r2, [r2, #6]
 8005212:	8099      	strh	r1, [r3, #4]
 8005214:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005216:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005220:	f3bf 8f5f 	dmb	sy
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	20014408 	.word	0x20014408
 8005234:	08007418 	.word	0x08007418
 8005238:	20012e48 	.word	0x20012e48
 800523c:	20013248 	.word	0x20013248
 8005240:	08007424 	.word	0x08007424
 8005244:	08007428 	.word	0x08007428

08005248 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005248:	b580      	push	{r7, lr}
 800524a:	b08c      	sub	sp, #48	; 0x30
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005254:	4b3e      	ldr	r3, [pc, #248]	; (8005350 <SEGGER_RTT_ReadNoLock+0x108>)
 8005256:	623b      	str	r3, [r7, #32]
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <SEGGER_RTT_ReadNoLock+0x1e>
 8005262:	f7ff ff99 	bl	8005198 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4613      	mov	r3, r2
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	4413      	add	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	3360      	adds	r3, #96	; 0x60
 8005272:	4a37      	ldr	r2, [pc, #220]	; (8005350 <SEGGER_RTT_ReadNoLock+0x108>)
 8005274:	4413      	add	r3, r2
 8005276:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005288:	2300      	movs	r3, #0
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800528c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	429a      	cmp	r2, r3
 8005292:	d92b      	bls.n	80052ec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4293      	cmp	r3, r2
 80052a4:	bf28      	it	cs
 80052a6:	4613      	movcs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	4413      	add	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	6939      	ldr	r1, [r7, #16]
 80052b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ba:	f001 ffd3 	bl	8007264 <memcpy>
    NumBytesRead += NumBytesRem;
 80052be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	4413      	add	r3, r2
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80052c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	4413      	add	r3, r2
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d101      	bne.n	80052ec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bf28      	it	cs
 80052fc:	4613      	movcs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d019      	beq.n	800533a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	4413      	add	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	6939      	ldr	r1, [r7, #16]
 8005314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005316:	f001 ffa5 	bl	8007264 <memcpy>
    NumBytesRead += NumBytesRem;
 800531a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4413      	add	r3, r2
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4413      	add	r3, r2
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005344:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005348:	4618      	mov	r0, r3
 800534a:	3730      	adds	r7, #48	; 0x30
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20014408 	.word	0x20014408

08005354 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005362:	4b3d      	ldr	r3, [pc, #244]	; (8005458 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005370:	f7ff ff12 	bl	8005198 <_DoInit>
  SEGGER_RTT_LOCK();
 8005374:	f3ef 8311 	mrs	r3, BASEPRI
 8005378:	f04f 0120 	mov.w	r1, #32
 800537c:	f381 8811 	msr	BASEPRI, r1
 8005380:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005382:	4b35      	ldr	r3, [pc, #212]	; (8005458 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005384:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800538a:	6939      	ldr	r1, [r7, #16]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	4613      	mov	r3, r2
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	4413      	add	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	440b      	add	r3, r1
 800539a:	3304      	adds	r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3301      	adds	r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	dbeb      	blt.n	800538a <SEGGER_RTT_AllocUpBuffer+0x36>
 80053b2:	e000      	b.n	80053b6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80053b4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	429a      	cmp	r2, r3
 80053be:	da3f      	bge.n	8005440 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80053c0:	6939      	ldr	r1, [r7, #16]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	4613      	mov	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4413      	add	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	440b      	add	r3, r1
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80053d4:	6939      	ldr	r1, [r7, #16]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	440b      	add	r3, r1
 80053e4:	3304      	adds	r3, #4
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80053ea:	6939      	ldr	r1, [r7, #16]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	440b      	add	r3, r1
 80053f8:	3320      	adds	r3, #32
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80053fe:	6939      	ldr	r1, [r7, #16]
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	4613      	mov	r3, r2
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	4413      	add	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	440b      	add	r3, r1
 800540c:	3328      	adds	r3, #40	; 0x28
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005412:	6939      	ldr	r1, [r7, #16]
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	4613      	mov	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	4413      	add	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	440b      	add	r3, r1
 8005420:	3324      	adds	r3, #36	; 0x24
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005426:	6939      	ldr	r1, [r7, #16]
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	4613      	mov	r3, r2
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	4413      	add	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	440b      	add	r3, r1
 8005434:	332c      	adds	r3, #44	; 0x2c
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800543a:	f3bf 8f5f 	dmb	sy
 800543e:	e002      	b.n	8005446 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005440:	f04f 33ff 	mov.w	r3, #4294967295
 8005444:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800544c:	69fb      	ldr	r3, [r7, #28]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20014408 	.word	0x20014408

0800545c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800546a:	4b33      	ldr	r3, [pc, #204]	; (8005538 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005478:	f7ff fe8e 	bl	8005198 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800547c:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800547e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	461a      	mov	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4293      	cmp	r3, r2
 800548a:	d24d      	bcs.n	8005528 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800548c:	f3ef 8311 	mrs	r3, BASEPRI
 8005490:	f04f 0120 	mov.w	r1, #32
 8005494:	f381 8811 	msr	BASEPRI, r1
 8005498:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d031      	beq.n	8005504 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80054a0:	6979      	ldr	r1, [r7, #20]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4613      	mov	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	4413      	add	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	440b      	add	r3, r1
 80054ae:	3360      	adds	r3, #96	; 0x60
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80054b4:	6979      	ldr	r1, [r7, #20]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4613      	mov	r3, r2
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4413      	add	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	440b      	add	r3, r1
 80054c2:	3364      	adds	r3, #100	; 0x64
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80054c8:	6979      	ldr	r1, [r7, #20]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4613      	mov	r3, r2
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	4413      	add	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	440b      	add	r3, r1
 80054d6:	3368      	adds	r3, #104	; 0x68
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80054dc:	6979      	ldr	r1, [r7, #20]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	440b      	add	r3, r1
 80054ea:	3370      	adds	r3, #112	; 0x70
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80054f0:	6979      	ldr	r1, [r7, #20]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4613      	mov	r3, r2
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	4413      	add	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	440b      	add	r3, r1
 80054fe:	336c      	adds	r3, #108	; 0x6c
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005504:	6979      	ldr	r1, [r7, #20]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	440b      	add	r3, r1
 8005512:	3374      	adds	r3, #116	; 0x74
 8005514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005516:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005518:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	e002      	b.n	800552e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005528:	f04f 33ff 	mov.w	r3, #4294967295
 800552c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800552e:	69fb      	ldr	r3, [r7, #28]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20014408 	.word	0x20014408

0800553c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800554c:	e002      	b.n	8005554 <_EncodeStr+0x18>
    Len++;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	3301      	adds	r3, #1
 8005552:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	4413      	add	r3, r2
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f6      	bne.n	800554e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	429a      	cmp	r2, r3
 8005566:	d901      	bls.n	800556c <_EncodeStr+0x30>
    Len = Limit;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2bfe      	cmp	r3, #254	; 0xfe
 8005570:	d806      	bhi.n	8005580 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	60fa      	str	r2, [r7, #12]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e011      	b.n	80055a4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	60fa      	str	r2, [r7, #12]
 8005586:	22ff      	movs	r2, #255	; 0xff
 8005588:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	60fa      	str	r2, [r7, #12]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	0a19      	lsrs	r1, r3, #8
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	60fa      	str	r2, [r7, #12]
 80055a0:	b2ca      	uxtb	r2, r1
 80055a2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80055a8:	e00a      	b.n	80055c0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	1c53      	adds	r3, r2, #1
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1c59      	adds	r1, r3, #1
 80055b4:	60f9      	str	r1, [r7, #12]
 80055b6:	7812      	ldrb	r2, [r2, #0]
 80055b8:	701a      	strb	r2, [r3, #0]
    n++;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	3301      	adds	r3, #1
 80055be:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d3f0      	bcc.n	80055aa <_EncodeStr+0x6e>
  }
  return pPayload;
 80055c8:	68fb      	ldr	r3, [r7, #12]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3304      	adds	r3, #4
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055f6:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <_HandleIncomingPacket+0xe0>)
 80055f8:	7e1b      	ldrb	r3, [r3, #24]
 80055fa:	4618      	mov	r0, r3
 80055fc:	1cfb      	adds	r3, r7, #3
 80055fe:	2201      	movs	r2, #1
 8005600:	4619      	mov	r1, r3
 8005602:	f7ff fe21 	bl	8005248 <SEGGER_RTT_ReadNoLock>
 8005606:	4603      	mov	r3, r0
 8005608:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	dd54      	ble.n	80056ba <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	2b80      	cmp	r3, #128	; 0x80
 8005614:	d032      	beq.n	800567c <_HandleIncomingPacket+0x8c>
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	dc42      	bgt.n	80056a0 <_HandleIncomingPacket+0xb0>
 800561a:	2b07      	cmp	r3, #7
 800561c:	dc16      	bgt.n	800564c <_HandleIncomingPacket+0x5c>
 800561e:	2b00      	cmp	r3, #0
 8005620:	dd3e      	ble.n	80056a0 <_HandleIncomingPacket+0xb0>
 8005622:	3b01      	subs	r3, #1
 8005624:	2b06      	cmp	r3, #6
 8005626:	d83b      	bhi.n	80056a0 <_HandleIncomingPacket+0xb0>
 8005628:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <_HandleIncomingPacket+0x40>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005653 	.word	0x08005653
 8005634:	08005659 	.word	0x08005659
 8005638:	0800565f 	.word	0x0800565f
 800563c:	08005665 	.word	0x08005665
 8005640:	0800566b 	.word	0x0800566b
 8005644:	08005671 	.word	0x08005671
 8005648:	08005677 	.word	0x08005677
 800564c:	2b7f      	cmp	r3, #127	; 0x7f
 800564e:	d036      	beq.n	80056be <_HandleIncomingPacket+0xce>
 8005650:	e026      	b.n	80056a0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005652:	f000 fff3 	bl	800663c <SEGGER_SYSVIEW_Start>
      break;
 8005656:	e037      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005658:	f001 f8ac 	bl	80067b4 <SEGGER_SYSVIEW_Stop>
      break;
 800565c:	e034      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800565e:	f001 fa85 	bl	8006b6c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005662:	e031      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005664:	f001 fa4a 	bl	8006afc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005668:	e02e      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800566a:	f001 f8c9 	bl	8006800 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800566e:	e02b      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005670:	f001 fd18 	bl	80070a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005674:	e028      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005676:	f001 fcf7 	bl	8007068 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800567a:	e025      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800567c:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <_HandleIncomingPacket+0xe0>)
 800567e:	7e1b      	ldrb	r3, [r3, #24]
 8005680:	4618      	mov	r0, r3
 8005682:	1cfb      	adds	r3, r7, #3
 8005684:	2201      	movs	r2, #1
 8005686:	4619      	mov	r1, r3
 8005688:	f7ff fdde 	bl	8005248 <SEGGER_RTT_ReadNoLock>
 800568c:	4603      	mov	r3, r0
 800568e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	dd15      	ble.n	80056c2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	4618      	mov	r0, r3
 800569a:	f001 fc65 	bl	8006f68 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800569e:	e010      	b.n	80056c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	b25b      	sxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	da0e      	bge.n	80056c6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <_HandleIncomingPacket+0xe0>)
 80056aa:	7e1b      	ldrb	r3, [r3, #24]
 80056ac:	4618      	mov	r0, r3
 80056ae:	1cfb      	adds	r3, r7, #3
 80056b0:	2201      	movs	r2, #1
 80056b2:	4619      	mov	r1, r3
 80056b4:	f7ff fdc8 	bl	8005248 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80056b8:	e005      	b.n	80056c6 <_HandleIncomingPacket+0xd6>
    }
  }
 80056ba:	bf00      	nop
 80056bc:	e004      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
      break;
 80056be:	bf00      	nop
 80056c0:	e002      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
      break;
 80056c2:	bf00      	nop
 80056c4:	e000      	b.n	80056c8 <_HandleIncomingPacket+0xd8>
      break;
 80056c6:	bf00      	nop
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20014260 	.word	0x20014260

080056d4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08c      	sub	sp, #48	; 0x30
 80056d8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80056da:	2301      	movs	r3, #1
 80056dc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	3301      	adds	r3, #1
 80056e2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e8:	4b32      	ldr	r3, [pc, #200]	; (80057b4 <_TrySendOverflowPacket+0xe0>)
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ee:	e00b      	b.n	8005708 <_TrySendOverflowPacket+0x34>
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	09db      	lsrs	r3, r3, #7
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	2b7f      	cmp	r3, #127	; 0x7f
 800570c:	d8f0      	bhi.n	80056f0 <_TrySendOverflowPacket+0x1c>
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800571e:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <_TrySendOverflowPacket+0xe4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005724:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <_TrySendOverflowPacket+0xe0>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	623b      	str	r3, [r7, #32]
 8005736:	e00b      	b.n	8005750 <_TrySendOverflowPacket+0x7c>
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	1c59      	adds	r1, r3, #1
 8005740:	6279      	str	r1, [r7, #36]	; 0x24
 8005742:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	09db      	lsrs	r3, r3, #7
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2b7f      	cmp	r3, #127	; 0x7f
 8005754:	d8f0      	bhi.n	8005738 <_TrySendOverflowPacket+0x64>
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	627a      	str	r2, [r7, #36]	; 0x24
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005766:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <_TrySendOverflowPacket+0xe0>)
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	4618      	mov	r0, r3
 800576c:	1d3b      	adds	r3, r7, #4
 800576e:	69fa      	ldr	r2, [r7, #28]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	461a      	mov	r2, r3
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	4619      	mov	r1, r3
 8005778:	f7fa fd4a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800577c:	4603      	mov	r3, r0
 800577e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005780:	f7ff fcfa 	bl	8005178 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800578a:	4a0a      	ldr	r2, [pc, #40]	; (80057b4 <_TrySendOverflowPacket+0xe0>)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005790:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <_TrySendOverflowPacket+0xe0>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	3b01      	subs	r3, #1
 8005796:	b2da      	uxtb	r2, r3
 8005798:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <_TrySendOverflowPacket+0xe0>)
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e004      	b.n	80057a8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <_TrySendOverflowPacket+0xe0>)
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	3301      	adds	r3, #1
 80057a4:	4a03      	ldr	r2, [pc, #12]	; (80057b4 <_TrySendOverflowPacket+0xe0>)
 80057a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80057a8:	693b      	ldr	r3, [r7, #16]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3730      	adds	r7, #48	; 0x30
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20014260 	.word	0x20014260
 80057b8:	e0001004 	.word	0xe0001004

080057bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	; 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80057c8:	4b6d      	ldr	r3, [pc, #436]	; (8005980 <_SendPacket+0x1c4>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d010      	beq.n	80057f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80057d0:	4b6b      	ldr	r3, [pc, #428]	; (8005980 <_SendPacket+0x1c4>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a5 	beq.w	8005924 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80057da:	4b69      	ldr	r3, [pc, #420]	; (8005980 <_SendPacket+0x1c4>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d109      	bne.n	80057f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80057e2:	f7ff ff77 	bl	80056d4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80057e6:	4b66      	ldr	r3, [pc, #408]	; (8005980 <_SendPacket+0x1c4>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	f040 809c 	bne.w	8005928 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80057f0:	e001      	b.n	80057f6 <_SendPacket+0x3a>
    goto Send;
 80057f2:	bf00      	nop
 80057f4:	e000      	b.n	80057f8 <_SendPacket+0x3c>
Send:
 80057f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b1f      	cmp	r3, #31
 80057fc:	d809      	bhi.n	8005812 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80057fe:	4b60      	ldr	r3, [pc, #384]	; (8005980 <_SendPacket+0x1c4>)
 8005800:	69da      	ldr	r2, [r3, #28]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	f040 808d 	bne.w	800592c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b17      	cmp	r3, #23
 8005816:	d807      	bhi.n	8005828 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b01      	subs	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e03d      	b.n	80058a4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b7f      	cmp	r3, #127	; 0x7f
 8005834:	d912      	bls.n	800585c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	09da      	lsrs	r2, r3, #7
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3b01      	subs	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	3a01      	subs	r2, #1
 800584e:	60fa      	str	r2, [r7, #12]
 8005850:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	e006      	b.n	800586a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3b01      	subs	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b7f      	cmp	r3, #127	; 0x7f
 800586e:	d912      	bls.n	8005896 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	09da      	lsrs	r2, r3, #7
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3b01      	subs	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	3a01      	subs	r2, #1
 8005888:	60fa      	str	r2, [r7, #12]
 800588a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	e006      	b.n	80058a4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b01      	subs	r3, #1
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058a4:	4b37      	ldr	r3, [pc, #220]	; (8005984 <_SendPacket+0x1c8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80058aa:	4b35      	ldr	r3, [pc, #212]	; (8005980 <_SendPacket+0x1c4>)
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	e00b      	b.n	80058d6 <_SendPacket+0x11a>
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	1c59      	adds	r1, r3, #1
 80058c6:	6279      	str	r1, [r7, #36]	; 0x24
 80058c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	09db      	lsrs	r3, r3, #7
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	2b7f      	cmp	r3, #127	; 0x7f
 80058da:	d8f0      	bhi.n	80058be <_SendPacket+0x102>
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	627a      	str	r2, [r7, #36]	; 0x24
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80058ec:	4b24      	ldr	r3, [pc, #144]	; (8005980 <_SendPacket+0x1c4>)
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	4618      	mov	r0, r3
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	68f9      	ldr	r1, [r7, #12]
 80058fc:	f7fa fc88 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005900:	4603      	mov	r3, r0
 8005902:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005904:	f7ff fc38 	bl	8005178 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <_SendPacket+0x1c4>)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	60d3      	str	r3, [r2, #12]
 8005914:	e00b      	b.n	800592e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005916:	4b1a      	ldr	r3, [pc, #104]	; (8005980 <_SendPacket+0x1c4>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	b2da      	uxtb	r2, r3
 800591e:	4b18      	ldr	r3, [pc, #96]	; (8005980 <_SendPacket+0x1c4>)
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e004      	b.n	800592e <_SendPacket+0x172>
    goto SendDone;
 8005924:	bf00      	nop
 8005926:	e002      	b.n	800592e <_SendPacket+0x172>
      goto SendDone;
 8005928:	bf00      	nop
 800592a:	e000      	b.n	800592e <_SendPacket+0x172>
      goto SendDone;
 800592c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <_SendPacket+0x1c4>)
 8005930:	7e1b      	ldrb	r3, [r3, #24]
 8005932:	4619      	mov	r1, r3
 8005934:	4a14      	ldr	r2, [pc, #80]	; (8005988 <_SendPacket+0x1cc>)
 8005936:	460b      	mov	r3, r1
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	440b      	add	r3, r1
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4413      	add	r3, r2
 8005940:	336c      	adds	r3, #108	; 0x6c
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <_SendPacket+0x1c4>)
 8005946:	7e1b      	ldrb	r3, [r3, #24]
 8005948:	4618      	mov	r0, r3
 800594a:	490f      	ldr	r1, [pc, #60]	; (8005988 <_SendPacket+0x1cc>)
 800594c:	4603      	mov	r3, r0
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4403      	add	r3, r0
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	440b      	add	r3, r1
 8005956:	3370      	adds	r3, #112	; 0x70
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d00b      	beq.n	8005976 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800595e:	4b08      	ldr	r3, [pc, #32]	; (8005980 <_SendPacket+0x1c4>)
 8005960:	789b      	ldrb	r3, [r3, #2]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d107      	bne.n	8005976 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <_SendPacket+0x1c4>)
 8005968:	2201      	movs	r2, #1
 800596a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800596c:	f7ff fe40 	bl	80055f0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <_SendPacket+0x1c4>)
 8005972:	2200      	movs	r2, #0
 8005974:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005976:	bf00      	nop
 8005978:	3728      	adds	r7, #40	; 0x28
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20014260 	.word	0x20014260
 8005984:	e0001004 	.word	0xe0001004
 8005988:	20014408 	.word	0x20014408

0800598c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	3301      	adds	r3, #1
 80059a2:	2b80      	cmp	r3, #128	; 0x80
 80059a4:	d80a      	bhi.n	80059bc <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	1c59      	adds	r1, r3, #1
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6051      	str	r1, [r2, #4]
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b80      	cmp	r3, #128	; 0x80
 80059c2:	d15a      	bne.n	8005a7a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	e00b      	b.n	80059fe <_StoreChar+0x72>
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	6279      	str	r1, [r7, #36]	; 0x24
 80059f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	09db      	lsrs	r3, r3, #7
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	2b7f      	cmp	r3, #127	; 0x7f
 8005a02:	d8f0      	bhi.n	80059e6 <_StoreChar+0x5a>
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	627a      	str	r2, [r7, #36]	; 0x24
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	e00b      	b.n	8005a36 <_StoreChar+0xaa>
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	1c59      	adds	r1, r3, #1
 8005a26:	61f9      	str	r1, [r7, #28]
 8005a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	09db      	lsrs	r3, r3, #7
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b7f      	cmp	r3, #127	; 0x7f
 8005a3a:	d8f0      	bhi.n	8005a1e <_StoreChar+0x92>
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	61fa      	str	r2, [r7, #28]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	221a      	movs	r2, #26
 8005a52:	6939      	ldr	r1, [r7, #16]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff feb1 	bl	80057bc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fdb9 	bl	80055d6 <_PreparePacket>
 8005a64:	4602      	mov	r2, r0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	611a      	str	r2, [r3, #16]
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3728      	adds	r7, #40	; 0x28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	; 0x28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a96:	2301      	movs	r3, #1
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a9e:	e007      	b.n	8005ab0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	623b      	str	r3, [r7, #32]
    Width++;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3301      	adds	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005ab0:	6a3a      	ldr	r2, [r7, #32]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d2f3      	bcs.n	8005aa0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d901      	bls.n	8005ac4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d11f      	bne.n	8005b0e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01c      	beq.n	8005b0e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <_PrintUnsigned+0x66>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <_PrintUnsigned+0x66>
        c = '0';
 8005ae4:	2330      	movs	r3, #48	; 0x30
 8005ae6:	76fb      	strb	r3, [r7, #27]
 8005ae8:	e001      	b.n	8005aee <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005aea:	2320      	movs	r3, #32
 8005aec:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aee:	e007      	b.n	8005b00 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	3b01      	subs	r3, #1
 8005af4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005af6:	7efb      	ldrb	r3, [r7, #27]
 8005af8:	4619      	mov	r1, r3
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff ff46 	bl	800598c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <_PrintUnsigned+0x8a>
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3f0      	bcc.n	8005af0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d903      	bls.n	8005b1c <_PrintUnsigned+0x98>
      NumDigits--;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	e009      	b.n	8005b30 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d200      	bcs.n	8005b30 <_PrintUnsigned+0xac>
        break;
 8005b2e:	e005      	b.n	8005b3c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	fb02 f303 	mul.w	r3, r2, r3
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b3a:	e7e8      	b.n	8005b0e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b44:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b54:	4a15      	ldr	r2, [pc, #84]	; (8005bac <_PrintUnsigned+0x128>)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff ff14 	bl	800598c <_StoreChar>
    Digit /= Base;
 8005b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e3      	bne.n	8005b3c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d011      	beq.n	8005ba2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00e      	beq.n	8005ba2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b84:	e006      	b.n	8005b94 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b8c:	2120      	movs	r1, #32
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff fefc 	bl	800598c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <_PrintUnsigned+0x11e>
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d3f1      	bcc.n	8005b86 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	3728      	adds	r7, #40	; 0x28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	08007464 	.word	0x08007464

08005bb0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bfb8      	it	lt
 8005bc4:	425b      	neglt	r3, r3
 8005bc6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bcc:	e007      	b.n	8005bde <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bd6:	613b      	str	r3, [r7, #16]
    Width++;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	daf3      	bge.n	8005bce <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d901      	bls.n	8005bf2 <_PrintInt+0x42>
    Width = NumDigits;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <_PrintInt+0x5e>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	db04      	blt.n	8005c08 <_PrintInt+0x58>
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <_PrintInt+0x5e>
    FieldWidth--;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <_PrintInt+0x6e>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <_PrintInt+0x9c>
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d111      	bne.n	8005c4c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00e      	beq.n	8005c4c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c2e:	e006      	b.n	8005c3e <_PrintInt+0x8e>
        FieldWidth--;
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005c36:	2120      	movs	r1, #32
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff fea7 	bl	800598c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <_PrintInt+0x9c>
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d3f1      	bcc.n	8005c30 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	da07      	bge.n	8005c62 <_PrintInt+0xb2>
    v = -v;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	425b      	negs	r3, r3
 8005c56:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c58:	212d      	movs	r1, #45	; 0x2d
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff fe96 	bl	800598c <_StoreChar>
 8005c60:	e008      	b.n	8005c74 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c6c:	212b      	movs	r1, #43	; 0x2b
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff fe8c 	bl	800598c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d019      	beq.n	8005cb2 <_PrintInt+0x102>
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d114      	bne.n	8005cb2 <_PrintInt+0x102>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d111      	bne.n	8005cb2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00e      	beq.n	8005cb2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c94:	e006      	b.n	8005ca4 <_PrintInt+0xf4>
        FieldWidth--;
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c9c:	2130      	movs	r1, #48	; 0x30
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fe74 	bl	800598c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <_PrintInt+0x102>
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d3f1      	bcc.n	8005c96 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff fedf 	bl	8005a84 <_PrintUnsigned>
}
 8005cc6:	bf00      	nop
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b098      	sub	sp, #96	; 0x60
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce0:	f04f 0120 	mov.w	r1, #32
 8005ce4:	f381 8811 	msr	BASEPRI, r1
 8005ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cea:	48b7      	ldr	r0, [pc, #732]	; (8005fc8 <_VPrintTarget+0x2f8>)
 8005cec:	f7ff fc73 	bl	80055d6 <_PreparePacket>
 8005cf0:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005cf2:	4bb5      	ldr	r3, [pc, #724]	; (8005fc8 <_VPrintTarget+0x2f8>)
 8005cf4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	3301      	adds	r3, #1
 8005d02:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005d16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8183 	beq.w	8006026 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005d20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d24:	2b25      	cmp	r3, #37	; 0x25
 8005d26:	f040 8170 	bne.w	800600a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005d3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d3e:	3b23      	subs	r3, #35	; 0x23
 8005d40:	2b0d      	cmp	r3, #13
 8005d42:	d83f      	bhi.n	8005dc4 <_VPrintTarget+0xf4>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <_VPrintTarget+0x7c>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005db5 	.word	0x08005db5
 8005d50:	08005dc5 	.word	0x08005dc5
 8005d54:	08005dc5 	.word	0x08005dc5
 8005d58:	08005dc5 	.word	0x08005dc5
 8005d5c:	08005dc5 	.word	0x08005dc5
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08005dc5 	.word	0x08005dc5
 8005d68:	08005dc5 	.word	0x08005dc5
 8005d6c:	08005da5 	.word	0x08005da5
 8005d70:	08005dc5 	.word	0x08005dc5
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005dc5 	.word	0x08005dc5
 8005d7c:	08005dc5 	.word	0x08005dc5
 8005d80:	08005d95 	.word	0x08005d95
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e01a      	b.n	8005dca <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d96:	f043 0302 	orr.w	r3, r3, #2
 8005d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e012      	b.n	8005dca <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da6:	f043 0304 	orr.w	r3, r3, #4
 8005daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3301      	adds	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e00a      	b.n	8005dca <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db6:	f043 0308 	orr.w	r3, r3, #8
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e002      	b.n	8005dca <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc8:	bf00      	nop
        }
      } while (v);
 8005dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1b0      	bne.n	8005d32 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de0:	2b2f      	cmp	r3, #47	; 0x2f
 8005de2:	d912      	bls.n	8005e0a <_VPrintTarget+0x13a>
 8005de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de8:	2b39      	cmp	r3, #57	; 0x39
 8005dea:	d80e      	bhi.n	8005e0a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e02:	4413      	add	r3, r2
 8005e04:	3b30      	subs	r3, #48	; 0x30
 8005e06:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005e08:	e7e4      	b.n	8005dd4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e1c:	d11d      	bne.n	8005e5a <_VPrintTarget+0x18a>
        sFormat++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e30:	2b2f      	cmp	r3, #47	; 0x2f
 8005e32:	d912      	bls.n	8005e5a <_VPrintTarget+0x18a>
 8005e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e38:	2b39      	cmp	r3, #57	; 0x39
 8005e3a:	d80e      	bhi.n	8005e5a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e52:	4413      	add	r3, r2
 8005e54:	3b30      	subs	r3, #48	; 0x30
 8005e56:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e58:	e7e4      	b.n	8005e24 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e66:	2b6c      	cmp	r3, #108	; 0x6c
 8005e68:	d003      	beq.n	8005e72 <_VPrintTarget+0x1a2>
 8005e6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e6e:	2b68      	cmp	r3, #104	; 0x68
 8005e70:	d107      	bne.n	8005e82 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e80:	e7ef      	b.n	8005e62 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e86:	2b25      	cmp	r3, #37	; 0x25
 8005e88:	f000 80b3 	beq.w	8005ff2 <_VPrintTarget+0x322>
 8005e8c:	2b25      	cmp	r3, #37	; 0x25
 8005e8e:	f2c0 80b7 	blt.w	8006000 <_VPrintTarget+0x330>
 8005e92:	2b78      	cmp	r3, #120	; 0x78
 8005e94:	f300 80b4 	bgt.w	8006000 <_VPrintTarget+0x330>
 8005e98:	2b58      	cmp	r3, #88	; 0x58
 8005e9a:	f2c0 80b1 	blt.w	8006000 <_VPrintTarget+0x330>
 8005e9e:	3b58      	subs	r3, #88	; 0x58
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	f200 80ad 	bhi.w	8006000 <_VPrintTarget+0x330>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <_VPrintTarget+0x1dc>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005fa3 	.word	0x08005fa3
 8005eb0:	08006001 	.word	0x08006001
 8005eb4:	08006001 	.word	0x08006001
 8005eb8:	08006001 	.word	0x08006001
 8005ebc:	08006001 	.word	0x08006001
 8005ec0:	08006001 	.word	0x08006001
 8005ec4:	08006001 	.word	0x08006001
 8005ec8:	08006001 	.word	0x08006001
 8005ecc:	08006001 	.word	0x08006001
 8005ed0:	08006001 	.word	0x08006001
 8005ed4:	08006001 	.word	0x08006001
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f57 	.word	0x08005f57
 8005ee0:	08006001 	.word	0x08006001
 8005ee4:	08006001 	.word	0x08006001
 8005ee8:	08006001 	.word	0x08006001
 8005eec:	08006001 	.word	0x08006001
 8005ef0:	08006001 	.word	0x08006001
 8005ef4:	08006001 	.word	0x08006001
 8005ef8:	08006001 	.word	0x08006001
 8005efc:	08006001 	.word	0x08006001
 8005f00:	08006001 	.word	0x08006001
 8005f04:	08006001 	.word	0x08006001
 8005f08:	08006001 	.word	0x08006001
 8005f0c:	08005fcd 	.word	0x08005fcd
 8005f10:	08006001 	.word	0x08006001
 8005f14:	08006001 	.word	0x08006001
 8005f18:	08006001 	.word	0x08006001
 8005f1c:	08006001 	.word	0x08006001
 8005f20:	08005f7d 	.word	0x08005f7d
 8005f24:	08006001 	.word	0x08006001
 8005f28:	08006001 	.word	0x08006001
 8005f2c:	08005fa3 	.word	0x08005fa3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	1d19      	adds	r1, r3, #4
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6011      	str	r1, [r2, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005f44:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005f48:	f107 0314 	add.w	r3, r7, #20
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fd1c 	bl	800598c <_StoreChar>
        break;
 8005f54:	e055      	b.n	8006002 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	1d19      	adds	r1, r3, #4
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6011      	str	r1, [r2, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f64:	f107 0014 	add.w	r0, r7, #20
 8005f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f72:	220a      	movs	r2, #10
 8005f74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f76:	f7ff fe1b 	bl	8005bb0 <_PrintInt>
        break;
 8005f7a:	e042      	b.n	8006002 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	1d19      	adds	r1, r3, #4
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f8c:	f107 0014 	add.w	r0, r7, #20
 8005f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	f7ff fd72 	bl	8005a84 <_PrintUnsigned>
        break;
 8005fa0:	e02f      	b.n	8006002 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	1d19      	adds	r1, r3, #4
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6011      	str	r1, [r2, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005fb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fb2:	f107 0014 	add.w	r0, r7, #20
 8005fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc0:	2210      	movs	r2, #16
 8005fc2:	f7ff fd5f 	bl	8005a84 <_PrintUnsigned>
        break;
 8005fc6:	e01c      	b.n	8006002 <_VPrintTarget+0x332>
 8005fc8:	20014290 	.word	0x20014290
      case 'p':
        v = va_arg(*pParamList, int);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	1d19      	adds	r1, r3, #4
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005fda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fdc:	f107 0014 	add.w	r0, r7, #20
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2308      	movs	r3, #8
 8005fea:	2210      	movs	r2, #16
 8005fec:	f7ff fd4a 	bl	8005a84 <_PrintUnsigned>
        break;
 8005ff0:	e007      	b.n	8006002 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005ff2:	f107 0314 	add.w	r3, r7, #20
 8005ff6:	2125      	movs	r1, #37	; 0x25
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fcc7 	bl	800598c <_StoreChar>
        break;
 8005ffe:	e000      	b.n	8006002 <_VPrintTarget+0x332>
      default:
        break;
 8006000:	bf00      	nop
      }
      sFormat++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3301      	adds	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	e007      	b.n	800601a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800600a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800600e:	f107 0314 	add.w	r3, r7, #20
 8006012:	4611      	mov	r1, r2
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fcb9 	bl	800598c <_StoreChar>
    }
  } while (*sFormat);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f47f ae72 	bne.w	8005d08 <_VPrintTarget+0x38>
 8006024:	e000      	b.n	8006028 <_VPrintTarget+0x358>
      break;
 8006026:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	2b00      	cmp	r3, #0
 800602c:	d041      	beq.n	80060b2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800602e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	643b      	str	r3, [r7, #64]	; 0x40
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800603e:	e00b      	b.n	8006058 <_VPrintTarget+0x388>
 8006040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006042:	b2da      	uxtb	r2, r3
 8006044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	6439      	str	r1, [r7, #64]	; 0x40
 800604a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	09db      	lsrs	r3, r3, #7
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605a:	2b7f      	cmp	r3, #127	; 0x7f
 800605c:	d8f0      	bhi.n	8006040 <_VPrintTarget+0x370>
 800605e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	643a      	str	r2, [r7, #64]	; 0x40
 8006064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800606c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	63bb      	str	r3, [r7, #56]	; 0x38
 8006072:	2300      	movs	r3, #0
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
 8006076:	e00b      	b.n	8006090 <_VPrintTarget+0x3c0>
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	b2da      	uxtb	r2, r3
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	1c59      	adds	r1, r3, #1
 8006080:	63b9      	str	r1, [r7, #56]	; 0x38
 8006082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	09db      	lsrs	r3, r3, #7
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	2b7f      	cmp	r3, #127	; 0x7f
 8006094:	d8f0      	bhi.n	8006078 <_VPrintTarget+0x3a8>
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	63ba      	str	r2, [r7, #56]	; 0x38
 800609c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	69b9      	ldr	r1, [r7, #24]
 80060aa:	221a      	movs	r2, #26
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fb85 	bl	80057bc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80060b8:	bf00      	nop
 80060ba:	3758      	adds	r7, #88	; 0x58
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060ce:	2300      	movs	r3, #0
 80060d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060d4:	4917      	ldr	r1, [pc, #92]	; (8006134 <SEGGER_SYSVIEW_Init+0x74>)
 80060d6:	4818      	ldr	r0, [pc, #96]	; (8006138 <SEGGER_SYSVIEW_Init+0x78>)
 80060d8:	f7ff f93c 	bl	8005354 <SEGGER_RTT_AllocUpBuffer>
 80060dc:	4603      	mov	r3, r0
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b16      	ldr	r3, [pc, #88]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 80060e2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80060e4:	4b15      	ldr	r3, [pc, #84]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 80060e6:	785a      	ldrb	r2, [r3, #1]
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 80060ea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060ec:	4b13      	ldr	r3, [pc, #76]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 80060ee:	7e1b      	ldrb	r3, [r3, #24]
 80060f0:	4618      	mov	r0, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	2308      	movs	r3, #8
 80060f8:	4a11      	ldr	r2, [pc, #68]	; (8006140 <SEGGER_SYSVIEW_Init+0x80>)
 80060fa:	490f      	ldr	r1, [pc, #60]	; (8006138 <SEGGER_SYSVIEW_Init+0x78>)
 80060fc:	f7ff f9ae 	bl	800545c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006102:	2200      	movs	r2, #0
 8006104:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <SEGGER_SYSVIEW_Init+0x84>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a0c      	ldr	r2, [pc, #48]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 800610c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800610e:	4a0b      	ldr	r2, [pc, #44]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006114:	4a09      	ldr	r2, [pc, #36]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800611a:	4a08      	ldr	r2, [pc, #32]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006120:	4a06      	ldr	r2, [pc, #24]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006128:	2200      	movs	r2, #0
 800612a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20013258 	.word	0x20013258
 8006138:	08007430 	.word	0x08007430
 800613c:	20014260 	.word	0x20014260
 8006140:	20014258 	.word	0x20014258
 8006144:	e0001004 	.word	0xe0001004

08006148 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006150:	4a04      	ldr	r2, [pc, #16]	; (8006164 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6113      	str	r3, [r2, #16]
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20014260 	.word	0x20014260

08006168 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006170:	f3ef 8311 	mrs	r3, BASEPRI
 8006174:	f04f 0120 	mov.w	r1, #32
 8006178:	f381 8811 	msr	BASEPRI, r1
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	4808      	ldr	r0, [pc, #32]	; (80061a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006180:	f7ff fa29 	bl	80055d6 <_PreparePacket>
 8006184:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68b8      	ldr	r0, [r7, #8]
 800618c:	f7ff fb16 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f383 8811 	msr	BASEPRI, r3
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20014290 	.word	0x20014290

080061a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061ae:	f3ef 8311 	mrs	r3, BASEPRI
 80061b2:	f04f 0120 	mov.w	r1, #32
 80061b6:	f381 8811 	msr	BASEPRI, r1
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	4816      	ldr	r0, [pc, #88]	; (8006218 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061be:	f7ff fa0a 	bl	80055d6 <_PreparePacket>
 80061c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e00b      	b.n	80061ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	61f9      	str	r1, [r7, #28]
 80061dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	09db      	lsrs	r3, r3, #7
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b7f      	cmp	r3, #127	; 0x7f
 80061ee:	d8f0      	bhi.n	80061d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	61fa      	str	r2, [r7, #28]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	6938      	ldr	r0, [r7, #16]
 8006206:	f7ff fad9 	bl	80057bc <_SendPacket>
  RECORD_END();
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f383 8811 	msr	BASEPRI, r3
}
 8006210:	bf00      	nop
 8006212:	3720      	adds	r7, #32
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20014290 	.word	0x20014290

0800621c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b08c      	sub	sp, #48	; 0x30
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006228:	f3ef 8311 	mrs	r3, BASEPRI
 800622c:	f04f 0120 	mov.w	r1, #32
 8006230:	f381 8811 	msr	BASEPRI, r1
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	4825      	ldr	r0, [pc, #148]	; (80062cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006238:	f7ff f9cd 	bl	80055d6 <_PreparePacket>
 800623c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
 800624a:	e00b      	b.n	8006264 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	2b7f      	cmp	r3, #127	; 0x7f
 8006268:	d8f0      	bhi.n	800624c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	623b      	str	r3, [r7, #32]
 8006282:	e00b      	b.n	800629c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1c59      	adds	r1, r3, #1
 800628c:	6279      	str	r1, [r7, #36]	; 0x24
 800628e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	09db      	lsrs	r3, r3, #7
 800629a:	623b      	str	r3, [r7, #32]
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	2b7f      	cmp	r3, #127	; 0x7f
 80062a0:	d8f0      	bhi.n	8006284 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	627a      	str	r2, [r7, #36]	; 0x24
 80062a8:	6a3a      	ldr	r2, [r7, #32]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	6979      	ldr	r1, [r7, #20]
 80062b6:	69b8      	ldr	r0, [r7, #24]
 80062b8:	f7ff fa80 	bl	80057bc <_SendPacket>
  RECORD_END();
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f383 8811 	msr	BASEPRI, r3
}
 80062c2:	bf00      	nop
 80062c4:	3730      	adds	r7, #48	; 0x30
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20014290 	.word	0x20014290

080062d0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08e      	sub	sp, #56	; 0x38
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80062de:	f3ef 8311 	mrs	r3, BASEPRI
 80062e2:	f04f 0120 	mov.w	r1, #32
 80062e6:	f381 8811 	msr	BASEPRI, r1
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	4832      	ldr	r0, [pc, #200]	; (80063b8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80062ee:	f7ff f972 	bl	80055d6 <_PreparePacket>
 80062f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	6379      	str	r1, [r7, #52]	; 0x34
 800630c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	633b      	str	r3, [r7, #48]	; 0x30
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b7f      	cmp	r3, #127	; 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	637a      	str	r2, [r7, #52]	; 0x34
 8006326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	2b7f      	cmp	r3, #127	; 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	623b      	str	r3, [r7, #32]
 8006370:	e00b      	b.n	800638a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1c59      	adds	r1, r3, #1
 800637a:	6279      	str	r1, [r7, #36]	; 0x24
 800637c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	09db      	lsrs	r3, r3, #7
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2b7f      	cmp	r3, #127	; 0x7f
 800638e:	d8f0      	bhi.n	8006372 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	627a      	str	r2, [r7, #36]	; 0x24
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	69b8      	ldr	r0, [r7, #24]
 80063a6:	f7ff fa09 	bl	80057bc <_SendPacket>
  RECORD_END();
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f383 8811 	msr	BASEPRI, r3
}
 80063b0:	bf00      	nop
 80063b2:	3738      	adds	r7, #56	; 0x38
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20014290 	.word	0x20014290

080063bc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b090      	sub	sp, #64	; 0x40
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063ca:	f3ef 8311 	mrs	r3, BASEPRI
 80063ce:	f04f 0120 	mov.w	r1, #32
 80063d2:	f381 8811 	msr	BASEPRI, r1
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	4840      	ldr	r0, [pc, #256]	; (80064dc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80063da:	f7ff f8fc 	bl	80055d6 <_PreparePacket>
 80063de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ec:	e00b      	b.n	8006406 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	63bb      	str	r3, [r7, #56]	; 0x38
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	2b7f      	cmp	r3, #127	; 0x7f
 800640a:	d8f0      	bhi.n	80063ee <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800640c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	633b      	str	r3, [r7, #48]	; 0x30
 8006424:	e00b      	b.n	800643e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	b2da      	uxtb	r2, r3
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	6379      	str	r1, [r7, #52]	; 0x34
 8006430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	633b      	str	r3, [r7, #48]	; 0x30
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b7f      	cmp	r3, #127	; 0x7f
 8006442:	d8f0      	bhi.n	8006426 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	637a      	str	r2, [r7, #52]	; 0x34
 800644a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
 800645c:	e00b      	b.n	8006476 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	b2da      	uxtb	r2, r3
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	1c59      	adds	r1, r3, #1
 8006466:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006468:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	09db      	lsrs	r3, r3, #7
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	2b7f      	cmp	r3, #127	; 0x7f
 800647a:	d8f0      	bhi.n	800645e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
 8006490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006492:	623b      	str	r3, [r7, #32]
 8006494:	e00b      	b.n	80064ae <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	1c59      	adds	r1, r3, #1
 800649e:	6279      	str	r1, [r7, #36]	; 0x24
 80064a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	09db      	lsrs	r3, r3, #7
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	2b7f      	cmp	r3, #127	; 0x7f
 80064b2:	d8f0      	bhi.n	8006496 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	627a      	str	r2, [r7, #36]	; 0x24
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	6979      	ldr	r1, [r7, #20]
 80064c8:	69b8      	ldr	r0, [r7, #24]
 80064ca:	f7ff f977 	bl	80057bc <_SendPacket>
  RECORD_END();
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f383 8811 	msr	BASEPRI, r3
}
 80064d4:	bf00      	nop
 80064d6:	3740      	adds	r7, #64	; 0x40
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20014290 	.word	0x20014290

080064e0 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b092      	sub	sp, #72	; 0x48
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80064ee:	f3ef 8311 	mrs	r3, BASEPRI
 80064f2:	f04f 0120 	mov.w	r1, #32
 80064f6:	f381 8811 	msr	BASEPRI, r1
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	484e      	ldr	r0, [pc, #312]	; (8006638 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80064fe:	f7ff f86a 	bl	80055d6 <_PreparePacket>
 8006502:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	647b      	str	r3, [r7, #68]	; 0x44
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	643b      	str	r3, [r7, #64]	; 0x40
 8006510:	e00b      	b.n	800652a <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006514:	b2da      	uxtb	r2, r3
 8006516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006518:	1c59      	adds	r1, r3, #1
 800651a:	6479      	str	r1, [r7, #68]	; 0x44
 800651c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006526:	09db      	lsrs	r3, r3, #7
 8006528:	643b      	str	r3, [r7, #64]	; 0x40
 800652a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652c:	2b7f      	cmp	r3, #127	; 0x7f
 800652e:	d8f0      	bhi.n	8006512 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	647a      	str	r2, [r7, #68]	; 0x44
 8006536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800653e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	63bb      	str	r3, [r7, #56]	; 0x38
 8006548:	e00b      	b.n	8006562 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	b2da      	uxtb	r2, r3
 800654e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006550:	1c59      	adds	r1, r3, #1
 8006552:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006554:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	09db      	lsrs	r3, r3, #7
 8006560:	63bb      	str	r3, [r7, #56]	; 0x38
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	2b7f      	cmp	r3, #127	; 0x7f
 8006566:	d8f0      	bhi.n	800654a <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800656e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006576:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	633b      	str	r3, [r7, #48]	; 0x30
 8006580:	e00b      	b.n	800659a <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	b2da      	uxtb	r2, r3
 8006586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006588:	1c59      	adds	r1, r3, #1
 800658a:	6379      	str	r1, [r7, #52]	; 0x34
 800658c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	09db      	lsrs	r3, r3, #7
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	2b7f      	cmp	r3, #127	; 0x7f
 800659e:	d8f0      	bhi.n	8006582 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80065a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	637a      	str	r2, [r7, #52]	; 0x34
 80065a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b8:	e00b      	b.n	80065d2 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	1c59      	adds	r1, r3, #1
 80065c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	09db      	lsrs	r3, r3, #7
 80065d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	2b7f      	cmp	r3, #127	; 0x7f
 80065d6:	d8f0      	bhi.n	80065ba <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
 80065ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	e00b      	b.n	800660a <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	1c59      	adds	r1, r3, #1
 80065fa:	6279      	str	r1, [r7, #36]	; 0x24
 80065fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	09db      	lsrs	r3, r3, #7
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	2b7f      	cmp	r3, #127	; 0x7f
 800660e:	d8f0      	bhi.n	80065f2 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	627a      	str	r2, [r7, #36]	; 0x24
 8006616:	6a3a      	ldr	r2, [r7, #32]
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	6979      	ldr	r1, [r7, #20]
 8006624:	69b8      	ldr	r0, [r7, #24]
 8006626:	f7ff f8c9 	bl	80057bc <_SendPacket>
  RECORD_END();
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f383 8811 	msr	BASEPRI, r3
}
 8006630:	bf00      	nop
 8006632:	3748      	adds	r7, #72	; 0x48
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20014290 	.word	0x20014290

0800663c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800663c:	b580      	push	{r7, lr}
 800663e:	b08c      	sub	sp, #48	; 0x30
 8006640:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006642:	4b59      	ldr	r3, [pc, #356]	; (80067a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006644:	2201      	movs	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006648:	f3ef 8311 	mrs	r3, BASEPRI
 800664c:	f04f 0120 	mov.w	r1, #32
 8006650:	f381 8811 	msr	BASEPRI, r1
 8006654:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006656:	4b54      	ldr	r3, [pc, #336]	; (80067a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	220a      	movs	r2, #10
 800665c:	4953      	ldr	r1, [pc, #332]	; (80067ac <SEGGER_SYSVIEW_Start+0x170>)
 800665e:	4618      	mov	r0, r3
 8006660:	f7f9 fdd6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800666a:	f7fe fd85 	bl	8005178 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800666e:	200a      	movs	r0, #10
 8006670:	f7ff fd7a 	bl	8006168 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006674:	f3ef 8311 	mrs	r3, BASEPRI
 8006678:	f04f 0120 	mov.w	r1, #32
 800667c:	f381 8811 	msr	BASEPRI, r1
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	484b      	ldr	r0, [pc, #300]	; (80067b0 <SEGGER_SYSVIEW_Start+0x174>)
 8006684:	f7fe ffa7 	bl	80055d6 <_PreparePacket>
 8006688:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006692:	4b45      	ldr	r3, [pc, #276]	; (80067a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	62bb      	str	r3, [r7, #40]	; 0x28
 8006698:	e00b      	b.n	80066b2 <SEGGER_SYSVIEW_Start+0x76>
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	b2da      	uxtb	r2, r3
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	1c59      	adds	r1, r3, #1
 80066a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	09db      	lsrs	r3, r3, #7
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	2b7f      	cmp	r3, #127	; 0x7f
 80066b6:	d8f0      	bhi.n	800669a <SEGGER_SYSVIEW_Start+0x5e>
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
 80066cc:	4b36      	ldr	r3, [pc, #216]	; (80067a8 <SEGGER_SYSVIEW_Start+0x16c>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	623b      	str	r3, [r7, #32]
 80066d2:	e00b      	b.n	80066ec <SEGGER_SYSVIEW_Start+0xb0>
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	1c59      	adds	r1, r3, #1
 80066dc:	6279      	str	r1, [r7, #36]	; 0x24
 80066de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	09db      	lsrs	r3, r3, #7
 80066ea:	623b      	str	r3, [r7, #32]
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b7f      	cmp	r3, #127	; 0x7f
 80066f0:	d8f0      	bhi.n	80066d4 <SEGGER_SYSVIEW_Start+0x98>
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	627a      	str	r2, [r7, #36]	; 0x24
 80066f8:	6a3a      	ldr	r2, [r7, #32]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	4b28      	ldr	r3, [pc, #160]	; (80067a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	e00b      	b.n	8006726 <SEGGER_SYSVIEW_Start+0xea>
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	1c59      	adds	r1, r3, #1
 8006716:	61f9      	str	r1, [r7, #28]
 8006718:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	09db      	lsrs	r3, r3, #7
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b7f      	cmp	r3, #127	; 0x7f
 800672a:	d8f0      	bhi.n	800670e <SEGGER_SYSVIEW_Start+0xd2>
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	61fa      	str	r2, [r7, #28]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	2300      	movs	r3, #0
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	e00b      	b.n	800675e <SEGGER_SYSVIEW_Start+0x122>
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	1c59      	adds	r1, r3, #1
 800674e:	6179      	str	r1, [r7, #20]
 8006750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	09db      	lsrs	r3, r3, #7
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b7f      	cmp	r3, #127	; 0x7f
 8006762:	d8f0      	bhi.n	8006746 <SEGGER_SYSVIEW_Start+0x10a>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	617a      	str	r2, [r7, #20]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006774:	2218      	movs	r2, #24
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff f81f 	bl	80057bc <_SendPacket>
      RECORD_END();
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006784:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <SEGGER_SYSVIEW_Start+0x16c>)
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006792:	f000 f9eb 	bl	8006b6c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006796:	f000 f9b1 	bl	8006afc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800679a:	f000 fc83 	bl	80070a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800679e:	bf00      	nop
 80067a0:	3730      	adds	r7, #48	; 0x30
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20014260 	.word	0x20014260
 80067ac:	08007458 	.word	0x08007458
 80067b0:	20014290 	.word	0x20014290

080067b4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067ba:	f3ef 8311 	mrs	r3, BASEPRI
 80067be:	f04f 0120 	mov.w	r1, #32
 80067c2:	f381 8811 	msr	BASEPRI, r1
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	480b      	ldr	r0, [pc, #44]	; (80067f8 <SEGGER_SYSVIEW_Stop+0x44>)
 80067ca:	f7fe ff04 	bl	80055d6 <_PreparePacket>
 80067ce:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <SEGGER_SYSVIEW_Stop+0x48>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80067d8:	220b      	movs	r2, #11
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6838      	ldr	r0, [r7, #0]
 80067de:	f7fe ffed 	bl	80057bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80067e2:	4b06      	ldr	r3, [pc, #24]	; (80067fc <SEGGER_SYSVIEW_Stop+0x48>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f383 8811 	msr	BASEPRI, r3
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20014290 	.word	0x20014290
 80067fc:	20014260 	.word	0x20014260

08006800 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b08c      	sub	sp, #48	; 0x30
 8006804:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006806:	f3ef 8311 	mrs	r3, BASEPRI
 800680a:	f04f 0120 	mov.w	r1, #32
 800680e:	f381 8811 	msr	BASEPRI, r1
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	4845      	ldr	r0, [pc, #276]	; (800692c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006816:	f7fe fede 	bl	80055d6 <_PreparePacket>
 800681a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006824:	4b42      	ldr	r3, [pc, #264]	; (8006930 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
 800682a:	e00b      	b.n	8006844 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	b2da      	uxtb	r2, r3
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	1c59      	adds	r1, r3, #1
 8006834:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	09db      	lsrs	r3, r3, #7
 8006842:	62bb      	str	r3, [r7, #40]	; 0x28
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	2b7f      	cmp	r3, #127	; 0x7f
 8006848:	d8f0      	bhi.n	800682c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
 800685e:	4b34      	ldr	r3, [pc, #208]	; (8006930 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	623b      	str	r3, [r7, #32]
 8006864:	e00b      	b.n	800687e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1c59      	adds	r1, r3, #1
 800686e:	6279      	str	r1, [r7, #36]	; 0x24
 8006870:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	09db      	lsrs	r3, r3, #7
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	2b7f      	cmp	r3, #127	; 0x7f
 8006882:	d8f0      	bhi.n	8006866 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	627a      	str	r2, [r7, #36]	; 0x24
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	4b25      	ldr	r3, [pc, #148]	; (8006930 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e00b      	b.n	80068b8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	61f9      	str	r1, [r7, #28]
 80068aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	09db      	lsrs	r3, r3, #7
 80068b6:	61bb      	str	r3, [r7, #24]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2b7f      	cmp	r3, #127	; 0x7f
 80068bc:	d8f0      	bhi.n	80068a0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	61fa      	str	r2, [r7, #28]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	e00b      	b.n	80068f0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	1c59      	adds	r1, r3, #1
 80068e0:	6179      	str	r1, [r7, #20]
 80068e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	09db      	lsrs	r3, r3, #7
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b7f      	cmp	r3, #127	; 0x7f
 80068f4:	d8f0      	bhi.n	80068d8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	617a      	str	r2, [r7, #20]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006906:	2218      	movs	r2, #24
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	68b8      	ldr	r0, [r7, #8]
 800690c:	f7fe ff56 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800691e:	4b04      	ldr	r3, [pc, #16]	; (8006930 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	4798      	blx	r3
  }
}
 8006924:	bf00      	nop
 8006926:	3730      	adds	r7, #48	; 0x30
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20014290 	.word	0x20014290
 8006930:	20014260 	.word	0x20014260

08006934 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b092      	sub	sp, #72	; 0x48
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800693c:	f3ef 8311 	mrs	r3, BASEPRI
 8006940:	f04f 0120 	mov.w	r1, #32
 8006944:	f381 8811 	msr	BASEPRI, r1
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	486a      	ldr	r0, [pc, #424]	; (8006af4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800694c:	f7fe fe43 	bl	80055d6 <_PreparePacket>
 8006950:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	647b      	str	r3, [r7, #68]	; 0x44
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4b66      	ldr	r3, [pc, #408]	; (8006af8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	643b      	str	r3, [r7, #64]	; 0x40
 8006966:	e00b      	b.n	8006980 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696a:	b2da      	uxtb	r2, r3
 800696c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800696e:	1c59      	adds	r1, r3, #1
 8006970:	6479      	str	r1, [r7, #68]	; 0x44
 8006972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697c:	09db      	lsrs	r3, r3, #7
 800697e:	643b      	str	r3, [r7, #64]	; 0x40
 8006980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006982:	2b7f      	cmp	r3, #127	; 0x7f
 8006984:	d8f0      	bhi.n	8006968 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	647a      	str	r2, [r7, #68]	; 0x44
 800698c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006994:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a0:	e00b      	b.n	80069ba <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a8:	1c59      	adds	r1, r3, #1
 80069aa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80069ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	09db      	lsrs	r3, r3, #7
 80069b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	2b7f      	cmp	r3, #127	; 0x7f
 80069be:	d8f0      	bhi.n	80069a2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ce:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	4619      	mov	r1, r3
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7fe fdaf 	bl	800553c <_EncodeStr>
 80069de:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80069e0:	2209      	movs	r2, #9
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	6938      	ldr	r0, [r7, #16]
 80069e6:	f7fe fee9 	bl	80057bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	633b      	str	r3, [r7, #48]	; 0x30
 80069fe:	e00b      	b.n	8006a18 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	1c59      	adds	r1, r3, #1
 8006a08:	6379      	str	r1, [r7, #52]	; 0x34
 8006a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	09db      	lsrs	r3, r3, #7
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a1c:	d8f0      	bhi.n	8006a00 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	637a      	str	r2, [r7, #52]	; 0x34
 8006a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a38:	e00b      	b.n	8006a52 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	1c59      	adds	r1, r3, #1
 8006a42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	09db      	lsrs	r3, r3, #7
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	2b7f      	cmp	r3, #127	; 0x7f
 8006a56:	d8f0      	bhi.n	8006a3a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	623b      	str	r3, [r7, #32]
 8006a72:	e00b      	b.n	8006a8c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	1c59      	adds	r1, r3, #1
 8006a7c:	6279      	str	r1, [r7, #36]	; 0x24
 8006a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	09db      	lsrs	r3, r3, #7
 8006a8a:	623b      	str	r3, [r7, #32]
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a90:	d8f0      	bhi.n	8006a74 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	627a      	str	r2, [r7, #36]	; 0x24
 8006a98:	6a3a      	ldr	r2, [r7, #32]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e00b      	b.n	8006ac4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	1c59      	adds	r1, r3, #1
 8006ab4:	61f9      	str	r1, [r7, #28]
 8006ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	09db      	lsrs	r3, r3, #7
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac8:	d8f0      	bhi.n	8006aac <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	61fa      	str	r2, [r7, #28]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006ada:	2215      	movs	r2, #21
 8006adc:	68f9      	ldr	r1, [r7, #12]
 8006ade:	6938      	ldr	r0, [r7, #16]
 8006ae0:	f7fe fe6c 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f383 8811 	msr	BASEPRI, r3
}
 8006aea:	bf00      	nop
 8006aec:	3748      	adds	r7, #72	; 0x48
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20014290 	.word	0x20014290
 8006af8:	20014260 	.word	0x20014260

08006afc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d008      	beq.n	8006b1a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006b12:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4798      	blx	r3
  }
}
 8006b1a:	bf00      	nop
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20014260 	.word	0x20014260

08006b24 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b30:	f04f 0120 	mov.w	r1, #32
 8006b34:	f381 8811 	msr	BASEPRI, r1
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	480b      	ldr	r0, [pc, #44]	; (8006b68 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006b3c:	f7fe fd4b 	bl	80055d6 <_PreparePacket>
 8006b40:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b42:	2280      	movs	r2, #128	; 0x80
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	6938      	ldr	r0, [r7, #16]
 8006b48:	f7fe fcf8 	bl	800553c <_EncodeStr>
 8006b4c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006b4e:	220e      	movs	r2, #14
 8006b50:	68f9      	ldr	r1, [r7, #12]
 8006b52:	6938      	ldr	r0, [r7, #16]
 8006b54:	f7fe fe32 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f383 8811 	msr	BASEPRI, r3
}
 8006b5e:	bf00      	nop
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20014290 	.word	0x20014290

08006b6c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d01a      	beq.n	8006bb0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006b7a:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d015      	beq.n	8006bb0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4798      	blx	r3
 8006b8c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b90:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	000a      	movs	r2, r1
 8006ba0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	200d      	movs	r0, #13
 8006baa:	f7ff fb37 	bl	800621c <SEGGER_SYSVIEW_RecordU32x2>
 8006bae:	e006      	b.n	8006bbe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	200c      	movs	r0, #12
 8006bb8:	f7ff faf4 	bl	80061a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd90      	pop	{r4, r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20014260 	.word	0x20014260
 8006bcc:	e0001004 	.word	0xe0001004

08006bd0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bda:	f04f 0120 	mov.w	r1, #32
 8006bde:	f381 8811 	msr	BASEPRI, r1
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	4819      	ldr	r0, [pc, #100]	; (8006c4c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006be6:	f7fe fcf6 	bl	80055d6 <_PreparePacket>
 8006bea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006bf0:	4b17      	ldr	r3, [pc, #92]	; (8006c50 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	e00b      	b.n	8006c1c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1c59      	adds	r1, r3, #1
 8006c0c:	6179      	str	r1, [r7, #20]
 8006c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	09db      	lsrs	r3, r3, #7
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c20:	d8f0      	bhi.n	8006c04 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	617a      	str	r2, [r7, #20]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006c32:	2202      	movs	r2, #2
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	68b8      	ldr	r0, [r7, #8]
 8006c38:	f7fe fdc0 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f383 8811 	msr	BASEPRI, r3
}
 8006c42:	bf00      	nop
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20014290 	.word	0x20014290
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c5e:	f04f 0120 	mov.w	r1, #32
 8006c62:	f381 8811 	msr	BASEPRI, r1
 8006c66:	607b      	str	r3, [r7, #4]
 8006c68:	4807      	ldr	r0, [pc, #28]	; (8006c88 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006c6a:	f7fe fcb4 	bl	80055d6 <_PreparePacket>
 8006c6e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006c70:	2203      	movs	r2, #3
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6838      	ldr	r0, [r7, #0]
 8006c76:	f7fe fda1 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f383 8811 	msr	BASEPRI, r3
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20014290 	.word	0x20014290

08006c8c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c92:	f3ef 8311 	mrs	r3, BASEPRI
 8006c96:	f04f 0120 	mov.w	r1, #32
 8006c9a:	f381 8811 	msr	BASEPRI, r1
 8006c9e:	607b      	str	r3, [r7, #4]
 8006ca0:	4807      	ldr	r0, [pc, #28]	; (8006cc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006ca2:	f7fe fc98 	bl	80055d6 <_PreparePacket>
 8006ca6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006ca8:	2212      	movs	r2, #18
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6838      	ldr	r0, [r7, #0]
 8006cae:	f7fe fd85 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f383 8811 	msr	BASEPRI, r3
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20014290 	.word	0x20014290

08006cc4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cca:	f3ef 8311 	mrs	r3, BASEPRI
 8006cce:	f04f 0120 	mov.w	r1, #32
 8006cd2:	f381 8811 	msr	BASEPRI, r1
 8006cd6:	607b      	str	r3, [r7, #4]
 8006cd8:	4807      	ldr	r0, [pc, #28]	; (8006cf8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006cda:	f7fe fc7c 	bl	80055d6 <_PreparePacket>
 8006cde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006ce0:	2211      	movs	r2, #17
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6838      	ldr	r0, [r7, #0]
 8006ce6:	f7fe fd69 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f383 8811 	msr	BASEPRI, r3
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20014290 	.word	0x20014290

08006cfc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d04:	f3ef 8311 	mrs	r3, BASEPRI
 8006d08:	f04f 0120 	mov.w	r1, #32
 8006d0c:	f381 8811 	msr	BASEPRI, r1
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	4819      	ldr	r0, [pc, #100]	; (8006d78 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006d14:	f7fe fc5f 	bl	80055d6 <_PreparePacket>
 8006d18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d1e:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e00b      	b.n	8006d4a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	1c59      	adds	r1, r3, #1
 8006d3a:	61f9      	str	r1, [r7, #28]
 8006d3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	09db      	lsrs	r3, r3, #7
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d4e:	d8f0      	bhi.n	8006d32 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	61fa      	str	r2, [r7, #28]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006d60:	2208      	movs	r2, #8
 8006d62:	68f9      	ldr	r1, [r7, #12]
 8006d64:	6938      	ldr	r0, [r7, #16]
 8006d66:	f7fe fd29 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f383 8811 	msr	BASEPRI, r3
}
 8006d70:	bf00      	nop
 8006d72:	3720      	adds	r7, #32
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20014290 	.word	0x20014290
 8006d7c:	20014260 	.word	0x20014260

08006d80 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d88:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8c:	f04f 0120 	mov.w	r1, #32
 8006d90:	f381 8811 	msr	BASEPRI, r1
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	4819      	ldr	r0, [pc, #100]	; (8006dfc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006d98:	f7fe fc1d 	bl	80055d6 <_PreparePacket>
 8006d9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006da2:	4b17      	ldr	r3, [pc, #92]	; (8006e00 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	61bb      	str	r3, [r7, #24]
 8006db4:	e00b      	b.n	8006dce <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	1c59      	adds	r1, r3, #1
 8006dbe:	61f9      	str	r1, [r7, #28]
 8006dc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	09db      	lsrs	r3, r3, #7
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd2:	d8f0      	bhi.n	8006db6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	61fa      	str	r2, [r7, #28]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006de4:	2204      	movs	r2, #4
 8006de6:	68f9      	ldr	r1, [r7, #12]
 8006de8:	6938      	ldr	r0, [r7, #16]
 8006dea:	f7fe fce7 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f383 8811 	msr	BASEPRI, r3
}
 8006df4:	bf00      	nop
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20014290 	.word	0x20014290
 8006e00:	20014260 	.word	0x20014260

08006e04 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e10:	f04f 0120 	mov.w	r1, #32
 8006e14:	f381 8811 	msr	BASEPRI, r1
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	4819      	ldr	r0, [pc, #100]	; (8006e80 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006e1c:	f7fe fbdb 	bl	80055d6 <_PreparePacket>
 8006e20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e26:	4b17      	ldr	r3, [pc, #92]	; (8006e84 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	e00b      	b.n	8006e52 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	1c59      	adds	r1, r3, #1
 8006e42:	61f9      	str	r1, [r7, #28]
 8006e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	09db      	lsrs	r3, r3, #7
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b7f      	cmp	r3, #127	; 0x7f
 8006e56:	d8f0      	bhi.n	8006e3a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	61fa      	str	r2, [r7, #28]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006e68:	2206      	movs	r2, #6
 8006e6a:	68f9      	ldr	r1, [r7, #12]
 8006e6c:	6938      	ldr	r0, [r7, #16]
 8006e6e:	f7fe fca5 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f383 8811 	msr	BASEPRI, r3
}
 8006e78:	bf00      	nop
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20014290 	.word	0x20014290
 8006e84:	20014260 	.word	0x20014260

08006e88 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e92:	f3ef 8311 	mrs	r3, BASEPRI
 8006e96:	f04f 0120 	mov.w	r1, #32
 8006e9a:	f381 8811 	msr	BASEPRI, r1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	4827      	ldr	r0, [pc, #156]	; (8006f40 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006ea2:	f7fe fb98 	bl	80055d6 <_PreparePacket>
 8006ea6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eac:	4b25      	ldr	r3, [pc, #148]	; (8006f44 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	e00b      	b.n	8006ed8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	1c59      	adds	r1, r3, #1
 8006ec8:	6279      	str	r1, [r7, #36]	; 0x24
 8006eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	09db      	lsrs	r3, r3, #7
 8006ed6:	623b      	str	r3, [r7, #32]
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	2b7f      	cmp	r3, #127	; 0x7f
 8006edc:	d8f0      	bhi.n	8006ec0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ee4:	6a3a      	ldr	r2, [r7, #32]
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	e00b      	b.n	8006f10 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	61f9      	str	r1, [r7, #28]
 8006f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	09db      	lsrs	r3, r3, #7
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	2b7f      	cmp	r3, #127	; 0x7f
 8006f14:	d8f0      	bhi.n	8006ef8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	61fa      	str	r2, [r7, #28]
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006f26:	2207      	movs	r2, #7
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	6938      	ldr	r0, [r7, #16]
 8006f2c:	f7fe fc46 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f383 8811 	msr	BASEPRI, r3
}
 8006f36:	bf00      	nop
 8006f38:	3728      	adds	r7, #40	; 0x28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20014290 	.word	0x20014290
 8006f44:	20014260 	.word	0x20014260

08006f48 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	1ad3      	subs	r3, r2, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20014260 	.word	0x20014260

08006f68 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08c      	sub	sp, #48	; 0x30
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006f72:	4b3b      	ldr	r3, [pc, #236]	; (8007060 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d06d      	beq.n	8007056 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006f7a:	4b39      	ldr	r3, [pc, #228]	; (8007060 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006f80:	2300      	movs	r3, #0
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f84:	e008      	b.n	8006f98 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	3301      	adds	r3, #1
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d3f2      	bcc.n	8006f86 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006fa0:	e000      	b.n	8006fa4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006fa2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d055      	beq.n	8007056 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006faa:	f3ef 8311 	mrs	r3, BASEPRI
 8006fae:	f04f 0120 	mov.w	r1, #32
 8006fb2:	f381 8811 	msr	BASEPRI, r1
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	482a      	ldr	r0, [pc, #168]	; (8007064 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006fba:	f7fe fb0c 	bl	80055d6 <_PreparePacket>
 8006fbe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	623b      	str	r3, [r7, #32]
 8006fcc:	e00b      	b.n	8006fe6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	1c59      	adds	r1, r3, #1
 8006fd6:	6279      	str	r1, [r7, #36]	; 0x24
 8006fd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	09db      	lsrs	r3, r3, #7
 8006fe4:	623b      	str	r3, [r7, #32]
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8006fea:	d8f0      	bhi.n	8006fce <SEGGER_SYSVIEW_SendModule+0x66>
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ff2:	6a3a      	ldr	r2, [r7, #32]
 8006ff4:	b2d2      	uxtb	r2, r2
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	e00b      	b.n	8007020 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	b2da      	uxtb	r2, r3
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	61f9      	str	r1, [r7, #28]
 8007012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	09db      	lsrs	r3, r3, #7
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2b7f      	cmp	r3, #127	; 0x7f
 8007024:	d8f0      	bhi.n	8007008 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	61fa      	str	r2, [r7, #28]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2280      	movs	r2, #128	; 0x80
 800703c:	4619      	mov	r1, r3
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f7fe fa7c 	bl	800553c <_EncodeStr>
 8007044:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007046:	2216      	movs	r2, #22
 8007048:	68f9      	ldr	r1, [r7, #12]
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f7fe fbb6 	bl	80057bc <_SendPacket>
      RECORD_END();
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007056:	bf00      	nop
 8007058:	3730      	adds	r7, #48	; 0x30
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20014288 	.word	0x20014288
 8007064:	20014290 	.word	0x20014290

08007068 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00f      	beq.n	8007096 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007076:	4b0a      	ldr	r3, [pc, #40]	; (80070a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f2      	bne.n	800707c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20014288 	.word	0x20014288

080070a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80070aa:	f3ef 8311 	mrs	r3, BASEPRI
 80070ae:	f04f 0120 	mov.w	r1, #32
 80070b2:	f381 8811 	msr	BASEPRI, r1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	4817      	ldr	r0, [pc, #92]	; (8007118 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80070ba:	f7fe fa8c 	bl	80055d6 <_PreparePacket>
 80070be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	4b14      	ldr	r3, [pc, #80]	; (800711c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	e00b      	b.n	80070e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	1c59      	adds	r1, r3, #1
 80070d8:	6179      	str	r1, [r7, #20]
 80070da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	09db      	lsrs	r3, r3, #7
 80070e6:	613b      	str	r3, [r7, #16]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	2b7f      	cmp	r3, #127	; 0x7f
 80070ec:	d8f0      	bhi.n	80070d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	617a      	str	r2, [r7, #20]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80070fe:	221b      	movs	r2, #27
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	68b8      	ldr	r0, [r7, #8]
 8007104:	f7fe fb5a 	bl	80057bc <_SendPacket>
  RECORD_END();
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f383 8811 	msr	BASEPRI, r3
}
 800710e:	bf00      	nop
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20014290 	.word	0x20014290
 800711c:	2001428c 	.word	0x2001428c

08007120 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007120:	b40f      	push	{r0, r1, r2, r3}
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007128:	f107 0314 	add.w	r3, r7, #20
 800712c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800712e:	1d3b      	adds	r3, r7, #4
 8007130:	461a      	mov	r2, r3
 8007132:	2100      	movs	r1, #0
 8007134:	6938      	ldr	r0, [r7, #16]
 8007136:	f7fe fdcb 	bl	8005cd0 <_VPrintTarget>
  va_end(ParamList);
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007144:	b004      	add	sp, #16
 8007146:	4770      	bx	lr

08007148 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	; 0x28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007150:	f3ef 8311 	mrs	r3, BASEPRI
 8007154:	f04f 0120 	mov.w	r1, #32
 8007158:	f381 8811 	msr	BASEPRI, r1
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	4827      	ldr	r0, [pc, #156]	; (80071fc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007160:	f7fe fa39 	bl	80055d6 <_PreparePacket>
 8007164:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007166:	2280      	movs	r2, #128	; 0x80
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	6938      	ldr	r0, [r7, #16]
 800716c:	f7fe f9e6 	bl	800553c <_EncodeStr>
 8007170:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
 8007176:	2301      	movs	r3, #1
 8007178:	623b      	str	r3, [r7, #32]
 800717a:	e00b      	b.n	8007194 <SEGGER_SYSVIEW_Warn+0x4c>
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	1c59      	adds	r1, r3, #1
 8007184:	6279      	str	r1, [r7, #36]	; 0x24
 8007186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	09db      	lsrs	r3, r3, #7
 8007192:	623b      	str	r3, [r7, #32]
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	2b7f      	cmp	r3, #127	; 0x7f
 8007198:	d8f0      	bhi.n	800717c <SEGGER_SYSVIEW_Warn+0x34>
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	627a      	str	r2, [r7, #36]	; 0x24
 80071a0:	6a3a      	ldr	r2, [r7, #32]
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	2300      	movs	r3, #0
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	e00b      	b.n	80071cc <SEGGER_SYSVIEW_Warn+0x84>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	61f9      	str	r1, [r7, #28]
 80071be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	09db      	lsrs	r3, r3, #7
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b7f      	cmp	r3, #127	; 0x7f
 80071d0:	d8f0      	bhi.n	80071b4 <SEGGER_SYSVIEW_Warn+0x6c>
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	61fa      	str	r2, [r7, #28]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80071e2:	221a      	movs	r2, #26
 80071e4:	68f9      	ldr	r1, [r7, #12]
 80071e6:	6938      	ldr	r0, [r7, #16]
 80071e8:	f7fe fae8 	bl	80057bc <_SendPacket>
  RECORD_END();
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f383 8811 	msr	BASEPRI, r3
}
 80071f2:	bf00      	nop
 80071f4:	3728      	adds	r7, #40	; 0x28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20014290 	.word	0x20014290

08007200 <__libc_init_array>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	4d0d      	ldr	r5, [pc, #52]	; (8007238 <__libc_init_array+0x38>)
 8007204:	4c0d      	ldr	r4, [pc, #52]	; (800723c <__libc_init_array+0x3c>)
 8007206:	1b64      	subs	r4, r4, r5
 8007208:	10a4      	asrs	r4, r4, #2
 800720a:	2600      	movs	r6, #0
 800720c:	42a6      	cmp	r6, r4
 800720e:	d109      	bne.n	8007224 <__libc_init_array+0x24>
 8007210:	4d0b      	ldr	r5, [pc, #44]	; (8007240 <__libc_init_array+0x40>)
 8007212:	4c0c      	ldr	r4, [pc, #48]	; (8007244 <__libc_init_array+0x44>)
 8007214:	f000 f83c 	bl	8007290 <_init>
 8007218:	1b64      	subs	r4, r4, r5
 800721a:	10a4      	asrs	r4, r4, #2
 800721c:	2600      	movs	r6, #0
 800721e:	42a6      	cmp	r6, r4
 8007220:	d105      	bne.n	800722e <__libc_init_array+0x2e>
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	f855 3b04 	ldr.w	r3, [r5], #4
 8007228:	4798      	blx	r3
 800722a:	3601      	adds	r6, #1
 800722c:	e7ee      	b.n	800720c <__libc_init_array+0xc>
 800722e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007232:	4798      	blx	r3
 8007234:	3601      	adds	r6, #1
 8007236:	e7f2      	b.n	800721e <__libc_init_array+0x1e>
 8007238:	0800747c 	.word	0x0800747c
 800723c:	0800747c 	.word	0x0800747c
 8007240:	0800747c 	.word	0x0800747c
 8007244:	08007480 	.word	0x08007480

08007248 <memcmp>:
 8007248:	b530      	push	{r4, r5, lr}
 800724a:	3901      	subs	r1, #1
 800724c:	2400      	movs	r4, #0
 800724e:	42a2      	cmp	r2, r4
 8007250:	d101      	bne.n	8007256 <memcmp+0xe>
 8007252:	2000      	movs	r0, #0
 8007254:	e005      	b.n	8007262 <memcmp+0x1a>
 8007256:	5d03      	ldrb	r3, [r0, r4]
 8007258:	3401      	adds	r4, #1
 800725a:	5d0d      	ldrb	r5, [r1, r4]
 800725c:	42ab      	cmp	r3, r5
 800725e:	d0f6      	beq.n	800724e <memcmp+0x6>
 8007260:	1b58      	subs	r0, r3, r5
 8007262:	bd30      	pop	{r4, r5, pc}

08007264 <memcpy>:
 8007264:	440a      	add	r2, r1
 8007266:	4291      	cmp	r1, r2
 8007268:	f100 33ff 	add.w	r3, r0, #4294967295
 800726c:	d100      	bne.n	8007270 <memcpy+0xc>
 800726e:	4770      	bx	lr
 8007270:	b510      	push	{r4, lr}
 8007272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727a:	4291      	cmp	r1, r2
 800727c:	d1f9      	bne.n	8007272 <memcpy+0xe>
 800727e:	bd10      	pop	{r4, pc}

08007280 <memset>:
 8007280:	4402      	add	r2, r0
 8007282:	4603      	mov	r3, r0
 8007284:	4293      	cmp	r3, r2
 8007286:	d100      	bne.n	800728a <memset+0xa>
 8007288:	4770      	bx	lr
 800728a:	f803 1b01 	strb.w	r1, [r3], #1
 800728e:	e7f9      	b.n	8007284 <memset+0x4>

08007290 <_init>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	bf00      	nop
 8007294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007296:	bc08      	pop	{r3}
 8007298:	469e      	mov	lr, r3
 800729a:	4770      	bx	lr

0800729c <_fini>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	bf00      	nop
 80072a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a2:	bc08      	pop	{r3}
 80072a4:	469e      	mov	lr, r3
 80072a6:	4770      	bx	lr
