
005_2NotifyTaskResume.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007940  08007940  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007940  08007940  00017940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007948  08007948  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800794c  0800794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a4  2000001c  0800796c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144c0  0800796c  000244c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c5c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003577  00000000  00000000  00039ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003d220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d20  00000000  00000000  0003f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158ec  00000000  00000000  000634d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db73d  00000000  00000000  00078dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154501  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005178  00000000  00000000  00154554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800777c 	.word	0x0800777c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	0800777c 	.word	0x0800777c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014418 	.word	0x20014418

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fbe7 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f8c7 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f931 	bl	8000810 <MX_GPIO_Init>

  //To Start the Sysview recording we have to Call these
  SEGGER_UART_init(250000);//UART
 80005ae:	484f      	ldr	r0, [pc, #316]	; (80006ec <main+0x150>)
 80005b0:	f004 fe3e 	bl	8005230 <SEGGER_UART_init>

  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0); //Set the zeroth bit to one //SEGGER UART
 80005b4:	4b4e      	ldr	r3, [pc, #312]	; (80006f0 <main+0x154>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a4d      	ldr	r2, [pc, #308]	; (80006f0 <main+0x154>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c0:	f004 fc68 	bl	8004e94 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start(); //Already done in UART

  status = xTaskCreate( LedGreenTask, "Led_Green_Task", 200, NULL , 2, &GreenTaskHandle );
 80005c4:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <main+0x158>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	22c8      	movs	r2, #200	; 0xc8
 80005d0:	4949      	ldr	r1, [pc, #292]	; (80006f8 <main+0x15c>)
 80005d2:	484a      	ldr	r0, [pc, #296]	; (80006fc <main+0x160>)
 80005d4:	f002 fa38 	bl	8002a48 <xTaskCreate>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a49      	ldr	r2, [pc, #292]	; (8000700 <main+0x164>)
 80005dc:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005de:	4b48      	ldr	r3, [pc, #288]	; (8000700 <main+0x164>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x5e>

  Next_Task_Handle = GreenTaskHandle;
 80005fc:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <main+0x158>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a40      	ldr	r2, [pc, #256]	; (8000704 <main+0x168>)
 8000602:	6013      	str	r3, [r2, #0]

  status = xTaskCreate( LedRedTask, "Led_Red_Task", 200, NULL , 2, &RedTaskHandle );
 8000604:	4b40      	ldr	r3, [pc, #256]	; (8000708 <main+0x16c>)
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	22c8      	movs	r2, #200	; 0xc8
 8000610:	493e      	ldr	r1, [pc, #248]	; (800070c <main+0x170>)
 8000612:	483f      	ldr	r0, [pc, #252]	; (8000710 <main+0x174>)
 8000614:	f002 fa18 	bl	8002a48 <xTaskCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a39      	ldr	r2, [pc, #228]	; (8000700 <main+0x164>)
 800061c:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <main+0x164>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00a      	beq.n	800063c <main+0xa0>
        __asm volatile
 8000626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800062a:	f383 8811 	msr	BASEPRI, r3
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	613b      	str	r3, [r7, #16]
    }
 8000638:	bf00      	nop
 800063a:	e7fe      	b.n	800063a <main+0x9e>
  status = xTaskCreate( LedYellowTask, "Led_Yellow_Task", 200, NULL , 2, &YellowTaskHandle );
 800063c:	4b35      	ldr	r3, [pc, #212]	; (8000714 <main+0x178>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	4933      	ldr	r1, [pc, #204]	; (8000718 <main+0x17c>)
 800064a:	4834      	ldr	r0, [pc, #208]	; (800071c <main+0x180>)
 800064c:	f002 f9fc 	bl	8002a48 <xTaskCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <main+0x164>)
 8000654:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <main+0x164>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d00a      	beq.n	8000674 <main+0xd8>
        __asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	60fb      	str	r3, [r7, #12]
    }
 8000670:	bf00      	nop
 8000672:	e7fe      	b.n	8000672 <main+0xd6>
  status = xTaskCreate( ButtonTask, "Button_Task", 200, NULL , 2, &ButtonTaskHandle );
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <main+0x184>)
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2302      	movs	r3, #2
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	4928      	ldr	r1, [pc, #160]	; (8000724 <main+0x188>)
 8000682:	4829      	ldr	r0, [pc, #164]	; (8000728 <main+0x18c>)
 8000684:	f002 f9e0 	bl	8002a48 <xTaskCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a1d      	ldr	r2, [pc, #116]	; (8000700 <main+0x164>)
 800068c:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <main+0x164>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d00a      	beq.n	80006ac <main+0x110>
        __asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	60bb      	str	r3, [r7, #8]
    }
 80006a8:	bf00      	nop
 80006aa:	e7fe      	b.n	80006aa <main+0x10e>
  status = xTaskCreate( ResumeTask, "Resume_ALL_Task", 200, NULL , 2, &ResumeTaskHandle );
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <main+0x190>)
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2302      	movs	r3, #2
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2300      	movs	r3, #0
 80006b6:	22c8      	movs	r2, #200	; 0xc8
 80006b8:	491d      	ldr	r1, [pc, #116]	; (8000730 <main+0x194>)
 80006ba:	481e      	ldr	r0, [pc, #120]	; (8000734 <main+0x198>)
 80006bc:	f002 f9c4 	bl	8002a48 <xTaskCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <main+0x164>)
 80006c4:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <main+0x164>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d00a      	beq.n	80006e4 <main+0x148>
        __asm volatile
 80006ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d2:	f383 8811 	msr	BASEPRI, r3
 80006d6:	f3bf 8f6f 	isb	sy
 80006da:	f3bf 8f4f 	dsb	sy
 80006de:	607b      	str	r3, [r7, #4]
    }
 80006e0:	bf00      	nop
 80006e2:	e7fe      	b.n	80006e2 <main+0x146>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 80006e4:	f002 fcf4 	bl	80030d0 <vTaskStartScheduler>
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x14c>
 80006ea:	bf00      	nop
 80006ec:	0003d090 	.word	0x0003d090
 80006f0:	e0001000 	.word	0xe0001000
 80006f4:	2001438c 	.word	0x2001438c
 80006f8:	08007794 	.word	0x08007794
 80006fc:	08000965 	.word	0x08000965
 8000700:	20014390 	.word	0x20014390
 8000704:	20000038 	.word	0x20000038
 8000708:	20014380 	.word	0x20014380
 800070c:	080077a4 	.word	0x080077a4
 8000710:	080009d9 	.word	0x080009d9
 8000714:	20014384 	.word	0x20014384
 8000718:	080077b4 	.word	0x080077b4
 800071c:	08000a49 	.word	0x08000a49
 8000720:	20014388 	.word	0x20014388
 8000724:	080077c4 	.word	0x080077c4
 8000728:	08000b25 	.word	0x08000b25
 800072c:	2001437c 	.word	0x2001437c
 8000730:	080077d0 	.word	0x080077d0
 8000734:	08000ab9 	.word	0x08000ab9

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2234      	movs	r2, #52	; 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f007 f810 	bl	800776c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b29      	ldr	r3, [pc, #164]	; (8000808 <SystemClock_Config+0xd0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a28      	ldr	r2, [pc, #160]	; (8000808 <SystemClock_Config+0xd0>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <SystemClock_Config+0xd4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a22      	ldr	r2, [pc, #136]	; (800080c <SystemClock_Config+0xd4>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a8:	2308      	movs	r3, #8
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007ac:	23a8      	movs	r3, #168	; 0xa8
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 f8c5 	bl	8001950 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007cc:	f000 f9e4 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2105      	movs	r1, #5
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fdc4 	bl	800137c <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007fa:	f000 f9cd 	bl	8000b98 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	; 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b49      	ldr	r3, [pc, #292]	; (8000950 <MX_GPIO_Init+0x140>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a48      	ldr	r2, [pc, #288]	; (8000950 <MX_GPIO_Init+0x140>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b46      	ldr	r3, [pc, #280]	; (8000950 <MX_GPIO_Init+0x140>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b42      	ldr	r3, [pc, #264]	; (8000950 <MX_GPIO_Init+0x140>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a41      	ldr	r2, [pc, #260]	; (8000950 <MX_GPIO_Init+0x140>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b3f      	ldr	r3, [pc, #252]	; (8000950 <MX_GPIO_Init+0x140>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_GPIO_Init+0x140>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a3a      	ldr	r2, [pc, #232]	; (8000950 <MX_GPIO_Init+0x140>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <MX_GPIO_Init+0x140>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_GPIO_Init+0x140>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a33      	ldr	r2, [pc, #204]	; (8000950 <MX_GPIO_Init+0x140>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_GPIO_Init+0x140>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 7108 	mov.w	r1, #544	; 0x220
 800089c:	482d      	ldr	r0, [pc, #180]	; (8000954 <MX_GPIO_Init+0x144>)
 800089e:	f000 fd39 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	482c      	ldr	r0, [pc, #176]	; (8000958 <MX_GPIO_Init+0x148>)
 80008a8:	f000 fd34 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	482a      	ldr	r0, [pc, #168]	; (800095c <MX_GPIO_Init+0x14c>)
 80008b2:	f000 fd2f 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <MX_GPIO_Init+0x150>)
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4823      	ldr	r0, [pc, #140]	; (8000958 <MX_GPIO_Init+0x148>)
 80008cc:	f000 fb76 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d0:	230c      	movs	r3, #12
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e0:	2307      	movs	r3, #7
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	481a      	ldr	r0, [pc, #104]	; (8000954 <MX_GPIO_Init+0x144>)
 80008ec:	f000 fb66 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80008f0:	f44f 7308 	mov.w	r3, #544	; 0x220
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <MX_GPIO_Init+0x144>)
 800090a:	f000 fb57 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_GPIO_Init+0x148>)
 8000926:	f000 fb49 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_GPIO_Init+0x14c>)
 8000942:	f000 fb3b 	bl	8000fbc <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000
 8000958:	40020800 	.word	0x40020800
 800095c:	40020400 	.word	0x40020400
 8000960:	10210000 	.word	0x10210000

08000964 <LedGreenTask>:

/* USER CODE BEGIN 4 */
void LedGreenTask(void *parameter){
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	BaseType_t NotifyTaskStatus;
	last_wakeup_time = xTaskGetTickCount();
 800096c:	f002 fd20 	bl	80033b0 <xTaskGetTickCount>
 8000970:	60f8      	str	r0, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("GREEN LED Task");
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <LedGreenTask+0x60>)
 8000974:	f006 fe1c 	bl	80075b0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //D8 or PA9
 8000978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <LedGreenTask+0x64>)
 800097e:	f000 fce2 	bl	8001346 <HAL_GPIO_TogglePin>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2300      	movs	r3, #0
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2000      	movs	r0, #0
 8000990:	f003 f950 	bl	8003c34 <xTaskGenericNotifyWait>
 8000994:	60b8      	str	r0, [r7, #8]
		if(NotifyTaskStatus == pdTRUE)
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d1ea      	bne.n	8000972 <LedGreenTask+0xe>
		{
			vTaskSuspendAll();
 800099c:	f002 fbfa 	bl	8003194 <vTaskSuspendAll>
			Next_Task_Handle = YellowTaskHandle;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <LedGreenTask+0x68>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <LedGreenTask+0x6c>)
 80009a6:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80009a8:	f002 fc02 	bl	80031b0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <LedGreenTask+0x64>)
 80009b4:	f000 fcae 	bl	8001314 <HAL_GPIO_WritePin>
			vTaskSuspend( GreenTaskHandle );//suspend the task.
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <LedGreenTask+0x70>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fa15 	bl	8002dec <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("GREEN LED Task");
 80009c2:	e7d6      	b.n	8000972 <LedGreenTask+0xe>
 80009c4:	080077e0 	.word	0x080077e0
 80009c8:	40020000 	.word	0x40020000
 80009cc:	20014384 	.word	0x20014384
 80009d0:	20000038 	.word	0x20000038
 80009d4:	2001438c 	.word	0x2001438c

080009d8 <LedRedTask>:
		}

	}/*End of Infinite Loop*/
}

void LedRedTask(void *parameter){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
 80009de:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	BaseType_t NotifyTaskStatus;
	last_wakeup_time = xTaskGetTickCount();
 80009e0:	f002 fce6 	bl	80033b0 <xTaskGetTickCount>
 80009e4:	60f8      	str	r0, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("RED LED Task");
 80009e6:	4813      	ldr	r0, [pc, #76]	; (8000a34 <LedRedTask+0x5c>)
 80009e8:	f006 fde2 	bl	80075b0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //D10 or PB6
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <LedRedTask+0x60>)
 80009f0:	f000 fca9 	bl	8001346 <HAL_GPIO_TogglePin>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80009f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2300      	movs	r3, #0
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2000      	movs	r0, #0
 8000a02:	f003 f917 	bl	8003c34 <xTaskGenericNotifyWait>
 8000a06:	60b8      	str	r0, [r7, #8]
		if(NotifyTaskStatus == pdTRUE)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d1eb      	bne.n	80009e6 <LedRedTask+0xe>
		{
			vTaskSuspendAll();
 8000a0e:	f002 fbc1 	bl	8003194 <vTaskSuspendAll>
			Next_Task_Handle = ResumeTaskHandle;
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LedRedTask+0x64>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LedRedTask+0x68>)
 8000a18:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a1a:	f002 fbc9 	bl	80031b0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <LedRedTask+0x60>)
 8000a24:	f000 fc76 	bl	8001314 <HAL_GPIO_WritePin>
			vTaskSuspend( RedTaskHandle );//suspend the task.
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <LedRedTask+0x6c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 f9dd 	bl	8002dec <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("RED LED Task");
 8000a32:	e7d8      	b.n	80009e6 <LedRedTask+0xe>
 8000a34:	080077f0 	.word	0x080077f0
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	2001437c 	.word	0x2001437c
 8000a40:	20000038 	.word	0x20000038
 8000a44:	20014380 	.word	0x20014380

08000a48 <LedYellowTask>:
			//Do Nothing
		}
	}/*End of Infinite Loop*/
}

void LedYellowTask(void *parameter){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	BaseType_t NotifyTaskStatus;
	last_wakeup_time = xTaskGetTickCount();
 8000a50:	f002 fcae 	bl	80033b0 <xTaskGetTickCount>
 8000a54:	60f8      	str	r0, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("YELLOW LED Task");
 8000a56:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <LedYellowTask+0x5c>)
 8000a58:	f006 fdaa 	bl	80075b0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <LedYellowTask+0x60>)
 8000a60:	f000 fc71 	bl	8001346 <HAL_GPIO_TogglePin>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f003 f8df 	bl	8003c34 <xTaskGenericNotifyWait>
 8000a76:	60b8      	str	r0, [r7, #8]
		if(NotifyTaskStatus == pdTRUE)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d1eb      	bne.n	8000a56 <LedYellowTask+0xe>
		{
			vTaskSuspendAll();
 8000a7e:	f002 fb89 	bl	8003194 <vTaskSuspendAll>
			Next_Task_Handle = RedTaskHandle;
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <LedYellowTask+0x64>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <LedYellowTask+0x68>)
 8000a88:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a8a:	f002 fb91 	bl	80031b0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <LedYellowTask+0x60>)
 8000a94:	f000 fc3e 	bl	8001314 <HAL_GPIO_WritePin>
			vTaskSuspend( YellowTaskHandle );//suspend the task.
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <LedYellowTask+0x6c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 f9a5 	bl	8002dec <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("YELLOW LED Task");
 8000aa2:	e7d8      	b.n	8000a56 <LedYellowTask+0xe>
 8000aa4:	08007800 	.word	0x08007800
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	20014380 	.word	0x20014380
 8000ab0:	20000038 	.word	0x20000038
 8000ab4:	20014384 	.word	0x20014384

08000ab8 <ResumeTask>:
			//Do Nothing
		}
	}/*End of Infinite Loop*/
}

void ResumeTask(void *parameter){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	6078      	str	r0, [r7, #4]
	BaseType_t NotifyTaskStatus;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Resume Task");
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <ResumeTask+0x58>)
 8000ac2:	f006 fd75 	bl	80075b0 <SEGGER_SYSVIEW_PrintfTarget>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2300      	movs	r3, #0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f003 f8ae 	bl	8003c34 <xTaskGenericNotifyWait>
 8000ad8:	60f8      	str	r0, [r7, #12]
		if(NotifyTaskStatus == pdTRUE)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d1ef      	bne.n	8000ac0 <ResumeTask+0x8>
		{
			vTaskSuspendAll();
 8000ae0:	f002 fb58 	bl	8003194 <vTaskSuspendAll>
			Next_Task_Handle = GreenTaskHandle;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <ResumeTask+0x5c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <ResumeTask+0x60>)
 8000aea:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000aec:	f002 fb60 	bl	80031b0 <xTaskResumeAll>
			vTaskResume( GreenTaskHandle );
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <ResumeTask+0x5c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fa59 	bl	8002fac <vTaskResume>
			vTaskResume( YellowTaskHandle );
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <ResumeTask+0x64>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 fa54 	bl	8002fac <vTaskResume>
			vTaskResume( RedTaskHandle );
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <ResumeTask+0x68>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fa4f 	bl	8002fac <vTaskResume>
		SEGGER_SYSVIEW_PrintfTarget("Resume Task");
 8000b0e:	e7d7      	b.n	8000ac0 <ResumeTask+0x8>
 8000b10:	08007810 	.word	0x08007810
 8000b14:	2001438c 	.word	0x2001438c
 8000b18:	20000038 	.word	0x20000038
 8000b1c:	20014384 	.word	0x20014384
 8000b20:	20014380 	.word	0x20014380

08000b24 <ButtonTask>:
			//Do Nothing
		}
	}/*End of Infinite Loop*/
}

void ButtonTask(void *parameter){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	6078      	str	r0, [r7, #4]
	uint8_t currentState = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73bb      	strb	r3, [r7, #14]
	uint8_t prevState = 1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
	while(1){
		currentState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <ButtonTask+0x48>)
 8000b3a:	f000 fbd3 	bl	80012e4 <HAL_GPIO_ReadPin>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73bb      	strb	r3, [r7, #14]
		if (currentState == GPIO_PIN_RESET)
 8000b42:	7bbb      	ldrb	r3, [r7, #14]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10b      	bne.n	8000b60 <ButtonTask+0x3c>
		{
			if(prevState)
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d008      	beq.n	8000b60 <ButtonTask+0x3c>
			{
				xTaskNotify(Next_Task_Handle,0,eNoAction);
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <ButtonTask+0x4c>)
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f003 f8f2 	bl	8003d44 <xTaskGenericNotify>
			}

		}
		prevState = currentState;
 8000b60:	7bbb      	ldrb	r3, [r7, #14]
 8000b62:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000b64:	200a      	movs	r0, #10
 8000b66:	f002 f909 	bl	8002d7c <vTaskDelay>
		currentState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b6a:	e7e3      	b.n	8000b34 <ButtonTask+0x10>
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	20000038 	.word	0x20000038

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 f917 	bl	8000db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40000c00 	.word	0x40000c00

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	; 0x30
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2032      	movs	r0, #50	; 0x32
 8000c0e:	f000 f9ab 	bl	8000f68 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000c12:	2032      	movs	r0, #50	; 0x32
 8000c14:	f000 f9c4 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <HAL_InitTick+0xa4>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <HAL_InitTick+0xa4>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_InitTick+0xa4>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c34:	f107 0210 	add.w	r2, r7, #16
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fca2 	bl	8001588 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c44:	f000 fc8c 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_InitTick+0xa8>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	0c9b      	lsrs	r3, r3, #18
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_InitTick+0xac>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <HAL_InitTick+0xb0>)
 8000c60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_InitTick+0xac>)
 8000c64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c68:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_InitTick+0xac>)
 8000c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_InitTick+0xac>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_InitTick+0xac>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <HAL_InitTick+0xac>)
 8000c7e:	f001 f8c1 	bl	8001e04 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d104      	bne.n	8000c92 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <HAL_InitTick+0xac>)
 8000c8a:	f001 f8f0 	bl	8001e6e <HAL_TIM_Base_Start_IT>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	431bde83 	.word	0x431bde83
 8000ca4:	20014394 	.word	0x20014394
 8000ca8:	40000c00 	.word	0x40000c00

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM5_IRQHandler+0x10>)
 8000ce6:	f001 f8e6 	bl	8001eb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20014394 	.word	0x20014394

08000cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <SystemInit+0x28>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <SystemInit+0x28>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SystemInit+0x28>)
 8000d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d26:	e003      	b.n	8000d30 <LoopCopyDataInit>

08000d28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d2e:	3104      	adds	r1, #4

08000d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d38:	d3f6      	bcc.n	8000d28 <CopyDataInit>
  ldr  r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d3c:	e002      	b.n	8000d44 <LoopFillZerobss>

08000d3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d40:	f842 3b04 	str.w	r3, [r2], #4

08000d44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d48:	d3f9      	bcc.n	8000d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd3 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f006 fccd 	bl	80076ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc23 	bl	800059c <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d5c:	08007950 	.word	0x08007950
  ldr  r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d64:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000d68:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000d6c:	200144c0 	.word	0x200144c0

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f8d8 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff ff28 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fefe 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	200143d4 	.word	0x200143d4

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200143d4 	.word	0x200143d4

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4c 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff61 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb1 	bl	8000eec <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff80 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff54 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e165      	b.n	80012a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 8154 	bne.w	800129e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00b      	beq.n	8001016 <HAL_GPIO_Init+0x5a>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	2b11      	cmp	r3, #17
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b12      	cmp	r3, #18
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0xfc>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b12      	cmp	r3, #18
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80ae 	beq.w	800129e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a5c      	ldr	r2, [pc, #368]	; (80012bc <HAL_GPIO_Init+0x300>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b5a      	ldr	r3, [pc, #360]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <HAL_GPIO_Init+0x308>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x21a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4e      	ldr	r2, [pc, #312]	; (80012c8 <HAL_GPIO_Init+0x30c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x216>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4d      	ldr	r2, [pc, #308]	; (80012cc <HAL_GPIO_Init+0x310>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x212>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4c      	ldr	r2, [pc, #304]	; (80012d0 <HAL_GPIO_Init+0x314>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x20e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <HAL_GPIO_Init+0x318>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x20a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4a      	ldr	r2, [pc, #296]	; (80012d8 <HAL_GPIO_Init+0x31c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x206>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a49      	ldr	r2, [pc, #292]	; (80012dc <HAL_GPIO_Init+0x320>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x202>
 80011ba:	2306      	movs	r3, #6
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011be:	2307      	movs	r3, #7
 80011c0:	e00a      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x21c>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x304>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <HAL_GPIO_Init+0x324>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121a:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <HAL_GPIO_Init+0x324>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_GPIO_Init+0x324>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <HAL_GPIO_Init+0x324>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_GPIO_Init+0x324>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <HAL_GPIO_Init+0x324>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_GPIO_Init+0x324>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_GPIO_Init+0x324>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f ae96 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40013c00 	.word	0x40013c00

080012e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e001      	b.n	8001306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	401a      	ands	r2, r3
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	429a      	cmp	r2, r3
 800135e:	d104      	bne.n	800136a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001368:	e002      	b.n	8001370 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0cc      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001390:	4b68      	ldr	r3, [pc, #416]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d90c      	bls.n	80013b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b65      	ldr	r3, [pc, #404]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0b8      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d0:	4b59      	ldr	r3, [pc, #356]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a58      	ldr	r2, [pc, #352]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	494d      	ldr	r1, [pc, #308]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d044      	beq.n	800149c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d119      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e07f      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d003      	beq.n	800143a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001436:	2b03      	cmp	r3, #3
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e06f      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e067      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f023 0203 	bic.w	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4934      	ldr	r1, [pc, #208]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	4313      	orrs	r3, r2
 800146a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800146c:	f7ff fcb8 	bl	8000de0 <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001472:	e00a      	b.n	800148a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001474:	f7ff fcb4 	bl	8000de0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e04f      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 020c 	and.w	r2, r3, #12
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	429a      	cmp	r2, r3
 800149a:	d1eb      	bne.n	8001474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d20c      	bcs.n	80014c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e032      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	490e      	ldr	r1, [pc, #56]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001502:	f000 f873 	bl	80015ec <HAL_RCC_GetSysClockFreq>
 8001506:	4602      	mov	r2, r0
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	490a      	ldr	r1, [pc, #40]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	5ccb      	ldrb	r3, [r1, r3]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1c8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fb68 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00
 8001538:	40023800 	.word	0x40023800
 800153c:	08007900 	.word	0x08007900
 8001540:	20000000 	.word	0x20000000
 8001544:	20000004 	.word	0x20000004

08001548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_RCC_GetHCLKFreq+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000000 	.word	0x20000000

08001560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001564:	f7ff fff0 	bl	8001548 <HAL_RCC_GetHCLKFreq>
 8001568:	4602      	mov	r2, r0
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	0a9b      	lsrs	r3, r3, #10
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	4903      	ldr	r1, [pc, #12]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001576:	5ccb      	ldrb	r3, [r1, r3]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800
 8001584:	08007910 	.word	0x08007910

08001588 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	220f      	movs	r2, #15
 8001596:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_RCC_GetClockConfig+0x5c>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0203 	and.w	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_RCC_GetClockConfig+0x5c>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_RCC_GetClockConfig+0x5c>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_GetClockConfig+0x5c>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_RCC_GetClockConfig+0x60>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 020f 	and.w	r2, r3, #15
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	601a      	str	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f0:	b088      	sub	sp, #32
 80015f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001608:	4bce      	ldr	r3, [pc, #824]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b0c      	cmp	r3, #12
 8001612:	f200 818d 	bhi.w	8001930 <HAL_RCC_GetSysClockFreq+0x344>
 8001616:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_RCC_GetSysClockFreq+0x30>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	08001651 	.word	0x08001651
 8001620:	08001931 	.word	0x08001931
 8001624:	08001931 	.word	0x08001931
 8001628:	08001931 	.word	0x08001931
 800162c:	08001657 	.word	0x08001657
 8001630:	08001931 	.word	0x08001931
 8001634:	08001931 	.word	0x08001931
 8001638:	08001931 	.word	0x08001931
 800163c:	0800165d 	.word	0x0800165d
 8001640:	08001931 	.word	0x08001931
 8001644:	08001931 	.word	0x08001931
 8001648:	08001931 	.word	0x08001931
 800164c:	080017d1 	.word	0x080017d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001650:	4bbd      	ldr	r3, [pc, #756]	; (8001948 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001652:	61bb      	str	r3, [r7, #24]
       break;
 8001654:	e16f      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001656:	4bbd      	ldr	r3, [pc, #756]	; (800194c <HAL_RCC_GetSysClockFreq+0x360>)
 8001658:	61bb      	str	r3, [r7, #24]
      break;
 800165a:	e16c      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165c:	4bb9      	ldr	r3, [pc, #740]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001664:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001666:	4bb7      	ldr	r3, [pc, #732]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d053      	beq.n	800171a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4bb4      	ldr	r3, [pc, #720]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	461a      	mov	r2, r3
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	ea02 0400 	and.w	r4, r2, r0
 800168a:	603c      	str	r4, [r7, #0]
 800168c:	400b      	ands	r3, r1
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001694:	4620      	mov	r0, r4
 8001696:	4629      	mov	r1, r5
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016a6:	0142      	lsls	r2, r0, #5
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	4623      	mov	r3, r4
 80016ae:	1ac0      	subs	r0, r0, r3
 80016b0:	462b      	mov	r3, r5
 80016b2:	eb61 0103 	sbc.w	r1, r1, r3
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	018b      	lsls	r3, r1, #6
 80016c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016c4:	0182      	lsls	r2, r0, #6
 80016c6:	1a12      	subs	r2, r2, r0
 80016c8:	eb63 0301 	sbc.w	r3, r3, r1
 80016cc:	f04f 0000 	mov.w	r0, #0
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	00d9      	lsls	r1, r3, #3
 80016d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016da:	00d0      	lsls	r0, r2, #3
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4621      	mov	r1, r4
 80016e2:	1852      	adds	r2, r2, r1
 80016e4:	4629      	mov	r1, r5
 80016e6:	eb43 0101 	adc.w	r1, r3, r1
 80016ea:	460b      	mov	r3, r1
 80016ec:	f04f 0000 	mov.w	r0, #0
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	0259      	lsls	r1, r3, #9
 80016f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016fa:	0250      	lsls	r0, r2, #9
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	461a      	mov	r2, r3
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	f7fe fdca 	bl	80002a4 <__aeabi_uldivmod>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4613      	mov	r3, r2
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	e04c      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	4b8a      	ldr	r3, [pc, #552]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	461a      	mov	r2, r3
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	f240 10ff 	movw	r0, #511	; 0x1ff
 800172a:	f04f 0100 	mov.w	r1, #0
 800172e:	ea02 0a00 	and.w	sl, r2, r0
 8001732:	ea03 0b01 	and.w	fp, r3, r1
 8001736:	4650      	mov	r0, sl
 8001738:	4659      	mov	r1, fp
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	014b      	lsls	r3, r1, #5
 8001744:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001748:	0142      	lsls	r2, r0, #5
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	ebb0 000a 	subs.w	r0, r0, sl
 8001752:	eb61 010b 	sbc.w	r1, r1, fp
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	018b      	lsls	r3, r1, #6
 8001760:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001764:	0182      	lsls	r2, r0, #6
 8001766:	1a12      	subs	r2, r2, r0
 8001768:	eb63 0301 	sbc.w	r3, r3, r1
 800176c:	f04f 0000 	mov.w	r0, #0
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	00d9      	lsls	r1, r3, #3
 8001776:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800177a:	00d0      	lsls	r0, r2, #3
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	eb12 020a 	adds.w	r2, r2, sl
 8001784:	eb43 030b 	adc.w	r3, r3, fp
 8001788:	f04f 0000 	mov.w	r0, #0
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	0299      	lsls	r1, r3, #10
 8001792:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001796:	0290      	lsls	r0, r2, #10
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	f7fe fd7c 	bl	80002a4 <__aeabi_uldivmod>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4613      	mov	r3, r2
 80017b2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017b4:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	3301      	adds	r3, #1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	61bb      	str	r3, [r7, #24]
      break;
 80017ce:	e0b2      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d0:	4b5c      	ldr	r3, [pc, #368]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017da:	4b5a      	ldr	r3, [pc, #360]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d04d      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e6:	4b57      	ldr	r3, [pc, #348]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	099b      	lsrs	r3, r3, #6
 80017ec:	461a      	mov	r2, r3
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	ea02 0800 	and.w	r8, r2, r0
 80017fe:	ea03 0901 	and.w	r9, r3, r1
 8001802:	4640      	mov	r0, r8
 8001804:	4649      	mov	r1, r9
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	014b      	lsls	r3, r1, #5
 8001810:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001814:	0142      	lsls	r2, r0, #5
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	ebb0 0008 	subs.w	r0, r0, r8
 800181e:	eb61 0109 	sbc.w	r1, r1, r9
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	018b      	lsls	r3, r1, #6
 800182c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001830:	0182      	lsls	r2, r0, #6
 8001832:	1a12      	subs	r2, r2, r0
 8001834:	eb63 0301 	sbc.w	r3, r3, r1
 8001838:	f04f 0000 	mov.w	r0, #0
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	00d9      	lsls	r1, r3, #3
 8001842:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001846:	00d0      	lsls	r0, r2, #3
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	eb12 0208 	adds.w	r2, r2, r8
 8001850:	eb43 0309 	adc.w	r3, r3, r9
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	0259      	lsls	r1, r3, #9
 800185e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001862:	0250      	lsls	r0, r2, #9
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	461a      	mov	r2, r3
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f7fe fd16 	bl	80002a4 <__aeabi_uldivmod>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4613      	mov	r3, r2
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	e04a      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	461a      	mov	r2, r3
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	ea02 0400 	and.w	r4, r2, r0
 800189a:	ea03 0501 	and.w	r5, r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	014b      	lsls	r3, r1, #5
 80018ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018b0:	0142      	lsls	r2, r0, #5
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	1b00      	subs	r0, r0, r4
 80018b8:	eb61 0105 	sbc.w	r1, r1, r5
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	018b      	lsls	r3, r1, #6
 80018c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018ca:	0182      	lsls	r2, r0, #6
 80018cc:	1a12      	subs	r2, r2, r0
 80018ce:	eb63 0301 	sbc.w	r3, r3, r1
 80018d2:	f04f 0000 	mov.w	r0, #0
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	00d9      	lsls	r1, r3, #3
 80018dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018e0:	00d0      	lsls	r0, r2, #3
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	1912      	adds	r2, r2, r4
 80018e8:	eb45 0303 	adc.w	r3, r5, r3
 80018ec:	f04f 0000 	mov.w	r0, #0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	0299      	lsls	r1, r3, #10
 80018f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018fa:	0290      	lsls	r0, r2, #10
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	461a      	mov	r2, r3
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f7fe fcca 	bl	80002a4 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_RCC_GetSysClockFreq+0x358>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0f1b      	lsrs	r3, r3, #28
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	61bb      	str	r3, [r7, #24]
      break;
 800192e:	e002      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001932:	61bb      	str	r3, [r7, #24]
      break;
 8001934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001936:	69bb      	ldr	r3, [r7, #24]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	00f42400 	.word	0x00f42400
 800194c:	007a1200 	.word	0x007a1200

08001950 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8083 	beq.w	8001a70 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800196a:	4b95      	ldr	r3, [pc, #596]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d019      	beq.n	80019aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001976:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800197e:	2b08      	cmp	r3, #8
 8001980:	d106      	bne.n	8001990 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001982:	4b8f      	ldr	r3, [pc, #572]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800198e:	d00c      	beq.n	80019aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001990:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001998:	2b0c      	cmp	r3, #12
 800199a:	d112      	bne.n	80019c2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199c:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019a8:	d10b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019aa:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d05b      	beq.n	8001a6e <HAL_RCC_OscConfig+0x11e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d157      	bne.n	8001a6e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e216      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x8a>
 80019cc:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a7b      	ldr	r2, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e01d      	b.n	8001a16 <HAL_RCC_OscConfig+0xc6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e2:	d10c      	bne.n	80019fe <HAL_RCC_OscConfig+0xae>
 80019e4:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a72      	ldr	r2, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e00b      	b.n	8001a16 <HAL_RCC_OscConfig+0xc6>
 80019fe:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6f      	ldr	r2, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6c      	ldr	r2, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d013      	beq.n	8001a46 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f9df 	bl	8000de0 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a26:	f7ff f9db 	bl	8000de0 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e1db      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a38:	4b61      	ldr	r3, [pc, #388]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0xd6>
 8001a44:	e014      	b.n	8001a70 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f9cb 	bl	8000de0 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4e:	f7ff f9c7 	bl	8000de0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b64      	cmp	r3, #100	; 0x64
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1c7      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0xfe>
 8001a6c:	e000      	b.n	8001a70 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d06f      	beq.n	8001b5c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d017      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a94:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00b      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa0:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d11c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d116      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab8:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x180>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e18f      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4938      	ldr	r1, [pc, #224]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae4:	e03a      	b.n	8001b5c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d020      	beq.n	8001b30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aee:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff f974 	bl	8000de0 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff f970 	bl	8000de0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e170      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4925      	ldr	r1, [pc, #148]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
 8001b2e:	e015      	b.n	8001b5c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff f953 	bl	8000de0 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff f94f 	bl	8000de0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e14f      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d037      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d016      	beq.n	8001b9e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x278>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff f933 	bl	8000de0 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f92f 	bl	8000de0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e12f      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x22e>
 8001b9c:	e01c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_RCC_OscConfig+0x278>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f91c 	bl	8000de0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001baa:	e00f      	b.n	8001bcc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f918 	bl	8000de0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d908      	bls.n	8001bcc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e118      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b8a      	ldr	r3, [pc, #552]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1e9      	bne.n	8001bac <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8097 	beq.w	8001d14 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a7e      	ldr	r2, [pc, #504]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b7c      	ldr	r3, [pc, #496]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b79      	ldr	r3, [pc, #484]	; (8001dfc <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f8d7 	bl	8000de0 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff f8d3 	bl	8000de0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0d3      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <HAL_RCC_OscConfig+0x4ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x31a>
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4a65      	ldr	r2, [pc, #404]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x354>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x33c>
 8001c72:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7e:	4b5e      	ldr	r3, [pc, #376]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a5d      	ldr	r2, [pc, #372]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x354>
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a59      	ldr	r2, [pc, #356]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff f898 	bl	8000de0 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f894 	bl	8000de0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e092      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x364>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f882 	bl	8000de0 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f87e 	bl	8000de0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e07c      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d068      	beq.n	8001dee <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1c:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d060      	beq.n	8001dea <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d145      	bne.n	8001dbc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d30:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_RCC_OscConfig+0x4b0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f853 	bl	8000de0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff f84f 	bl	8000de0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e04f      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69da      	ldr	r2, [r3, #28]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	019b      	lsls	r3, r3, #6
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	3b01      	subs	r3, #1
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	061b      	lsls	r3, r3, #24
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	071b      	lsls	r3, r3, #28
 8001d88:	491b      	ldr	r1, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_RCC_OscConfig+0x4b0>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f824 	bl	8000de0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f820 	bl	8000de0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e020      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x44c>
 8001dba:	e018      	b.n	8001dee <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_OscConfig+0x4b0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f80d 	bl	8000de0 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dca:	f7ff f809 	bl	8000de0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e009      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_OscConfig+0x4a8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x47a>
 8001de8:	e001      	b.n	8001dee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	42470060 	.word	0x42470060

08001e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e01d      	b.n	8001e52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f815 	bl	8001e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f000 f968 	bl	8002118 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	d007      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d122      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d11b      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f06f 0202 	mvn.w	r2, #2
 8001ee2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8ee 	bl	80020da <HAL_TIM_IC_CaptureCallback>
 8001efe:	e005      	b.n	8001f0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8e0 	bl	80020c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8f1 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d122      	bne.n	8001f66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d11b      	bne.n	8001f66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0204 	mvn.w	r2, #4
 8001f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8c4 	bl	80020da <HAL_TIM_IC_CaptureCallback>
 8001f52:	e005      	b.n	8001f60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8b6 	bl	80020c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8c7 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d122      	bne.n	8001fba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d11b      	bne.n	8001fba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0208 	mvn.w	r2, #8
 8001f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2204      	movs	r2, #4
 8001f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f89a 	bl	80020da <HAL_TIM_IC_CaptureCallback>
 8001fa6:	e005      	b.n	8001fb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f88c 	bl	80020c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f89d 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d122      	bne.n	800200e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d11b      	bne.n	800200e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f06f 0210 	mvn.w	r2, #16
 8001fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f870 	bl	80020da <HAL_TIM_IC_CaptureCallback>
 8001ffa:	e005      	b.n	8002008 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f862 	bl	80020c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f873 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d10e      	bne.n	800203a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d107      	bne.n	800203a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f06f 0201 	mvn.w	r2, #1
 8002032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe fd9d 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	2b80      	cmp	r3, #128	; 0x80
 8002046:	d10e      	bne.n	8002066 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d107      	bne.n	8002066 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800205e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f903 	bl	800226c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d10e      	bne.n	8002092 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d107      	bne.n	8002092 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800208a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f838 	bl	8002102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b20      	cmp	r3, #32
 800209e:	d10e      	bne.n	80020be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d107      	bne.n	80020be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f06f 0220 	mvn.w	r2, #32
 80020b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f8cd 	bl	8002258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a40      	ldr	r2, [pc, #256]	; (800222c <TIM_Base_SetConfig+0x114>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002136:	d00f      	beq.n	8002158 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3d      	ldr	r2, [pc, #244]	; (8002230 <TIM_Base_SetConfig+0x118>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00b      	beq.n	8002158 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3c      	ldr	r2, [pc, #240]	; (8002234 <TIM_Base_SetConfig+0x11c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <TIM_Base_SetConfig+0x120>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d003      	beq.n	8002158 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3a      	ldr	r2, [pc, #232]	; (800223c <TIM_Base_SetConfig+0x124>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d108      	bne.n	800216a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2f      	ldr	r2, [pc, #188]	; (800222c <TIM_Base_SetConfig+0x114>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02b      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002178:	d027      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2c      	ldr	r2, [pc, #176]	; (8002230 <TIM_Base_SetConfig+0x118>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d023      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2b      	ldr	r2, [pc, #172]	; (8002234 <TIM_Base_SetConfig+0x11c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <TIM_Base_SetConfig+0x120>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01b      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a29      	ldr	r2, [pc, #164]	; (800223c <TIM_Base_SetConfig+0x124>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d017      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a28      	ldr	r2, [pc, #160]	; (8002240 <TIM_Base_SetConfig+0x128>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a27      	ldr	r2, [pc, #156]	; (8002244 <TIM_Base_SetConfig+0x12c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00f      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a26      	ldr	r2, [pc, #152]	; (8002248 <TIM_Base_SetConfig+0x130>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00b      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a25      	ldr	r2, [pc, #148]	; (800224c <TIM_Base_SetConfig+0x134>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <TIM_Base_SetConfig+0x138>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d003      	beq.n	80021ca <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <TIM_Base_SetConfig+0x13c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d108      	bne.n	80021dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <TIM_Base_SetConfig+0x114>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <TIM_Base_SetConfig+0xf8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <TIM_Base_SetConfig+0x124>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d103      	bne.n	8002218 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	615a      	str	r2, [r3, #20]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800
 8002238:	40000c00 	.word	0x40000c00
 800223c:	40010400 	.word	0x40010400
 8002240:	40014000 	.word	0x40014000
 8002244:	40014400 	.word	0x40014400
 8002248:	40014800 	.word	0x40014800
 800224c:	40001800 	.word	0x40001800
 8002250:	40001c00 	.word	0x40001c00
 8002254:	40002000 	.word	0x40002000

08002258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f103 0208 	add.w	r2, r3, #8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 0208 	add.w	r2, r3, #8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f103 0208 	add.w	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d103      	bne.n	8002342 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e00c      	b.n	800235c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3308      	adds	r3, #8
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e002      	b.n	8002350 <vListInsert+0x2e>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	429a      	cmp	r2, r3
 800235a:	d2f6      	bcs.n	800234a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6892      	ldr	r2, [r2, #8]
 80023aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6852      	ldr	r2, [r2, #4]
 80023b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d103      	bne.n	80023c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	1e5a      	subs	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023f2:	2301      	movs	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <xQueueGenericReset+0x2e>
        __asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	60fb      	str	r3, [r7, #12]
    }
 8002412:	bf00      	nop
 8002414:	e7fe      	b.n	8002414 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d05d      	beq.n	80024d8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002420:	2b00      	cmp	r3, #0
 8002422:	d059      	beq.n	80024d8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	2100      	movs	r1, #0
 800242e:	fba3 2302 	umull	r2, r3, r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d000      	beq.n	8002438 <xQueueGenericReset+0x50>
 8002436:	2101      	movs	r1, #1
 8002438:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d14c      	bne.n	80024d8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800243e:	f002 f9f3 	bl	8004828 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	6939      	ldr	r1, [r7, #16]
 800244c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	441a      	add	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2200      	movs	r2, #0
 800245c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	3b01      	subs	r3, #1
 8002470:	6939      	ldr	r1, [r7, #16]
 8002472:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	441a      	add	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	22ff      	movs	r2, #255	; 0xff
 8002482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	22ff      	movs	r2, #255	; 0xff
 800248a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d114      	bne.n	80024be <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01a      	beq.n	80024d2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	3310      	adds	r3, #16
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 f997 	bl	80037d4 <xTaskRemoveFromEventList>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <xQueueGenericReset+0x11c>)
 80024ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	e009      	b.n	80024d2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	3310      	adds	r3, #16
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fedc 	bl	8002280 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	3324      	adds	r3, #36	; 0x24
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fed7 	bl	8002280 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024d2:	f002 f9d9 	bl	8004888 <vPortExitCritical>
 80024d6:	e001      	b.n	80024dc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <xQueueGenericReset+0x110>
        __asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	60bb      	str	r3, [r7, #8]
    }
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024f8:	697b      	ldr	r3, [r7, #20]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d02e      	beq.n	800257e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002520:	2100      	movs	r1, #0
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	fba3 2302 	umull	r2, r3, r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d000      	beq.n	8002530 <xQueueGenericCreate+0x28>
 800252e:	2101      	movs	r1, #1
 8002530:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d123      	bne.n	800257e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800253e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002542:	d81c      	bhi.n	800257e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	3350      	adds	r3, #80	; 0x50
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fa92 	bl	8004a7c <pvPortMalloc>
 8002558:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01c      	beq.n	800259a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3350      	adds	r3, #80	; 0x50
 8002568:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800256a:	79fa      	ldrb	r2, [r7, #7]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f814 	bl	80025a4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800257c:	e00d      	b.n	800259a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <xQueueGenericCreate+0x92>
        __asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	613b      	str	r3, [r7, #16]
    }
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800259a:	69fb      	ldr	r3, [r7, #28]
    }
 800259c:	4618      	mov	r0, r3
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e002      	b.n	80025c6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025d2:	2101      	movs	r1, #1
 80025d4:	69b8      	ldr	r0, [r7, #24]
 80025d6:	f7ff ff07 	bl	80023e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	2073      	movs	r0, #115	; 0x73
 80025ea:	f004 f967 	bl	80068bc <SEGGER_SYSVIEW_RecordU32x3>
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b08f      	sub	sp, #60	; 0x3c
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002604:	2300      	movs	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <xQueueReceive+0x30>
        __asm volatile
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	623b      	str	r3, [r7, #32]
    }
 8002624:	bf00      	nop
 8002626:	e7fe      	b.n	8002626 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <xQueueReceive+0x3e>
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <xQueueReceive+0x42>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueReceive+0x44>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueReceive+0x5e>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	61fb      	str	r3, [r7, #28]
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002656:	f001 facf 	bl	8003bf8 <xTaskGetSchedulerState>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <xQueueReceive+0x6e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <xQueueReceive+0x72>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <xQueueReceive+0x74>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <xQueueReceive+0x8e>
        __asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	61bb      	str	r3, [r7, #24]
    }
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002686:	f002 f8cf 	bl	8004828 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d02f      	beq.n	80026f6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800269a:	f000 f8bd 	bl	8002818 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 fe99 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 80026a6:	4604      	mov	r4, r0
 80026a8:	2000      	movs	r0, #0
 80026aa:	f004 fe95 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 80026ae:	4602      	mov	r2, r0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2101      	movs	r1, #1
 80026b4:	9100      	str	r1, [sp, #0]
 80026b6:	4621      	mov	r1, r4
 80026b8:	205c      	movs	r0, #92	; 0x5c
 80026ba:	f004 f975 	bl	80069a8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	1e5a      	subs	r2, r3, #1
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00f      	beq.n	80026ee <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	3310      	adds	r3, #16
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 f87e 	bl	80037d4 <xTaskRemoveFromEventList>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026de:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <xQueueReceive+0x21c>)
 80026e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026ee:	f002 f8cb 	bl	8004888 <vPortExitCritical>
                return pdPASS;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e08a      	b.n	800280c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d113      	bne.n	8002724 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026fc:	f002 f8c4 	bl	8004888 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	4618      	mov	r0, r3
 8002704:	f004 fe68 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 8002708:	4604      	mov	r4, r0
 800270a:	2000      	movs	r0, #0
 800270c:	f004 fe64 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2101      	movs	r1, #1
 8002716:	9100      	str	r1, [sp, #0]
 8002718:	4621      	mov	r1, r4
 800271a:	205c      	movs	r0, #92	; 0x5c
 800271c:	f004 f944 	bl	80069a8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002720:	2300      	movs	r3, #0
 8002722:	e073      	b.n	800280c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f001 f928 	bl	8003984 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002738:	f002 f8a6 	bl	8004888 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800273c:	f000 fd2a 	bl	8003194 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002740:	f002 f872 	bl	8004828 <vPortEnterCritical>
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800274a:	b25b      	sxtb	r3, r3
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d103      	bne.n	800275a <xQueueReceive+0x162>
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002760:	b25b      	sxtb	r3, r3
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d103      	bne.n	8002770 <xQueueReceive+0x178>
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002770:	f002 f88a 	bl	8004888 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002774:	1d3a      	adds	r2, r7, #4
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f001 f917 	bl	80039b0 <xTaskCheckForTimeOut>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d124      	bne.n	80027d2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800278a:	f000 f8bd 	bl	8002908 <prvIsQueueEmpty>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d018      	beq.n	80027c6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	3324      	adds	r3, #36	; 0x24
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f000 ffad 	bl	80036fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80027a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a4:	f000 f85e 	bl	8002864 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80027a8:	f000 fd02 	bl	80031b0 <xTaskResumeAll>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f47f af69 	bne.w	8002686 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <xQueueReceive+0x21c>)
 80027b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	e75f      	b.n	8002686 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80027c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c8:	f000 f84c 	bl	8002864 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027cc:	f000 fcf0 	bl	80031b0 <xTaskResumeAll>
 80027d0:	e759      	b.n	8002686 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80027d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027d4:	f000 f846 	bl	8002864 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027d8:	f000 fcea 	bl	80031b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027de:	f000 f893 	bl	8002908 <prvIsQueueEmpty>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f43f af4e 	beq.w	8002686 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 fdf3 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 80027f2:	4604      	mov	r4, r0
 80027f4:	2000      	movs	r0, #0
 80027f6:	f004 fdef 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2101      	movs	r1, #1
 8002800:	9100      	str	r1, [sp, #0]
 8002802:	4621      	mov	r1, r4
 8002804:	205c      	movs	r0, #92	; 0x5c
 8002806:	f004 f8cf 	bl	80069a8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800280a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800280c:	4618      	mov	r0, r3
 800280e:	3734      	adds	r7, #52	; 0x34
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d018      	beq.n	800285c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	441a      	add	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d303      	bcc.n	800284c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68d9      	ldr	r1, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	461a      	mov	r2, r3
 8002856:	6838      	ldr	r0, [r7, #0]
 8002858:	f004 ff7a 	bl	8007750 <memcpy>
    }
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800286c:	f001 ffdc 	bl	8004828 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002876:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002878:	e011      	b.n	800289e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d012      	beq.n	80028a8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3324      	adds	r3, #36	; 0x24
 8002886:	4618      	mov	r0, r3
 8002888:	f000 ffa4 	bl	80037d4 <xTaskRemoveFromEventList>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002892:	f001 f8f3 	bl	8003a7c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	3b01      	subs	r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	dce9      	bgt.n	800287a <prvUnlockQueue+0x16>
 80028a6:	e000      	b.n	80028aa <prvUnlockQueue+0x46>
                        break;
 80028a8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	22ff      	movs	r2, #255	; 0xff
 80028ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80028b2:	f001 ffe9 	bl	8004888 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80028b6:	f001 ffb7 	bl	8004828 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028c0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028c2:	e011      	b.n	80028e8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d012      	beq.n	80028f2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3310      	adds	r3, #16
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 ff7f 	bl	80037d4 <xTaskRemoveFromEventList>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028dc:	f001 f8ce 	bl	8003a7c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	dce9      	bgt.n	80028c4 <prvUnlockQueue+0x60>
 80028f0:	e000      	b.n	80028f4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028f2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80028fc:	f001 ffc4 	bl	8004888 <vPortExitCritical>
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002910:	f001 ff8a 	bl	8004828 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800291c:	2301      	movs	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e001      	b.n	8002926 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002926:	f001 ffaf 	bl	8004888 <vPortExitCritical>

    return xReturn;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <vQueueAddToRegistry+0x26>
        __asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	60fb      	str	r3, [r7, #12]
    }
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d024      	beq.n	80029ae <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e01e      	b.n	80029a8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800296a:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <vQueueAddToRegistry+0xa8>)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d105      	bne.n	8002986 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <vQueueAddToRegistry+0xa8>)
 8002980:	4413      	add	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
                    break;
 8002984:	e013      	b.n	80029ae <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <vQueueAddToRegistry+0x6e>
 800298c:	4a13      	ldr	r2, [pc, #76]	; (80029dc <vQueueAddToRegistry+0xa8>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <vQueueAddToRegistry+0xa8>)
 800299e:	4413      	add	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b07      	cmp	r3, #7
 80029ac:	d9dd      	bls.n	800296a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00f      	beq.n	80029d4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 fd08 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 80029c8:	4601      	mov	r1, r0
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	2071      	movs	r0, #113	; 0x71
 80029d0:	f003 ff1a 	bl	8006808 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200143d8 	.word	0x200143d8

080029e0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029f0:	f001 ff1a 	bl	8004828 <vPortEnterCritical>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d103      	bne.n	8002a0a <vQueueWaitForMessageRestricted+0x2a>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d103      	bne.n	8002a20 <vQueueWaitForMessageRestricted+0x40>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a20:	f001 ff32 	bl	8004888 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3324      	adds	r3, #36	; 0x24
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fe85 	bl	8003744 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff12 	bl	8002864 <prvUnlockQueue>
    }
 8002a40:	bf00      	nop
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af04      	add	r7, sp, #16
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 f80d 	bl	8004a7c <pvPortMalloc>
 8002a62:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00e      	beq.n	8002a88 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a6a:	2058      	movs	r0, #88	; 0x58
 8002a6c:	f002 f806 	bl	8004a7c <pvPortMalloc>
 8002a70:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7e:	e005      	b.n	8002a8c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002a80:	6978      	ldr	r0, [r7, #20]
 8002a82:	f002 f8db 	bl	8004c3c <vPortFree>
 8002a86:	e001      	b.n	8002a8c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d013      	beq.n	8002aba <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	2300      	movs	r3, #0
 8002a96:	9303      	str	r3, [sp, #12]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f80e 	bl	8002aca <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002aae:	69f8      	ldr	r0, [r7, #28]
 8002ab0:	f000 f8b0 	bl	8002c14 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	e002      	b.n	8002ac0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
    }
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b088      	sub	sp, #32
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	21a5      	movs	r1, #165	; 0xa5
 8002ae4:	f004 fe42 	bl	800776c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002af2:	3b01      	subs	r3, #1
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f023 0307 	bic.w	r3, r3, #7
 8002b00:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	617b      	str	r3, [r7, #20]
    }
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01f      	beq.n	8002b68 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	e012      	b.n	8002b54 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	4413      	add	r3, r2
 8002b34:	7819      	ldrb	r1, [r3, #0]
 8002b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3334      	adds	r3, #52	; 0x34
 8002b3e:	460a      	mov	r2, r1
 8002b40:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b09      	cmp	r3, #9
 8002b58:	d9e9      	bls.n	8002b2e <prvInitialiseNewTask+0x64>
 8002b5a:	e000      	b.n	8002b5e <prvInitialiseNewTask+0x94>
            {
                break;
 8002b5c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b66:	e003      	b.n	8002b70 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d90a      	bls.n	8002b8c <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	613b      	str	r3, [r7, #16]
    }
 8002b88:	bf00      	nop
 8002b8a:	e7fe      	b.n	8002b8a <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d901      	bls.n	8002b96 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b92:	2304      	movs	r3, #4
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	3304      	adds	r3, #4
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fb87 	bl	80022c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fb82 	bl	80022c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	f1c3 0205 	rsb	r2, r3, #5
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	3350      	adds	r3, #80	; 0x50
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 fdc6 	bl	800776c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	3354      	adds	r3, #84	; 0x54
 8002be4:	2201      	movs	r2, #1
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f004 fdbf 	bl	800776c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	68f9      	ldr	r1, [r7, #12]
 8002bf2:	69b8      	ldr	r0, [r7, #24]
 8002bf4:	f001 fcea 	bl	80045cc <pxPortInitialiseStack>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c0a:	bf00      	nop
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c14:	b5b0      	push	{r4, r5, r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c1c:	f001 fe04 	bl	8004828 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c20:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <prvAddNewTaskToReadyList+0x14c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a4e      	ldr	r2, [pc, #312]	; (8002d60 <prvAddNewTaskToReadyList+0x14c>)
 8002c28:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c2a:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <prvAddNewTaskToReadyList+0x150>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c32:	4a4c      	ldr	r2, [pc, #304]	; (8002d64 <prvAddNewTaskToReadyList+0x150>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c38:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <prvAddNewTaskToReadyList+0x14c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d110      	bne.n	8002c62 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c40:	f000 ff40 	bl	8003ac4 <prvInitialiseTaskLists>
 8002c44:	e00d      	b.n	8002c62 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c46:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <prvAddNewTaskToReadyList+0x154>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c4e:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <prvAddNewTaskToReadyList+0x150>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d802      	bhi.n	8002c62 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c5c:	4a41      	ldr	r2, [pc, #260]	; (8002d64 <prvAddNewTaskToReadyList+0x150>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c62:	4b42      	ldr	r3, [pc, #264]	; (8002d6c <prvAddNewTaskToReadyList+0x158>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4a40      	ldr	r2, [pc, #256]	; (8002d6c <prvAddNewTaskToReadyList+0x158>)
 8002c6a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <prvAddNewTaskToReadyList+0x158>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <prvAddNewTaskToReadyList+0x94>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 fa85 	bl	800718c <SEGGER_SYSVIEW_OnTaskCreate>
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	461d      	mov	r5, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461c      	mov	r4, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	1ae3      	subs	r3, r4, r3
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	462b      	mov	r3, r5
 8002ca4:	f002 f990 	bl	8004fc8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f004 faf2 	bl	8007294 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <prvAddNewTaskToReadyList+0x15c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <prvAddNewTaskToReadyList+0x15c>)
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc6:	492b      	ldr	r1, [pc, #172]	; (8002d74 <prvAddNewTaskToReadyList+0x160>)
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	3204      	adds	r2, #4
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	1d1a      	adds	r2, r3, #4
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <prvAddNewTaskToReadyList+0x160>)
 8002d06:	441a      	add	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	615a      	str	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d10:	4918      	ldr	r1, [pc, #96]	; (8002d74 <prvAddNewTaskToReadyList+0x160>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1c59      	adds	r1, r3, #1
 8002d20:	4814      	ldr	r0, [pc, #80]	; (8002d74 <prvAddNewTaskToReadyList+0x160>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4403      	add	r3, r0
 8002d2c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d2e:	f001 fdab 	bl	8004888 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <prvAddNewTaskToReadyList+0x154>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00e      	beq.n	8002d58 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <prvAddNewTaskToReadyList+0x150>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d207      	bcs.n	8002d58 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <prvAddNewTaskToReadyList+0x164>)
 8002d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d60:	20000114 	.word	0x20000114
 8002d64:	2000003c 	.word	0x2000003c
 8002d68:	20000120 	.word	0x20000120
 8002d6c:	20000130 	.word	0x20000130
 8002d70:	2000011c 	.word	0x2000011c
 8002d74:	20000040 	.word	0x20000040
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01b      	beq.n	8002dc6 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <vTaskDelay+0x68>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <vTaskDelay+0x30>
        __asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	60bb      	str	r3, [r7, #8]
    }
 8002da8:	bf00      	nop
 8002daa:	e7fe      	b.n	8002daa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002dac:	f000 f9f2 	bl	8003194 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	2023      	movs	r0, #35	; 0x23
 8002db4:	f003 fcec 	bl	8006790 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002db8:	2100      	movs	r1, #0
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f001 f8f6 	bl	8003fac <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002dc0:	f000 f9f6 	bl	80031b0 <xTaskResumeAll>
 8002dc4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <vTaskDelay+0x6c>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2000013c 	.word	0x2000013c
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002df4:	f001 fd18 	bl	8004828 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <vTaskSuspend+0x18>
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <vTaskSuspend+0x13c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	e000      	b.n	8002e06 <vTaskSuspend+0x1a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fae4 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4619      	mov	r1, r3
 8002e14:	2029      	movs	r0, #41	; 0x29
 8002e16:	f003 fcbb 	bl	8006790 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fab8 	bl	8002394 <uxListRemove>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d115      	bne.n	8002e56 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2e:	493f      	ldr	r1, [pc, #252]	; (8002f2c <vTaskSuspend+0x140>)
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <vTaskSuspend+0x6a>
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	2201      	movs	r2, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <vTaskSuspend+0x144>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4013      	ands	r3, r2
 8002e52:	4a37      	ldr	r2, [pc, #220]	; (8002f30 <vTaskSuspend+0x144>)
 8002e54:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	3318      	adds	r3, #24
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fa96 	bl	8002394 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	211b      	movs	r1, #27
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f004 fa53 	bl	8007318 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	3304      	adds	r3, #4
 8002e76:	4619      	mov	r1, r3
 8002e78:	482e      	ldr	r0, [pc, #184]	; (8002f34 <vTaskSuspend+0x148>)
 8002e7a:	f7ff fa2e 	bl	80022da <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e010      	b.n	8002ea6 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	4413      	add	r3, r2
 8002e8a:	3354      	adds	r3, #84	; 0x54
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	4413      	add	r3, r2
 8002e9a:	3354      	adds	r3, #84	; 0x54
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	ddeb      	ble.n	8002e84 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8002eac:	f001 fcec 	bl	8004888 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <vTaskSuspend+0x14c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002eb8:	f001 fcb6 	bl	8004828 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002ebc:	f000 fe80 	bl	8003bc0 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002ec0:	f001 fce2 	bl	8004888 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <vTaskSuspend+0x13c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d127      	bne.n	8002f1e <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <vTaskSuspend+0x14c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d017      	beq.n	8002f06 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8002ed6:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <vTaskSuspend+0x150>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <vTaskSuspend+0x108>
        __asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	60fb      	str	r3, [r7, #12]
    }
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <vTaskSuspend+0x154>)
 8002ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002f04:	e00b      	b.n	8002f1e <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <vTaskSuspend+0x148>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <vTaskSuspend+0x158>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d103      	bne.n	8002f1a <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <vTaskSuspend+0x13c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
    }
 8002f18:	e001      	b.n	8002f1e <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8002f1a:	f000 fb85 	bl	8003628 <vTaskSwitchContext>
    }
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2000003c 	.word	0x2000003c
 8002f2c:	20000040 	.word	0x20000040
 8002f30:	2000011c 	.word	0x2000011c
 8002f34:	20000100 	.word	0x20000100
 8002f38:	20000120 	.word	0x20000120
 8002f3c:	2000013c 	.word	0x2000013c
 8002f40:	e000ed04 	.word	0xe000ed04
 8002f44:	20000114 	.word	0x20000114

08002f48 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	60fb      	str	r3, [r7, #12]
    }
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <prvTaskIsTaskSuspended+0x5c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10a      	bne.n	8002f94 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <prvTaskIsTaskSuspended+0x60>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d005      	beq.n	8002f94 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8002f90:	2301      	movs	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002f94:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002f96:	4618      	mov	r0, r3
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000100 	.word	0x20000100
 8002fa8:	200000d4 	.word	0x200000d4

08002fac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <vTaskResume+0x28>
        __asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	60fb      	str	r3, [r7, #12]
    }
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002fd4:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <vTaskResume+0x114>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d06c      	beq.n	80030b8 <vTaskResume+0x10c>
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d069      	beq.n	80030b8 <vTaskResume+0x10c>
        {
            taskENTER_CRITICAL();
 8002fe4:	f001 fc20 	bl	8004828 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002fe8:	6978      	ldr	r0, [r7, #20]
 8002fea:	f7ff ffad 	bl	8002f48 <prvTaskIsTaskSuspended>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05f      	beq.n	80030b4 <vTaskResume+0x108>
                {
                    traceTASK_RESUME( pxTCB );
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 f9ee 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4619      	mov	r1, r3
 8003000:	202a      	movs	r0, #42	; 0x2a
 8003002:	f003 fbc5 	bl	8006790 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3304      	adds	r3, #4
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f9c2 	bl	8002394 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	4618      	mov	r0, r3
 8003014:	f004 f93e 	bl	8007294 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	2201      	movs	r2, #1
 800301e:	409a      	lsls	r2, r3
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <vTaskResume+0x118>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	4a27      	ldr	r2, [pc, #156]	; (80030c4 <vTaskResume+0x118>)
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302e:	4926      	ldr	r1, [pc, #152]	; (80030c8 <vTaskResume+0x11c>)
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3304      	adds	r3, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	3204      	adds	r2, #4
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1d1a      	adds	r2, r3, #4
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <vTaskResume+0x11c>)
 800306e:	441a      	add	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	615a      	str	r2, [r3, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	4913      	ldr	r1, [pc, #76]	; (80030c8 <vTaskResume+0x11c>)
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	1c59      	adds	r1, r3, #1
 8003088:	480f      	ldr	r0, [pc, #60]	; (80030c8 <vTaskResume+0x11c>)
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4403      	add	r3, r0
 8003094:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <vTaskResume+0x114>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d307      	bcc.n	80030b4 <vTaskResume+0x108>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <vTaskResume+0x120>)
 80030a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80030b4:	f001 fbe8 	bl	8004888 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2000003c 	.word	0x2000003c
 80030c4:	2000011c 	.word	0x2000011c
 80030c8:	20000040 	.word	0x20000040
 80030cc:	e000ed04 	.word	0xe000ed04

080030d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <vTaskStartScheduler+0xa4>)
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	2300      	movs	r3, #0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2300      	movs	r3, #0
 80030e0:	2282      	movs	r2, #130	; 0x82
 80030e2:	4925      	ldr	r1, [pc, #148]	; (8003178 <vTaskStartScheduler+0xa8>)
 80030e4:	4825      	ldr	r0, [pc, #148]	; (800317c <vTaskStartScheduler+0xac>)
 80030e6:	f7ff fcaf 	bl	8002a48 <xTaskCreate>
 80030ea:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d102      	bne.n	80030f8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80030f2:	f000 ffe7 	bl	80040c4 <xTimerCreateTimerTask>
 80030f6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d124      	bne.n	8003148 <vTaskStartScheduler+0x78>
        __asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	60bb      	str	r3, [r7, #8]
    }
 8003110:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003112:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <vTaskStartScheduler+0xb0>)
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <vTaskStartScheduler+0xb4>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <vTaskStartScheduler+0xb8>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <vTaskStartScheduler+0xbc>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <vTaskStartScheduler+0xa4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d102      	bne.n	8003138 <vTaskStartScheduler+0x68>
 8003132:	f004 f80f 	bl	8007154 <SEGGER_SYSVIEW_OnIdle>
 8003136:	e004      	b.n	8003142 <vTaskStartScheduler+0x72>
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <vTaskStartScheduler+0xbc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f004 f867 	bl	8007210 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003142:	f001 facf 	bl	80046e4 <xPortStartScheduler>
 8003146:	e00e      	b.n	8003166 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d10a      	bne.n	8003166 <vTaskStartScheduler+0x96>
        __asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	607b      	str	r3, [r7, #4]
    }
 8003162:	bf00      	nop
 8003164:	e7fe      	b.n	8003164 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <vTaskStartScheduler+0xc0>)
 8003168:	681b      	ldr	r3, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000138 	.word	0x20000138
 8003178:	0800781c 	.word	0x0800781c
 800317c:	08003a95 	.word	0x08003a95
 8003180:	20000134 	.word	0x20000134
 8003184:	20000120 	.word	0x20000120
 8003188:	20000118 	.word	0x20000118
 800318c:	2000003c 	.word	0x2000003c
 8003190:	2000000c 	.word	0x2000000c

08003194 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <vTaskSuspendAll+0x18>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	4a03      	ldr	r2, [pc, #12]	; (80031ac <vTaskSuspendAll+0x18>)
 80031a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	2000013c 	.word	0x2000013c

080031b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80031be:	4b73      	ldr	r3, [pc, #460]	; (800338c <xTaskResumeAll+0x1dc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <xTaskResumeAll+0x2c>
        __asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	607b      	str	r3, [r7, #4]
    }
 80031d8:	bf00      	nop
 80031da:	e7fe      	b.n	80031da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80031dc:	f001 fb24 	bl	8004828 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <xTaskResumeAll+0x1dc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	4a69      	ldr	r2, [pc, #420]	; (800338c <xTaskResumeAll+0x1dc>)
 80031e8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ea:	4b68      	ldr	r3, [pc, #416]	; (800338c <xTaskResumeAll+0x1dc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 80c4 	bne.w	800337c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031f4:	4b66      	ldr	r3, [pc, #408]	; (8003390 <xTaskResumeAll+0x1e0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80bf 	beq.w	800337c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031fe:	e08e      	b.n	800331e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003200:	4b64      	ldr	r3, [pc, #400]	; (8003394 <xTaskResumeAll+0x1e4>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	6a12      	ldr	r2, [r2, #32]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	69d2      	ldr	r2, [r2, #28]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3318      	adds	r3, #24
 800322a:	429a      	cmp	r2, r3
 800322c:	d103      	bne.n	8003236 <xTaskResumeAll+0x86>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	6a1a      	ldr	r2, [r3, #32]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2200      	movs	r2, #0
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	1e5a      	subs	r2, r3, #1
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	68d2      	ldr	r2, [r2, #12]
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	6892      	ldr	r2, [r2, #8]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3304      	adds	r3, #4
 8003268:	429a      	cmp	r2, r3
 800326a:	d103      	bne.n	8003274 <xTaskResumeAll+0xc4>
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2200      	movs	r2, #0
 8003278:	615a      	str	r2, [r3, #20]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	1e5a      	subs	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4618      	mov	r0, r3
 8003288:	f004 f804 	bl	8007294 <SEGGER_SYSVIEW_OnTaskStartReady>
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	2201      	movs	r2, #1
 8003292:	409a      	lsls	r2, r3
 8003294:	4b40      	ldr	r3, [pc, #256]	; (8003398 <xTaskResumeAll+0x1e8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	4a3f      	ldr	r2, [pc, #252]	; (8003398 <xTaskResumeAll+0x1e8>)
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	493e      	ldr	r1, [pc, #248]	; (800339c <xTaskResumeAll+0x1ec>)
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3304      	adds	r3, #4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	3204      	adds	r2, #4
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	1d1a      	adds	r2, r3, #4
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4a2e      	ldr	r2, [pc, #184]	; (800339c <xTaskResumeAll+0x1ec>)
 80032e2:	441a      	add	r2, r3
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	615a      	str	r2, [r3, #20]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	492b      	ldr	r1, [pc, #172]	; (800339c <xTaskResumeAll+0x1ec>)
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	1c59      	adds	r1, r3, #1
 80032fc:	4827      	ldr	r0, [pc, #156]	; (800339c <xTaskResumeAll+0x1ec>)
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4403      	add	r3, r0
 8003308:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <xTaskResumeAll+0x1f0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	429a      	cmp	r2, r3
 8003316:	d302      	bcc.n	800331e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003318:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <xTaskResumeAll+0x1f4>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <xTaskResumeAll+0x1e4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f47f af6c 	bne.w	8003200 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800332e:	f000 fc47 	bl	8003bc0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003332:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <xTaskResumeAll+0x1f8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d010      	beq.n	8003360 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800333e:	f000 f859 	bl	80033f4 <xTaskIncrementTick>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <xTaskResumeAll+0x1f4>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3b01      	subs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f1      	bne.n	800333e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800335a:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <xTaskResumeAll+0x1f8>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <xTaskResumeAll+0x1f4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003368:	2301      	movs	r3, #1
 800336a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <xTaskResumeAll+0x1fc>)
 800336e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800337c:	f001 fa84 	bl	8004888 <vPortExitCritical>

    return xAlreadyYielded;
 8003380:	69bb      	ldr	r3, [r7, #24]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	2000013c 	.word	0x2000013c
 8003390:	20000114 	.word	0x20000114
 8003394:	200000d4 	.word	0x200000d4
 8003398:	2000011c 	.word	0x2000011c
 800339c:	20000040 	.word	0x20000040
 80033a0:	2000003c 	.word	0x2000003c
 80033a4:	20000128 	.word	0x20000128
 80033a8:	20000124 	.word	0x20000124
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <xTaskGetTickCount+0x1c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80033bc:	687b      	ldr	r3, [r7, #4]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000118 	.word	0x20000118

080033d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033d6:	f001 fb11 	bl	80049fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <xTaskGetTickCountFromISR+0x20>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80033e4:	683b      	ldr	r3, [r7, #0]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000118 	.word	0x20000118

080033f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033fe:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <xTaskIncrementTick+0x208>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 80f0 	bne.w	80035e8 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003408:	4b7d      	ldr	r3, [pc, #500]	; (8003600 <xTaskIncrementTick+0x20c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003410:	4a7b      	ldr	r2, [pc, #492]	; (8003600 <xTaskIncrementTick+0x20c>)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d120      	bne.n	800345e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800341c:	4b79      	ldr	r3, [pc, #484]	; (8003604 <xTaskIncrementTick+0x210>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <xTaskIncrementTick+0x48>
        __asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	607b      	str	r3, [r7, #4]
    }
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <xTaskIncrementTick+0x46>
 800343c:	4b71      	ldr	r3, [pc, #452]	; (8003604 <xTaskIncrementTick+0x210>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	4b71      	ldr	r3, [pc, #452]	; (8003608 <xTaskIncrementTick+0x214>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6f      	ldr	r2, [pc, #444]	; (8003604 <xTaskIncrementTick+0x210>)
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4a6f      	ldr	r2, [pc, #444]	; (8003608 <xTaskIncrementTick+0x214>)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b6e      	ldr	r3, [pc, #440]	; (800360c <xTaskIncrementTick+0x218>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	4a6d      	ldr	r2, [pc, #436]	; (800360c <xTaskIncrementTick+0x218>)
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	f000 fbb1 	bl	8003bc0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800345e:	4b6c      	ldr	r3, [pc, #432]	; (8003610 <xTaskIncrementTick+0x21c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a3a      	ldr	r2, [r7, #32]
 8003464:	429a      	cmp	r2, r3
 8003466:	f0c0 80aa 	bcc.w	80035be <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800346a:	4b66      	ldr	r3, [pc, #408]	; (8003604 <xTaskIncrementTick+0x210>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003474:	4b66      	ldr	r3, [pc, #408]	; (8003610 <xTaskIncrementTick+0x21c>)
 8003476:	f04f 32ff 	mov.w	r2, #4294967295
 800347a:	601a      	str	r2, [r3, #0]
                    break;
 800347c:	e09f      	b.n	80035be <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800347e:	4b61      	ldr	r3, [pc, #388]	; (8003604 <xTaskIncrementTick+0x210>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800348e:	6a3a      	ldr	r2, [r7, #32]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	429a      	cmp	r2, r3
 8003494:	d203      	bcs.n	800349e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003496:	4a5e      	ldr	r2, [pc, #376]	; (8003610 <xTaskIncrementTick+0x21c>)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800349c:	e08f      	b.n	80035be <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	68d2      	ldr	r2, [r2, #12]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	3304      	adds	r3, #4
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d103      	bne.n	80034cc <xTaskIncrementTick+0xd8>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2200      	movs	r2, #0
 80034d0:	615a      	str	r2, [r3, #20]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01e      	beq.n	8003522 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	6a12      	ldr	r2, [r2, #32]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	69d2      	ldr	r2, [r2, #28]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	3318      	adds	r3, #24
 8003506:	429a      	cmp	r2, r3
 8003508:	d103      	bne.n	8003512 <xTaskIncrementTick+0x11e>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2200      	movs	r2, #0
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	1e5a      	subs	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4618      	mov	r0, r3
 8003526:	f003 feb5 	bl	8007294 <SEGGER_SYSVIEW_OnTaskStartReady>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	2201      	movs	r2, #1
 8003530:	409a      	lsls	r2, r3
 8003532:	4b38      	ldr	r3, [pc, #224]	; (8003614 <xTaskIncrementTick+0x220>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	4a36      	ldr	r2, [pc, #216]	; (8003614 <xTaskIncrementTick+0x220>)
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	4935      	ldr	r1, [pc, #212]	; (8003618 <xTaskIncrementTick+0x224>)
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3304      	adds	r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	3204      	adds	r2, #4
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	1d1a      	adds	r2, r3, #4
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4a26      	ldr	r2, [pc, #152]	; (8003618 <xTaskIncrementTick+0x224>)
 8003580:	441a      	add	r2, r3
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	615a      	str	r2, [r3, #20]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358a:	4923      	ldr	r1, [pc, #140]	; (8003618 <xTaskIncrementTick+0x224>)
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1c59      	adds	r1, r3, #1
 800359a:	481f      	ldr	r0, [pc, #124]	; (8003618 <xTaskIncrementTick+0x224>)
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4403      	add	r3, r0
 80035a6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <xTaskIncrementTick+0x228>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	429a      	cmp	r2, r3
 80035b4:	f4ff af59 	bcc.w	800346a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035bc:	e755      	b.n	800346a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <xTaskIncrementTick+0x228>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c4:	4914      	ldr	r1, [pc, #80]	; (8003618 <xTaskIncrementTick+0x224>)
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d901      	bls.n	80035da <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 80035d6:	2301      	movs	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <xTaskIncrementTick+0x22c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 80035e2:	2301      	movs	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	e004      	b.n	80035f2 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <xTaskIncrementTick+0x230>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <xTaskIncrementTick+0x230>)
 80035f0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3728      	adds	r7, #40	; 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	2000013c 	.word	0x2000013c
 8003600:	20000118 	.word	0x20000118
 8003604:	200000cc 	.word	0x200000cc
 8003608:	200000d0 	.word	0x200000d0
 800360c:	2000012c 	.word	0x2000012c
 8003610:	20000134 	.word	0x20000134
 8003614:	2000011c 	.word	0x2000011c
 8003618:	20000040 	.word	0x20000040
 800361c:	2000003c 	.word	0x2000003c
 8003620:	20000128 	.word	0x20000128
 8003624:	20000124 	.word	0x20000124

08003628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <vTaskSwitchContext+0xbc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <vTaskSwitchContext+0xc0>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800363c:	e04d      	b.n	80036da <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800363e:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <vTaskSwitchContext+0xc0>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <vTaskSwitchContext+0xc4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003652:	7afb      	ldrb	r3, [r7, #11]
 8003654:	f1c3 031f 	rsb	r3, r3, #31
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	4925      	ldr	r1, [pc, #148]	; (80036f0 <vTaskSwitchContext+0xc8>)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <vTaskSwitchContext+0x5c>
        __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	607b      	str	r3, [r7, #4]
    }
 8003680:	bf00      	nop
 8003682:	e7fe      	b.n	8003682 <vTaskSwitchContext+0x5a>
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <vTaskSwitchContext+0xc8>)
 8003690:	4413      	add	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3308      	adds	r3, #8
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d104      	bne.n	80036b4 <vTaskSwitchContext+0x8c>
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	4a0e      	ldr	r2, [pc, #56]	; (80036f4 <vTaskSwitchContext+0xcc>)
 80036bc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80036be:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <vTaskSwitchContext+0xcc>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <vTaskSwitchContext+0xd0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d102      	bne.n	80036d0 <vTaskSwitchContext+0xa8>
 80036ca:	f003 fd43 	bl	8007154 <SEGGER_SYSVIEW_OnIdle>
}
 80036ce:	e004      	b.n	80036da <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <vTaskSwitchContext+0xcc>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 fd9b 	bl	8007210 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80036da:	bf00      	nop
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	2000013c 	.word	0x2000013c
 80036e8:	20000128 	.word	0x20000128
 80036ec:	2000011c 	.word	0x2000011c
 80036f0:	20000040 	.word	0x20000040
 80036f4:	2000003c 	.word	0x2000003c
 80036f8:	20000138 	.word	0x20000138

080036fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	60fb      	str	r3, [r7, #12]
    }
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <vTaskPlaceOnEventList+0x44>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3318      	adds	r3, #24
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe fdf9 	bl	8002322 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003730:	2101      	movs	r1, #1
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	f000 fc3a 	bl	8003fac <prvAddCurrentTaskToDelayedList>
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	2000003c 	.word	0x2000003c

08003744 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	613b      	str	r3, [r7, #16]
    }
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	61da      	str	r2, [r3, #28]
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	6892      	ldr	r2, [r2, #8]
 8003782:	621a      	str	r2, [r3, #32]
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	3218      	adds	r2, #24
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f103 0218 	add.w	r2, r3, #24
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037ba:	2024      	movs	r0, #36	; 0x24
 80037bc:	f002 ffca 	bl	8006754 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68b8      	ldr	r0, [r7, #8]
 80037c4:	f000 fbf2 	bl	8003fac <prvAddCurrentTaskToDelayedList>
    }
 80037c8:	bf00      	nop
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	2000003c 	.word	0x2000003c

080037d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	60fb      	str	r3, [r7, #12]
    }
 80037fc:	bf00      	nop
 80037fe:	e7fe      	b.n	80037fe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	6a3a      	ldr	r2, [r7, #32]
 800380c:	6a12      	ldr	r2, [r2, #32]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	69d2      	ldr	r2, [r2, #28]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	3318      	adds	r3, #24
 8003822:	429a      	cmp	r2, r3
 8003824:	d103      	bne.n	800382e <xTaskRemoveFromEventList+0x5a>
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	6a1a      	ldr	r2, [r3, #32]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	2200      	movs	r2, #0
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	1e5a      	subs	r2, r3, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383e:	4b4b      	ldr	r3, [pc, #300]	; (800396c <xTaskRemoveFromEventList+0x198>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d162      	bne.n	800390c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	6a3a      	ldr	r2, [r7, #32]
 8003852:	68d2      	ldr	r2, [r2, #12]
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	6892      	ldr	r2, [r2, #8]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	3304      	adds	r3, #4
 8003868:	429a      	cmp	r2, r3
 800386a:	d103      	bne.n	8003874 <xTaskRemoveFromEventList+0xa0>
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	2200      	movs	r2, #0
 8003878:	615a      	str	r2, [r3, #20]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	1e5a      	subs	r2, r3, #1
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fd04 	bl	8007294 <SEGGER_SYSVIEW_OnTaskStartReady>
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	2201      	movs	r2, #1
 8003892:	409a      	lsls	r2, r3
 8003894:	4b36      	ldr	r3, [pc, #216]	; (8003970 <xTaskRemoveFromEventList+0x19c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4313      	orrs	r3, r2
 800389a:	4a35      	ldr	r2, [pc, #212]	; (8003970 <xTaskRemoveFromEventList+0x19c>)
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	4934      	ldr	r1, [pc, #208]	; (8003974 <xTaskRemoveFromEventList+0x1a0>)
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3304      	adds	r3, #4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	6a3a      	ldr	r2, [r7, #32]
 80038c8:	3204      	adds	r2, #4
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4a24      	ldr	r2, [pc, #144]	; (8003974 <xTaskRemoveFromEventList+0x1a0>)
 80038e2:	441a      	add	r2, r3
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	615a      	str	r2, [r3, #20]
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	4921      	ldr	r1, [pc, #132]	; (8003974 <xTaskRemoveFromEventList+0x1a0>)
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	1c59      	adds	r1, r3, #1
 80038fc:	481d      	ldr	r0, [pc, #116]	; (8003974 <xTaskRemoveFromEventList+0x1a0>)
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4403      	add	r3, r0
 8003908:	6019      	str	r1, [r3, #0]
 800390a:	e01b      	b.n	8003944 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800390c:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <xTaskRemoveFromEventList+0x1a4>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	61da      	str	r2, [r3, #28]
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	621a      	str	r2, [r3, #32]
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	6a3a      	ldr	r2, [r7, #32]
 8003926:	3218      	adds	r2, #24
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f103 0218 	add.w	r2, r3, #24
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <xTaskRemoveFromEventList+0x1a4>)
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <xTaskRemoveFromEventList+0x1a4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3301      	adds	r3, #1
 8003940:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <xTaskRemoveFromEventList+0x1a4>)
 8003942:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <xTaskRemoveFromEventList+0x1a8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	429a      	cmp	r2, r3
 8003950:	d905      	bls.n	800395e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003952:	2301      	movs	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <xTaskRemoveFromEventList+0x1ac>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e001      	b.n	8003962 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003964:	4618      	mov	r0, r3
 8003966:	3728      	adds	r7, #40	; 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	2000013c 	.word	0x2000013c
 8003970:	2000011c 	.word	0x2000011c
 8003974:	20000040 	.word	0x20000040
 8003978:	200000d4 	.word	0x200000d4
 800397c:	2000003c 	.word	0x2000003c
 8003980:	20000128 	.word	0x20000128

08003984 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <vTaskInternalSetTimeOutState+0x24>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <vTaskInternalSetTimeOutState+0x28>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	605a      	str	r2, [r3, #4]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	2000012c 	.word	0x2000012c
 80039ac:	20000118 	.word	0x20000118

080039b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	613b      	str	r3, [r7, #16]
    }
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	60fb      	str	r3, [r7, #12]
    }
 80039ee:	bf00      	nop
 80039f0:	e7fe      	b.n	80039f0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80039f2:	f000 ff19 	bl	8004828 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80039f6:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <xTaskCheckForTimeOut+0xc4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d102      	bne.n	8003a16 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e026      	b.n	8003a64 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <xTaskCheckForTimeOut+0xc8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d00a      	beq.n	8003a38 <xTaskCheckForTimeOut+0x88>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d305      	bcc.n	8003a38 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e015      	b.n	8003a64 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d20b      	bcs.n	8003a5a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	1ad2      	subs	r2, r2, r3
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff ff98 	bl	8003984 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	e004      	b.n	8003a64 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a64:	f000 ff10 	bl	8004888 <vPortExitCritical>

    return xReturn;
 8003a68:	69fb      	ldr	r3, [r7, #28]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000118 	.word	0x20000118
 8003a78:	2000012c 	.word	0x2000012c

08003a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <vTaskMissedYield+0x14>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20000128 	.word	0x20000128

08003a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a9c:	f000 f852 	bl	8003b44 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <prvIdleTask+0x28>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d9f9      	bls.n	8003a9c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <prvIdleTask+0x2c>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ab8:	e7f0      	b.n	8003a9c <prvIdleTask+0x8>
 8003aba:	bf00      	nop
 8003abc:	20000040 	.word	0x20000040
 8003ac0:	e000ed04 	.word	0xe000ed04

08003ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	e00c      	b.n	8003aea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <prvInitialiseTaskLists+0x60>)
 8003adc:	4413      	add	r3, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fbce 	bl	8002280 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d9ef      	bls.n	8003ad0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003af0:	480d      	ldr	r0, [pc, #52]	; (8003b28 <prvInitialiseTaskLists+0x64>)
 8003af2:	f7fe fbc5 	bl	8002280 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003af6:	480d      	ldr	r0, [pc, #52]	; (8003b2c <prvInitialiseTaskLists+0x68>)
 8003af8:	f7fe fbc2 	bl	8002280 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003afc:	480c      	ldr	r0, [pc, #48]	; (8003b30 <prvInitialiseTaskLists+0x6c>)
 8003afe:	f7fe fbbf 	bl	8002280 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003b02:	480c      	ldr	r0, [pc, #48]	; (8003b34 <prvInitialiseTaskLists+0x70>)
 8003b04:	f7fe fbbc 	bl	8002280 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003b08:	480b      	ldr	r0, [pc, #44]	; (8003b38 <prvInitialiseTaskLists+0x74>)
 8003b0a:	f7fe fbb9 	bl	8002280 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <prvInitialiseTaskLists+0x78>)
 8003b10:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <prvInitialiseTaskLists+0x64>)
 8003b12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <prvInitialiseTaskLists+0x7c>)
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <prvInitialiseTaskLists+0x68>)
 8003b18:	601a      	str	r2, [r3, #0]
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000040 	.word	0x20000040
 8003b28:	200000a4 	.word	0x200000a4
 8003b2c:	200000b8 	.word	0x200000b8
 8003b30:	200000d4 	.word	0x200000d4
 8003b34:	200000e8 	.word	0x200000e8
 8003b38:	20000100 	.word	0x20000100
 8003b3c:	200000cc 	.word	0x200000cc
 8003b40:	200000d0 	.word	0x200000d0

08003b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b4a:	e019      	b.n	8003b80 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003b4c:	f000 fe6c 	bl	8004828 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <prvCheckTasksWaitingTermination+0x50>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fc19 	bl	8002394 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <prvCheckTasksWaitingTermination+0x54>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <prvCheckTasksWaitingTermination+0x54>)
 8003b6a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b74:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003b76:	f000 fe87 	bl	8004888 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f810 	bl	8003ba0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e1      	bne.n	8003b4c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200000e8 	.word	0x200000e8
 8003b98:	20000114 	.word	0x20000114
 8003b9c:	200000fc 	.word	0x200000fc

08003ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 f845 	bl	8004c3c <vPortFree>
                vPortFree( pxTCB );
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f001 f842 	bl	8004c3c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <prvResetNextTaskUnblockTime+0x30>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <prvResetNextTaskUnblockTime+0x34>)
 8003bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003bd6:	e005      	b.n	8003be4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <prvResetNextTaskUnblockTime+0x30>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <prvResetNextTaskUnblockTime+0x34>)
 8003be2:	6013      	str	r3, [r2, #0]
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	200000cc 	.word	0x200000cc
 8003bf4:	20000134 	.word	0x20000134

08003bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <xTaskGetSchedulerState+0x34>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003c06:	2301      	movs	r3, #1
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	e008      	b.n	8003c1e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <xTaskGetSchedulerState+0x38>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003c14:	2302      	movs	r3, #2
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	e001      	b.n	8003c1e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003c1e:	687b      	ldr	r3, [r7, #4]
    }
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	20000120 	.word	0x20000120
 8003c30:	2000013c 	.word	0x2000013c

08003c34 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	613b      	str	r3, [r7, #16]
    }
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003c5e:	f000 fde3 	bl	8004828 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003c62:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <xTaskGenericNotifyWait+0x108>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	3354      	adds	r3, #84	; 0x54
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d022      	beq.n	8003cba <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003c74:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <xTaskGenericNotifyWait+0x108>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	3214      	adds	r2, #20
 8003c7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	43d2      	mvns	r2, r2
 8003c84:	4011      	ands	r1, r2
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	3214      	adds	r2, #20
 8003c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003c8e:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <xTaskGenericNotifyWait+0x108>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4413      	add	r3, r2
 8003c96:	3354      	adds	r3, #84	; 0x54
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	6a38      	ldr	r0, [r7, #32]
 8003ca6:	f000 f981 	bl	8003fac <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003caa:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <xTaskGenericNotifyWait+0x10c>)
 8003cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cba:	f000 fde5 	bl	8004888 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003cbe:	f000 fdb3 	bl	8004828 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	2040      	movs	r0, #64	; 0x40
 8003cd0:	f002 fe6a 	bl	80069a8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <xTaskGenericNotifyWait+0x108>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	3214      	adds	r2, #20
 8003ce2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <xTaskGenericNotifyWait+0x108>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3354      	adds	r3, #84	; 0x54
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d002      	beq.n	8003d02 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e00e      	b.n	8003d20 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <xTaskGenericNotifyWait+0x108>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	3214      	adds	r2, #20
 8003d0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	43d2      	mvns	r2, r2
 8003d12:	4011      	ands	r1, r2
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	3214      	adds	r2, #20
 8003d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <xTaskGenericNotifyWait+0x108>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4413      	add	r3, r2
 8003d28:	3354      	adds	r3, #84	; 0x54
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003d2e:	f000 fdab 	bl	8004888 <vPortExitCritical>

        return xReturn;
 8003d32:	697b      	ldr	r3, [r7, #20]
    }
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	2000003c 	.word	0x2000003c
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b090      	sub	sp, #64	; 0x40
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003d52:	2301      	movs	r3, #1
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	623b      	str	r3, [r7, #32]
    }
 8003d6e:	bf00      	nop
 8003d70:	e7fe      	b.n	8003d70 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <xTaskGenericNotify+0x4a>
        __asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	61fb      	str	r3, [r7, #28]
    }
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003d92:	f000 fd49 	bl	8004828 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	3214      	adds	r2, #20
 8003da2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4413      	add	r3, r2
 8003db0:	3354      	adds	r3, #84	; 0x54
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3354      	adds	r3, #84	; 0x54
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d83b      	bhi.n	8003e42 <xTaskGenericNotify+0xfe>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <xTaskGenericNotify+0x8c>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003e61 	.word	0x08003e61
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003e19 	.word	0x08003e19
 8003de0:	08003e27 	.word	0x08003e27
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	3214      	adds	r2, #20
 8003dea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	ea42 0103 	orr.w	r1, r2, r3
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	3214      	adds	r2, #20
 8003dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003dfe:	e032      	b.n	8003e66 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	3214      	adds	r2, #20
 8003e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0a:	1c59      	adds	r1, r3, #1
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	3214      	adds	r2, #20
 8003e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e16:	e026      	b.n	8003e66 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	3214      	adds	r2, #20
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e24:	e01f      	b.n	8003e66 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d006      	beq.n	8003e3c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	3214      	adds	r2, #20
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003e3a:	e014      	b.n	8003e66 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003e40:	e011      	b.n	8003e66 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003e42:	4b55      	ldr	r3, [pc, #340]	; (8003f98 <xTaskGenericNotify+0x254>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00c      	beq.n	8003e64 <xTaskGenericNotify+0x120>
        __asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	61bb      	str	r3, [r7, #24]
    }
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xTaskGenericNotify+0x11a>
                    break;
 8003e60:	bf00      	nop
 8003e62:	e000      	b.n	8003e66 <xTaskGenericNotify+0x122>

                    break;
 8003e64:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f003 fab5 	bl	80073d8 <SEGGER_SYSVIEW_ShrinkId>
 8003e6e:	4601      	mov	r1, r0
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	203e      	movs	r0, #62	; 0x3e
 8003e7c:	f002 fd94 	bl	80069a8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d17f      	bne.n	8003f88 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e94:	68d2      	ldr	r2, [r2, #12]
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9e:	6892      	ldr	r2, [r2, #8]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d103      	bne.n	8003eb6 <xTaskGenericNotify+0x172>
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	2200      	movs	r2, #0
 8003eba:	615a      	str	r2, [r3, #20]
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f003 f9e3 	bl	8007294 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <xTaskGenericNotify+0x258>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <xTaskGenericNotify+0x258>)
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	492e      	ldr	r1, [pc, #184]	; (8003fa0 <xTaskGenericNotify+0x25c>)
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	60da      	str	r2, [r3, #12]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0a:	3204      	adds	r2, #4
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4a1f      	ldr	r2, [pc, #124]	; (8003fa0 <xTaskGenericNotify+0x25c>)
 8003f24:	441a      	add	r2, r3
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	615a      	str	r2, [r3, #20]
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	491c      	ldr	r1, [pc, #112]	; (8003fa0 <xTaskGenericNotify+0x25c>)
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	1c59      	adds	r1, r3, #1
 8003f3e:	4818      	ldr	r0, [pc, #96]	; (8003fa0 <xTaskGenericNotify+0x25c>)
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4403      	add	r3, r0
 8003f4a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <xTaskGenericNotify+0x226>
        __asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	617b      	str	r3, [r7, #20]
    }
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xTaskGenericNotify+0x224>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <xTaskGenericNotify+0x260>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d907      	bls.n	8003f88 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <xTaskGenericNotify+0x264>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f88:	f000 fc7e 	bl	8004888 <vPortExitCritical>

        return xReturn;
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3738      	adds	r7, #56	; 0x38
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000118 	.word	0x20000118
 8003f9c:	2000011c 	.word	0x2000011c
 8003fa0:	20000040 	.word	0x20000040
 8003fa4:	2000003c 	.word	0x2000003c
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003fb6:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe f9e6 	bl	8002394 <uxListRemove>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <prvAddCurrentTaskToDelayedList+0x104>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	4a33      	ldr	r2, [pc, #204]	; (80040b0 <prvAddCurrentTaskToDelayedList+0x104>)
 8003fe4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d124      	bne.n	8004038 <prvAddCurrentTaskToDelayedList+0x8c>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d021      	beq.n	8004038 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ff4:	4b2f      	ldr	r3, [pc, #188]	; (80040b4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	6892      	ldr	r2, [r2, #8]
 800400a:	60da      	str	r2, [r3, #12]
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	3204      	adds	r2, #4
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1d1a      	adds	r2, r3, #4
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	4b22      	ldr	r3, [pc, #136]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <prvAddCurrentTaskToDelayedList+0x108>)
 8004028:	615a      	str	r2, [r3, #20]
 800402a:	4b22      	ldr	r3, [pc, #136]	; (80040b4 <prvAddCurrentTaskToDelayedList+0x108>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3301      	adds	r3, #1
 8004030:	4a20      	ldr	r2, [pc, #128]	; (80040b4 <prvAddCurrentTaskToDelayedList+0x108>)
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004036:	e032      	b.n	800409e <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	429a      	cmp	r2, r3
 800404e:	d20f      	bcs.n	8004070 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004050:	4b16      	ldr	r3, [pc, #88]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2104      	movs	r1, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f003 f95e 	bl	8007318 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7fe f95a 	bl	8002322 <vListInsert>
}
 800406e:	e016      	b.n	800409e <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2104      	movs	r1, #4
 8004076:	4618      	mov	r0, r3
 8004078:	f003 f94e 	bl	8007318 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <prvAddCurrentTaskToDelayedList+0x110>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <prvAddCurrentTaskToDelayedList+0x100>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f7fe f94a 	bl	8002322 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	429a      	cmp	r2, r3
 8004096:	d202      	bcs.n	800409e <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8004098:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x114>)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6013      	str	r3, [r2, #0]
}
 800409e:	bf00      	nop
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000118 	.word	0x20000118
 80040ac:	2000003c 	.word	0x2000003c
 80040b0:	2000011c 	.word	0x2000011c
 80040b4:	20000100 	.word	0x20000100
 80040b8:	200000d0 	.word	0x200000d0
 80040bc:	200000cc 	.word	0x200000cc
 80040c0:	20000134 	.word	0x20000134

080040c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80040ce:	f000 fa47 	bl	8004560 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80040d2:	4b11      	ldr	r3, [pc, #68]	; (8004118 <xTimerCreateTimerTask+0x54>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <xTimerCreateTimerTask+0x58>)
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	2302      	movs	r3, #2
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	2300      	movs	r3, #0
 80040e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040e8:	490d      	ldr	r1, [pc, #52]	; (8004120 <xTimerCreateTimerTask+0x5c>)
 80040ea:	480e      	ldr	r0, [pc, #56]	; (8004124 <xTimerCreateTimerTask+0x60>)
 80040ec:	f7fe fcac 	bl	8002a48 <xTaskCreate>
 80040f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	603b      	str	r3, [r7, #0]
    }
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800410e:	687b      	ldr	r3, [r7, #4]
    }
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000170 	.word	0x20000170
 800411c:	20000174 	.word	0x20000174
 8004120:	08007824 	.word	0x08007824
 8004124:	080041cd 	.word	0x080041cd

08004128 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004134:	e008      	b.n	8004148 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	18d1      	adds	r1, r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f8dd 	bl	8004314 <prvInsertTimerInActiveList>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ea      	bne.n	8004136 <prvReloadTimer+0xe>
        }
    }
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <prvProcessExpiredTimer+0x5c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3304      	adds	r3, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe f905 	bl	8002394 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff ffc3 	bl	8004128 <prvReloadTimer>
 80041a2:	e008      	b.n	80041b6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	4798      	blx	r3
    }
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000168 	.word	0x20000168

080041cc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041d4:	f107 0308 	add.w	r3, r7, #8
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f857 	bl	800428c <prvGetNextExpireTime>
 80041de:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4619      	mov	r1, r3
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f803 	bl	80041f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80041ea:	f000 f8d5 	bl	8004398 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ee:	e7f1      	b.n	80041d4 <prvTimerTask+0x8>

080041f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80041fa:	f7fe ffcb 	bl	8003194 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041fe:	f107 0308 	add.w	r3, r7, #8
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f866 	bl	80042d4 <prvSampleTimeNow>
 8004208:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d130      	bne.n	8004272 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <prvProcessTimerOrBlockTask+0x3c>
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	429a      	cmp	r2, r3
 800421c:	d806      	bhi.n	800422c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800421e:	f7fe ffc7 	bl	80031b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004222:	68f9      	ldr	r1, [r7, #12]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ffa1 	bl	800416c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800422a:	e024      	b.n	8004276 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <prvProcessTimerOrBlockTask+0x90>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <prvProcessTimerOrBlockTask+0x50>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <prvProcessTimerOrBlockTask+0x52>
 8004240:	2300      	movs	r3, #0
 8004242:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <prvProcessTimerOrBlockTask+0x94>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	4619      	mov	r1, r3
 8004252:	f7fe fbc5 	bl	80029e0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004256:	f7fe ffab 	bl	80031b0 <xTaskResumeAll>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <prvProcessTimerOrBlockTask+0x98>)
 8004262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	f3bf 8f6f 	isb	sy
    }
 8004270:	e001      	b.n	8004276 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004272:	f7fe ff9d 	bl	80031b0 <xTaskResumeAll>
    }
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	2000016c 	.word	0x2000016c
 8004284:	20000170 	.word	0x20000170
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004294:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <prvGetNextExpireTime+0x44>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <prvGetNextExpireTime+0x16>
 800429e:	2201      	movs	r2, #1
 80042a0:	e000      	b.n	80042a4 <prvGetNextExpireTime+0x18>
 80042a2:	2200      	movs	r2, #0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <prvGetNextExpireTime+0x44>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e001      	b.n	80042c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80042c0:	68fb      	ldr	r3, [r7, #12]
    }
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000168 	.word	0x20000168

080042d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80042dc:	f7ff f868 	bl	80033b0 <xTaskGetTickCount>
 80042e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <prvSampleTimeNow+0x3c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d205      	bcs.n	80042f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80042ec:	f000 f912 	bl	8004514 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	e002      	b.n	80042fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80042fe:	4a04      	ldr	r2, [pc, #16]	; (8004310 <prvSampleTimeNow+0x3c>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004304:	68fb      	ldr	r3, [r7, #12]
    }
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000178 	.word	0x20000178

08004314 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d812      	bhi.n	8004360 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004348:	2301      	movs	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e01b      	b.n	8004386 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <prvInsertTimerInActiveList+0x7c>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7fd ffe2 	bl	8002322 <vListInsert>
 800435e:	e012      	b.n	8004386 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d206      	bcs.n	8004376 <prvInsertTimerInActiveList+0x62>
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e007      	b.n	8004386 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <prvInsertTimerInActiveList+0x80>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7fd ffce 	bl	8002322 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004386:	697b      	ldr	r3, [r7, #20]
    }
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	2000016c 	.word	0x2000016c
 8004394:	20000168 	.word	0x20000168

08004398 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800439e:	e0a6      	b.n	80044ee <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f2c0 80a2 	blt.w	80044ec <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fd ffeb 	bl	8002394 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff87 	bl	80042d4 <prvSampleTimeNow>
 80043c6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	f200 808e 	bhi.w	80044ee <prvProcessReceivedCommands+0x156>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <prvProcessReceivedCommands+0x40>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	080043fd 	.word	0x080043fd
 80043e0:	08004465 	.word	0x08004465
 80043e4:	08004479 	.word	0x08004479
 80043e8:	080044c3 	.word	0x080044c3
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	080043fd 	.word	0x080043fd
 80043f4:	08004465 	.word	0x08004465
 80043f8:	08004479 	.word	0x08004479
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	69f8      	ldr	r0, [r7, #28]
 800441c:	f7ff ff7a 	bl	8004314 <prvInsertTimerInActiveList>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d063      	beq.n	80044ee <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d009      	beq.n	8004448 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	4413      	add	r3, r2
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4619      	mov	r1, r3
 8004440:	69f8      	ldr	r0, [r7, #28]
 8004442:	f7ff fe71 	bl	8004128 <prvReloadTimer>
 8004446:	e008      	b.n	800445a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	69f8      	ldr	r0, [r7, #28]
 8004460:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004462:	e044      	b.n	80044ee <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	b2da      	uxtb	r2, r3
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004476:	e03a      	b.n	80044ee <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	b2da      	uxtb	r2, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	617b      	str	r3, [r7, #20]
    }
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	18d1      	adds	r1, r2, r3
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	69f8      	ldr	r0, [r7, #28]
 80044bc:	f7ff ff2a 	bl	8004314 <prvInsertTimerInActiveList>
                        break;
 80044c0:	e015      	b.n	80044ee <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80044d0:	69f8      	ldr	r0, [r7, #28]
 80044d2:	f000 fbb3 	bl	8004c3c <vPortFree>
 80044d6:	e00a      	b.n	80044ee <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80044ea:	e000      	b.n	80044ee <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80044ec:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <prvProcessReceivedCommands+0x178>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f107 0108 	add.w	r1, r7, #8
 80044f6:	2200      	movs	r2, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe f87d 	bl	80025f8 <xQueueReceive>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	f47f af4d 	bne.w	80043a0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	3720      	adds	r7, #32
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000170 	.word	0x20000170

08004514 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800451a:	e009      	b.n	8004530 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800451c:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <prvSwitchTimerLists+0x44>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004526:	f04f 31ff 	mov.w	r1, #4294967295
 800452a:	6838      	ldr	r0, [r7, #0]
 800452c:	f7ff fe1e 	bl	800416c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <prvSwitchTimerLists+0x44>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <prvSwitchTimerLists+0x44>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <prvSwitchTimerLists+0x48>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <prvSwitchTimerLists+0x44>)
 8004546:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <prvSwitchTimerLists+0x48>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6013      	str	r3, [r2, #0]
    }
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000168 	.word	0x20000168
 800455c:	2000016c 	.word	0x2000016c

08004560 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004564:	f000 f960 	bl	8004828 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004568:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <prvCheckForValidListAndQueue+0x54>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11d      	bne.n	80045ac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004570:	4811      	ldr	r0, [pc, #68]	; (80045b8 <prvCheckForValidListAndQueue+0x58>)
 8004572:	f7fd fe85 	bl	8002280 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004576:	4811      	ldr	r0, [pc, #68]	; (80045bc <prvCheckForValidListAndQueue+0x5c>)
 8004578:	f7fd fe82 	bl	8002280 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <prvCheckForValidListAndQueue+0x60>)
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <prvCheckForValidListAndQueue+0x58>)
 8004580:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <prvCheckForValidListAndQueue+0x64>)
 8004584:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <prvCheckForValidListAndQueue+0x5c>)
 8004586:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004588:	2200      	movs	r2, #0
 800458a:	210c      	movs	r1, #12
 800458c:	200a      	movs	r0, #10
 800458e:	f7fd ffbb 	bl	8002508 <xQueueGenericCreate>
 8004592:	4603      	mov	r3, r0
 8004594:	4a07      	ldr	r2, [pc, #28]	; (80045b4 <prvCheckForValidListAndQueue+0x54>)
 8004596:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <prvCheckForValidListAndQueue+0x54>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <prvCheckForValidListAndQueue+0x54>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4908      	ldr	r1, [pc, #32]	; (80045c8 <prvCheckForValidListAndQueue+0x68>)
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe f9c4 	bl	8002934 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80045ac:	f000 f96c 	bl	8004888 <vPortExitCritical>
    }
 80045b0:	bf00      	nop
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000170 	.word	0x20000170
 80045b8:	20000140 	.word	0x20000140
 80045bc:	20000154 	.word	0x20000154
 80045c0:	20000168 	.word	0x20000168
 80045c4:	2000016c 	.word	0x2000016c
 80045c8:	0800782c 	.word	0x0800782c

080045cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3b04      	subs	r3, #4
 80045dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3b04      	subs	r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f023 0201 	bic.w	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3b04      	subs	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80045fc:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <pxPortInitialiseStack+0x64>)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3b14      	subs	r3, #20
 8004606:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3b04      	subs	r3, #4
 8004612:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f06f 0202 	mvn.w	r2, #2
 800461a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3b20      	subs	r3, #32
 8004620:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004622:	68fb      	ldr	r3, [r7, #12]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	08004635 	.word	0x08004635

08004634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <prvTaskExitError+0x54>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d00a      	beq.n	800465e <prvTaskExitError+0x2a>
        __asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	60fb      	str	r3, [r7, #12]
    }
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <prvTaskExitError+0x28>
        __asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60bb      	str	r3, [r7, #8]
    }
 8004670:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004672:	bf00      	nop
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0fc      	beq.n	8004674 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800467a:	bf00      	nop
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	20000010 	.word	0x20000010
 800468c:	00000000 	.word	0x00000000

08004690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004690:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <pxCurrentTCBConst2>)
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	6808      	ldr	r0, [r1, #0]
 8004696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469a:	f380 8809 	msr	PSP, r0
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f380 8811 	msr	BASEPRI, r0
 80046aa:	4770      	bx	lr
 80046ac:	f3af 8000 	nop.w

080046b0 <pxCurrentTCBConst2>:
 80046b0:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop

080046b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80046b8:	4808      	ldr	r0, [pc, #32]	; (80046dc <prvPortStartFirstTask+0x24>)
 80046ba:	6800      	ldr	r0, [r0, #0]
 80046bc:	6800      	ldr	r0, [r0, #0]
 80046be:	f380 8808 	msr	MSP, r0
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8814 	msr	CONTROL, r0
 80046ca:	b662      	cpsie	i
 80046cc:	b661      	cpsie	f
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	df00      	svc	0
 80046d8:	bf00      	nop
 80046da:	0000      	.short	0x0000
 80046dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop

080046e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046ea:	4b46      	ldr	r3, [pc, #280]	; (8004804 <xPortStartScheduler+0x120>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a46      	ldr	r2, [pc, #280]	; (8004808 <xPortStartScheduler+0x124>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10a      	bne.n	800470a <xPortStartScheduler+0x26>
        __asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	613b      	str	r3, [r7, #16]
    }
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800470a:	4b3e      	ldr	r3, [pc, #248]	; (8004804 <xPortStartScheduler+0x120>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a3f      	ldr	r2, [pc, #252]	; (800480c <xPortStartScheduler+0x128>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d10a      	bne.n	800472a <xPortStartScheduler+0x46>
        __asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	60fb      	str	r3, [r7, #12]
    }
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800472a:	4b39      	ldr	r3, [pc, #228]	; (8004810 <xPortStartScheduler+0x12c>)
 800472c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800474c:	b2da      	uxtb	r2, r3
 800474e:	4b31      	ldr	r3, [pc, #196]	; (8004814 <xPortStartScheduler+0x130>)
 8004750:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004752:	4b31      	ldr	r3, [pc, #196]	; (8004818 <xPortStartScheduler+0x134>)
 8004754:	2207      	movs	r2, #7
 8004756:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004758:	e009      	b.n	800476e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <xPortStartScheduler+0x134>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3b01      	subs	r3, #1
 8004760:	4a2d      	ldr	r2, [pc, #180]	; (8004818 <xPortStartScheduler+0x134>)
 8004762:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	d0ef      	beq.n	800475a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800477a:	4b27      	ldr	r3, [pc, #156]	; (8004818 <xPortStartScheduler+0x134>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1c3 0307 	rsb	r3, r3, #7
 8004782:	2b04      	cmp	r3, #4
 8004784:	d00a      	beq.n	800479c <xPortStartScheduler+0xb8>
        __asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	60bb      	str	r3, [r7, #8]
    }
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800479c:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <xPortStartScheduler+0x134>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <xPortStartScheduler+0x134>)
 80047a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <xPortStartScheduler+0x134>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047ae:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <xPortStartScheduler+0x134>)
 80047b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80047ba:	4b18      	ldr	r3, [pc, #96]	; (800481c <xPortStartScheduler+0x138>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a17      	ldr	r2, [pc, #92]	; (800481c <xPortStartScheduler+0x138>)
 80047c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <xPortStartScheduler+0x138>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a14      	ldr	r2, [pc, #80]	; (800481c <xPortStartScheduler+0x138>)
 80047cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80047d2:	f000 f8e3 	bl	800499c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80047d6:	4b12      	ldr	r3, [pc, #72]	; (8004820 <xPortStartScheduler+0x13c>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80047dc:	f000 f902 	bl	80049e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <xPortStartScheduler+0x140>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0f      	ldr	r2, [pc, #60]	; (8004824 <xPortStartScheduler+0x140>)
 80047e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80047ec:	f7ff ff64 	bl	80046b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80047f0:	f7fe ff1a 	bl	8003628 <vTaskSwitchContext>
    prvTaskExitError();
 80047f4:	f7ff ff1e 	bl	8004634 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	e000ed00 	.word	0xe000ed00
 8004808:	410fc271 	.word	0x410fc271
 800480c:	410fc270 	.word	0x410fc270
 8004810:	e000e400 	.word	0xe000e400
 8004814:	2000017c 	.word	0x2000017c
 8004818:	20000180 	.word	0x20000180
 800481c:	e000ed20 	.word	0xe000ed20
 8004820:	20000010 	.word	0x20000010
 8004824:	e000ef34 	.word	0xe000ef34

08004828 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
        __asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
    }
 8004840:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004842:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <vPortEnterCritical+0x58>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3301      	adds	r3, #1
 8004848:	4a0d      	ldr	r2, [pc, #52]	; (8004880 <vPortEnterCritical+0x58>)
 800484a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <vPortEnterCritical+0x58>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d10f      	bne.n	8004874 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <vPortEnterCritical+0x5c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <vPortEnterCritical+0x4c>
        __asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	603b      	str	r3, [r7, #0]
    }
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <vPortEnterCritical+0x4a>
    }
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	20000010 	.word	0x20000010
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <vPortExitCritical+0x50>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <vPortExitCritical+0x24>
        __asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	607b      	str	r3, [r7, #4]
    }
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <vPortExitCritical+0x50>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <vPortExitCritical+0x50>)
 80048b4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80048b6:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <vPortExitCritical+0x50>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d105      	bne.n	80048ca <vPortExitCritical+0x42>
 80048be:	2300      	movs	r3, #0
 80048c0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80048c8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000010 	.word	0x20000010
 80048dc:	00000000 	.word	0x00000000

080048e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80048e0:	f3ef 8009 	mrs	r0, PSP
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <pxCurrentTCBConst>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	f01e 0f10 	tst.w	lr, #16
 80048f0:	bf08      	it	eq
 80048f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fa:	6010      	str	r0, [r2, #0]
 80048fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004904:	f380 8811 	msr	BASEPRI, r0
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f7fe fe8a 	bl	8003628 <vTaskSwitchContext>
 8004914:	f04f 0000 	mov.w	r0, #0
 8004918:	f380 8811 	msr	BASEPRI, r0
 800491c:	bc09      	pop	{r0, r3}
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	6808      	ldr	r0, [r1, #0]
 8004922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004926:	f01e 0f10 	tst.w	lr, #16
 800492a:	bf08      	it	eq
 800492c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004930:	f380 8809 	msr	PSP, r0
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	f3af 8000 	nop.w

08004940 <pxCurrentTCBConst>:
 8004940:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop

08004948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
        __asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	607b      	str	r3, [r7, #4]
    }
 8004960:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004962:	f002 fb7d 	bl	8007060 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004966:	f7fe fd45 	bl	80033f4 <xTaskIncrementTick>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d006      	beq.n	800497e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004970:	f002 fbd4 	bl	800711c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <SysTick_Handler+0x50>)
 8004976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e001      	b.n	8004982 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800497e:	f002 fbb1 	bl	80070e4 <SEGGER_SYSVIEW_RecordExitISR>
 8004982:	2300      	movs	r3, #0
 8004984:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f383 8811 	msr	BASEPRI, r3
    }
 800498c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <vPortSetupTimerInterrupt+0x34>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <vPortSetupTimerInterrupt+0x38>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <vPortSetupTimerInterrupt+0x3c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <vPortSetupTimerInterrupt+0x40>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	099b      	lsrs	r3, r3, #6
 80049b8:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <vPortSetupTimerInterrupt+0x44>)
 80049ba:	3b01      	subs	r3, #1
 80049bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <vPortSetupTimerInterrupt+0x34>)
 80049c0:	2207      	movs	r2, #7
 80049c2:	601a      	str	r2, [r3, #0]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000e010 	.word	0xe000e010
 80049d4:	e000e018 	.word	0xe000e018
 80049d8:	20000000 	.word	0x20000000
 80049dc:	10624dd3 	.word	0x10624dd3
 80049e0:	e000e014 	.word	0xe000e014

080049e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80049e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049f4 <vPortEnableVFP+0x10>
 80049e8:	6801      	ldr	r1, [r0, #0]
 80049ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ee:	6001      	str	r1, [r0, #0]
 80049f0:	4770      	bx	lr
 80049f2:	0000      	.short	0x0000
 80049f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop

080049fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a02:	f3ef 8305 	mrs	r3, IPSR
 8004a06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b0f      	cmp	r3, #15
 8004a0c:	d914      	bls.n	8004a38 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <vPortValidateInterruptPriority+0x70>)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <vPortValidateInterruptPriority+0x74>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	7afa      	ldrb	r2, [r7, #11]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d20a      	bcs.n	8004a38 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	607b      	str	r3, [r7, #4]
    }
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <vPortValidateInterruptPriority+0x78>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <vPortValidateInterruptPriority+0x7c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d90a      	bls.n	8004a5e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	603b      	str	r3, [r7, #0]
    }
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <vPortValidateInterruptPriority+0x60>
    }
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	e000e3f0 	.word	0xe000e3f0
 8004a70:	2000017c 	.word	0x2000017c
 8004a74:	e000ed0c 	.word	0xe000ed0c
 8004a78:	20000180 	.word	0x20000180

08004a7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004a88:	f7fe fb84 	bl	8003194 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a8c:	4b65      	ldr	r3, [pc, #404]	; (8004c24 <pvPortMalloc+0x1a8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a94:	f000 f934 	bl	8004d00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a98:	4b63      	ldr	r3, [pc, #396]	; (8004c28 <pvPortMalloc+0x1ac>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 80a7 	bne.w	8004bf4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02d      	beq.n	8004b08 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004aac:	2208      	movs	r2, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d227      	bcs.n	8004b08 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004ab8:	2208      	movs	r2, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d021      	beq.n	8004b0e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f023 0307 	bic.w	r3, r3, #7
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d214      	bcs.n	8004b02 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	3308      	adds	r3, #8
 8004ae0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d010      	beq.n	8004b0e <pvPortMalloc+0x92>
        __asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	617b      	str	r3, [r7, #20]
    }
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b06:	e002      	b.n	8004b0e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	607b      	str	r3, [r7, #4]
 8004b0c:	e000      	b.n	8004b10 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b0e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d06e      	beq.n	8004bf4 <pvPortMalloc+0x178>
 8004b16:	4b45      	ldr	r3, [pc, #276]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d869      	bhi.n	8004bf4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b20:	4b43      	ldr	r3, [pc, #268]	; (8004c30 <pvPortMalloc+0x1b4>)
 8004b22:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b24:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <pvPortMalloc+0x1b4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b2a:	e004      	b.n	8004b36 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d903      	bls.n	8004b48 <pvPortMalloc+0xcc>
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f1      	bne.n	8004b2c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b48:	4b36      	ldr	r3, [pc, #216]	; (8004c24 <pvPortMalloc+0x1a8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d050      	beq.n	8004bf4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2208      	movs	r2, #8
 8004b58:	4413      	add	r3, r2
 8004b5a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	1ad2      	subs	r2, r2, r3
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d91f      	bls.n	8004bb4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <pvPortMalloc+0x120>
        __asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	613b      	str	r3, [r7, #16]
    }
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	1ad2      	subs	r2, r2, r3
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bae:	69b8      	ldr	r0, [r7, #24]
 8004bb0:	f000 f908 	bl	8004dc4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004bc0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <pvPortMalloc+0x1b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d203      	bcs.n	8004bd6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <pvPortMalloc+0x1b8>)
 8004bd4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <pvPortMalloc+0x1ac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <pvPortMalloc+0x1bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	4a11      	ldr	r2, [pc, #68]	; (8004c38 <pvPortMalloc+0x1bc>)
 8004bf2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004bf4:	f7fe fadc 	bl	80031b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <pvPortMalloc+0x19c>
        __asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60fb      	str	r3, [r7, #12]
    }
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <pvPortMalloc+0x19a>
    return pvReturn;
 8004c18:	69fb      	ldr	r3, [r7, #28]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3728      	adds	r7, #40	; 0x28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20012d8c 	.word	0x20012d8c
 8004c28:	20012da0 	.word	0x20012da0
 8004c2c:	20012d90 	.word	0x20012d90
 8004c30:	20012d84 	.word	0x20012d84
 8004c34:	20012d94 	.word	0x20012d94
 8004c38:	20012d98 	.word	0x20012d98

08004c3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d04d      	beq.n	8004cea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c4e:	2308      	movs	r3, #8
 8004c50:	425b      	negs	r3, r3
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4413      	add	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <vPortFree+0xb8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <vPortFree+0x44>
        __asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60fb      	str	r3, [r7, #12]
    }
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <vPortFree+0x62>
        __asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	60bb      	str	r3, [r7, #8]
    }
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <vPortFree+0xb8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01e      	beq.n	8004cea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11a      	bne.n	8004cea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <vPortFree+0xb8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004cc4:	f7fe fa66 	bl	8003194 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <vPortFree+0xbc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <vPortFree+0xbc>)
 8004cd4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cd6:	6938      	ldr	r0, [r7, #16]
 8004cd8:	f000 f874 	bl	8004dc4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <vPortFree+0xc0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	4a06      	ldr	r2, [pc, #24]	; (8004cfc <vPortFree+0xc0>)
 8004ce4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ce6:	f7fe fa63 	bl	80031b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20012da0 	.word	0x20012da0
 8004cf8:	20012d90 	.word	0x20012d90
 8004cfc:	20012d9c 	.word	0x20012d9c

08004d00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d06:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004d0c:	4b27      	ldr	r3, [pc, #156]	; (8004dac <prvHeapInit+0xac>)
 8004d0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00c      	beq.n	8004d34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3307      	adds	r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0307 	bic.w	r3, r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <prvHeapInit+0xac>)
 8004d30:	4413      	add	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d38:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <prvHeapInit+0xb0>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <prvHeapInit+0xb0>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	4413      	add	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0307 	bic.w	r3, r3, #7
 8004d5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <prvHeapInit+0xb4>)
 8004d60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <prvHeapInit+0xb4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2200      	movs	r2, #0
 8004d68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <prvHeapInit+0xb4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	1ad2      	subs	r2, r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <prvHeapInit+0xb4>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <prvHeapInit+0xb8>)
 8004d8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <prvHeapInit+0xbc>)
 8004d96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <prvHeapInit+0xc0>)
 8004d9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d9e:	601a      	str	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20000184 	.word	0x20000184
 8004db0:	20012d84 	.word	0x20012d84
 8004db4:	20012d8c 	.word	0x20012d8c
 8004db8:	20012d94 	.word	0x20012d94
 8004dbc:	20012d90 	.word	0x20012d90
 8004dc0:	20012da0 	.word	0x20012da0

08004dc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <prvInsertBlockIntoFreeList+0xac>)
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e002      	b.n	8004dd8 <prvInsertBlockIntoFreeList+0x14>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d8f7      	bhi.n	8004dd2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	4413      	add	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d108      	bne.n	8004e06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	441a      	add	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	441a      	add	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d118      	bne.n	8004e4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <prvInsertBlockIntoFreeList+0xb0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d00d      	beq.n	8004e42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	441a      	add	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e008      	b.n	8004e54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <prvInsertBlockIntoFreeList+0xb0>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e003      	b.n	8004e54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d002      	beq.n	8004e62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20012d84 	.word	0x20012d84
 8004e74:	20012d8c 	.word	0x20012d8c

08004e78 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e7c:	4803      	ldr	r0, [pc, #12]	; (8004e8c <_cbSendSystemDesc+0x14>)
 8004e7e:	f002 f899 	bl	8006fb4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e82:	4803      	ldr	r0, [pc, #12]	; (8004e90 <_cbSendSystemDesc+0x18>)
 8004e84:	f002 f896 	bl	8006fb4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e88:	bf00      	nop
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	08007834 	.word	0x08007834
 8004e90:	08007878 	.word	0x08007878

08004e94 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004ea2:	4a06      	ldr	r2, [pc, #24]	; (8004ebc <SEGGER_SYSVIEW_Conf+0x28>)
 8004ea4:	f001 fc02 	bl	80066ac <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ea8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004eac:	f001 fc42 	bl	8006734 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004eb0:	bf00      	nop
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000000 	.word	0x20000000
 8004eb8:	08004e79 	.word	0x08004e79
 8004ebc:	08007918 	.word	0x08007918

08004ec0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	e033      	b.n	8004f34 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ecc:	491e      	ldr	r1, [pc, #120]	; (8004f48 <_cbSendTaskList+0x88>)
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	491a      	ldr	r1, [pc, #104]	; (8004f48 <_cbSendTaskList+0x88>)
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	3304      	adds	r3, #4
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	4c16      	ldr	r4, [pc, #88]	; (8004f48 <_cbSendTaskList+0x88>)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4423      	add	r3, r4
 8004efc:	3308      	adds	r3, #8
 8004efe:	681c      	ldr	r4, [r3, #0]
 8004f00:	4d11      	ldr	r5, [pc, #68]	; (8004f48 <_cbSendTaskList+0x88>)
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	442b      	add	r3, r5
 8004f0e:	330c      	adds	r3, #12
 8004f10:	681d      	ldr	r5, [r3, #0]
 8004f12:	4e0d      	ldr	r6, [pc, #52]	; (8004f48 <_cbSendTaskList+0x88>)
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4433      	add	r3, r6
 8004f20:	3310      	adds	r3, #16
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	462b      	mov	r3, r5
 8004f28:	4622      	mov	r2, r4
 8004f2a:	f000 f8b5 	bl	8005098 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3301      	adds	r3, #1
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <_cbSendTaskList+0x8c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d3c6      	bcc.n	8004ecc <_cbSendTaskList+0xc>
  }
}
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f48:	20012da4 	.word	0x20012da4
 8004f4c:	20012e44 	.word	0x20012e44

08004f50 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f50:	b5b0      	push	{r4, r5, r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f56:	f7fe fa3b 	bl	80033d0 <xTaskGetTickCountFromISR>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	f04f 0400 	mov.w	r4, #0
 8004f72:	f04f 0500 	mov.w	r5, #0
 8004f76:	015d      	lsls	r5, r3, #5
 8004f78:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004f7c:	0154      	lsls	r4, r2, #5
 8004f7e:	4622      	mov	r2, r4
 8004f80:	462b      	mov	r3, r5
 8004f82:	1a12      	subs	r2, r2, r0
 8004f84:	eb63 0301 	sbc.w	r3, r3, r1
 8004f88:	f04f 0400 	mov.w	r4, #0
 8004f8c:	f04f 0500 	mov.w	r5, #0
 8004f90:	009d      	lsls	r5, r3, #2
 8004f92:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004f96:	0094      	lsls	r4, r2, #2
 8004f98:	4622      	mov	r2, r4
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	1812      	adds	r2, r2, r0
 8004f9e:	eb41 0303 	adc.w	r3, r1, r3
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	00d9      	lsls	r1, r3, #3
 8004fac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fb0:	00d0      	lsls	r0, r2, #3
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004fba:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bdb0      	pop	{r4, r5, r7, pc}

08004fc8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004fd6:	2205      	movs	r2, #5
 8004fd8:	492b      	ldr	r1, [pc, #172]	; (8005088 <SYSVIEW_AddTask+0xc0>)
 8004fda:	68b8      	ldr	r0, [r7, #8]
 8004fdc:	f002 fbaa 	bl	8007734 <memcmp>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d04b      	beq.n	800507e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004fe6:	4b29      	ldr	r3, [pc, #164]	; (800508c <SYSVIEW_AddTask+0xc4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b07      	cmp	r3, #7
 8004fec:	d903      	bls.n	8004ff6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004fee:	4828      	ldr	r0, [pc, #160]	; (8005090 <SYSVIEW_AddTask+0xc8>)
 8004ff0:	f002 faf2 	bl	80075d8 <SEGGER_SYSVIEW_Warn>
    return;
 8004ff4:	e044      	b.n	8005080 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ff6:	4b25      	ldr	r3, [pc, #148]	; (800508c <SYSVIEW_AddTask+0xc4>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4926      	ldr	r1, [pc, #152]	; (8005094 <SYSVIEW_AddTask+0xcc>)
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800500a:	4b20      	ldr	r3, [pc, #128]	; (800508c <SYSVIEW_AddTask+0xc4>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4921      	ldr	r1, [pc, #132]	; (8005094 <SYSVIEW_AddTask+0xcc>)
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	3304      	adds	r3, #4
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <SYSVIEW_AddTask+0xc4>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	491b      	ldr	r1, [pc, #108]	; (8005094 <SYSVIEW_AddTask+0xcc>)
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	3308      	adds	r3, #8
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <SYSVIEW_AddTask+0xc4>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4916      	ldr	r1, [pc, #88]	; (8005094 <SYSVIEW_AddTask+0xcc>)
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	330c      	adds	r3, #12
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <SYSVIEW_AddTask+0xc4>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4910      	ldr	r1, [pc, #64]	; (8005094 <SYSVIEW_AddTask+0xcc>)
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	3310      	adds	r3, #16
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <SYSVIEW_AddTask+0xc4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3301      	adds	r3, #1
 8005068:	4a08      	ldr	r2, [pc, #32]	; (800508c <SYSVIEW_AddTask+0xc4>)
 800506a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f80e 	bl	8005098 <SYSVIEW_SendTaskInfo>
 800507c:	e000      	b.n	8005080 <SYSVIEW_AddTask+0xb8>
    return;
 800507e:	bf00      	nop

}
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	08007888 	.word	0x08007888
 800508c:	20012e44 	.word	0x20012e44
 8005090:	08007890 	.word	0x08007890
 8005094:	20012da4 	.word	0x20012da4

08005098 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80050a6:	f107 0314 	add.w	r3, r7, #20
 80050aa:	2214      	movs	r2, #20
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f002 fb5c 	bl	800776c <memset>
  TaskInfo.TaskID     = TaskID;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 fe79 	bl	8006dc4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80050d2:	bf00      	nop
 80050d4:	3728      	adds	r7, #40	; 0x28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <__NVIC_EnableIRQ>:
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	db0b      	blt.n	8005106 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	f003 021f 	and.w	r2, r3, #31
 80050f4:	4907      	ldr	r1, [pc, #28]	; (8005114 <__NVIC_EnableIRQ+0x38>)
 80050f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	2001      	movs	r0, #1
 80050fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	e000e100 	.word	0xe000e100

08005118 <__NVIC_SetPriority>:
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	6039      	str	r1, [r7, #0]
 8005122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005128:	2b00      	cmp	r3, #0
 800512a:	db0a      	blt.n	8005142 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	b2da      	uxtb	r2, r3
 8005130:	490c      	ldr	r1, [pc, #48]	; (8005164 <__NVIC_SetPriority+0x4c>)
 8005132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005136:	0112      	lsls	r2, r2, #4
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	440b      	add	r3, r1
 800513c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005140:	e00a      	b.n	8005158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	b2da      	uxtb	r2, r3
 8005146:	4908      	ldr	r1, [pc, #32]	; (8005168 <__NVIC_SetPriority+0x50>)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	3b04      	subs	r3, #4
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	440b      	add	r3, r1
 8005156:	761a      	strb	r2, [r3, #24]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	e000e100 	.word	0xe000e100
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005172:	f002 fa8d 	bl	8007690 <SEGGER_SYSVIEW_IsStarted>
 8005176:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800517e:	f001 fca5 	bl	8006acc <SEGGER_SYSVIEW_Start>
  }
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005196:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <_cbOnUARTRx+0x3c>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d806      	bhi.n	80051ac <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <_cbOnUARTRx+0x3c>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	3301      	adds	r3, #1
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <_cbOnUARTRx+0x3c>)
 80051a8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80051aa:	e009      	b.n	80051c0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80051ac:	f7ff ffde 	bl	800516c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <_cbOnUARTRx+0x3c>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4618      	mov	r0, r3
 80051b6:	1dfb      	adds	r3, r7, #7
 80051b8:	2201      	movs	r2, #1
 80051ba:	4619      	mov	r1, r3
 80051bc:	f000 fb9a 	bl	80058f4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80051c0:	bf00      	nop
}
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000014 	.word	0x20000014

080051cc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80051d4:	4b14      	ldr	r3, [pc, #80]	; (8005228 <_cbOnUARTTx+0x5c>)
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d80f      	bhi.n	80051fc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <_cbOnUARTTx+0x5c>)
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	461a      	mov	r2, r3
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <_cbOnUARTTx+0x60>)
 80051e4:	5c9a      	ldrb	r2, [r3, r2]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80051ea:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <_cbOnUARTTx+0x5c>)
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	3301      	adds	r3, #1
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <_cbOnUARTTx+0x5c>)
 80051f4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80051fa:	e00f      	b.n	800521c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <_cbOnUARTTx+0x5c>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fa19 	bl	800563c <SEGGER_RTT_ReadUpBufferNoLock>
 800520a:	4603      	mov	r3, r0
 800520c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	da02      	bge.n	800521a <_cbOnUARTTx+0x4e>
    r = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e000      	b.n	800521c <_cbOnUARTTx+0x50>
  }
Done:
 800521a:	bf00      	nop
  return r;
 800521c:	68fb      	ldr	r3, [r7, #12]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000014 	.word	0x20000014
 800522c:	08007920 	.word	0x08007920

08005230 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005238:	4a04      	ldr	r2, [pc, #16]	; (800524c <SEGGER_UART_init+0x1c>)
 800523a:	4905      	ldr	r1, [pc, #20]	; (8005250 <SEGGER_UART_init+0x20>)
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f863 	bl	8005308 <HIF_UART_Init>
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	0800518d 	.word	0x0800518d
 8005250:	080051cd 	.word	0x080051cd

08005254 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800525a:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <USART2_IRQHandler+0x80>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d011      	beq.n	800528e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <USART2_IRQHandler+0x84>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 030b 	and.w	r3, r3, #11
 8005278:	2b00      	cmp	r3, #0
 800527a:	d108      	bne.n	800528e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800527c:	4b17      	ldr	r3, [pc, #92]	; (80052dc <USART2_IRQHandler+0x88>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005284:	4b15      	ldr	r3, [pc, #84]	; (80052dc <USART2_IRQHandler+0x88>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	79fa      	ldrb	r2, [r7, #7]
 800528a:	4610      	mov	r0, r2
 800528c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01a      	beq.n	80052ce <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <USART2_IRQHandler+0x8c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d015      	beq.n	80052cc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <USART2_IRQHandler+0x8c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	1dfa      	adds	r2, r7, #7
 80052a6:	4610      	mov	r0, r2
 80052a8:	4798      	blx	r3
 80052aa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <USART2_IRQHandler+0x90>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <USART2_IRQHandler+0x90>)
 80052b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e006      	b.n	80052ce <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80052c0:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <USART2_IRQHandler+0x80>)
 80052c2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80052c4:	79fa      	ldrb	r2, [r7, #7]
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <USART2_IRQHandler+0x84>)
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e000      	b.n	80052ce <USART2_IRQHandler+0x7a>
      return;
 80052cc:	bf00      	nop
    }
  }
}
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40004400 	.word	0x40004400
 80052d8:	40004404 	.word	0x40004404
 80052dc:	20012e48 	.word	0x20012e48
 80052e0:	20012e4c 	.word	0x20012e4c
 80052e4:	4000440c 	.word	0x4000440c

080052e8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	6013      	str	r3, [r2, #0]
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	4000440c 	.word	0x4000440c

08005308 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005314:	4b2e      	ldr	r3, [pc, #184]	; (80053d0 <HIF_UART_Init+0xc8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2d      	ldr	r2, [pc, #180]	; (80053d0 <HIF_UART_Init+0xc8>)
 800531a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005320:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <HIF_UART_Init+0xcc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <HIF_UART_Init+0xcc>)
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800532c:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <HIF_UART_Init+0xd0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005338:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005340:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005342:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <HIF_UART_Init+0xd0>)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005348:	4b24      	ldr	r3, [pc, #144]	; (80053dc <HIF_UART_Init+0xd4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005354:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800535c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800535e:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <HIF_UART_Init+0xd4>)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005364:	4b1e      	ldr	r3, [pc, #120]	; (80053e0 <HIF_UART_Init+0xd8>)
 8005366:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800536a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HIF_UART_Init+0xdc>)
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005372:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <HIF_UART_Init+0xe0>)
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800537e:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <HIF_UART_Init+0xe4>)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	3301      	adds	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005396:	d302      	bcc.n	800539e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005398:	f640 73ff 	movw	r3, #4095	; 0xfff
 800539c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <HIF_UART_Init+0xe8>)
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80053ae:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <HIF_UART_Init+0xec>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80053b4:	4a10      	ldr	r2, [pc, #64]	; (80053f8 <HIF_UART_Init+0xf0>)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80053ba:	2106      	movs	r1, #6
 80053bc:	2026      	movs	r0, #38	; 0x26
 80053be:	f7ff feab 	bl	8005118 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80053c2:	2026      	movs	r0, #38	; 0x26
 80053c4:	f7ff fe8a 	bl	80050dc <__NVIC_EnableIRQ>
}
 80053c8:	bf00      	nop
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40023840 	.word	0x40023840
 80053d4:	40023830 	.word	0x40023830
 80053d8:	40020020 	.word	0x40020020
 80053dc:	40020000 	.word	0x40020000
 80053e0:	4000440c 	.word	0x4000440c
 80053e4:	40004410 	.word	0x40004410
 80053e8:	40004414 	.word	0x40004414
 80053ec:	0501bd00 	.word	0x0501bd00
 80053f0:	40004408 	.word	0x40004408
 80053f4:	20012e48 	.word	0x20012e48
 80053f8:	20012e4c 	.word	0x20012e4c

080053fc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005402:	4b24      	ldr	r3, [pc, #144]	; (8005494 <_DoInit+0x98>)
 8005404:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2203      	movs	r2, #3
 800540a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2203      	movs	r2, #3
 8005410:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a20      	ldr	r2, [pc, #128]	; (8005498 <_DoInit+0x9c>)
 8005416:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a20      	ldr	r2, [pc, #128]	; (800549c <_DoInit+0xa0>)
 800541c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005424:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <_DoInit+0x9c>)
 800543c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <_DoInit+0xa4>)
 8005442:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2210      	movs	r2, #16
 8005448:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3307      	adds	r3, #7
 8005460:	4a10      	ldr	r2, [pc, #64]	; (80054a4 <_DoInit+0xa8>)
 8005462:	6810      	ldr	r0, [r2, #0]
 8005464:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005466:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a0e      	ldr	r2, [pc, #56]	; (80054a8 <_DoInit+0xac>)
 800546e:	6810      	ldr	r0, [r2, #0]
 8005470:	6018      	str	r0, [r3, #0]
 8005472:	8891      	ldrh	r1, [r2, #4]
 8005474:	7992      	ldrb	r2, [r2, #6]
 8005476:	8099      	strh	r1, [r3, #4]
 8005478:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800547a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005484:	f3bf 8f5f 	dmb	sy
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	20014418 	.word	0x20014418
 8005498:	080078e0 	.word	0x080078e0
 800549c:	20012e50 	.word	0x20012e50
 80054a0:	20013250 	.word	0x20013250
 80054a4:	080078ec 	.word	0x080078ec
 80054a8:	080078f0 	.word	0x080078f0

080054ac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80054b8:	2300      	movs	r3, #0
 80054ba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d905      	bls.n	80054dc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
 80054da:	e007      	b.n	80054ec <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	1acb      	subs	r3, r1, r3
 80054e6:	4413      	add	r3, r2
 80054e8:	3b01      	subs	r3, #1
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f6:	4293      	cmp	r3, r2
 80054f8:	bf28      	it	cs
 80054fa:	4613      	movcs	r3, r2
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80054fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4293      	cmp	r3, r2
 8005504:	bf28      	it	cs
 8005506:	4613      	movcs	r3, r2
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	6978      	ldr	r0, [r7, #20]
 800551a:	f002 f919 	bl	8007750 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800551e:	6a3a      	ldr	r2, [r7, #32]
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	4413      	add	r3, r2
 8005524:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	4413      	add	r3, r2
 800552c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	4413      	add	r3, r2
 800553c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	429a      	cmp	r2, r3
 8005546:	d101      	bne.n	800554c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800554c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1b2      	bne.n	80054c2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800555c:	6a3b      	ldr	r3, [r7, #32]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005566:	b580      	push	{r7, lr}
 8005568:	b088      	sub	sp, #32
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d911      	bls.n	80055ae <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	6938      	ldr	r0, [r7, #16]
 800559a:	f002 f8d9 	bl	8007750 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800559e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	441a      	add	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80055ac:	e01f      	b.n	80055ee <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	6938      	ldr	r0, [r7, #16]
 80055c2:	f002 f8c5 	bl	8007750 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	4413      	add	r3, r2
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4619      	mov	r1, r3
 80055de:	6938      	ldr	r0, [r7, #16]
 80055e0:	f002 f8b6 	bl	8007750 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055e4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	60da      	str	r2, [r3, #12]
}
 80055ee:	bf00      	nop
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80055f6:	b480      	push	{r7}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	429a      	cmp	r2, r3
 8005610:	d808      	bhi.n	8005624 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1ad2      	subs	r2, r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	4413      	add	r3, r2
 800561e:	3b01      	subs	r3, #1
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e004      	b.n	800562e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800562e:	697b      	ldr	r3, [r7, #20]
}
 8005630:	4618      	mov	r0, r3
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b08c      	sub	sp, #48	; 0x30
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005648:	4b3e      	ldr	r3, [pc, #248]	; (8005744 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005656:	f7ff fed1 	bl	80053fc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4a37      	ldr	r2, [pc, #220]	; (8005744 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005668:	4413      	add	r3, r2
 800566a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800567c:	2300      	movs	r3, #0
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	429a      	cmp	r2, r3
 8005686:	d92b      	bls.n	80056e0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4293      	cmp	r3, r2
 8005698:	bf28      	it	cs
 800569a:	4613      	movcs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	4413      	add	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	6939      	ldr	r1, [r7, #16]
 80056ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ae:	f002 f84f 	bl	8007750 <memcpy>
    NumBytesRead += NumBytesRem;
 80056b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	4413      	add	r3, r2
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4413      	add	r3, r2
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	4413      	add	r3, r2
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d8:	429a      	cmp	r2, r3
 80056da:	d101      	bne.n	80056e0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80056dc:	2300      	movs	r3, #0
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4293      	cmp	r3, r2
 80056ee:	bf28      	it	cs
 80056f0:	4613      	movcs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d019      	beq.n	800572e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	4413      	add	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	6939      	ldr	r1, [r7, #16]
 8005708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800570a:	f002 f821 	bl	8007750 <memcpy>
    NumBytesRead += NumBytesRem;
 800570e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4413      	add	r3, r2
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005738:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800573c:	4618      	mov	r0, r3
 800573e:	3730      	adds	r7, #48	; 0x30
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20014418 	.word	0x20014418

08005748 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b08c      	sub	sp, #48	; 0x30
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005754:	4b3e      	ldr	r3, [pc, #248]	; (8005850 <SEGGER_RTT_ReadNoLock+0x108>)
 8005756:	623b      	str	r3, [r7, #32]
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <SEGGER_RTT_ReadNoLock+0x1e>
 8005762:	f7ff fe4b 	bl	80053fc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	3360      	adds	r3, #96	; 0x60
 8005772:	4a37      	ldr	r2, [pc, #220]	; (8005850 <SEGGER_RTT_ReadNoLock+0x108>)
 8005774:	4413      	add	r3, r2
 8005776:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005788:	2300      	movs	r3, #0
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800578c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	429a      	cmp	r2, r3
 8005792:	d92b      	bls.n	80057ec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	bf28      	it	cs
 80057a6:	4613      	movcs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	4413      	add	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	6939      	ldr	r1, [r7, #16]
 80057b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ba:	f001 ffc9 	bl	8007750 <memcpy>
    NumBytesRead += NumBytesRem;
 80057be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	4413      	add	r3, r2
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4413      	add	r3, r2
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d101      	bne.n	80057ec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80057e8:	2300      	movs	r3, #0
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	bf28      	it	cs
 80057fc:	4613      	movcs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d019      	beq.n	800583a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	4413      	add	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	6939      	ldr	r1, [r7, #16]
 8005814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005816:	f001 ff9b 	bl	8007750 <memcpy>
    NumBytesRead += NumBytesRem;
 800581a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	4413      	add	r3, r2
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005844:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005848:	4618      	mov	r0, r3
 800584a:	3730      	adds	r7, #48	; 0x30
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20014418 	.word	0x20014418

08005854 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4613      	mov	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4413      	add	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	3360      	adds	r3, #96	; 0x60
 8005870:	4a1f      	ldr	r2, [pc, #124]	; (80058f0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005872:	4413      	add	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d029      	beq.n	80058d2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800587e:	2b02      	cmp	r3, #2
 8005880:	d82e      	bhi.n	80058e0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005886:	2b01      	cmp	r3, #1
 8005888:	d013      	beq.n	80058b2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800588a:	e029      	b.n	80058e0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800588c:	6978      	ldr	r0, [r7, #20]
 800588e:	f7ff feb2 	bl	80055f6 <_GetAvailWriteSpace>
 8005892:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d202      	bcs.n	80058a2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80058a0:	e021      	b.n	80058e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	69b9      	ldr	r1, [r7, #24]
 80058aa:	6978      	ldr	r0, [r7, #20]
 80058ac:	f7ff fe5b 	bl	8005566 <_WriteNoCheck>
    break;
 80058b0:	e019      	b.n	80058e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058b2:	6978      	ldr	r0, [r7, #20]
 80058b4:	f7ff fe9f 	bl	80055f6 <_GetAvailWriteSpace>
 80058b8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4293      	cmp	r3, r2
 80058c0:	bf28      	it	cs
 80058c2:	4613      	movcs	r3, r2
 80058c4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	69b9      	ldr	r1, [r7, #24]
 80058ca:	6978      	ldr	r0, [r7, #20]
 80058cc:	f7ff fe4b 	bl	8005566 <_WriteNoCheck>
    break;
 80058d0:	e009      	b.n	80058e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	6978      	ldr	r0, [r7, #20]
 80058d8:	f7ff fde8 	bl	80054ac <_WriteBlocking>
 80058dc:	61f8      	str	r0, [r7, #28]
    break;
 80058de:	e002      	b.n	80058e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61fb      	str	r3, [r7, #28]
    break;
 80058e4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80058e6:	69fb      	ldr	r3, [r7, #28]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20014418 	.word	0x20014418

080058f4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800590e:	f7ff fd75 	bl	80053fc <_DoInit>
  SEGGER_RTT_LOCK();
 8005912:	f3ef 8311 	mrs	r3, BASEPRI
 8005916:	f04f 0120 	mov.w	r1, #32
 800591a:	f381 8811 	msr	BASEPRI, r1
 800591e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff ff95 	bl	8005854 <SEGGER_RTT_WriteDownBufferNoLock>
 800592a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005932:	697b      	ldr	r3, [r7, #20]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20014418 	.word	0x20014418

08005940 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800594e:	4b3d      	ldr	r3, [pc, #244]	; (8005a44 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <SEGGER_RTT_AllocUpBuffer+0x20>
 800595c:	f7ff fd4e 	bl	80053fc <_DoInit>
  SEGGER_RTT_LOCK();
 8005960:	f3ef 8311 	mrs	r3, BASEPRI
 8005964:	f04f 0120 	mov.w	r1, #32
 8005968:	f381 8811 	msr	BASEPRI, r1
 800596c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800596e:	4b35      	ldr	r3, [pc, #212]	; (8005a44 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005970:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005976:	6939      	ldr	r1, [r7, #16]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	4613      	mov	r3, r2
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	4413      	add	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	440b      	add	r3, r1
 8005986:	3304      	adds	r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d008      	beq.n	80059a0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	429a      	cmp	r2, r3
 800599c:	dbeb      	blt.n	8005976 <SEGGER_RTT_AllocUpBuffer+0x36>
 800599e:	e000      	b.n	80059a2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80059a0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	da3f      	bge.n	8005a2c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80059ac:	6939      	ldr	r1, [r7, #16]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	4613      	mov	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	440b      	add	r3, r1
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80059c0:	6939      	ldr	r1, [r7, #16]
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	440b      	add	r3, r1
 80059d0:	3304      	adds	r3, #4
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80059d6:	6939      	ldr	r1, [r7, #16]
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	4613      	mov	r3, r2
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	4413      	add	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	440b      	add	r3, r1
 80059e4:	3320      	adds	r3, #32
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80059ea:	6939      	ldr	r1, [r7, #16]
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	4613      	mov	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4413      	add	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	440b      	add	r3, r1
 80059f8:	3328      	adds	r3, #40	; 0x28
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80059fe:	6939      	ldr	r1, [r7, #16]
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	4613      	mov	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3324      	adds	r3, #36	; 0x24
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a12:	6939      	ldr	r1, [r7, #16]
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	4613      	mov	r3, r2
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	4413      	add	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	440b      	add	r3, r1
 8005a20:	332c      	adds	r3, #44	; 0x2c
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a26:	f3bf 8f5f 	dmb	sy
 8005a2a:	e002      	b.n	8005a32 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a30:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a38:	69fb      	ldr	r3, [r7, #28]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20014418 	.word	0x20014418

08005a48 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a56:	4b33      	ldr	r3, [pc, #204]	; (8005b24 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005a64:	f7ff fcca 	bl	80053fc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a68:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005a6a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	461a      	mov	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d24d      	bcs.n	8005b14 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005a78:	f3ef 8311 	mrs	r3, BASEPRI
 8005a7c:	f04f 0120 	mov.w	r1, #32
 8005a80:	f381 8811 	msr	BASEPRI, r1
 8005a84:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d031      	beq.n	8005af0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005a8c:	6979      	ldr	r1, [r7, #20]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4613      	mov	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	4413      	add	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	440b      	add	r3, r1
 8005a9a:	3360      	adds	r3, #96	; 0x60
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005aa0:	6979      	ldr	r1, [r7, #20]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	440b      	add	r3, r1
 8005aae:	3364      	adds	r3, #100	; 0x64
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005ab4:	6979      	ldr	r1, [r7, #20]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	4413      	add	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3368      	adds	r3, #104	; 0x68
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005ac8:	6979      	ldr	r1, [r7, #20]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4613      	mov	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3370      	adds	r3, #112	; 0x70
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005adc:	6979      	ldr	r1, [r7, #20]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	336c      	adds	r3, #108	; 0x6c
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4413      	add	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	440b      	add	r3, r1
 8005afe:	3374      	adds	r3, #116	; 0x74
 8005b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b02:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b04:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	e002      	b.n	8005b1a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005b14:	f04f 33ff 	mov.w	r3, #4294967295
 8005b18:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20014418 	.word	0x20014418

08005b28 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005b38:	e002      	b.n	8005b40 <_EncodeStr+0x18>
    Len++;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	4413      	add	r3, r2
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f6      	bne.n	8005b3a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d901      	bls.n	8005b58 <_EncodeStr+0x30>
    Len = Limit;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2bfe      	cmp	r3, #254	; 0xfe
 8005b5c:	d806      	bhi.n	8005b6c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	60fa      	str	r2, [r7, #12]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	e011      	b.n	8005b90 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	60fa      	str	r2, [r7, #12]
 8005b72:	22ff      	movs	r2, #255	; 0xff
 8005b74:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	60fa      	str	r2, [r7, #12]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	0a19      	lsrs	r1, r3, #8
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	60fa      	str	r2, [r7, #12]
 8005b8c:	b2ca      	uxtb	r2, r1
 8005b8e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005b94:	e00a      	b.n	8005bac <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	1c53      	adds	r3, r2, #1
 8005b9a:	60bb      	str	r3, [r7, #8]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1c59      	adds	r1, r3, #1
 8005ba0:	60f9      	str	r1, [r7, #12]
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	701a      	strb	r2, [r3, #0]
    n++;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d3f0      	bcc.n	8005b96 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005be2:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <_HandleIncomingPacket+0xe0>)
 8005be4:	7e1b      	ldrb	r3, [r3, #24]
 8005be6:	4618      	mov	r0, r3
 8005be8:	1cfb      	adds	r3, r7, #3
 8005bea:	2201      	movs	r2, #1
 8005bec:	4619      	mov	r1, r3
 8005bee:	f7ff fdab 	bl	8005748 <SEGGER_RTT_ReadNoLock>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	dd54      	ble.n	8005ca6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	2b80      	cmp	r3, #128	; 0x80
 8005c00:	d032      	beq.n	8005c68 <_HandleIncomingPacket+0x8c>
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	dc42      	bgt.n	8005c8c <_HandleIncomingPacket+0xb0>
 8005c06:	2b07      	cmp	r3, #7
 8005c08:	dc16      	bgt.n	8005c38 <_HandleIncomingPacket+0x5c>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	dd3e      	ble.n	8005c8c <_HandleIncomingPacket+0xb0>
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d83b      	bhi.n	8005c8c <_HandleIncomingPacket+0xb0>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <_HandleIncomingPacket+0x40>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c3f 	.word	0x08005c3f
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c4b 	.word	0x08005c4b
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c57 	.word	0x08005c57
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c63 	.word	0x08005c63
 8005c38:	2b7f      	cmp	r3, #127	; 0x7f
 8005c3a:	d036      	beq.n	8005caa <_HandleIncomingPacket+0xce>
 8005c3c:	e026      	b.n	8005c8c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c3e:	f000 ff45 	bl	8006acc <SEGGER_SYSVIEW_Start>
      break;
 8005c42:	e037      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c44:	f000 fffe 	bl	8006c44 <SEGGER_SYSVIEW_Stop>
      break;
 8005c48:	e034      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c4a:	f001 f9d7 	bl	8006ffc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c4e:	e031      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005c50:	f001 f99c 	bl	8006f8c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005c54:	e02e      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005c56:	f001 f81b 	bl	8006c90 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005c5a:	e02b      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c5c:	f001 fc6a 	bl	8007534 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c60:	e028      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c62:	f001 fc49 	bl	80074f8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c66:	e025      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c68:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <_HandleIncomingPacket+0xe0>)
 8005c6a:	7e1b      	ldrb	r3, [r3, #24]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	1cfb      	adds	r3, r7, #3
 8005c70:	2201      	movs	r2, #1
 8005c72:	4619      	mov	r1, r3
 8005c74:	f7ff fd68 	bl	8005748 <SEGGER_RTT_ReadNoLock>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dd15      	ble.n	8005cae <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 fbb7 	bl	80073f8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005c8a:	e010      	b.n	8005cae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	da0e      	bge.n	8005cb2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <_HandleIncomingPacket+0xe0>)
 8005c96:	7e1b      	ldrb	r3, [r3, #24]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	1cfb      	adds	r3, r7, #3
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f7ff fd52 	bl	8005748 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005ca4:	e005      	b.n	8005cb2 <_HandleIncomingPacket+0xd6>
    }
  }
 8005ca6:	bf00      	nop
 8005ca8:	e004      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
      break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <_HandleIncomingPacket+0xd8>
      break;
 8005cb2:	bf00      	nop
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20014268 	.word	0x20014268

08005cc0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08c      	sub	sp, #48	; 0x30
 8005cc4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005cca:	1d3b      	adds	r3, r7, #4
 8005ccc:	3301      	adds	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd4:	4b32      	ldr	r3, [pc, #200]	; (8005da0 <_TrySendOverflowPacket+0xe0>)
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cda:	e00b      	b.n	8005cf4 <_TrySendOverflowPacket+0x34>
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	1c59      	adds	r1, r3, #1
 8005ce4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	09db      	lsrs	r3, r3, #7
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf8:	d8f0      	bhi.n	8005cdc <_TrySendOverflowPacket+0x1c>
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d0a:	4b26      	ldr	r3, [pc, #152]	; (8005da4 <_TrySendOverflowPacket+0xe4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d10:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <_TrySendOverflowPacket+0xe0>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	623b      	str	r3, [r7, #32]
 8005d22:	e00b      	b.n	8005d3c <_TrySendOverflowPacket+0x7c>
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	1c59      	adds	r1, r3, #1
 8005d2c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	09db      	lsrs	r3, r3, #7
 8005d3a:	623b      	str	r3, [r7, #32]
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d40:	d8f0      	bhi.n	8005d24 <_TrySendOverflowPacket+0x64>
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	627a      	str	r2, [r7, #36]	; 0x24
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005d52:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <_TrySendOverflowPacket+0xe0>)
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	4618      	mov	r0, r3
 8005d58:	1d3b      	adds	r3, r7, #4
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	1d3b      	adds	r3, r7, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	f7fa fa54 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005d6c:	f7ff fabc 	bl	80052e8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d76:	4a0a      	ldr	r2, [pc, #40]	; (8005da0 <_TrySendOverflowPacket+0xe0>)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005d7c:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <_TrySendOverflowPacket+0xe0>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <_TrySendOverflowPacket+0xe0>)
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e004      	b.n	8005d94 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <_TrySendOverflowPacket+0xe0>)
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	4a03      	ldr	r2, [pc, #12]	; (8005da0 <_TrySendOverflowPacket+0xe0>)
 8005d92:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005d94:	693b      	ldr	r3, [r7, #16]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3730      	adds	r7, #48	; 0x30
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20014268 	.word	0x20014268
 8005da4:	e0001004 	.word	0xe0001004

08005da8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005db4:	4b6d      	ldr	r3, [pc, #436]	; (8005f6c <_SendPacket+0x1c4>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d010      	beq.n	8005dde <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005dbc:	4b6b      	ldr	r3, [pc, #428]	; (8005f6c <_SendPacket+0x1c4>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80a5 	beq.w	8005f10 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005dc6:	4b69      	ldr	r3, [pc, #420]	; (8005f6c <_SendPacket+0x1c4>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d109      	bne.n	8005de2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005dce:	f7ff ff77 	bl	8005cc0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005dd2:	4b66      	ldr	r3, [pc, #408]	; (8005f6c <_SendPacket+0x1c4>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	f040 809c 	bne.w	8005f14 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005ddc:	e001      	b.n	8005de2 <_SendPacket+0x3a>
    goto Send;
 8005dde:	bf00      	nop
 8005de0:	e000      	b.n	8005de4 <_SendPacket+0x3c>
Send:
 8005de2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b1f      	cmp	r3, #31
 8005de8:	d809      	bhi.n	8005dfe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005dea:	4b60      	ldr	r3, [pc, #384]	; (8005f6c <_SendPacket+0x1c4>)
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f040 808d 	bne.w	8005f18 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b17      	cmp	r3, #23
 8005e02:	d807      	bhi.n	8005e14 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	e03d      	b.n	8005e90 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e20:	d912      	bls.n	8005e48 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	09da      	lsrs	r2, r3, #7
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	3a01      	subs	r2, #1
 8005e3a:	60fa      	str	r2, [r7, #12]
 8005e3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	e006      	b.n	8005e56 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b7f      	cmp	r3, #127	; 0x7f
 8005e5a:	d912      	bls.n	8005e82 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	09da      	lsrs	r2, r3, #7
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	3a01      	subs	r2, #1
 8005e74:	60fa      	str	r2, [r7, #12]
 8005e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	e006      	b.n	8005e90 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e90:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <_SendPacket+0x1c8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005e96:	4b35      	ldr	r3, [pc, #212]	; (8005f6c <_SendPacket+0x1c4>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	623b      	str	r3, [r7, #32]
 8005ea8:	e00b      	b.n	8005ec2 <_SendPacket+0x11a>
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	1c59      	adds	r1, r3, #1
 8005eb2:	6279      	str	r1, [r7, #36]	; 0x24
 8005eb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	09db      	lsrs	r3, r3, #7
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec6:	d8f0      	bhi.n	8005eaa <_SendPacket+0x102>
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	627a      	str	r2, [r7, #36]	; 0x24
 8005ece:	6a3a      	ldr	r2, [r7, #32]
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005ed8:	4b24      	ldr	r3, [pc, #144]	; (8005f6c <_SendPacket+0x1c4>)
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	4618      	mov	r0, r3
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	68f9      	ldr	r1, [r7, #12]
 8005ee8:	f7fa f992 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005eec:	4603      	mov	r3, r0
 8005eee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005ef0:	f7ff f9fa 	bl	80052e8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005efa:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <_SendPacket+0x1c4>)
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	60d3      	str	r3, [r2, #12]
 8005f00:	e00b      	b.n	8005f1a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f02:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <_SendPacket+0x1c4>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <_SendPacket+0x1c4>)
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	e004      	b.n	8005f1a <_SendPacket+0x172>
    goto SendDone;
 8005f10:	bf00      	nop
 8005f12:	e002      	b.n	8005f1a <_SendPacket+0x172>
      goto SendDone;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <_SendPacket+0x172>
      goto SendDone;
 8005f18:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <_SendPacket+0x1c4>)
 8005f1c:	7e1b      	ldrb	r3, [r3, #24]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4a14      	ldr	r2, [pc, #80]	; (8005f74 <_SendPacket+0x1cc>)
 8005f22:	460b      	mov	r3, r1
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	440b      	add	r3, r1
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	336c      	adds	r3, #108	; 0x6c
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <_SendPacket+0x1c4>)
 8005f32:	7e1b      	ldrb	r3, [r3, #24]
 8005f34:	4618      	mov	r0, r3
 8005f36:	490f      	ldr	r1, [pc, #60]	; (8005f74 <_SendPacket+0x1cc>)
 8005f38:	4603      	mov	r3, r0
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4403      	add	r3, r0
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	440b      	add	r3, r1
 8005f42:	3370      	adds	r3, #112	; 0x70
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d00b      	beq.n	8005f62 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005f4a:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <_SendPacket+0x1c4>)
 8005f4c:	789b      	ldrb	r3, [r3, #2]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d107      	bne.n	8005f62 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005f52:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <_SendPacket+0x1c4>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005f58:	f7ff fe40 	bl	8005bdc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005f5c:	4b03      	ldr	r3, [pc, #12]	; (8005f6c <_SendPacket+0x1c4>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005f62:	bf00      	nop
 8005f64:	3728      	adds	r7, #40	; 0x28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20014268 	.word	0x20014268
 8005f70:	e0001004 	.word	0xe0001004
 8005f74:	20014418 	.word	0x20014418

08005f78 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	2b80      	cmp	r3, #128	; 0x80
 8005f90:	d80a      	bhi.n	8005fa8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	1c59      	adds	r1, r3, #1
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6051      	str	r1, [r2, #4]
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b80      	cmp	r3, #128	; 0x80
 8005fae:	d15a      	bne.n	8006066 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	623b      	str	r3, [r7, #32]
 8005fd0:	e00b      	b.n	8005fea <_StoreChar+0x72>
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	1c59      	adds	r1, r3, #1
 8005fda:	6279      	str	r1, [r7, #36]	; 0x24
 8005fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	09db      	lsrs	r3, r3, #7
 8005fe8:	623b      	str	r3, [r7, #32]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	2b7f      	cmp	r3, #127	; 0x7f
 8005fee:	d8f0      	bhi.n	8005fd2 <_StoreChar+0x5a>
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ff6:	6a3a      	ldr	r2, [r7, #32]
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	61fb      	str	r3, [r7, #28]
 8006004:	2300      	movs	r3, #0
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e00b      	b.n	8006022 <_StoreChar+0xaa>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	b2da      	uxtb	r2, r3
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	1c59      	adds	r1, r3, #1
 8006012:	61f9      	str	r1, [r7, #28]
 8006014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b7f      	cmp	r3, #127	; 0x7f
 8006026:	d8f0      	bhi.n	800600a <_StoreChar+0x92>
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	61fa      	str	r2, [r7, #28]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	221a      	movs	r2, #26
 800603e:	6939      	ldr	r1, [r7, #16]
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff feb1 	bl	8005da8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fdb9 	bl	8005bc2 <_PreparePacket>
 8006050:	4602      	mov	r2, r0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	611a      	str	r2, [r3, #16]
  }
}
 8006066:	bf00      	nop
 8006068:	3728      	adds	r7, #40	; 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006082:	2301      	movs	r3, #1
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006086:	2301      	movs	r3, #1
 8006088:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800608a:	e007      	b.n	800609c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800608c:	6a3a      	ldr	r2, [r7, #32]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	623b      	str	r3, [r7, #32]
    Width++;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	3301      	adds	r3, #1
 800609a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800609c:	6a3a      	ldr	r2, [r7, #32]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d2f3      	bcs.n	800608c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d901      	bls.n	80060b0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80060b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d11f      	bne.n	80060fa <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01c      	beq.n	80060fa <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80060c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <_PrintUnsigned+0x66>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <_PrintUnsigned+0x66>
        c = '0';
 80060d0:	2330      	movs	r3, #48	; 0x30
 80060d2:	76fb      	strb	r3, [r7, #27]
 80060d4:	e001      	b.n	80060da <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80060d6:	2320      	movs	r3, #32
 80060d8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060da:	e007      	b.n	80060ec <_PrintUnsigned+0x7c>
        FieldWidth--;
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	3b01      	subs	r3, #1
 80060e0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80060e2:	7efb      	ldrb	r3, [r7, #27]
 80060e4:	4619      	mov	r1, r3
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7ff ff46 	bl	8005f78 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <_PrintUnsigned+0x8a>
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d3f0      	bcc.n	80060dc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d903      	bls.n	8006108 <_PrintUnsigned+0x98>
      NumDigits--;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	3b01      	subs	r3, #1
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	e009      	b.n	800611c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	429a      	cmp	r2, r3
 8006118:	d200      	bcs.n	800611c <_PrintUnsigned+0xac>
        break;
 800611a:	e005      	b.n	8006128 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	fb02 f303 	mul.w	r3, r2, r3
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006126:	e7e8      	b.n	80060fa <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006130:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006140:	4a15      	ldr	r2, [pc, #84]	; (8006198 <_PrintUnsigned+0x128>)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	4413      	add	r3, r2
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	4619      	mov	r1, r3
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff ff14 	bl	8005f78 <_StoreChar>
    Digit /= Base;
 8006150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e3      	bne.n	8006128 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d011      	beq.n	800618e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00e      	beq.n	800618e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006170:	e006      	b.n	8006180 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	3b01      	subs	r3, #1
 8006176:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006178:	2120      	movs	r1, #32
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7ff fefc 	bl	8005f78 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <_PrintUnsigned+0x11e>
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	429a      	cmp	r2, r3
 800618c:	d3f1      	bcc.n	8006172 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800618e:	bf00      	nop
 8006190:	3728      	adds	r7, #40	; 0x28
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	08007930 	.word	0x08007930

0800619c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bfb8      	it	lt
 80061b0:	425b      	neglt	r3, r3
 80061b2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061b8:	e007      	b.n	80061ca <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	fb92 f3f3 	sdiv	r3, r2, r3
 80061c2:	613b      	str	r3, [r7, #16]
    Width++;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	3301      	adds	r3, #1
 80061c8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	daf3      	bge.n	80061ba <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d901      	bls.n	80061de <_PrintInt+0x42>
    Width = NumDigits;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <_PrintInt+0x5e>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	db04      	blt.n	80061f4 <_PrintInt+0x58>
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <_PrintInt+0x5e>
    FieldWidth--;
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <_PrintInt+0x6e>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d016      	beq.n	8006238 <_PrintInt+0x9c>
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d111      	bne.n	8006238 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00e      	beq.n	8006238 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800621a:	e006      	b.n	800622a <_PrintInt+0x8e>
        FieldWidth--;
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	3b01      	subs	r3, #1
 8006220:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006222:	2120      	movs	r1, #32
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7ff fea7 	bl	8005f78 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <_PrintInt+0x9c>
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	429a      	cmp	r2, r3
 8006236:	d3f1      	bcc.n	800621c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	da07      	bge.n	800624e <_PrintInt+0xb2>
    v = -v;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	425b      	negs	r3, r3
 8006242:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006244:	212d      	movs	r1, #45	; 0x2d
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff fe96 	bl	8005f78 <_StoreChar>
 800624c:	e008      	b.n	8006260 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006258:	212b      	movs	r1, #43	; 0x2b
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff fe8c 	bl	8005f78 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d019      	beq.n	800629e <_PrintInt+0x102>
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d114      	bne.n	800629e <_PrintInt+0x102>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d111      	bne.n	800629e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00e      	beq.n	800629e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006280:	e006      	b.n	8006290 <_PrintInt+0xf4>
        FieldWidth--;
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	3b01      	subs	r3, #1
 8006286:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006288:	2130      	movs	r1, #48	; 0x30
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff fe74 	bl	8005f78 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <_PrintInt+0x102>
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3f1      	bcc.n	8006282 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fedf 	bl	8006070 <_PrintUnsigned>
}
 80062b2:	bf00      	nop
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b098      	sub	sp, #96	; 0x60
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062c8:	f3ef 8311 	mrs	r3, BASEPRI
 80062cc:	f04f 0120 	mov.w	r1, #32
 80062d0:	f381 8811 	msr	BASEPRI, r1
 80062d4:	633b      	str	r3, [r7, #48]	; 0x30
 80062d6:	48b7      	ldr	r0, [pc, #732]	; (80065b4 <_VPrintTarget+0x2f8>)
 80062d8:	f7ff fc73 	bl	8005bc2 <_PreparePacket>
 80062dc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80062de:	4bb5      	ldr	r3, [pc, #724]	; (80065b4 <_VPrintTarget+0x2f8>)
 80062e0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80062e2:	2300      	movs	r3, #0
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006302:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 8183 	beq.w	8006612 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800630c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006310:	2b25      	cmp	r3, #37	; 0x25
 8006312:	f040 8170 	bne.w	80065f6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006316:	2300      	movs	r3, #0
 8006318:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800631a:	2301      	movs	r3, #1
 800631c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006326:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800632a:	3b23      	subs	r3, #35	; 0x23
 800632c:	2b0d      	cmp	r3, #13
 800632e:	d83f      	bhi.n	80063b0 <_VPrintTarget+0xf4>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <_VPrintTarget+0x7c>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	080063a1 	.word	0x080063a1
 800633c:	080063b1 	.word	0x080063b1
 8006340:	080063b1 	.word	0x080063b1
 8006344:	080063b1 	.word	0x080063b1
 8006348:	080063b1 	.word	0x080063b1
 800634c:	080063b1 	.word	0x080063b1
 8006350:	080063b1 	.word	0x080063b1
 8006354:	080063b1 	.word	0x080063b1
 8006358:	08006391 	.word	0x08006391
 800635c:	080063b1 	.word	0x080063b1
 8006360:	08006371 	.word	0x08006371
 8006364:	080063b1 	.word	0x080063b1
 8006368:	080063b1 	.word	0x080063b1
 800636c:	08006381 	.word	0x08006381
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006372:	f043 0301 	orr.w	r3, r3, #1
 8006376:	64bb      	str	r3, [r7, #72]	; 0x48
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	e01a      	b.n	80063b6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006382:	f043 0302 	orr.w	r3, r3, #2
 8006386:	64bb      	str	r3, [r7, #72]	; 0x48
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e012      	b.n	80063b6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006392:	f043 0304 	orr.w	r3, r3, #4
 8006396:	64bb      	str	r3, [r7, #72]	; 0x48
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e00a      	b.n	80063b6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80063a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a2:	f043 0308 	orr.w	r3, r3, #8
 80063a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e002      	b.n	80063b6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80063b0:	2300      	movs	r3, #0
 80063b2:	653b      	str	r3, [r7, #80]	; 0x50
 80063b4:	bf00      	nop
        }
      } while (v);
 80063b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1b0      	bne.n	800631e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80063bc:	2300      	movs	r3, #0
 80063be:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80063c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063cc:	2b2f      	cmp	r3, #47	; 0x2f
 80063ce:	d912      	bls.n	80063f6 <_VPrintTarget+0x13a>
 80063d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063d4:	2b39      	cmp	r3, #57	; 0x39
 80063d6:	d80e      	bhi.n	80063f6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80063de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	461a      	mov	r2, r3
 80063ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063ee:	4413      	add	r3, r2
 80063f0:	3b30      	subs	r3, #48	; 0x30
 80063f2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80063f4:	e7e4      	b.n	80063c0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80063f6:	2300      	movs	r3, #0
 80063f8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006402:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006406:	2b2e      	cmp	r3, #46	; 0x2e
 8006408:	d11d      	bne.n	8006446 <_VPrintTarget+0x18a>
        sFormat++;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3301      	adds	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800641c:	2b2f      	cmp	r3, #47	; 0x2f
 800641e:	d912      	bls.n	8006446 <_VPrintTarget+0x18a>
 8006420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006424:	2b39      	cmp	r3, #57	; 0x39
 8006426:	d80e      	bhi.n	8006446 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3301      	adds	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800642e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	461a      	mov	r2, r3
 800643a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800643e:	4413      	add	r3, r2
 8006440:	3b30      	subs	r3, #48	; 0x30
 8006442:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006444:	e7e4      	b.n	8006410 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800644e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006452:	2b6c      	cmp	r3, #108	; 0x6c
 8006454:	d003      	beq.n	800645e <_VPrintTarget+0x1a2>
 8006456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800645a:	2b68      	cmp	r3, #104	; 0x68
 800645c:	d107      	bne.n	800646e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3301      	adds	r3, #1
 800646a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800646c:	e7ef      	b.n	800644e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800646e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006472:	2b25      	cmp	r3, #37	; 0x25
 8006474:	f000 80b3 	beq.w	80065de <_VPrintTarget+0x322>
 8006478:	2b25      	cmp	r3, #37	; 0x25
 800647a:	f2c0 80b7 	blt.w	80065ec <_VPrintTarget+0x330>
 800647e:	2b78      	cmp	r3, #120	; 0x78
 8006480:	f300 80b4 	bgt.w	80065ec <_VPrintTarget+0x330>
 8006484:	2b58      	cmp	r3, #88	; 0x58
 8006486:	f2c0 80b1 	blt.w	80065ec <_VPrintTarget+0x330>
 800648a:	3b58      	subs	r3, #88	; 0x58
 800648c:	2b20      	cmp	r3, #32
 800648e:	f200 80ad 	bhi.w	80065ec <_VPrintTarget+0x330>
 8006492:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <_VPrintTarget+0x1dc>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	0800658f 	.word	0x0800658f
 800649c:	080065ed 	.word	0x080065ed
 80064a0:	080065ed 	.word	0x080065ed
 80064a4:	080065ed 	.word	0x080065ed
 80064a8:	080065ed 	.word	0x080065ed
 80064ac:	080065ed 	.word	0x080065ed
 80064b0:	080065ed 	.word	0x080065ed
 80064b4:	080065ed 	.word	0x080065ed
 80064b8:	080065ed 	.word	0x080065ed
 80064bc:	080065ed 	.word	0x080065ed
 80064c0:	080065ed 	.word	0x080065ed
 80064c4:	0800651d 	.word	0x0800651d
 80064c8:	08006543 	.word	0x08006543
 80064cc:	080065ed 	.word	0x080065ed
 80064d0:	080065ed 	.word	0x080065ed
 80064d4:	080065ed 	.word	0x080065ed
 80064d8:	080065ed 	.word	0x080065ed
 80064dc:	080065ed 	.word	0x080065ed
 80064e0:	080065ed 	.word	0x080065ed
 80064e4:	080065ed 	.word	0x080065ed
 80064e8:	080065ed 	.word	0x080065ed
 80064ec:	080065ed 	.word	0x080065ed
 80064f0:	080065ed 	.word	0x080065ed
 80064f4:	080065ed 	.word	0x080065ed
 80064f8:	080065b9 	.word	0x080065b9
 80064fc:	080065ed 	.word	0x080065ed
 8006500:	080065ed 	.word	0x080065ed
 8006504:	080065ed 	.word	0x080065ed
 8006508:	080065ed 	.word	0x080065ed
 800650c:	08006569 	.word	0x08006569
 8006510:	080065ed 	.word	0x080065ed
 8006514:	080065ed 	.word	0x080065ed
 8006518:	0800658f 	.word	0x0800658f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	1d19      	adds	r1, r3, #4
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6011      	str	r1, [r2, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800652a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006530:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006534:	f107 0314 	add.w	r3, r7, #20
 8006538:	4611      	mov	r1, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff fd1c 	bl	8005f78 <_StoreChar>
        break;
 8006540:	e055      	b.n	80065ee <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	1d19      	adds	r1, r3, #4
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6011      	str	r1, [r2, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006550:	f107 0014 	add.w	r0, r7, #20
 8006554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655e:	220a      	movs	r2, #10
 8006560:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006562:	f7ff fe1b 	bl	800619c <_PrintInt>
        break;
 8006566:	e042      	b.n	80065ee <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	1d19      	adds	r1, r3, #4
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6011      	str	r1, [r2, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006576:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006578:	f107 0014 	add.w	r0, r7, #20
 800657c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006586:	220a      	movs	r2, #10
 8006588:	f7ff fd72 	bl	8006070 <_PrintUnsigned>
        break;
 800658c:	e02f      	b.n	80065ee <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	1d19      	adds	r1, r3, #4
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6011      	str	r1, [r2, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800659c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800659e:	f107 0014 	add.w	r0, r7, #20
 80065a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	2210      	movs	r2, #16
 80065ae:	f7ff fd5f 	bl	8006070 <_PrintUnsigned>
        break;
 80065b2:	e01c      	b.n	80065ee <_VPrintTarget+0x332>
 80065b4:	20014298 	.word	0x20014298
      case 'p':
        v = va_arg(*pParamList, int);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	1d19      	adds	r1, r3, #4
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80065c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065c8:	f107 0014 	add.w	r0, r7, #20
 80065cc:	2300      	movs	r3, #0
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	2308      	movs	r3, #8
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2308      	movs	r3, #8
 80065d6:	2210      	movs	r2, #16
 80065d8:	f7ff fd4a 	bl	8006070 <_PrintUnsigned>
        break;
 80065dc:	e007      	b.n	80065ee <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80065de:	f107 0314 	add.w	r3, r7, #20
 80065e2:	2125      	movs	r1, #37	; 0x25
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff fcc7 	bl	8005f78 <_StoreChar>
        break;
 80065ea:	e000      	b.n	80065ee <_VPrintTarget+0x332>
      default:
        break;
 80065ec:	bf00      	nop
      }
      sFormat++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e007      	b.n	8006606 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80065f6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80065fa:	f107 0314 	add.w	r3, r7, #20
 80065fe:	4611      	mov	r1, r2
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fcb9 	bl	8005f78 <_StoreChar>
    }
  } while (*sFormat);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	f47f ae72 	bne.w	80062f4 <_VPrintTarget+0x38>
 8006610:	e000      	b.n	8006614 <_VPrintTarget+0x358>
      break;
 8006612:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	2b00      	cmp	r3, #0
 8006618:	d041      	beq.n	800669e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800661a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	643b      	str	r3, [r7, #64]	; 0x40
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662a:	e00b      	b.n	8006644 <_VPrintTarget+0x388>
 800662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662e:	b2da      	uxtb	r2, r3
 8006630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006632:	1c59      	adds	r1, r3, #1
 8006634:	6439      	str	r1, [r7, #64]	; 0x40
 8006636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006640:	09db      	lsrs	r3, r3, #7
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006646:	2b7f      	cmp	r3, #127	; 0x7f
 8006648:	d8f0      	bhi.n	800662c <_VPrintTarget+0x370>
 800664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	643a      	str	r2, [r7, #64]	; 0x40
 8006650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006658:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	63bb      	str	r3, [r7, #56]	; 0x38
 800665e:	2300      	movs	r3, #0
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
 8006662:	e00b      	b.n	800667c <_VPrintTarget+0x3c0>
 8006664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006666:	b2da      	uxtb	r2, r3
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	1c59      	adds	r1, r3, #1
 800666c:	63b9      	str	r1, [r7, #56]	; 0x38
 800666e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	09db      	lsrs	r3, r3, #7
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667e:	2b7f      	cmp	r3, #127	; 0x7f
 8006680:	d8f0      	bhi.n	8006664 <_VPrintTarget+0x3a8>
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	63ba      	str	r2, [r7, #56]	; 0x38
 8006688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	69b9      	ldr	r1, [r7, #24]
 8006696:	221a      	movs	r2, #26
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fb85 	bl	8005da8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80066a4:	bf00      	nop
 80066a6:	3758      	adds	r7, #88	; 0x58
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066ba:	2300      	movs	r3, #0
 80066bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066c0:	4917      	ldr	r1, [pc, #92]	; (8006720 <SEGGER_SYSVIEW_Init+0x74>)
 80066c2:	4818      	ldr	r0, [pc, #96]	; (8006724 <SEGGER_SYSVIEW_Init+0x78>)
 80066c4:	f7ff f93c 	bl	8005940 <SEGGER_RTT_AllocUpBuffer>
 80066c8:	4603      	mov	r3, r0
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	4b16      	ldr	r3, [pc, #88]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066ce:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80066d0:	4b15      	ldr	r3, [pc, #84]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066d2:	785a      	ldrb	r2, [r3, #1]
 80066d4:	4b14      	ldr	r3, [pc, #80]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066d6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066d8:	4b13      	ldr	r3, [pc, #76]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066da:	7e1b      	ldrb	r3, [r3, #24]
 80066dc:	4618      	mov	r0, r3
 80066de:	2300      	movs	r3, #0
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	2308      	movs	r3, #8
 80066e4:	4a11      	ldr	r2, [pc, #68]	; (800672c <SEGGER_SYSVIEW_Init+0x80>)
 80066e6:	490f      	ldr	r1, [pc, #60]	; (8006724 <SEGGER_SYSVIEW_Init+0x78>)
 80066e8:	f7ff f9ae 	bl	8005a48 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80066ec:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <SEGGER_SYSVIEW_Init+0x84>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a0c      	ldr	r2, [pc, #48]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066f8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80066fa:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006700:	4a09      	ldr	r2, [pc, #36]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006706:	4a08      	ldr	r2, [pc, #32]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800670c:	4a06      	ldr	r2, [pc, #24]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006712:	4b05      	ldr	r3, [pc, #20]	; (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006718:	bf00      	nop
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20013260 	.word	0x20013260
 8006724:	080078f8 	.word	0x080078f8
 8006728:	20014268 	.word	0x20014268
 800672c:	20014260 	.word	0x20014260
 8006730:	e0001004 	.word	0xe0001004

08006734 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800673c:	4a04      	ldr	r2, [pc, #16]	; (8006750 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6113      	str	r3, [r2, #16]
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20014268 	.word	0x20014268

08006754 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800675c:	f3ef 8311 	mrs	r3, BASEPRI
 8006760:	f04f 0120 	mov.w	r1, #32
 8006764:	f381 8811 	msr	BASEPRI, r1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	4808      	ldr	r0, [pc, #32]	; (800678c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800676c:	f7ff fa29 	bl	8005bc2 <_PreparePacket>
 8006770:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	68b8      	ldr	r0, [r7, #8]
 8006778:	f7ff fb16 	bl	8005da8 <_SendPacket>
  RECORD_END();
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f383 8811 	msr	BASEPRI, r3
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20014298 	.word	0x20014298

08006790 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800679a:	f3ef 8311 	mrs	r3, BASEPRI
 800679e:	f04f 0120 	mov.w	r1, #32
 80067a2:	f381 8811 	msr	BASEPRI, r1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	4816      	ldr	r0, [pc, #88]	; (8006804 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80067aa:	f7ff fa0a 	bl	8005bc2 <_PreparePacket>
 80067ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	e00b      	b.n	80067d6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	1c59      	adds	r1, r3, #1
 80067c6:	61f9      	str	r1, [r7, #28]
 80067c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	09db      	lsrs	r3, r3, #7
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b7f      	cmp	r3, #127	; 0x7f
 80067da:	d8f0      	bhi.n	80067be <SEGGER_SYSVIEW_RecordU32+0x2e>
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	61fa      	str	r2, [r7, #28]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68f9      	ldr	r1, [r7, #12]
 80067f0:	6938      	ldr	r0, [r7, #16]
 80067f2:	f7ff fad9 	bl	8005da8 <_SendPacket>
  RECORD_END();
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f383 8811 	msr	BASEPRI, r3
}
 80067fc:	bf00      	nop
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20014298 	.word	0x20014298

08006808 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b08c      	sub	sp, #48	; 0x30
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006814:	f3ef 8311 	mrs	r3, BASEPRI
 8006818:	f04f 0120 	mov.w	r1, #32
 800681c:	f381 8811 	msr	BASEPRI, r1
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	4825      	ldr	r0, [pc, #148]	; (80068b8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006824:	f7ff f9cd 	bl	8005bc2 <_PreparePacket>
 8006828:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
 8006836:	e00b      	b.n	8006850 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	b2da      	uxtb	r2, r3
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	1c59      	adds	r1, r3, #1
 8006840:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	09db      	lsrs	r3, r3, #7
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	2b7f      	cmp	r3, #127	; 0x7f
 8006854:	d8f0      	bhi.n	8006838 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800685c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	623b      	str	r3, [r7, #32]
 800686e:	e00b      	b.n	8006888 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	b2da      	uxtb	r2, r3
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	1c59      	adds	r1, r3, #1
 8006878:	6279      	str	r1, [r7, #36]	; 0x24
 800687a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	09db      	lsrs	r3, r3, #7
 8006886:	623b      	str	r3, [r7, #32]
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	2b7f      	cmp	r3, #127	; 0x7f
 800688c:	d8f0      	bhi.n	8006870 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	627a      	str	r2, [r7, #36]	; 0x24
 8006894:	6a3a      	ldr	r2, [r7, #32]
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	6979      	ldr	r1, [r7, #20]
 80068a2:	69b8      	ldr	r0, [r7, #24]
 80068a4:	f7ff fa80 	bl	8005da8 <_SendPacket>
  RECORD_END();
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f383 8811 	msr	BASEPRI, r3
}
 80068ae:	bf00      	nop
 80068b0:	3730      	adds	r7, #48	; 0x30
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20014298 	.word	0x20014298

080068bc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08e      	sub	sp, #56	; 0x38
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80068ca:	f3ef 8311 	mrs	r3, BASEPRI
 80068ce:	f04f 0120 	mov.w	r1, #32
 80068d2:	f381 8811 	msr	BASEPRI, r1
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	4832      	ldr	r0, [pc, #200]	; (80069a4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80068da:	f7ff f972 	bl	8005bc2 <_PreparePacket>
 80068de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30
 80068ec:	e00b      	b.n	8006906 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	1c59      	adds	r1, r3, #1
 80068f6:	6379      	str	r1, [r7, #52]	; 0x34
 80068f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	09db      	lsrs	r3, r3, #7
 8006904:	633b      	str	r3, [r7, #48]	; 0x30
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	2b7f      	cmp	r3, #127	; 0x7f
 800690a:	d8f0      	bhi.n	80068ee <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800690c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	637a      	str	r2, [r7, #52]	; 0x34
 8006912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
 8006924:	e00b      	b.n	800693e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	b2da      	uxtb	r2, r3
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	1c59      	adds	r1, r3, #1
 800692e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	09db      	lsrs	r3, r3, #7
 800693c:	62bb      	str	r3, [r7, #40]	; 0x28
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	2b7f      	cmp	r3, #127	; 0x7f
 8006942:	d8f0      	bhi.n	8006926 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800694a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	623b      	str	r3, [r7, #32]
 800695c:	e00b      	b.n	8006976 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	1c59      	adds	r1, r3, #1
 8006966:	6279      	str	r1, [r7, #36]	; 0x24
 8006968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	09db      	lsrs	r3, r3, #7
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b7f      	cmp	r3, #127	; 0x7f
 800697a:	d8f0      	bhi.n	800695e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	627a      	str	r2, [r7, #36]	; 0x24
 8006982:	6a3a      	ldr	r2, [r7, #32]
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	6979      	ldr	r1, [r7, #20]
 8006990:	69b8      	ldr	r0, [r7, #24]
 8006992:	f7ff fa09 	bl	8005da8 <_SendPacket>
  RECORD_END();
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	f383 8811 	msr	BASEPRI, r3
}
 800699c:	bf00      	nop
 800699e:	3738      	adds	r7, #56	; 0x38
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20014298 	.word	0x20014298

080069a8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b090      	sub	sp, #64	; 0x40
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069b6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ba:	f04f 0120 	mov.w	r1, #32
 80069be:	f381 8811 	msr	BASEPRI, r1
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	4840      	ldr	r0, [pc, #256]	; (8006ac8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80069c6:	f7ff f8fc 	bl	8005bc2 <_PreparePacket>
 80069ca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d8:	e00b      	b.n	80069f2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e0:	1c59      	adds	r1, r3, #1
 80069e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80069e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	09db      	lsrs	r3, r3, #7
 80069f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	2b7f      	cmp	r3, #127	; 0x7f
 80069f6:	d8f0      	bhi.n	80069da <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80069f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a10:	e00b      	b.n	8006a2a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a18:	1c59      	adds	r1, r3, #1
 8006a1a:	6379      	str	r1, [r7, #52]	; 0x34
 8006a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	09db      	lsrs	r3, r3, #7
 8006a28:	633b      	str	r3, [r7, #48]	; 0x30
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a2e:	d8f0      	bhi.n	8006a12 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	637a      	str	r2, [r7, #52]	; 0x34
 8006a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a48:	e00b      	b.n	8006a62 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	1c59      	adds	r1, r3, #1
 8006a52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	09db      	lsrs	r3, r3, #7
 8006a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	2b7f      	cmp	r3, #127	; 0x7f
 8006a66:	d8f0      	bhi.n	8006a4a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a7e:	623b      	str	r3, [r7, #32]
 8006a80:	e00b      	b.n	8006a9a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	6279      	str	r1, [r7, #36]	; 0x24
 8006a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	623b      	str	r3, [r7, #32]
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a9e:	d8f0      	bhi.n	8006a82 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	627a      	str	r2, [r7, #36]	; 0x24
 8006aa6:	6a3a      	ldr	r2, [r7, #32]
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	6979      	ldr	r1, [r7, #20]
 8006ab4:	69b8      	ldr	r0, [r7, #24]
 8006ab6:	f7ff f977 	bl	8005da8 <_SendPacket>
  RECORD_END();
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	f383 8811 	msr	BASEPRI, r3
}
 8006ac0:	bf00      	nop
 8006ac2:	3740      	adds	r7, #64	; 0x40
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20014298 	.word	0x20014298

08006acc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08c      	sub	sp, #48	; 0x30
 8006ad0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006ad2:	4b59      	ldr	r3, [pc, #356]	; (8006c38 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8006adc:	f04f 0120 	mov.w	r1, #32
 8006ae0:	f381 8811 	msr	BASEPRI, r1
 8006ae4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006ae6:	4b54      	ldr	r3, [pc, #336]	; (8006c38 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ae8:	785b      	ldrb	r3, [r3, #1]
 8006aea:	220a      	movs	r2, #10
 8006aec:	4953      	ldr	r1, [pc, #332]	; (8006c3c <SEGGER_SYSVIEW_Start+0x170>)
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7f9 fb8e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006afa:	f7fe fbf5 	bl	80052e8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006afe:	200a      	movs	r0, #10
 8006b00:	f7ff fe28 	bl	8006754 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b04:	f3ef 8311 	mrs	r3, BASEPRI
 8006b08:	f04f 0120 	mov.w	r1, #32
 8006b0c:	f381 8811 	msr	BASEPRI, r1
 8006b10:	60bb      	str	r3, [r7, #8]
 8006b12:	484b      	ldr	r0, [pc, #300]	; (8006c40 <SEGGER_SYSVIEW_Start+0x174>)
 8006b14:	f7ff f855 	bl	8005bc2 <_PreparePacket>
 8006b18:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b22:	4b45      	ldr	r3, [pc, #276]	; (8006c38 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b28:	e00b      	b.n	8006b42 <SEGGER_SYSVIEW_Start+0x76>
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	1c59      	adds	r1, r3, #1
 8006b32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	09db      	lsrs	r3, r3, #7
 8006b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	2b7f      	cmp	r3, #127	; 0x7f
 8006b46:	d8f0      	bhi.n	8006b2a <SEGGER_SYSVIEW_Start+0x5e>
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b56:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5c:	4b36      	ldr	r3, [pc, #216]	; (8006c38 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	623b      	str	r3, [r7, #32]
 8006b62:	e00b      	b.n	8006b7c <SEGGER_SYSVIEW_Start+0xb0>
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	1c59      	adds	r1, r3, #1
 8006b6c:	6279      	str	r1, [r7, #36]	; 0x24
 8006b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	09db      	lsrs	r3, r3, #7
 8006b7a:	623b      	str	r3, [r7, #32]
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b80:	d8f0      	bhi.n	8006b64 <SEGGER_SYSVIEW_Start+0x98>
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	627a      	str	r2, [r7, #36]	; 0x24
 8006b88:	6a3a      	ldr	r2, [r7, #32]
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	61fb      	str	r3, [r7, #28]
 8006b96:	4b28      	ldr	r3, [pc, #160]	; (8006c38 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	61bb      	str	r3, [r7, #24]
 8006b9c:	e00b      	b.n	8006bb6 <SEGGER_SYSVIEW_Start+0xea>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	1c59      	adds	r1, r3, #1
 8006ba6:	61f9      	str	r1, [r7, #28]
 8006ba8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	09db      	lsrs	r3, r3, #7
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8006bba:	d8f0      	bhi.n	8006b9e <SEGGER_SYSVIEW_Start+0xd2>
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	61fa      	str	r2, [r7, #28]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	e00b      	b.n	8006bee <SEGGER_SYSVIEW_Start+0x122>
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	1c59      	adds	r1, r3, #1
 8006bde:	6179      	str	r1, [r7, #20]
 8006be0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	09db      	lsrs	r3, r3, #7
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf2:	d8f0      	bhi.n	8006bd6 <SEGGER_SYSVIEW_Start+0x10a>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	617a      	str	r2, [r7, #20]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c04:	2218      	movs	r2, #24
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff f8cd 	bl	8005da8 <_SendPacket>
      RECORD_END();
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c14:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006c22:	f000 f9eb 	bl	8006ffc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006c26:	f000 f9b1 	bl	8006f8c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006c2a:	f000 fc83 	bl	8007534 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006c2e:	bf00      	nop
 8006c30:	3730      	adds	r7, #48	; 0x30
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20014268 	.word	0x20014268
 8006c3c:	08007924 	.word	0x08007924
 8006c40:	20014298 	.word	0x20014298

08006c44 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4e:	f04f 0120 	mov.w	r1, #32
 8006c52:	f381 8811 	msr	BASEPRI, r1
 8006c56:	607b      	str	r3, [r7, #4]
 8006c58:	480b      	ldr	r0, [pc, #44]	; (8006c88 <SEGGER_SYSVIEW_Stop+0x44>)
 8006c5a:	f7fe ffb2 	bl	8005bc2 <_PreparePacket>
 8006c5e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006c60:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <SEGGER_SYSVIEW_Stop+0x48>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d007      	beq.n	8006c78 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006c68:	220b      	movs	r2, #11
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6838      	ldr	r0, [r7, #0]
 8006c6e:	f7ff f89b 	bl	8005da8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006c72:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <SEGGER_SYSVIEW_Stop+0x48>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f383 8811 	msr	BASEPRI, r3
}
 8006c7e:	bf00      	nop
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20014298 	.word	0x20014298
 8006c8c:	20014268 	.word	0x20014268

08006c90 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08c      	sub	sp, #48	; 0x30
 8006c94:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c96:	f3ef 8311 	mrs	r3, BASEPRI
 8006c9a:	f04f 0120 	mov.w	r1, #32
 8006c9e:	f381 8811 	msr	BASEPRI, r1
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	4845      	ldr	r0, [pc, #276]	; (8006dbc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006ca6:	f7fe ff8c 	bl	8005bc2 <_PreparePacket>
 8006caa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb4:	4b42      	ldr	r3, [pc, #264]	; (8006dc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cba:	e00b      	b.n	8006cd4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	1c59      	adds	r1, r3, #1
 8006cc4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	09db      	lsrs	r3, r3, #7
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd8:	d8f0      	bhi.n	8006cbc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
 8006cee:	4b34      	ldr	r3, [pc, #208]	; (8006dc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	623b      	str	r3, [r7, #32]
 8006cf4:	e00b      	b.n	8006d0e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	1c59      	adds	r1, r3, #1
 8006cfe:	6279      	str	r1, [r7, #36]	; 0x24
 8006d00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	09db      	lsrs	r3, r3, #7
 8006d0c:	623b      	str	r3, [r7, #32]
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	2b7f      	cmp	r3, #127	; 0x7f
 8006d12:	d8f0      	bhi.n	8006cf6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	627a      	str	r2, [r7, #36]	; 0x24
 8006d1a:	6a3a      	ldr	r2, [r7, #32]
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	61bb      	str	r3, [r7, #24]
 8006d2e:	e00b      	b.n	8006d48 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	1c59      	adds	r1, r3, #1
 8006d38:	61f9      	str	r1, [r7, #28]
 8006d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	09db      	lsrs	r3, r3, #7
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d4c:	d8f0      	bhi.n	8006d30 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	61fa      	str	r2, [r7, #28]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	2300      	movs	r3, #0
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	e00b      	b.n	8006d80 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	1c59      	adds	r1, r3, #1
 8006d70:	6179      	str	r1, [r7, #20]
 8006d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	09db      	lsrs	r3, r3, #7
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b7f      	cmp	r3, #127	; 0x7f
 8006d84:	d8f0      	bhi.n	8006d68 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	617a      	str	r2, [r7, #20]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006d96:	2218      	movs	r2, #24
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	68b8      	ldr	r0, [r7, #8]
 8006d9c:	f7ff f804 	bl	8005da8 <_SendPacket>
  RECORD_END();
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006da6:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006dae:	4b04      	ldr	r3, [pc, #16]	; (8006dc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	4798      	blx	r3
  }
}
 8006db4:	bf00      	nop
 8006db6:	3730      	adds	r7, #48	; 0x30
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20014298 	.word	0x20014298
 8006dc0:	20014268 	.word	0x20014268

08006dc4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b092      	sub	sp, #72	; 0x48
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8006dd0:	f04f 0120 	mov.w	r1, #32
 8006dd4:	f381 8811 	msr	BASEPRI, r1
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	486a      	ldr	r0, [pc, #424]	; (8006f84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006ddc:	f7fe fef1 	bl	8005bc2 <_PreparePacket>
 8006de0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	4b66      	ldr	r3, [pc, #408]	; (8006f88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	643b      	str	r3, [r7, #64]	; 0x40
 8006df6:	e00b      	b.n	8006e10 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dfe:	1c59      	adds	r1, r3, #1
 8006e00:	6479      	str	r1, [r7, #68]	; 0x44
 8006e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0c:	09db      	lsrs	r3, r3, #7
 8006e0e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e12:	2b7f      	cmp	r3, #127	; 0x7f
 8006e14:	d8f0      	bhi.n	8006df8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	647a      	str	r2, [r7, #68]	; 0x44
 8006e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e30:	e00b      	b.n	8006e4a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e38:	1c59      	adds	r1, r3, #1
 8006e3a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	09db      	lsrs	r3, r3, #7
 8006e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e4e:	d8f0      	bhi.n	8006e32 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	4619      	mov	r1, r3
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7fe fe5d 	bl	8005b28 <_EncodeStr>
 8006e6e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006e70:	2209      	movs	r2, #9
 8006e72:	68f9      	ldr	r1, [r7, #12]
 8006e74:	6938      	ldr	r0, [r7, #16]
 8006e76:	f7fe ff97 	bl	8005da8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	4b40      	ldr	r3, [pc, #256]	; (8006f88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e8e:	e00b      	b.n	8006ea8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	1c59      	adds	r1, r3, #1
 8006e98:	6379      	str	r1, [r7, #52]	; 0x34
 8006e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	09db      	lsrs	r3, r3, #7
 8006ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8006eac:	d8f0      	bhi.n	8006e90 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	637a      	str	r2, [r7, #52]	; 0x34
 8006eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ec8:	e00b      	b.n	8006ee2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed0:	1c59      	adds	r1, r3, #1
 8006ed2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ed4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	09db      	lsrs	r3, r3, #7
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee6:	d8f0      	bhi.n	8006eca <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	623b      	str	r3, [r7, #32]
 8006f02:	e00b      	b.n	8006f1c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	1c59      	adds	r1, r3, #1
 8006f0c:	6279      	str	r1, [r7, #36]	; 0x24
 8006f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	09db      	lsrs	r3, r3, #7
 8006f1a:	623b      	str	r3, [r7, #32]
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f20:	d8f0      	bhi.n	8006f04 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	627a      	str	r2, [r7, #36]	; 0x24
 8006f28:	6a3a      	ldr	r2, [r7, #32]
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	2300      	movs	r3, #0
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	e00b      	b.n	8006f54 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	1c59      	adds	r1, r3, #1
 8006f44:	61f9      	str	r1, [r7, #28]
 8006f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	09db      	lsrs	r3, r3, #7
 8006f52:	61bb      	str	r3, [r7, #24]
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b7f      	cmp	r3, #127	; 0x7f
 8006f58:	d8f0      	bhi.n	8006f3c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	61fa      	str	r2, [r7, #28]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006f6a:	2215      	movs	r2, #21
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f7fe ff1a 	bl	8005da8 <_SendPacket>
  RECORD_END();
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f383 8811 	msr	BASEPRI, r3
}
 8006f7a:	bf00      	nop
 8006f7c:	3748      	adds	r7, #72	; 0x48
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20014298 	.word	0x20014298
 8006f88:	20014268 	.word	0x20014268

08006f8c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006fa2:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	4798      	blx	r3
  }
}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20014268 	.word	0x20014268

08006fb4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fc0:	f04f 0120 	mov.w	r1, #32
 8006fc4:	f381 8811 	msr	BASEPRI, r1
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	480b      	ldr	r0, [pc, #44]	; (8006ff8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006fcc:	f7fe fdf9 	bl	8005bc2 <_PreparePacket>
 8006fd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fd2:	2280      	movs	r2, #128	; 0x80
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	6938      	ldr	r0, [r7, #16]
 8006fd8:	f7fe fda6 	bl	8005b28 <_EncodeStr>
 8006fdc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006fde:	220e      	movs	r2, #14
 8006fe0:	68f9      	ldr	r1, [r7, #12]
 8006fe2:	6938      	ldr	r0, [r7, #16]
 8006fe4:	f7fe fee0 	bl	8005da8 <_SendPacket>
  RECORD_END();
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f383 8811 	msr	BASEPRI, r3
}
 8006fee:	bf00      	nop
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20014298 	.word	0x20014298

08006ffc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006ffc:	b590      	push	{r4, r7, lr}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01a      	beq.n	8007040 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800700a:	4b13      	ldr	r3, [pc, #76]	; (8007058 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d015      	beq.n	8007040 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007014:	4b10      	ldr	r3, [pc, #64]	; (8007058 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4798      	blx	r3
 800701c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007020:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007022:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	000a      	movs	r2, r1
 8007030:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007032:	4613      	mov	r3, r2
 8007034:	461a      	mov	r2, r3
 8007036:	4621      	mov	r1, r4
 8007038:	200d      	movs	r0, #13
 800703a:	f7ff fbe5 	bl	8006808 <SEGGER_SYSVIEW_RecordU32x2>
 800703e:	e006      	b.n	800704e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4619      	mov	r1, r3
 8007046:	200c      	movs	r0, #12
 8007048:	f7ff fba2 	bl	8006790 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	bd90      	pop	{r4, r7, pc}
 8007056:	bf00      	nop
 8007058:	20014268 	.word	0x20014268
 800705c:	e0001004 	.word	0xe0001004

08007060 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007066:	f3ef 8311 	mrs	r3, BASEPRI
 800706a:	f04f 0120 	mov.w	r1, #32
 800706e:	f381 8811 	msr	BASEPRI, r1
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	4819      	ldr	r0, [pc, #100]	; (80070dc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007076:	f7fe fda4 	bl	8005bc2 <_PreparePacket>
 800707a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007080:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007088:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	e00b      	b.n	80070ac <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	6179      	str	r1, [r7, #20]
 800709e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	09db      	lsrs	r3, r3, #7
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b7f      	cmp	r3, #127	; 0x7f
 80070b0:	d8f0      	bhi.n	8007094 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	617a      	str	r2, [r7, #20]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80070c2:	2202      	movs	r2, #2
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	68b8      	ldr	r0, [r7, #8]
 80070c8:	f7fe fe6e 	bl	8005da8 <_SendPacket>
  RECORD_END();
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f383 8811 	msr	BASEPRI, r3
}
 80070d2:	bf00      	nop
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20014298 	.word	0x20014298
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070ea:	f3ef 8311 	mrs	r3, BASEPRI
 80070ee:	f04f 0120 	mov.w	r1, #32
 80070f2:	f381 8811 	msr	BASEPRI, r1
 80070f6:	607b      	str	r3, [r7, #4]
 80070f8:	4807      	ldr	r0, [pc, #28]	; (8007118 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80070fa:	f7fe fd62 	bl	8005bc2 <_PreparePacket>
 80070fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007100:	2203      	movs	r2, #3
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6838      	ldr	r0, [r7, #0]
 8007106:	f7fe fe4f 	bl	8005da8 <_SendPacket>
  RECORD_END();
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f383 8811 	msr	BASEPRI, r3
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20014298 	.word	0x20014298

0800711c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007122:	f3ef 8311 	mrs	r3, BASEPRI
 8007126:	f04f 0120 	mov.w	r1, #32
 800712a:	f381 8811 	msr	BASEPRI, r1
 800712e:	607b      	str	r3, [r7, #4]
 8007130:	4807      	ldr	r0, [pc, #28]	; (8007150 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007132:	f7fe fd46 	bl	8005bc2 <_PreparePacket>
 8007136:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007138:	2212      	movs	r2, #18
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6838      	ldr	r0, [r7, #0]
 800713e:	f7fe fe33 	bl	8005da8 <_SendPacket>
  RECORD_END();
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f383 8811 	msr	BASEPRI, r3
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20014298 	.word	0x20014298

08007154 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800715a:	f3ef 8311 	mrs	r3, BASEPRI
 800715e:	f04f 0120 	mov.w	r1, #32
 8007162:	f381 8811 	msr	BASEPRI, r1
 8007166:	607b      	str	r3, [r7, #4]
 8007168:	4807      	ldr	r0, [pc, #28]	; (8007188 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800716a:	f7fe fd2a 	bl	8005bc2 <_PreparePacket>
 800716e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007170:	2211      	movs	r2, #17
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6838      	ldr	r0, [r7, #0]
 8007176:	f7fe fe17 	bl	8005da8 <_SendPacket>
  RECORD_END();
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f383 8811 	msr	BASEPRI, r3
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20014298 	.word	0x20014298

0800718c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007194:	f3ef 8311 	mrs	r3, BASEPRI
 8007198:	f04f 0120 	mov.w	r1, #32
 800719c:	f381 8811 	msr	BASEPRI, r1
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	4819      	ldr	r0, [pc, #100]	; (8007208 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80071a4:	f7fe fd0d 	bl	8005bc2 <_PreparePacket>
 80071a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071ae:	4b17      	ldr	r3, [pc, #92]	; (800720c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	e00b      	b.n	80071da <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	1c59      	adds	r1, r3, #1
 80071ca:	61f9      	str	r1, [r7, #28]
 80071cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	09db      	lsrs	r3, r3, #7
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b7f      	cmp	r3, #127	; 0x7f
 80071de:	d8f0      	bhi.n	80071c2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	61fa      	str	r2, [r7, #28]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	b2d2      	uxtb	r2, r2
 80071ea:	701a      	strb	r2, [r3, #0]
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80071f0:	2208      	movs	r2, #8
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	6938      	ldr	r0, [r7, #16]
 80071f6:	f7fe fdd7 	bl	8005da8 <_SendPacket>
  RECORD_END();
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f383 8811 	msr	BASEPRI, r3
}
 8007200:	bf00      	nop
 8007202:	3720      	adds	r7, #32
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20014298 	.word	0x20014298
 800720c:	20014268 	.word	0x20014268

08007210 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007218:	f3ef 8311 	mrs	r3, BASEPRI
 800721c:	f04f 0120 	mov.w	r1, #32
 8007220:	f381 8811 	msr	BASEPRI, r1
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	4819      	ldr	r0, [pc, #100]	; (800728c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007228:	f7fe fccb 	bl	8005bc2 <_PreparePacket>
 800722c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007232:	4b17      	ldr	r3, [pc, #92]	; (8007290 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	61bb      	str	r3, [r7, #24]
 8007244:	e00b      	b.n	800725e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	1c59      	adds	r1, r3, #1
 800724e:	61f9      	str	r1, [r7, #28]
 8007250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	09db      	lsrs	r3, r3, #7
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b7f      	cmp	r3, #127	; 0x7f
 8007262:	d8f0      	bhi.n	8007246 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	61fa      	str	r2, [r7, #28]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007274:	2204      	movs	r2, #4
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6938      	ldr	r0, [r7, #16]
 800727a:	f7fe fd95 	bl	8005da8 <_SendPacket>
  RECORD_END();
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f383 8811 	msr	BASEPRI, r3
}
 8007284:	bf00      	nop
 8007286:	3720      	adds	r7, #32
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20014298 	.word	0x20014298
 8007290:	20014268 	.word	0x20014268

08007294 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800729c:	f3ef 8311 	mrs	r3, BASEPRI
 80072a0:	f04f 0120 	mov.w	r1, #32
 80072a4:	f381 8811 	msr	BASEPRI, r1
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	4819      	ldr	r0, [pc, #100]	; (8007310 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80072ac:	f7fe fc89 	bl	8005bc2 <_PreparePacket>
 80072b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072b6:	4b17      	ldr	r3, [pc, #92]	; (8007314 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	e00b      	b.n	80072e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	1c59      	adds	r1, r3, #1
 80072d2:	61f9      	str	r1, [r7, #28]
 80072d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	09db      	lsrs	r3, r3, #7
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b7f      	cmp	r3, #127	; 0x7f
 80072e6:	d8f0      	bhi.n	80072ca <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	61fa      	str	r2, [r7, #28]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	701a      	strb	r2, [r3, #0]
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80072f8:	2206      	movs	r2, #6
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	6938      	ldr	r0, [r7, #16]
 80072fe:	f7fe fd53 	bl	8005da8 <_SendPacket>
  RECORD_END();
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f383 8811 	msr	BASEPRI, r3
}
 8007308:	bf00      	nop
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20014298 	.word	0x20014298
 8007314:	20014268 	.word	0x20014268

08007318 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007322:	f3ef 8311 	mrs	r3, BASEPRI
 8007326:	f04f 0120 	mov.w	r1, #32
 800732a:	f381 8811 	msr	BASEPRI, r1
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	4827      	ldr	r0, [pc, #156]	; (80073d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007332:	f7fe fc46 	bl	8005bc2 <_PreparePacket>
 8007336:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800733c:	4b25      	ldr	r3, [pc, #148]	; (80073d4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	623b      	str	r3, [r7, #32]
 800734e:	e00b      	b.n	8007368 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	b2da      	uxtb	r2, r3
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	1c59      	adds	r1, r3, #1
 8007358:	6279      	str	r1, [r7, #36]	; 0x24
 800735a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	09db      	lsrs	r3, r3, #7
 8007366:	623b      	str	r3, [r7, #32]
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	2b7f      	cmp	r3, #127	; 0x7f
 800736c:	d8f0      	bhi.n	8007350 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	627a      	str	r2, [r7, #36]	; 0x24
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e00b      	b.n	80073a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	b2da      	uxtb	r2, r3
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	61f9      	str	r1, [r7, #28]
 8007392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	09db      	lsrs	r3, r3, #7
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2b7f      	cmp	r3, #127	; 0x7f
 80073a4:	d8f0      	bhi.n	8007388 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	61fa      	str	r2, [r7, #28]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80073b6:	2207      	movs	r2, #7
 80073b8:	68f9      	ldr	r1, [r7, #12]
 80073ba:	6938      	ldr	r0, [r7, #16]
 80073bc:	f7fe fcf4 	bl	8005da8 <_SendPacket>
  RECORD_END();
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f383 8811 	msr	BASEPRI, r3
}
 80073c6:	bf00      	nop
 80073c8:	3728      	adds	r7, #40	; 0x28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20014298 	.word	0x20014298
 80073d4:	20014268 	.word	0x20014268

080073d8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80073e0:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	1ad3      	subs	r3, r2, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	20014268 	.word	0x20014268

080073f8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08c      	sub	sp, #48	; 0x30
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007402:	4b3b      	ldr	r3, [pc, #236]	; (80074f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d06d      	beq.n	80074e6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800740a:	4b39      	ldr	r3, [pc, #228]	; (80074f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007410:	2300      	movs	r3, #0
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
 8007414:	e008      	b.n	8007428 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	3301      	adds	r3, #1
 8007426:	62bb      	str	r3, [r7, #40]	; 0x28
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800742c:	429a      	cmp	r2, r3
 800742e:	d3f2      	bcc.n	8007416 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007430:	e000      	b.n	8007434 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007432:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d055      	beq.n	80074e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800743a:	f3ef 8311 	mrs	r3, BASEPRI
 800743e:	f04f 0120 	mov.w	r1, #32
 8007442:	f381 8811 	msr	BASEPRI, r1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	482a      	ldr	r0, [pc, #168]	; (80074f4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800744a:	f7fe fbba 	bl	8005bc2 <_PreparePacket>
 800744e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	623b      	str	r3, [r7, #32]
 800745c:	e00b      	b.n	8007476 <SEGGER_SYSVIEW_SendModule+0x7e>
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	b2da      	uxtb	r2, r3
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	1c59      	adds	r1, r3, #1
 8007466:	6279      	str	r1, [r7, #36]	; 0x24
 8007468:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	09db      	lsrs	r3, r3, #7
 8007474:	623b      	str	r3, [r7, #32]
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	2b7f      	cmp	r3, #127	; 0x7f
 800747a:	d8f0      	bhi.n	800745e <SEGGER_SYSVIEW_SendModule+0x66>
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	627a      	str	r2, [r7, #36]	; 0x24
 8007482:	6a3a      	ldr	r2, [r7, #32]
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	61fb      	str	r3, [r7, #28]
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	e00b      	b.n	80074b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	b2da      	uxtb	r2, r3
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	1c59      	adds	r1, r3, #1
 80074a0:	61f9      	str	r1, [r7, #28]
 80074a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	09db      	lsrs	r3, r3, #7
 80074ae:	61bb      	str	r3, [r7, #24]
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2b7f      	cmp	r3, #127	; 0x7f
 80074b4:	d8f0      	bhi.n	8007498 <SEGGER_SYSVIEW_SendModule+0xa0>
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	61fa      	str	r2, [r7, #28]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2280      	movs	r2, #128	; 0x80
 80074cc:	4619      	mov	r1, r3
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7fe fb2a 	bl	8005b28 <_EncodeStr>
 80074d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80074d6:	2216      	movs	r2, #22
 80074d8:	68f9      	ldr	r1, [r7, #12]
 80074da:	6938      	ldr	r0, [r7, #16]
 80074dc:	f7fe fc64 	bl	8005da8 <_SendPacket>
      RECORD_END();
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80074e6:	bf00      	nop
 80074e8:	3730      	adds	r7, #48	; 0x30
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20014290 	.word	0x20014290
 80074f4:	20014298 	.word	0x20014298

080074f8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80074fe:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00f      	beq.n	8007526 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007506:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1f2      	bne.n	800750c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20014290 	.word	0x20014290

08007534 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800753a:	f3ef 8311 	mrs	r3, BASEPRI
 800753e:	f04f 0120 	mov.w	r1, #32
 8007542:	f381 8811 	msr	BASEPRI, r1
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	4817      	ldr	r0, [pc, #92]	; (80075a8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800754a:	f7fe fb3a 	bl	8005bc2 <_PreparePacket>
 800754e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	4b14      	ldr	r3, [pc, #80]	; (80075ac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	e00b      	b.n	8007578 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	b2da      	uxtb	r2, r3
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	1c59      	adds	r1, r3, #1
 8007568:	6179      	str	r1, [r7, #20]
 800756a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	09db      	lsrs	r3, r3, #7
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2b7f      	cmp	r3, #127	; 0x7f
 800757c:	d8f0      	bhi.n	8007560 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	617a      	str	r2, [r7, #20]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800758e:	221b      	movs	r2, #27
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	68b8      	ldr	r0, [r7, #8]
 8007594:	f7fe fc08 	bl	8005da8 <_SendPacket>
  RECORD_END();
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f383 8811 	msr	BASEPRI, r3
}
 800759e:	bf00      	nop
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20014298 	.word	0x20014298
 80075ac:	20014294 	.word	0x20014294

080075b0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80075b0:	b40f      	push	{r0, r1, r2, r3}
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80075b8:	f107 0314 	add.w	r3, r7, #20
 80075bc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80075be:	1d3b      	adds	r3, r7, #4
 80075c0:	461a      	mov	r2, r3
 80075c2:	2100      	movs	r1, #0
 80075c4:	6938      	ldr	r0, [r7, #16]
 80075c6:	f7fe fe79 	bl	80062bc <_VPrintTarget>
  va_end(ParamList);
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075d4:	b004      	add	sp, #16
 80075d6:	4770      	bx	lr

080075d8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075e0:	f3ef 8311 	mrs	r3, BASEPRI
 80075e4:	f04f 0120 	mov.w	r1, #32
 80075e8:	f381 8811 	msr	BASEPRI, r1
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	4827      	ldr	r0, [pc, #156]	; (800768c <SEGGER_SYSVIEW_Warn+0xb4>)
 80075f0:	f7fe fae7 	bl	8005bc2 <_PreparePacket>
 80075f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075f6:	2280      	movs	r2, #128	; 0x80
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	6938      	ldr	r0, [r7, #16]
 80075fc:	f7fe fa94 	bl	8005b28 <_EncodeStr>
 8007600:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	2301      	movs	r3, #1
 8007608:	623b      	str	r3, [r7, #32]
 800760a:	e00b      	b.n	8007624 <SEGGER_SYSVIEW_Warn+0x4c>
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	b2da      	uxtb	r2, r3
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	1c59      	adds	r1, r3, #1
 8007614:	6279      	str	r1, [r7, #36]	; 0x24
 8007616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	09db      	lsrs	r3, r3, #7
 8007622:	623b      	str	r3, [r7, #32]
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	2b7f      	cmp	r3, #127	; 0x7f
 8007628:	d8f0      	bhi.n	800760c <SEGGER_SYSVIEW_Warn+0x34>
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	627a      	str	r2, [r7, #36]	; 0x24
 8007630:	6a3a      	ldr	r2, [r7, #32]
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	2300      	movs	r3, #0
 8007640:	61bb      	str	r3, [r7, #24]
 8007642:	e00b      	b.n	800765c <SEGGER_SYSVIEW_Warn+0x84>
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	b2da      	uxtb	r2, r3
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	1c59      	adds	r1, r3, #1
 800764c:	61f9      	str	r1, [r7, #28]
 800764e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	09db      	lsrs	r3, r3, #7
 800765a:	61bb      	str	r3, [r7, #24]
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	2b7f      	cmp	r3, #127	; 0x7f
 8007660:	d8f0      	bhi.n	8007644 <SEGGER_SYSVIEW_Warn+0x6c>
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	61fa      	str	r2, [r7, #28]
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007672:	221a      	movs	r2, #26
 8007674:	68f9      	ldr	r1, [r7, #12]
 8007676:	6938      	ldr	r0, [r7, #16]
 8007678:	f7fe fb96 	bl	8005da8 <_SendPacket>
  RECORD_END();
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f383 8811 	msr	BASEPRI, r3
}
 8007682:	bf00      	nop
 8007684:	3728      	adds	r7, #40	; 0x28
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20014298 	.word	0x20014298

08007690 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007694:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007696:	7e1b      	ldrb	r3, [r3, #24]
 8007698:	4619      	mov	r1, r3
 800769a:	4a13      	ldr	r2, [pc, #76]	; (80076e8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800769c:	460b      	mov	r3, r1
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	440b      	add	r3, r1
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	4413      	add	r3, r2
 80076a6:	336c      	adds	r3, #108	; 0x6c
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076ac:	7e1b      	ldrb	r3, [r3, #24]
 80076ae:	4618      	mov	r0, r3
 80076b0:	490d      	ldr	r1, [pc, #52]	; (80076e8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80076b2:	4603      	mov	r3, r0
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	4403      	add	r3, r0
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	440b      	add	r3, r1
 80076bc:	3370      	adds	r3, #112	; 0x70
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d00b      	beq.n	80076dc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076c6:	789b      	ldrb	r3, [r3, #2]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d107      	bne.n	80076dc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80076d2:	f7fe fa83 	bl	8005bdc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80076d6:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076d8:	2200      	movs	r2, #0
 80076da:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80076dc:	4b01      	ldr	r3, [pc, #4]	; (80076e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076de:	781b      	ldrb	r3, [r3, #0]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20014268 	.word	0x20014268
 80076e8:	20014418 	.word	0x20014418

080076ec <__libc_init_array>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	4d0d      	ldr	r5, [pc, #52]	; (8007724 <__libc_init_array+0x38>)
 80076f0:	4c0d      	ldr	r4, [pc, #52]	; (8007728 <__libc_init_array+0x3c>)
 80076f2:	1b64      	subs	r4, r4, r5
 80076f4:	10a4      	asrs	r4, r4, #2
 80076f6:	2600      	movs	r6, #0
 80076f8:	42a6      	cmp	r6, r4
 80076fa:	d109      	bne.n	8007710 <__libc_init_array+0x24>
 80076fc:	4d0b      	ldr	r5, [pc, #44]	; (800772c <__libc_init_array+0x40>)
 80076fe:	4c0c      	ldr	r4, [pc, #48]	; (8007730 <__libc_init_array+0x44>)
 8007700:	f000 f83c 	bl	800777c <_init>
 8007704:	1b64      	subs	r4, r4, r5
 8007706:	10a4      	asrs	r4, r4, #2
 8007708:	2600      	movs	r6, #0
 800770a:	42a6      	cmp	r6, r4
 800770c:	d105      	bne.n	800771a <__libc_init_array+0x2e>
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	f855 3b04 	ldr.w	r3, [r5], #4
 8007714:	4798      	blx	r3
 8007716:	3601      	adds	r6, #1
 8007718:	e7ee      	b.n	80076f8 <__libc_init_array+0xc>
 800771a:	f855 3b04 	ldr.w	r3, [r5], #4
 800771e:	4798      	blx	r3
 8007720:	3601      	adds	r6, #1
 8007722:	e7f2      	b.n	800770a <__libc_init_array+0x1e>
 8007724:	08007948 	.word	0x08007948
 8007728:	08007948 	.word	0x08007948
 800772c:	08007948 	.word	0x08007948
 8007730:	0800794c 	.word	0x0800794c

08007734 <memcmp>:
 8007734:	b530      	push	{r4, r5, lr}
 8007736:	3901      	subs	r1, #1
 8007738:	2400      	movs	r4, #0
 800773a:	42a2      	cmp	r2, r4
 800773c:	d101      	bne.n	8007742 <memcmp+0xe>
 800773e:	2000      	movs	r0, #0
 8007740:	e005      	b.n	800774e <memcmp+0x1a>
 8007742:	5d03      	ldrb	r3, [r0, r4]
 8007744:	3401      	adds	r4, #1
 8007746:	5d0d      	ldrb	r5, [r1, r4]
 8007748:	42ab      	cmp	r3, r5
 800774a:	d0f6      	beq.n	800773a <memcmp+0x6>
 800774c:	1b58      	subs	r0, r3, r5
 800774e:	bd30      	pop	{r4, r5, pc}

08007750 <memcpy>:
 8007750:	440a      	add	r2, r1
 8007752:	4291      	cmp	r1, r2
 8007754:	f100 33ff 	add.w	r3, r0, #4294967295
 8007758:	d100      	bne.n	800775c <memcpy+0xc>
 800775a:	4770      	bx	lr
 800775c:	b510      	push	{r4, lr}
 800775e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007766:	4291      	cmp	r1, r2
 8007768:	d1f9      	bne.n	800775e <memcpy+0xe>
 800776a:	bd10      	pop	{r4, pc}

0800776c <memset>:
 800776c:	4402      	add	r2, r0
 800776e:	4603      	mov	r3, r0
 8007770:	4293      	cmp	r3, r2
 8007772:	d100      	bne.n	8007776 <memset+0xa>
 8007774:	4770      	bx	lr
 8007776:	f803 1b01 	strb.w	r1, [r3], #1
 800777a:	e7f9      	b.n	8007770 <memset+0x4>

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
