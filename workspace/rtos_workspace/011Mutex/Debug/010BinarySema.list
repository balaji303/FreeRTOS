
010BinarySema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08007dd0  08007dd0  00017dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008078  08008078  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008078  08008078  00018078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008080  08008080  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008080  08008080  00018080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008084  08008084  00018084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144b8  20000080  08008108  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014538  08008108  00024538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b633  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387b  00000000  00000000  0003b6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0003ef60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  000400d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252c7  00000000  00000000  000410c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001493c  00000000  00000000  0006638f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da463  00000000  00000000  0007accb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015512e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005188  00000000  00000000  00155184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007db8 	.word	0x08007db8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007db8 	.word	0x08007db8

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014480 	.word	0x20014480

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96e 	b.w	8000654 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	468c      	mov	ip, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8083 	bne.w	80004a6 <__udivmoddi4+0x116>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4617      	mov	r7, r2
 80003a4:	d947      	bls.n	8000436 <__udivmoddi4+0xa6>
 80003a6:	fab2 f282 	clz	r2, r2
 80003aa:	b142      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003ac:	f1c2 0020 	rsb	r0, r2, #32
 80003b0:	fa24 f000 	lsr.w	r0, r4, r0
 80003b4:	4091      	lsls	r1, r2
 80003b6:	4097      	lsls	r7, r2
 80003b8:	ea40 0c01 	orr.w	ip, r0, r1
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbbc f6f8 	udiv	r6, ip, r8
 80003c8:	fa1f fe87 	uxth.w	lr, r7
 80003cc:	fb08 c116 	mls	r1, r8, r6, ip
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f10e 	mul.w	r1, r6, lr
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f106 30ff 	add.w	r0, r6, #4294967295
 80003e2:	f080 8119 	bcs.w	8000618 <__udivmoddi4+0x288>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8116 	bls.w	8000618 <__udivmoddi4+0x288>
 80003ec:	3e02      	subs	r6, #2
 80003ee:	443b      	add	r3, r7
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295
 800040e:	f080 8105 	bcs.w	800061c <__udivmoddi4+0x28c>
 8000412:	45a6      	cmp	lr, r4
 8000414:	f240 8102 	bls.w	800061c <__udivmoddi4+0x28c>
 8000418:	3802      	subs	r0, #2
 800041a:	443c      	add	r4, r7
 800041c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	2600      	movs	r6, #0
 8000426:	b11d      	cbz	r5, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c5 4300 	strd	r4, r3, [r5]
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	b902      	cbnz	r2, 800043a <__udivmoddi4+0xaa>
 8000438:	deff      	udf	#255	; 0xff
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	2a00      	cmp	r2, #0
 8000440:	d150      	bne.n	80004e4 <__udivmoddi4+0x154>
 8000442:	1bcb      	subs	r3, r1, r7
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	fa1f f887 	uxth.w	r8, r7
 800044c:	2601      	movs	r6, #1
 800044e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000452:	0c21      	lsrs	r1, r4, #16
 8000454:	fb0e 331c 	mls	r3, lr, ip, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb08 f30c 	mul.w	r3, r8, ip
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0xe4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0xe2>
 800046c:	428b      	cmp	r3, r1
 800046e:	f200 80e9 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 8000472:	4684      	mov	ip, r0
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000480:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x10c>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x10a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80d9 	bhi.w	800064c <__udivmoddi4+0x2bc>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e7bf      	b.n	8000426 <__udivmoddi4+0x96>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d909      	bls.n	80004be <__udivmoddi4+0x12e>
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	f000 80b1 	beq.w	8000612 <__udivmoddi4+0x282>
 80004b0:	2600      	movs	r6, #0
 80004b2:	e9c5 0100 	strd	r0, r1, [r5]
 80004b6:	4630      	mov	r0, r6
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	fab3 f683 	clz	r6, r3
 80004c2:	2e00      	cmp	r6, #0
 80004c4:	d14a      	bne.n	800055c <__udivmoddi4+0x1cc>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d302      	bcc.n	80004d0 <__udivmoddi4+0x140>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	f200 80b8 	bhi.w	8000640 <__udivmoddi4+0x2b0>
 80004d0:	1a84      	subs	r4, r0, r2
 80004d2:	eb61 0103 	sbc.w	r1, r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	468c      	mov	ip, r1
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d0a8      	beq.n	8000430 <__udivmoddi4+0xa0>
 80004de:	e9c5 4c00 	strd	r4, ip, [r5]
 80004e2:	e7a5      	b.n	8000430 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ec:	4097      	lsls	r7, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f6:	40d9      	lsrs	r1, r3
 80004f8:	4330      	orrs	r0, r6
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	fb0e 1116 	mls	r1, lr, r6, r1
 8000508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050c:	fb06 f108 	mul.w	r1, r6, r8
 8000510:	4299      	cmp	r1, r3
 8000512:	fa04 f402 	lsl.w	r4, r4, r2
 8000516:	d909      	bls.n	800052c <__udivmoddi4+0x19c>
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	f106 3cff 	add.w	ip, r6, #4294967295
 800051e:	f080 808d 	bcs.w	800063c <__udivmoddi4+0x2ac>
 8000522:	4299      	cmp	r1, r3
 8000524:	f240 808a 	bls.w	800063c <__udivmoddi4+0x2ac>
 8000528:	3e02      	subs	r6, #2
 800052a:	443b      	add	r3, r7
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b281      	uxth	r1, r0
 8000530:	fbb3 f0fe 	udiv	r0, r3, lr
 8000534:	fb0e 3310 	mls	r3, lr, r0, r3
 8000538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053c:	fb00 f308 	mul.w	r3, r0, r8
 8000540:	428b      	cmp	r3, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x1c4>
 8000544:	1879      	adds	r1, r7, r1
 8000546:	f100 3cff 	add.w	ip, r0, #4294967295
 800054a:	d273      	bcs.n	8000634 <__udivmoddi4+0x2a4>
 800054c:	428b      	cmp	r3, r1
 800054e:	d971      	bls.n	8000634 <__udivmoddi4+0x2a4>
 8000550:	3802      	subs	r0, #2
 8000552:	4439      	add	r1, r7
 8000554:	1acb      	subs	r3, r1, r3
 8000556:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800055a:	e778      	b.n	800044e <__udivmoddi4+0xbe>
 800055c:	f1c6 0c20 	rsb	ip, r6, #32
 8000560:	fa03 f406 	lsl.w	r4, r3, r6
 8000564:	fa22 f30c 	lsr.w	r3, r2, ip
 8000568:	431c      	orrs	r4, r3
 800056a:	fa20 f70c 	lsr.w	r7, r0, ip
 800056e:	fa01 f306 	lsl.w	r3, r1, r6
 8000572:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000576:	fa21 f10c 	lsr.w	r1, r1, ip
 800057a:	431f      	orrs	r7, r3
 800057c:	0c3b      	lsrs	r3, r7, #16
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fa1f f884 	uxth.w	r8, r4
 8000586:	fb0e 1119 	mls	r1, lr, r9, r1
 800058a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800058e:	fb09 fa08 	mul.w	sl, r9, r8
 8000592:	458a      	cmp	sl, r1
 8000594:	fa02 f206 	lsl.w	r2, r2, r6
 8000598:	fa00 f306 	lsl.w	r3, r0, r6
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x220>
 800059e:	1861      	adds	r1, r4, r1
 80005a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a4:	d248      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 80005a6:	458a      	cmp	sl, r1
 80005a8:	d946      	bls.n	8000638 <__udivmoddi4+0x2a8>
 80005aa:	f1a9 0902 	sub.w	r9, r9, #2
 80005ae:	4421      	add	r1, r4
 80005b0:	eba1 010a 	sub.w	r1, r1, sl
 80005b4:	b2bf      	uxth	r7, r7
 80005b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80005be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005c2:	fb00 f808 	mul.w	r8, r0, r8
 80005c6:	45b8      	cmp	r8, r7
 80005c8:	d907      	bls.n	80005da <__udivmoddi4+0x24a>
 80005ca:	19e7      	adds	r7, r4, r7
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d22e      	bcs.n	8000630 <__udivmoddi4+0x2a0>
 80005d2:	45b8      	cmp	r8, r7
 80005d4:	d92c      	bls.n	8000630 <__udivmoddi4+0x2a0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	4427      	add	r7, r4
 80005da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005de:	eba7 0708 	sub.w	r7, r7, r8
 80005e2:	fba0 8902 	umull	r8, r9, r0, r2
 80005e6:	454f      	cmp	r7, r9
 80005e8:	46c6      	mov	lr, r8
 80005ea:	4649      	mov	r1, r9
 80005ec:	d31a      	bcc.n	8000624 <__udivmoddi4+0x294>
 80005ee:	d017      	beq.n	8000620 <__udivmoddi4+0x290>
 80005f0:	b15d      	cbz	r5, 800060a <__udivmoddi4+0x27a>
 80005f2:	ebb3 020e 	subs.w	r2, r3, lr
 80005f6:	eb67 0701 	sbc.w	r7, r7, r1
 80005fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005fe:	40f2      	lsrs	r2, r6
 8000600:	ea4c 0202 	orr.w	r2, ip, r2
 8000604:	40f7      	lsrs	r7, r6
 8000606:	e9c5 2700 	strd	r2, r7, [r5]
 800060a:	2600      	movs	r6, #0
 800060c:	4631      	mov	r1, r6
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e70b      	b.n	8000430 <__udivmoddi4+0xa0>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0x60>
 800061c:	4618      	mov	r0, r3
 800061e:	e6fd      	b.n	800041c <__udivmoddi4+0x8c>
 8000620:	4543      	cmp	r3, r8
 8000622:	d2e5      	bcs.n	80005f0 <__udivmoddi4+0x260>
 8000624:	ebb8 0e02 	subs.w	lr, r8, r2
 8000628:	eb69 0104 	sbc.w	r1, r9, r4
 800062c:	3801      	subs	r0, #1
 800062e:	e7df      	b.n	80005f0 <__udivmoddi4+0x260>
 8000630:	4608      	mov	r0, r1
 8000632:	e7d2      	b.n	80005da <__udivmoddi4+0x24a>
 8000634:	4660      	mov	r0, ip
 8000636:	e78d      	b.n	8000554 <__udivmoddi4+0x1c4>
 8000638:	4681      	mov	r9, r0
 800063a:	e7b9      	b.n	80005b0 <__udivmoddi4+0x220>
 800063c:	4666      	mov	r6, ip
 800063e:	e775      	b.n	800052c <__udivmoddi4+0x19c>
 8000640:	4630      	mov	r0, r6
 8000642:	e74a      	b.n	80004da <__udivmoddi4+0x14a>
 8000644:	f1ac 0c02 	sub.w	ip, ip, #2
 8000648:	4439      	add	r1, r7
 800064a:	e713      	b.n	8000474 <__udivmoddi4+0xe4>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	e724      	b.n	800049c <__udivmoddi4+0x10c>
 8000652:	bf00      	nop

08000654 <__aeabi_idiv0>:
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b0c4      	sub	sp, #272	; 0x110
 800065c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fbad 	bl	8000dbc <HAL_Init>

  /* USER CODE BEGIN Init */

//Enable CYCCNT Counter

DWT_CTRL|=(1<<0);
 8000662:	4b3f      	ldr	r3, [pc, #252]	; (8000760 <main+0x108>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a3e      	ldr	r2, [pc, #248]	; (8000760 <main+0x108>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6013      	str	r3, [r2, #0]



SEGGER_UART_init(500000);
 800066e:	483d      	ldr	r0, [pc, #244]	; (8000764 <main+0x10c>)
 8000670:	f004 fda6 	bl	80051c0 <SEGGER_UART_init>



SEGGER_SYSVIEW_Conf();
 8000674:	f004 fc3e 	bl	8004ef4 <SEGGER_SYSVIEW_Conf>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f888 	bl	800078c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f91e 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000680:	f000 f8f2 	bl	8000868 <MX_USART2_UART_Init>

/* Before a semaphore is used it must be explicitly created.

* In this example a binary semaphore is created . */

vSemaphoreCreateBinary( xWork );
 8000684:	2203      	movs	r2, #3
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f002 f89d 	bl	80027c8 <xQueueGenericCreate>
 800068e:	4603      	mov	r3, r0
 8000690:	4a35      	ldr	r2, [pc, #212]	; (8000768 <main+0x110>)
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b34      	ldr	r3, [pc, #208]	; (8000768 <main+0x110>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <main+0x52>
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <main+0x110>)
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	f002 f901 	bl	80028ac <xQueueGenericSend>



xSemaphoreTake(xWork,0);
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <main+0x110>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fad9 	bl	8002c68 <xQueueSemaphoreTake>



xWorkQueue=xQueueCreate(1,sizeof(unsigned int));
 80006b6:	2200      	movs	r2, #0
 80006b8:	2104      	movs	r1, #4
 80006ba:	2001      	movs	r0, #1
 80006bc:	f002 f884 	bl	80027c8 <xQueueGenericCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a2a      	ldr	r2, [pc, #168]	; (800076c <main+0x114>)
 80006c4:	6013      	str	r3, [r2, #0]



if((xWork != NULL) && (xWorkQueue != NULL) )
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <main+0x110>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d03d      	beq.n	800074a <main+0xf2>
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <main+0x114>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d039      	beq.n	800074a <main+0xf2>

{



status= xTaskCreate(manager_task_handler, "manager", 200,NULL,3, &handle_manager_task);
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <main+0x118>)
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2303      	movs	r3, #3
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	22c8      	movs	r2, #200	; 0xc8
 80006e2:	4924      	ldr	r1, [pc, #144]	; (8000774 <main+0x11c>)
 80006e4:	4824      	ldr	r0, [pc, #144]	; (8000778 <main+0x120>)
 80006e6:	f002 fd75 	bl	80031d4 <xTaskCreate>
 80006ea:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104



configASSERT(status==pdPASS);
 80006ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d00b      	beq.n	800070e <main+0xb6>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fa:	f383 8811 	msr	BASEPRI, r3
 80006fe:	f3bf 8f6f 	isb	sy
 8000702:	f3bf 8f4f 	dsb	sy
 8000706:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800070a:	bf00      	nop
 800070c:	e7fe      	b.n	800070c <main+0xb4>



status= xTaskCreate(employee_task_handler, "employee", 200,NULL,1, &handle_employee_task);
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <main+0x124>)
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	2301      	movs	r3, #1
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2300      	movs	r3, #0
 8000718:	22c8      	movs	r2, #200	; 0xc8
 800071a:	4919      	ldr	r1, [pc, #100]	; (8000780 <main+0x128>)
 800071c:	4819      	ldr	r0, [pc, #100]	; (8000784 <main+0x12c>)
 800071e:	f002 fd59 	bl	80031d4 <xTaskCreate>
 8000722:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104



configASSERT(status==pdPASS);
 8000726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800072a:	2b01      	cmp	r3, #1
 800072c:	d00b      	beq.n	8000746 <main+0xee>
        __asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
 8000742:	bf00      	nop
 8000744:	e7fe      	b.n	8000744 <main+0xec>



vTaskStartScheduler();
 8000746:	f002 febf 	bl	80034c8 <vTaskStartScheduler>

}



sprintf(usrmsg,"Queue/Sema Creation failed...\r\n");
 800074a:	463b      	mov	r3, r7
 800074c:	490e      	ldr	r1, [pc, #56]	; (8000788 <main+0x130>)
 800074e:	4618      	mov	r0, r3
 8000750:	f006 f9be 	bl	8006ad0 <siprintf>

printmsg(usrmsg);
 8000754:	463b      	mov	r3, r7
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f9a2 	bl	8000aa0 <printmsg>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while (1)
 800075c:	e7fe      	b.n	800075c <main+0x104>
 800075e:	bf00      	nop
 8000760:	e0001000 	.word	0xe0001000
 8000764:	0007a120 	.word	0x0007a120
 8000768:	200143f4 	.word	0x200143f4
 800076c:	200143f0 	.word	0x200143f0
 8000770:	200143ec 	.word	0x200143ec
 8000774:	08007dd0 	.word	0x08007dd0
 8000778:	080009a9 	.word	0x080009a9
 800077c:	200143e8 	.word	0x200143e8
 8000780:	08007dd8 	.word	0x08007dd8
 8000784:	08000a25 	.word	0x08000a25
 8000788:	08007de4 	.word	0x08007de4

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f006 f950 	bl	8006a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <SystemClock_Config+0xd4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a29      	ldr	r2, [pc, #164]	; (8000860 <SystemClock_Config+0xd4>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <SystemClock_Config+0xd4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <SystemClock_Config+0xd8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <SystemClock_Config+0xd8>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <SystemClock_Config+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000800:	2310      	movs	r3, #16
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000804:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000808:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800080a:	2304      	movs	r3, #4
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f8dc 	bl	80019d8 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000826:	f000 f94f 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2102      	movs	r1, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fdfa 	bl	8001440 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000852:	f000 f939 	bl	8000ac8 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f001 fb38 	bl	8001f14 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f90d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200143f8 	.word	0x200143f8
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <MX_GPIO_Init+0xe0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a30      	ldr	r2, [pc, #192]	; (800099c <MX_GPIO_Init+0xe0>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <MX_GPIO_Init+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_GPIO_Init+0xe0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a29      	ldr	r2, [pc, #164]	; (800099c <MX_GPIO_Init+0xe0>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_GPIO_Init+0xe0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_GPIO_Init+0xe0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a22      	ldr	r2, [pc, #136]	; (800099c <MX_GPIO_Init+0xe0>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <MX_GPIO_Init+0xe0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_GPIO_Init+0xe0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <MX_GPIO_Init+0xe0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_GPIO_Init+0xe0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2120      	movs	r1, #32
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <MX_GPIO_Init+0xe4>)
 8000948:	f000 fd3c 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000952:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4810      	ldr	r0, [pc, #64]	; (80009a4 <MX_GPIO_Init+0xe8>)
 8000964:	f000 fb9a 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000968:	2320      	movs	r3, #32
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_GPIO_Init+0xe4>)
 8000980:	f000 fb8c 	bl	800109c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2028      	movs	r0, #40	; 0x28
 800098a:	f000 fb50 	bl	800102e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098e:	2028      	movs	r0, #40	; 0x28
 8000990:	f000 fb69 	bl	8001066 <HAL_NVIC_EnableIRQ>

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020800 	.word	0x40020800

080009a8 <manager_task_handler>:

/* USER CODE BEGIN 4 */

void manager_task_handler( void * pvParameters)

{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0c2      	sub	sp, #264	; 0x108
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	6018      	str	r0, [r3, #0]

	while(1)

	{

		ticket_ID=(rand()&0x1ff);
 80009b2:	f006 f84d 	bl	8006a50 <rand>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	601a      	str	r2, [r3, #0]



		if(xQueueSend(xWorkQueue,&ticket_ID,portMAX_DELAY)== pdTRUE)
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <manager_task_handler+0x6c>)
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	f107 0108 	add.w	r1, r7, #8
 80009ca:	2300      	movs	r3, #0
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	f001 ff6c 	bl	80028ac <xQueueGenericSend>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d10f      	bne.n	80009fa <manager_task_handler+0x52>

		{

			xSemaphoreGive(xWork);
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <manager_task_handler+0x70>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	2300      	movs	r3, #0
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	f001 ff62 	bl	80028ac <xQueueGenericSend>



			taskYIELD();
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <manager_task_handler+0x74>)
 80009ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	f3bf 8f4f 	dsb	sy
 80009f4:	f3bf 8f6f 	isb	sy
 80009f8:	e7db      	b.n	80009b2 <manager_task_handler+0xa>

		else

		{

			sprintf(usrmsg,"Could not send data to Queue \r\n");
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4908      	ldr	r1, [pc, #32]	; (8000a20 <manager_task_handler+0x78>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f006 f865 	bl	8006ad0 <siprintf>

			printmsg(usrmsg);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f848 	bl	8000aa0 <printmsg>
		ticket_ID=(rand()&0x1ff);
 8000a10:	e7cf      	b.n	80009b2 <manager_task_handler+0xa>
 8000a12:	bf00      	nop
 8000a14:	200143f0 	.word	0x200143f0
 8000a18:	200143f4 	.word	0x200143f4
 8000a1c:	e000ed04 	.word	0xe000ed04
 8000a20:	08007e04 	.word	0x08007e04

08000a24 <employee_task_handler>:

}

void employee_task_handler( void * pvParameters)

	{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0c2      	sub	sp, #264	; 0x108
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	6018      	str	r0, [r3, #0]

	while(1)

	{

		xSemaphoreTake(xWork,portMAX_DELAY);
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <employee_task_handler+0x6c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f04f 31ff 	mov.w	r1, #4294967295
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 f916 	bl	8002c68 <xQueueSemaphoreTake>



		if(xQueueReceive(xWorkQueue,&ticket_ID,0)==pdTRUE )
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <employee_task_handler+0x70>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000a44:	2200      	movs	r2, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 f82e 	bl	8002aa8 <xQueueReceive>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d112      	bne.n	8000a78 <employee_task_handler+0x54>

		{

			sprintf(usrmsg,"Working on ticket ID: %d\r\n",ticket_ID);
 8000a52:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	490f      	ldr	r1, [pc, #60]	; (8000a98 <employee_task_handler+0x74>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 f837 	bl	8006ad0 <siprintf>

			printmsg(usrmsg);
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f81a 	bl	8000aa0 <printmsg>

			vTaskDelay(ticket_ID);
 8000a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fcf5 	bl	8003460 <vTaskDelay>
 8000a76:	e7da      	b.n	8000a2e <employee_task_handler+0xa>

		else

		{

			sprintf(usrmsg,"Employee Task: Queue is empty, noting to do\r\n");
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	4907      	ldr	r1, [pc, #28]	; (8000a9c <employee_task_handler+0x78>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f006 f826 	bl	8006ad0 <siprintf>

			printmsg(usrmsg);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f809 	bl	8000aa0 <printmsg>
		xSemaphoreTake(xWork,portMAX_DELAY);
 8000a8e:	e7ce      	b.n	8000a2e <employee_task_handler+0xa>
 8000a90:	200143f4 	.word	0x200143f4
 8000a94:	200143f0 	.word	0x200143f0
 8000a98:	08007e24 	.word	0x08007e24
 8000a9c:	08007e40 	.word	0x08007e40

08000aa0 <printmsg>:



	void printmsg(char *msg)

	{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),100);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fbfb 	bl	80002a4 <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <printmsg+0x24>)
 8000ab8:	f001 fa79 	bl	8001fae <HAL_UART_Transmit>

	}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200143f8 	.word	0x200143f8

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12b      	bne.n	8000b9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_UART_MspInit+0x8c>)
 8000b9a:	f000 fa7f 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40004400 	.word	0x40004400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000be4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000be8:	f000 fc06 	bl	80013f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_kill>:

int _kill(int pid, int sig)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c0a:	f005 fee1 	bl	80069d0 <__errno>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2216      	movs	r2, #22
 8000c12:	601a      	str	r2, [r3, #0]
	return -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_exit>:

void _exit (int status)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ffe7 	bl	8000c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c32:	e7fe      	b.n	8000c32 <_exit+0x12>

08000c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
	}

return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	return -1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c96:	605a      	str	r2, [r3, #4]
	return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_isatty>:

int _isatty(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	return 1;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f005 fe62 	bl	80069d0 <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20020000 	.word	0x20020000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	2000009c 	.word	0x2000009c
 8000d40:	20014538 	.word	0x20014538

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6e:	490e      	ldr	r1, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d84:	4c0b      	ldr	r4, [pc, #44]	; (8000db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d92:	f7ff ffd7 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f005 fe21 	bl	80069dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fc5d 	bl	8000658 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000dac:	08008088 	.word	0x08008088
  ldr r2, =_sbss
 8000db0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000db4:	20014538 	.word	0x20014538

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f917 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fe70 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f92f 	bl	8001082 <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f8f7 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2001443c 	.word	0x2001443c

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff3e 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff8e 	bl	8000f6c <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5d 	bl	8000f18 <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff31 	bl	8000edc <__NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffa2 	bl	8000fd4 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e165      	b.n	8001384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f040 8154 	bne.w	800137e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d005      	beq.n	80010ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d130      	bne.n	8001150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	f003 0201 	and.w	r2, r3, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b03      	cmp	r3, #3
 800115a:	d017      	beq.n	800118c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d123      	bne.n	80011e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80ae 	beq.w	800137e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b5d      	ldr	r3, [pc, #372]	; (800139c <HAL_GPIO_Init+0x300>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a5c      	ldr	r2, [pc, #368]	; (800139c <HAL_GPIO_Init+0x300>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b5a      	ldr	r3, [pc, #360]	; (800139c <HAL_GPIO_Init+0x300>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123e:	4a58      	ldr	r2, [pc, #352]	; (80013a0 <HAL_GPIO_Init+0x304>)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <HAL_GPIO_Init+0x308>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d025      	beq.n	80012b6 <HAL_GPIO_Init+0x21a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_GPIO_Init+0x30c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01f      	beq.n	80012b2 <HAL_GPIO_Init+0x216>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4d      	ldr	r2, [pc, #308]	; (80013ac <HAL_GPIO_Init+0x310>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x212>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_GPIO_Init+0x314>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x20e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <HAL_GPIO_Init+0x318>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x20a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4a      	ldr	r2, [pc, #296]	; (80013b8 <HAL_GPIO_Init+0x31c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x206>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a49      	ldr	r2, [pc, #292]	; (80013bc <HAL_GPIO_Init+0x320>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x202>
 800129a:	2306      	movs	r3, #6
 800129c:	e00c      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00a      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012a2:	2305      	movs	r3, #5
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012b6:	2300      	movs	r3, #0
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	f002 0203 	and.w	r2, r2, #3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4093      	lsls	r3, r2
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c8:	4935      	ldr	r1, [pc, #212]	; (80013a0 <HAL_GPIO_Init+0x304>)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d6:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <HAL_GPIO_Init+0x324>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fa:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_GPIO_Init+0x324>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_GPIO_Init+0x324>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_GPIO_Init+0x324>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	f67f ae96 	bls.w	80010b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40013800 	.word	0x40013800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40021400 	.word	0x40021400
 80013bc:	40021800 	.word	0x40021800
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f806 	bl	8001428 <HAL_GPIO_EXTI_Callback>
  }
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0cc      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001454:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d90c      	bls.n	800147c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0b8      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001494:	4b59      	ldr	r3, [pc, #356]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a58      	ldr	r2, [pc, #352]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800149e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a52      	ldr	r2, [pc, #328]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b8:	4b50      	ldr	r3, [pc, #320]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	494d      	ldr	r1, [pc, #308]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d044      	beq.n	8001560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b47      	ldr	r3, [pc, #284]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d119      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e07f      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d003      	beq.n	80014fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e06f      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e067      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f023 0203 	bic.w	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4934      	ldr	r1, [pc, #208]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	4313      	orrs	r3, r2
 800152e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001530:	f7ff fc96 	bl	8000e60 <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	e00a      	b.n	800154e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001538:	f7ff fc92 	bl	8000e60 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e04f      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 020c 	and.w	r2, r3, #12
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	d1eb      	bne.n	8001538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d20c      	bcs.n	8001588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e032      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4916      	ldr	r1, [pc, #88]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015c6:	f000 f855 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 80015ca:	4602      	mov	r2, r0
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	490a      	ldr	r1, [pc, #40]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	5ccb      	ldrb	r3, [r1, r3]
 80015da:	fa22 f303 	lsr.w	r3, r2, r3
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fc0a 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00
 80015fc:	40023800 	.word	0x40023800
 8001600:	08007efc 	.word	0x08007efc
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004

0800160c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_RCC_GetHCLKFreq+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000

08001624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001628:	f7ff fff0 	bl	800160c <HAL_RCC_GetHCLKFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	0a9b      	lsrs	r3, r3, #10
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	4903      	ldr	r1, [pc, #12]	; (8001648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	08007f0c 	.word	0x08007f0c

0800164c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001650:	f7ff ffdc 	bl	800160c <HAL_RCC_GetHCLKFreq>
 8001654:	4602      	mov	r2, r0
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	0b5b      	lsrs	r3, r3, #13
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	4903      	ldr	r1, [pc, #12]	; (8001670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001662:	5ccb      	ldrb	r3, [r1, r3]
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001668:	4618      	mov	r0, r3
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	08007f0c 	.word	0x08007f0c

08001674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001678:	b088      	sub	sp, #32
 800167a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001690:	4bce      	ldr	r3, [pc, #824]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b0c      	cmp	r3, #12
 800169a:	f200 818d 	bhi.w	80019b8 <HAL_RCC_GetSysClockFreq+0x344>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <HAL_RCC_GetSysClockFreq+0x30>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016d9 	.word	0x080016d9
 80016a8:	080019b9 	.word	0x080019b9
 80016ac:	080019b9 	.word	0x080019b9
 80016b0:	080019b9 	.word	0x080019b9
 80016b4:	080016df 	.word	0x080016df
 80016b8:	080019b9 	.word	0x080019b9
 80016bc:	080019b9 	.word	0x080019b9
 80016c0:	080019b9 	.word	0x080019b9
 80016c4:	080016e5 	.word	0x080016e5
 80016c8:	080019b9 	.word	0x080019b9
 80016cc:	080019b9 	.word	0x080019b9
 80016d0:	080019b9 	.word	0x080019b9
 80016d4:	08001859 	.word	0x08001859
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d8:	4bbd      	ldr	r3, [pc, #756]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016da:	61bb      	str	r3, [r7, #24]
       break;
 80016dc:	e16f      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016de:	4bbd      	ldr	r3, [pc, #756]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x360>)
 80016e0:	61bb      	str	r3, [r7, #24]
      break;
 80016e2:	e16c      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016e4:	4bb9      	ldr	r3, [pc, #740]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ee:	4bb7      	ldr	r3, [pc, #732]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d053      	beq.n	80017a2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016fa:	4bb4      	ldr	r3, [pc, #720]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	099b      	lsrs	r3, r3, #6
 8001700:	461a      	mov	r2, r3
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	f240 10ff 	movw	r0, #511	; 0x1ff
 800170a:	f04f 0100 	mov.w	r1, #0
 800170e:	ea02 0400 	and.w	r4, r2, r0
 8001712:	603c      	str	r4, [r7, #0]
 8001714:	400b      	ands	r3, r1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	e9d7 4500 	ldrd	r4, r5, [r7]
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	014b      	lsls	r3, r1, #5
 800172a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800172e:	0142      	lsls	r2, r0, #5
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	4623      	mov	r3, r4
 8001736:	1ac0      	subs	r0, r0, r3
 8001738:	462b      	mov	r3, r5
 800173a:	eb61 0103 	sbc.w	r1, r1, r3
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800174c:	0182      	lsls	r2, r0, #6
 800174e:	1a12      	subs	r2, r2, r0
 8001750:	eb63 0301 	sbc.w	r3, r3, r1
 8001754:	f04f 0000 	mov.w	r0, #0
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	00d9      	lsls	r1, r3, #3
 800175e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001762:	00d0      	lsls	r0, r2, #3
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4621      	mov	r1, r4
 800176a:	1852      	adds	r2, r2, r1
 800176c:	4629      	mov	r1, r5
 800176e:	eb43 0101 	adc.w	r1, r3, r1
 8001772:	460b      	mov	r3, r1
 8001774:	f04f 0000 	mov.w	r0, #0
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	0259      	lsls	r1, r3, #9
 800177e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001782:	0250      	lsls	r0, r2, #9
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	461a      	mov	r2, r3
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f7fe fde4 	bl	8000360 <__aeabi_uldivmod>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4613      	mov	r3, r2
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	e04c      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a2:	4b8a      	ldr	r3, [pc, #552]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	099b      	lsrs	r3, r3, #6
 80017a8:	461a      	mov	r2, r3
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	ea02 0a00 	and.w	sl, r2, r0
 80017ba:	ea03 0b01 	and.w	fp, r3, r1
 80017be:	4650      	mov	r0, sl
 80017c0:	4659      	mov	r1, fp
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	014b      	lsls	r3, r1, #5
 80017cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017d0:	0142      	lsls	r2, r0, #5
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	ebb0 000a 	subs.w	r0, r0, sl
 80017da:	eb61 010b 	sbc.w	r1, r1, fp
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017ec:	0182      	lsls	r2, r0, #6
 80017ee:	1a12      	subs	r2, r2, r0
 80017f0:	eb63 0301 	sbc.w	r3, r3, r1
 80017f4:	f04f 0000 	mov.w	r0, #0
 80017f8:	f04f 0100 	mov.w	r1, #0
 80017fc:	00d9      	lsls	r1, r3, #3
 80017fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001802:	00d0      	lsls	r0, r2, #3
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	eb12 020a 	adds.w	r2, r2, sl
 800180c:	eb43 030b 	adc.w	r3, r3, fp
 8001810:	f04f 0000 	mov.w	r0, #0
 8001814:	f04f 0100 	mov.w	r1, #0
 8001818:	0299      	lsls	r1, r3, #10
 800181a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800181e:	0290      	lsls	r0, r2, #10
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	461a      	mov	r2, r3
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f7fe fd96 	bl	8000360 <__aeabi_uldivmod>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4613      	mov	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800183c:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	3301      	adds	r3, #1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	61bb      	str	r3, [r7, #24]
      break;
 8001856:	e0b2      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001858:	4b5c      	ldr	r3, [pc, #368]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001860:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001862:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d04d      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186e:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	099b      	lsrs	r3, r3, #6
 8001874:	461a      	mov	r2, r3
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	ea02 0800 	and.w	r8, r2, r0
 8001886:	ea03 0901 	and.w	r9, r3, r1
 800188a:	4640      	mov	r0, r8
 800188c:	4649      	mov	r1, r9
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	014b      	lsls	r3, r1, #5
 8001898:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800189c:	0142      	lsls	r2, r0, #5
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	ebb0 0008 	subs.w	r0, r0, r8
 80018a6:	eb61 0109 	sbc.w	r1, r1, r9
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	018b      	lsls	r3, r1, #6
 80018b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018b8:	0182      	lsls	r2, r0, #6
 80018ba:	1a12      	subs	r2, r2, r0
 80018bc:	eb63 0301 	sbc.w	r3, r3, r1
 80018c0:	f04f 0000 	mov.w	r0, #0
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	00d9      	lsls	r1, r3, #3
 80018ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018ce:	00d0      	lsls	r0, r2, #3
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	eb12 0208 	adds.w	r2, r2, r8
 80018d8:	eb43 0309 	adc.w	r3, r3, r9
 80018dc:	f04f 0000 	mov.w	r0, #0
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	0259      	lsls	r1, r3, #9
 80018e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018ea:	0250      	lsls	r0, r2, #9
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	f7fe fd30 	bl	8000360 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4613      	mov	r3, r2
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	e04a      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	099b      	lsrs	r3, r3, #6
 8001910:	461a      	mov	r2, r3
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	f240 10ff 	movw	r0, #511	; 0x1ff
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	ea02 0400 	and.w	r4, r2, r0
 8001922:	ea03 0501 	and.w	r5, r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	014b      	lsls	r3, r1, #5
 8001934:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001938:	0142      	lsls	r2, r0, #5
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	1b00      	subs	r0, r0, r4
 8001940:	eb61 0105 	sbc.w	r1, r1, r5
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	018b      	lsls	r3, r1, #6
 800194e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001952:	0182      	lsls	r2, r0, #6
 8001954:	1a12      	subs	r2, r2, r0
 8001956:	eb63 0301 	sbc.w	r3, r3, r1
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	00d9      	lsls	r1, r3, #3
 8001964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001968:	00d0      	lsls	r0, r2, #3
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	1912      	adds	r2, r2, r4
 8001970:	eb45 0303 	adc.w	r3, r5, r3
 8001974:	f04f 0000 	mov.w	r0, #0
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	0299      	lsls	r1, r3, #10
 800197e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001982:	0290      	lsls	r0, r2, #10
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	461a      	mov	r2, r3
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	f7fe fce4 	bl	8000360 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_RCC_GetSysClockFreq+0x358>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0f1b      	lsrs	r3, r3, #28
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	61bb      	str	r3, [r7, #24]
      break;
 80019b6:	e002      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019ba:	61bb      	str	r3, [r7, #24]
      break;
 80019bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019be:	69bb      	ldr	r3, [r7, #24]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	00f42400 	.word	0x00f42400
 80019d4:	007a1200 	.word	0x007a1200

080019d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e28d      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8083 	beq.w	8001afe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019f8:	4b94      	ldr	r3, [pc, #592]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d019      	beq.n	8001a38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a04:	4b91      	ldr	r3, [pc, #580]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a10:	4b8e      	ldr	r3, [pc, #568]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a1c:	d00c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1e:	4b8b      	ldr	r3, [pc, #556]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d112      	bne.n	8001a50 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a36:	d10b      	bne.n	8001a50 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	4b84      	ldr	r3, [pc, #528]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d05b      	beq.n	8001afc <HAL_RCC_OscConfig+0x124>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d157      	bne.n	8001afc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e25a      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a58:	d106      	bne.n	8001a68 <HAL_RCC_OscConfig+0x90>
 8001a5a:	4b7c      	ldr	r3, [pc, #496]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a7b      	ldr	r2, [pc, #492]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e01d      	b.n	8001aa4 <HAL_RCC_OscConfig+0xcc>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0xb4>
 8001a72:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a75      	ldr	r2, [pc, #468]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a72      	ldr	r2, [pc, #456]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0xcc>
 8001a8c:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6e      	ldr	r2, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a6b      	ldr	r2, [pc, #428]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff f9d8 	bl	8000e60 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff f9d4 	bl	8000e60 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e21f      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xdc>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f9c4 	bl	8000e60 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff f9c0 	bl	8000e60 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e20b      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x104>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d06f      	beq.n	8001bea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b0a:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d017      	beq.n	8001b46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b16:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d105      	bne.n	8001b2e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d11c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d116      	bne.n	8001b74 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x186>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1d3      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	e03a      	b.n	8001bea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_RCC_OscConfig+0x278>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff f96d 	bl	8000e60 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff f969 	bl	8000e60 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1b4      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4925      	ldr	r1, [pc, #148]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_OscConfig+0x278>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f94c 	bl	8000e60 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f948 	bl	8000e60 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e193      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d036      	beq.n	8001c64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d016      	beq.n	8001c2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff f92c 	bl	8000e60 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f928 	bl	8000e60 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e173      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x234>
 8001c2a:	e01b      	b.n	8001c64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7ff f915 	bl	8000e60 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	e00e      	b.n	8001c58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7ff f911 	bl	8000e60 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d907      	bls.n	8001c58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e15c      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	42470000 	.word	0x42470000
 8001c54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	4b8a      	ldr	r3, [pc, #552]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ea      	bne.n	8001c3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8097 	beq.w	8001da0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b83      	ldr	r3, [pc, #524]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10f      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b7f      	ldr	r3, [pc, #508]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a7e      	ldr	r2, [pc, #504]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b7c      	ldr	r3, [pc, #496]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <HAL_RCC_OscConfig+0x4b0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d118      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x4b0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a75      	ldr	r2, [pc, #468]	; (8001e88 <HAL_RCC_OscConfig+0x4b0>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7ff f8d1 	bl	8000e60 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7ff f8cd 	bl	8000e60 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e118      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4b6c      	ldr	r3, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0x4b0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x31e>
 8001ce8:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a65      	ldr	r2, [pc, #404]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	e01c      	b.n	8001d30 <HAL_RCC_OscConfig+0x358>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x340>
 8001cfe:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a60      	ldr	r2, [pc, #384]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0x358>
 8001d18:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a59      	ldr	r2, [pc, #356]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
 8001d24:	4b57      	ldr	r3, [pc, #348]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	4a56      	ldr	r2, [pc, #344]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d015      	beq.n	8001d64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7ff f892 	bl	8000e60 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7ff f88e 	bl	8000e60 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0d7      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ee      	beq.n	8001d40 <HAL_RCC_OscConfig+0x368>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f87c 	bl	8000e60 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f878 	bl	8000e60 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0c1      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d82:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ee      	bne.n	8001d6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80ad 	beq.w	8001f04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d060      	beq.n	8001e78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d145      	bne.n	8001e4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_RCC_OscConfig+0x4b4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f84c 	bl	8000e60 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff f848 	bl	8000e60 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e093      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	019b      	lsls	r3, r3, #6
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	071b      	lsls	r3, r3, #28
 8001e16:	491b      	ldr	r1, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_RCC_OscConfig+0x4b4>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff f81d 	bl	8000e60 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff f819 	bl	8000e60 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e064      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x452>
 8001e48:	e05c      	b.n	8001f04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_OscConfig+0x4b4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f806 	bl	8000e60 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff f802 	bl	8000e60 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e04d      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x480>
 8001e76:	e045      	b.n	8001f04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e040      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <HAL_RCC_OscConfig+0x538>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d030      	beq.n	8001f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d129      	bne.n	8001f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d122      	bne.n	8001f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d119      	bne.n	8001f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d10f      	bne.n	8001f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800

08001f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e03f      	b.n	8001fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fdf2 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2224      	movs	r2, #36	; 0x24
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f929 	bl	80021b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b08a      	sub	sp, #40	; 0x28
 8001fb2:	af02      	add	r7, sp, #8
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d17c      	bne.n	80020c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_UART_Transmit+0x2c>
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e075      	b.n	80020ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_UART_Transmit+0x3e>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e06e      	b.n	80020ca <HAL_UART_Transmit+0x11c>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2221      	movs	r2, #33	; 0x21
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002002:	f7fe ff2d 	bl	8000e60 <HAL_GetTick>
 8002006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	88fa      	ldrh	r2, [r7, #6]
 800200c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201c:	d108      	bne.n	8002030 <HAL_UART_Transmit+0x82>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d104      	bne.n	8002030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	e003      	b.n	8002038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002040:	e02a      	b.n	8002098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2200      	movs	r2, #0
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f840 	bl	80020d2 <UART_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e036      	b.n	80020ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10b      	bne.n	800207a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3302      	adds	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	e007      	b.n	800208a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	3301      	adds	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1cf      	bne.n	8002042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2200      	movs	r2, #0
 80020aa:	2140      	movs	r1, #64	; 0x40
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f810 	bl	80020d2 <UART_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e006      	b.n	80020ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e000      	b.n	80020ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b090      	sub	sp, #64	; 0x40
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4613      	mov	r3, r2
 80020e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e2:	e050      	b.n	8002186 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ea:	d04c      	beq.n	8002186 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <UART_WaitOnFlagUntilTimeout+0x30>
 80020f2:	f7fe feb5 	bl	8000e60 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020fe:	429a      	cmp	r2, r3
 8002100:	d241      	bcs.n	8002186 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	330c      	adds	r3, #12
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	e853 3f00 	ldrex	r3, [r3]
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	330c      	adds	r3, #12
 8002120:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002122:	637a      	str	r2, [r7, #52]	; 0x34
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002126:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800212a:	e841 2300 	strex	r3, r2, [r1]
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e5      	bne.n	8002102 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3314      	adds	r3, #20
 800213c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	e853 3f00 	ldrex	r3, [r3]
 8002144:	613b      	str	r3, [r7, #16]
   return(result);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002156:	623a      	str	r2, [r7, #32]
 8002158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215a:	69f9      	ldr	r1, [r7, #28]
 800215c:	6a3a      	ldr	r2, [r7, #32]
 800215e:	e841 2300 	strex	r3, r2, [r1]
 8002162:	61bb      	str	r3, [r7, #24]
   return(result);
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e5      	bne.n	8002136 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e00f      	b.n	80021a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4013      	ands	r3, r2
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	bf0c      	ite	eq
 8002196:	2301      	moveq	r3, #1
 8002198:	2300      	movne	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d09f      	beq.n	80020e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3740      	adds	r7, #64	; 0x40
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b4:	b09f      	sub	sp, #124	; 0x7c
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	ea40 0301 	orr.w	r3, r0, r1
 80021d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	431a      	orrs	r2, r3
 80021dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80021ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021f4:	f021 010c 	bic.w	r1, r1, #12
 80021f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fe:	430b      	orrs	r3, r1
 8002200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800220c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220e:	6999      	ldr	r1, [r3, #24]
 8002210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	ea40 0301 	orr.w	r3, r0, r1
 8002218:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800221a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4bc5      	ldr	r3, [pc, #788]	; (8002534 <UART_SetConfig+0x384>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d004      	beq.n	800222e <UART_SetConfig+0x7e>
 8002224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4bc3      	ldr	r3, [pc, #780]	; (8002538 <UART_SetConfig+0x388>)
 800222a:	429a      	cmp	r2, r3
 800222c:	d103      	bne.n	8002236 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800222e:	f7ff fa0d 	bl	800164c <HAL_RCC_GetPCLK2Freq>
 8002232:	6778      	str	r0, [r7, #116]	; 0x74
 8002234:	e002      	b.n	800223c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002236:	f7ff f9f5 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 800223a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800223c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002244:	f040 80b6 	bne.w	80023b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800224a:	461c      	mov	r4, r3
 800224c:	f04f 0500 	mov.w	r5, #0
 8002250:	4622      	mov	r2, r4
 8002252:	462b      	mov	r3, r5
 8002254:	1891      	adds	r1, r2, r2
 8002256:	6439      	str	r1, [r7, #64]	; 0x40
 8002258:	415b      	adcs	r3, r3
 800225a:	647b      	str	r3, [r7, #68]	; 0x44
 800225c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002260:	1912      	adds	r2, r2, r4
 8002262:	eb45 0303 	adc.w	r3, r5, r3
 8002266:	f04f 0000 	mov.w	r0, #0
 800226a:	f04f 0100 	mov.w	r1, #0
 800226e:	00d9      	lsls	r1, r3, #3
 8002270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002274:	00d0      	lsls	r0, r2, #3
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	1911      	adds	r1, r2, r4
 800227c:	6639      	str	r1, [r7, #96]	; 0x60
 800227e:	416b      	adcs	r3, r5
 8002280:	667b      	str	r3, [r7, #100]	; 0x64
 8002282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	1891      	adds	r1, r2, r2
 800228e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002290:	415b      	adcs	r3, r3
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002298:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800229c:	f7fe f860 	bl	8000360 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4ba5      	ldr	r3, [pc, #660]	; (800253c <UART_SetConfig+0x38c>)
 80022a6:	fba3 2302 	umull	r2, r3, r3, r2
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	011e      	lsls	r6, r3, #4
 80022ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b0:	461c      	mov	r4, r3
 80022b2:	f04f 0500 	mov.w	r5, #0
 80022b6:	4622      	mov	r2, r4
 80022b8:	462b      	mov	r3, r5
 80022ba:	1891      	adds	r1, r2, r2
 80022bc:	6339      	str	r1, [r7, #48]	; 0x30
 80022be:	415b      	adcs	r3, r3
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
 80022c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022c6:	1912      	adds	r2, r2, r4
 80022c8:	eb45 0303 	adc.w	r3, r5, r3
 80022cc:	f04f 0000 	mov.w	r0, #0
 80022d0:	f04f 0100 	mov.w	r1, #0
 80022d4:	00d9      	lsls	r1, r3, #3
 80022d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022da:	00d0      	lsls	r0, r2, #3
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	1911      	adds	r1, r2, r4
 80022e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80022e4:	416b      	adcs	r3, r5
 80022e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	1891      	adds	r1, r2, r2
 80022f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80022f6:	415b      	adcs	r3, r3
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002302:	f7fe f82d 	bl	8000360 <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4b8c      	ldr	r3, [pc, #560]	; (800253c <UART_SetConfig+0x38c>)
 800230c:	fba3 1302 	umull	r1, r3, r3, r2
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	2164      	movs	r1, #100	; 0x64
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	3332      	adds	r3, #50	; 0x32
 800231e:	4a87      	ldr	r2, [pc, #540]	; (800253c <UART_SetConfig+0x38c>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800232c:	441e      	add	r6, r3
 800232e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002330:	4618      	mov	r0, r3
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	1894      	adds	r4, r2, r2
 800233c:	623c      	str	r4, [r7, #32]
 800233e:	415b      	adcs	r3, r3
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002346:	1812      	adds	r2, r2, r0
 8002348:	eb41 0303 	adc.w	r3, r1, r3
 800234c:	f04f 0400 	mov.w	r4, #0
 8002350:	f04f 0500 	mov.w	r5, #0
 8002354:	00dd      	lsls	r5, r3, #3
 8002356:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800235a:	00d4      	lsls	r4, r2, #3
 800235c:	4622      	mov	r2, r4
 800235e:	462b      	mov	r3, r5
 8002360:	1814      	adds	r4, r2, r0
 8002362:	653c      	str	r4, [r7, #80]	; 0x50
 8002364:	414b      	adcs	r3, r1
 8002366:	657b      	str	r3, [r7, #84]	; 0x54
 8002368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	461a      	mov	r2, r3
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	1891      	adds	r1, r2, r2
 8002374:	61b9      	str	r1, [r7, #24]
 8002376:	415b      	adcs	r3, r3
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800237e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002382:	f7fd ffed 	bl	8000360 <__aeabi_uldivmod>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4b6c      	ldr	r3, [pc, #432]	; (800253c <UART_SetConfig+0x38c>)
 800238c:	fba3 1302 	umull	r1, r3, r3, r2
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	2164      	movs	r1, #100	; 0x64
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	3332      	adds	r3, #50	; 0x32
 800239e:	4a67      	ldr	r2, [pc, #412]	; (800253c <UART_SetConfig+0x38c>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	f003 0207 	and.w	r2, r3, #7
 80023aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4432      	add	r2, r6
 80023b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023b2:	e0b9      	b.n	8002528 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b6:	461c      	mov	r4, r3
 80023b8:	f04f 0500 	mov.w	r5, #0
 80023bc:	4622      	mov	r2, r4
 80023be:	462b      	mov	r3, r5
 80023c0:	1891      	adds	r1, r2, r2
 80023c2:	6139      	str	r1, [r7, #16]
 80023c4:	415b      	adcs	r3, r3
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023cc:	1912      	adds	r2, r2, r4
 80023ce:	eb45 0303 	adc.w	r3, r5, r3
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	00d9      	lsls	r1, r3, #3
 80023dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023e0:	00d0      	lsls	r0, r2, #3
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	eb12 0804 	adds.w	r8, r2, r4
 80023ea:	eb43 0905 	adc.w	r9, r3, r5
 80023ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f04f 0100 	mov.w	r1, #0
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	008b      	lsls	r3, r1, #2
 8002402:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002406:	0082      	lsls	r2, r0, #2
 8002408:	4640      	mov	r0, r8
 800240a:	4649      	mov	r1, r9
 800240c:	f7fd ffa8 	bl	8000360 <__aeabi_uldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4b49      	ldr	r3, [pc, #292]	; (800253c <UART_SetConfig+0x38c>)
 8002416:	fba3 2302 	umull	r2, r3, r3, r2
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	011e      	lsls	r6, r3, #4
 800241e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002420:	4618      	mov	r0, r3
 8002422:	f04f 0100 	mov.w	r1, #0
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	1894      	adds	r4, r2, r2
 800242c:	60bc      	str	r4, [r7, #8]
 800242e:	415b      	adcs	r3, r3
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002436:	1812      	adds	r2, r2, r0
 8002438:	eb41 0303 	adc.w	r3, r1, r3
 800243c:	f04f 0400 	mov.w	r4, #0
 8002440:	f04f 0500 	mov.w	r5, #0
 8002444:	00dd      	lsls	r5, r3, #3
 8002446:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800244a:	00d4      	lsls	r4, r2, #3
 800244c:	4622      	mov	r2, r4
 800244e:	462b      	mov	r3, r5
 8002450:	1814      	adds	r4, r2, r0
 8002452:	64bc      	str	r4, [r7, #72]	; 0x48
 8002454:	414b      	adcs	r3, r1
 8002456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4618      	mov	r0, r3
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	008b      	lsls	r3, r1, #2
 800246c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002470:	0082      	lsls	r2, r0, #2
 8002472:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002476:	f7fd ff73 	bl	8000360 <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <UART_SetConfig+0x38c>)
 8002480:	fba3 1302 	umull	r1, r3, r3, r2
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	2164      	movs	r1, #100	; 0x64
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	3332      	adds	r3, #50	; 0x32
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <UART_SetConfig+0x38c>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249e:	441e      	add	r6, r3
 80024a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a2:	4618      	mov	r0, r3
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	1894      	adds	r4, r2, r2
 80024ae:	603c      	str	r4, [r7, #0]
 80024b0:	415b      	adcs	r3, r3
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024b8:	1812      	adds	r2, r2, r0
 80024ba:	eb41 0303 	adc.w	r3, r1, r3
 80024be:	f04f 0400 	mov.w	r4, #0
 80024c2:	f04f 0500 	mov.w	r5, #0
 80024c6:	00dd      	lsls	r5, r3, #3
 80024c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024cc:	00d4      	lsls	r4, r2, #3
 80024ce:	4622      	mov	r2, r4
 80024d0:	462b      	mov	r3, r5
 80024d2:	eb12 0a00 	adds.w	sl, r2, r0
 80024d6:	eb43 0b01 	adc.w	fp, r3, r1
 80024da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4618      	mov	r0, r3
 80024e0:	f04f 0100 	mov.w	r1, #0
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	008b      	lsls	r3, r1, #2
 80024ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024f2:	0082      	lsls	r2, r0, #2
 80024f4:	4650      	mov	r0, sl
 80024f6:	4659      	mov	r1, fp
 80024f8:	f7fd ff32 	bl	8000360 <__aeabi_uldivmod>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4b0e      	ldr	r3, [pc, #56]	; (800253c <UART_SetConfig+0x38c>)
 8002502:	fba3 1302 	umull	r1, r3, r3, r2
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2164      	movs	r1, #100	; 0x64
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	3332      	adds	r3, #50	; 0x32
 8002514:	4a09      	ldr	r2, [pc, #36]	; (800253c <UART_SetConfig+0x38c>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	f003 020f 	and.w	r2, r3, #15
 8002520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4432      	add	r2, r6
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	bf00      	nop
 800252a:	377c      	adds	r7, #124	; 0x7c
 800252c:	46bd      	mov	sp, r7
 800252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002532:	bf00      	nop
 8002534:	40011000 	.word	0x40011000
 8002538:	40011400 	.word	0x40011400
 800253c:	51eb851f 	.word	0x51eb851f

08002540 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f103 0208 	add.w	r2, r3, #8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f103 0208 	add.w	r2, r3, #8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f103 0208 	add.w	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	601a      	str	r2, [r3, #0]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d103      	bne.n	8002602 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e00c      	b.n	800261c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3308      	adds	r3, #8
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e002      	b.n	8002610 <vListInsert+0x2e>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	429a      	cmp	r2, r3
 800261a:	d2f6      	bcs.n	800260a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6892      	ldr	r2, [r2, #8]
 800266a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6852      	ldr	r2, [r2, #4]
 8002674:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	d103      	bne.n	8002688 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1e5a      	subs	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80026b2:	2301      	movs	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xQueueGenericReset+0x2e>
        __asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	60fb      	str	r3, [r7, #12]
    }
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05d      	beq.n	8002798 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d059      	beq.n	8002798 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	2100      	movs	r1, #0
 80026ee:	fba3 2302 	umull	r2, r3, r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d000      	beq.n	80026f8 <xQueueGenericReset+0x50>
 80026f6:	2101      	movs	r1, #1
 80026f8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d14c      	bne.n	8002798 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80026fe:	f002 f8cb 	bl	8004898 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	6939      	ldr	r1, [r7, #16]
 800270c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	441a      	add	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2200      	movs	r2, #0
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	3b01      	subs	r3, #1
 8002730:	6939      	ldr	r1, [r7, #16]
 8002732:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	441a      	add	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	22ff      	movs	r2, #255	; 0xff
 8002742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	22ff      	movs	r2, #255	; 0xff
 800274a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d114      	bne.n	800277e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01a      	beq.n	8002792 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	3310      	adds	r3, #16
 8002760:	4618      	mov	r0, r3
 8002762:	f001 f933 	bl	80039cc <xTaskRemoveFromEventList>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d012      	beq.n	8002792 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <xQueueGenericReset+0x11c>)
 800276e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	e009      	b.n	8002792 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	3310      	adds	r3, #16
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fedc 	bl	8002540 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	3324      	adds	r3, #36	; 0x24
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fed7 	bl	8002540 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002792:	f002 f8b1 	bl	80048f8 <vPortExitCritical>
 8002796:	e001      	b.n	800279c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <xQueueGenericReset+0x110>
        __asm volatile
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	60bb      	str	r3, [r7, #8]
    }
 80027b4:	bf00      	nop
 80027b6:	e7fe      	b.n	80027b6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80027b8:	697b      	ldr	r3, [r7, #20]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	4613      	mov	r3, r2
 80027d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d02e      	beq.n	800283e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80027e0:	2100      	movs	r1, #0
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d000      	beq.n	80027f0 <xQueueGenericCreate+0x28>
 80027ee:	2101      	movs	r1, #1
 80027f0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d123      	bne.n	800283e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80027fe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002802:	d81c      	bhi.n	800283e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	3350      	adds	r3, #80	; 0x50
 8002812:	4618      	mov	r0, r3
 8002814:	f002 f962 	bl	8004adc <pvPortMalloc>
 8002818:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01c      	beq.n	800285a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3350      	adds	r3, #80	; 0x50
 8002828:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800282a:	79fa      	ldrb	r2, [r7, #7]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f814 	bl	8002864 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800283c:	e00d      	b.n	800285a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <xQueueGenericCreate+0x92>
        __asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	613b      	str	r3, [r7, #16]
    }
 8002856:	bf00      	nop
 8002858:	e7fe      	b.n	8002858 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800285a:	69fb      	ldr	r3, [r7, #28]
    }
 800285c:	4618      	mov	r0, r3
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e002      	b.n	8002886 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002892:	2101      	movs	r1, #1
 8002894:	69b8      	ldr	r0, [r7, #24]
 8002896:	f7ff ff07 	bl	80026a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	; 0x38
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ba:	2300      	movs	r3, #0
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <xQueueGenericSend+0x32>
        __asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <xQueueGenericSend+0x40>
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <xQueueGenericSend+0x44>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <xQueueGenericSend+0x46>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <xQueueGenericSend+0x60>
        __asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002908:	bf00      	nop
 800290a:	e7fe      	b.n	800290a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d103      	bne.n	800291a <xQueueGenericSend+0x6e>
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <xQueueGenericSend+0x72>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueGenericSend+0x74>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xQueueGenericSend+0x8e>
        __asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	623b      	str	r3, [r7, #32]
    }
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800293a:	f001 f9e3 	bl	8003d04 <xTaskGetSchedulerState>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <xQueueGenericSend+0x9e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <xQueueGenericSend+0xa2>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <xQueueGenericSend+0xa4>
 800294e:	2300      	movs	r3, #0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <xQueueGenericSend+0xbe>
        __asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	61fb      	str	r3, [r7, #28]
    }
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800296a:	f001 ff95 	bl	8004898 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <xQueueGenericSend+0xd4>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d129      	bne.n	80029d4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002986:	f000 fa93 	bl	8002eb0 <prvCopyDataToQueue>
 800298a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	3324      	adds	r3, #36	; 0x24
 8002998:	4618      	mov	r0, r3
 800299a:	f001 f817 	bl	80039cc <xTaskRemoveFromEventList>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80029a4:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <xQueueGenericSend+0x1f8>)
 80029a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	e00a      	b.n	80029cc <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80029bc:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <xQueueGenericSend+0x1f8>)
 80029be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80029cc:	f001 ff94 	bl	80048f8 <vPortExitCritical>
                return pdPASS;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e063      	b.n	8002a9c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029da:	f001 ff8d 	bl	80048f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	e05c      	b.n	8002a9c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 f84f 	bl	8003a90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029f2:	2301      	movs	r3, #1
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029f6:	f001 ff7f 	bl	80048f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029fa:	f000 fdb7 	bl	800356c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029fe:	f001 ff4b 	bl	8004898 <vPortEnterCritical>
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d103      	bne.n	8002a18 <xQueueGenericSend+0x16c>
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a1e:	b25b      	sxtb	r3, r3
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d103      	bne.n	8002a2e <xQueueGenericSend+0x182>
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a2e:	f001 ff63 	bl	80048f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a32:	1d3a      	adds	r2, r7, #4
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 f83e 	bl	8003abc <xTaskCheckForTimeOut>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d124      	bne.n	8002a90 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a48:	f000 fb2a 	bl	80030a0 <prvIsQueueFull>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d018      	beq.n	8002a84 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	3310      	adds	r3, #16
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 ff66 	bl	800392c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a62:	f000 fab5 	bl	8002fd0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002a66:	f000 fd8f 	bl	8003588 <xTaskResumeAll>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f af7c 	bne.w	800296a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <xQueueGenericSend+0x1f8>)
 8002a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	e772      	b.n	800296a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a86:	f000 faa3 	bl	8002fd0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a8a:	f000 fd7d 	bl	8003588 <xTaskResumeAll>
 8002a8e:	e76c      	b.n	800296a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a92:	f000 fa9d 	bl	8002fd0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a96:	f000 fd77 	bl	8003588 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002a9a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3738      	adds	r7, #56	; 0x38
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <xQueueReceive+0x30>
        __asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	623b      	str	r3, [r7, #32]
    }
 8002ad4:	bf00      	nop
 8002ad6:	e7fe      	b.n	8002ad6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <xQueueReceive+0x3e>
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <xQueueReceive+0x42>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <xQueueReceive+0x44>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueReceive+0x5e>
        __asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	61fb      	str	r3, [r7, #28]
    }
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b06:	f001 f8fd 	bl	8003d04 <xTaskGetSchedulerState>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <xQueueReceive+0x6e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <xQueueReceive+0x72>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <xQueueReceive+0x74>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <xQueueReceive+0x8e>
        __asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	61bb      	str	r3, [r7, #24]
    }
 8002b32:	bf00      	nop
 8002b34:	e7fe      	b.n	8002b34 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b36:	f001 feaf 	bl	8004898 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01f      	beq.n	8002b86 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b4a:	f000 fa1b 	bl	8002f84 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	1e5a      	subs	r2, r3, #1
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00f      	beq.n	8002b7e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	3310      	adds	r3, #16
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 ff32 	bl	80039cc <xTaskRemoveFromEventList>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <xQueueReceive+0x1bc>)
 8002b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b7e:	f001 febb 	bl	80048f8 <vPortExitCritical>
                return pdPASS;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e069      	b.n	8002c5a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b8c:	f001 feb4 	bl	80048f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e062      	b.n	8002c5a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b9a:	f107 0310 	add.w	r3, r7, #16
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 ff76 	bl	8003a90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ba8:	f001 fea6 	bl	80048f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bac:	f000 fcde 	bl	800356c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bb0:	f001 fe72 	bl	8004898 <vPortEnterCritical>
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d103      	bne.n	8002bca <xQueueReceive+0x122>
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd0:	b25b      	sxtb	r3, r3
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d103      	bne.n	8002be0 <xQueueReceive+0x138>
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be0:	f001 fe8a 	bl	80048f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002be4:	1d3a      	adds	r2, r7, #4
 8002be6:	f107 0310 	add.w	r3, r7, #16
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 ff65 	bl	8003abc <xTaskCheckForTimeOut>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d123      	bne.n	8002c40 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bfa:	f000 fa3b 	bl	8003074 <prvIsQueueEmpty>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	3324      	adds	r3, #36	; 0x24
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fe8d 	bl	800392c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c14:	f000 f9dc 	bl	8002fd0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c18:	f000 fcb6 	bl	8003588 <xTaskResumeAll>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d189      	bne.n	8002b36 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <xQueueReceive+0x1bc>)
 8002c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	e780      	b.n	8002b36 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c36:	f000 f9cb 	bl	8002fd0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c3a:	f000 fca5 	bl	8003588 <xTaskResumeAll>
 8002c3e:	e77a      	b.n	8002b36 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c42:	f000 f9c5 	bl	8002fd0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c46:	f000 fc9f 	bl	8003588 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c4c:	f000 fa12 	bl	8003074 <prvIsQueueEmpty>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f43f af6f 	beq.w	8002b36 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002c58:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3730      	adds	r7, #48	; 0x30
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	e000ed04 	.word	0xe000ed04

08002c68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08e      	sub	sp, #56	; 0x38
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	623b      	str	r3, [r7, #32]
    }
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	61fb      	str	r3, [r7, #28]
    }
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cb8:	f001 f824 	bl	8003d04 <xTaskGetSchedulerState>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <xQueueSemaphoreTake+0x60>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <xQueueSemaphoreTake+0x64>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <xQueueSemaphoreTake+0x66>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	61bb      	str	r3, [r7, #24]
    }
 8002ce4:	bf00      	nop
 8002ce6:	e7fe      	b.n	8002ce6 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ce8:	f001 fdd6 	bl	8004898 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d024      	beq.n	8002d42 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	1e5a      	subs	r2, r3, #1
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d104      	bne.n	8002d12 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002d08:	f001 f998 	bl	800403c <pvTaskIncrementMutexHeldCount>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00f      	beq.n	8002d3a <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	3310      	adds	r3, #16
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fe54 	bl	80039cc <xTaskRemoveFromEventList>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002d2a:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <xQueueSemaphoreTake+0x214>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002d3a:	f001 fddd 	bl	80048f8 <vPortExitCritical>
                return pdPASS;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e097      	b.n	8002e72 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d111      	bne.n	8002d6c <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	617b      	str	r3, [r7, #20]
    }
 8002d60:	bf00      	nop
 8002d62:	e7fe      	b.n	8002d62 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002d64:	f001 fdc8 	bl	80048f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e082      	b.n	8002e72 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fe8a 	bl	8003a90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002d80:	f001 fdba 	bl	80048f8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002d84:	f000 fbf2 	bl	800356c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d88:	f001 fd86 	bl	8004898 <vPortEnterCritical>
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d103      	bne.n	8002da2 <xQueueSemaphoreTake+0x13a>
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d103      	bne.n	8002db8 <xQueueSemaphoreTake+0x150>
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db8:	f001 fd9e 	bl	80048f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dbc:	463a      	mov	r2, r7
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fe79 	bl	8003abc <xTaskCheckForTimeOut>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d132      	bne.n	8002e36 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dd2:	f000 f94f 	bl	8003074 <prvIsQueueEmpty>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d026      	beq.n	8002e2a <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8002de4:	f001 fd58 	bl	8004898 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 ffa7 	bl	8003d40 <xTaskPriorityInherit>
 8002df2:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8002df4:	f001 fd80 	bl	80048f8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	3324      	adds	r3, #36	; 0x24
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fd93 	bl	800392c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e08:	f000 f8e2 	bl	8002fd0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e0c:	f000 fbbc 	bl	8003588 <xTaskResumeAll>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f47f af68 	bne.w	8002ce8 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <xQueueSemaphoreTake+0x214>)
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	e75e      	b.n	8002ce8 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002e2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e2c:	f000 f8d0 	bl	8002fd0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e30:	f000 fbaa 	bl	8003588 <xTaskResumeAll>
 8002e34:	e758      	b.n	8002ce8 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e38:	f000 f8ca 	bl	8002fd0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e3c:	f000 fba4 	bl	8003588 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e42:	f000 f917 	bl	8003074 <prvIsQueueEmpty>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f43f af4d 	beq.w	8002ce8 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8002e54:	f001 fd20 	bl	8004898 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e5a:	f000 f811 	bl	8002e80 <prvGetDisinheritPriorityAfterTimeout>
 8002e5e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 f85a 	bl	8003f20 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8002e6c:	f001 fd44 	bl	80048f8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002e70:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3738      	adds	r7, #56	; 0x38
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1c3 0305 	rsb	r3, r3, #5
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	e001      	b.n	8002ea2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
    }
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10d      	bne.n	8002eea <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d14d      	bne.n	8002f72 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 ffa6 	bl	8003e2c <xTaskPriorityDisinherit>
 8002ee0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e043      	b.n	8002f72 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d119      	bne.n	8002f24 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6858      	ldr	r0, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	f003 fd92 	bl	8006a24 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	441a      	add	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d32b      	bcc.n	8002f72 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	e026      	b.n	8002f72 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68d8      	ldr	r0, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	f003 fd78 	bl	8006a24 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	441a      	add	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d207      	bcs.n	8002f60 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	425b      	negs	r3, r3
 8002f5a:	441a      	add	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d105      	bne.n	8002f72 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002f7a:	697b      	ldr	r3, [r7, #20]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	441a      	add	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d303      	bcc.n	8002fb8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68d9      	ldr	r1, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6838      	ldr	r0, [r7, #0]
 8002fc4:	f003 fd2e 	bl	8006a24 <memcpy>
    }
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002fd8:	f001 fc5e 	bl	8004898 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fe4:	e011      	b.n	800300a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d012      	beq.n	8003014 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3324      	adds	r3, #36	; 0x24
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fcea 	bl	80039cc <xTaskRemoveFromEventList>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ffe:	f000 fdc3 	bl	8003b88 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	3b01      	subs	r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800300a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	dce9      	bgt.n	8002fe6 <prvUnlockQueue+0x16>
 8003012:	e000      	b.n	8003016 <prvUnlockQueue+0x46>
                        break;
 8003014:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	22ff      	movs	r2, #255	; 0xff
 800301a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800301e:	f001 fc6b 	bl	80048f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003022:	f001 fc39 	bl	8004898 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800302c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800302e:	e011      	b.n	8003054 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d012      	beq.n	800305e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3310      	adds	r3, #16
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fcc5 	bl	80039cc <xTaskRemoveFromEventList>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003048:	f000 fd9e 	bl	8003b88 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800304c:	7bbb      	ldrb	r3, [r7, #14]
 800304e:	3b01      	subs	r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003058:	2b00      	cmp	r3, #0
 800305a:	dce9      	bgt.n	8003030 <prvUnlockQueue+0x60>
 800305c:	e000      	b.n	8003060 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800305e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	22ff      	movs	r2, #255	; 0xff
 8003064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003068:	f001 fc46 	bl	80048f8 <vPortExitCritical>
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800307c:	f001 fc0c 	bl	8004898 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e001      	b.n	8003092 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003092:	f001 fc31 	bl	80048f8 <vPortExitCritical>

    return xReturn;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80030a8:	f001 fbf6 	bl	8004898 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d102      	bne.n	80030be <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e001      	b.n	80030c2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80030c2:	f001 fc19 	bl	80048f8 <vPortExitCritical>

    return xReturn;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <vQueueAddToRegistry+0x26>
        __asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	60fb      	str	r3, [r7, #12]
    }
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d024      	beq.n	800314a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e01e      	b.n	8003144 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003106:	4a18      	ldr	r2, [pc, #96]	; (8003168 <vQueueAddToRegistry+0x98>)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	d105      	bne.n	8003122 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <vQueueAddToRegistry+0x98>)
 800311c:	4413      	add	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
                    break;
 8003120:	e013      	b.n	800314a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <vQueueAddToRegistry+0x6e>
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <vQueueAddToRegistry+0x98>)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <vQueueAddToRegistry+0x98>)
 800313a:	4413      	add	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b07      	cmp	r3, #7
 8003148:	d9dd      	bls.n	8003106 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	20014440 	.word	0x20014440

0800316c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800317c:	f001 fb8c 	bl	8004898 <vPortEnterCritical>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003186:	b25b      	sxtb	r3, r3
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d103      	bne.n	8003196 <vQueueWaitForMessageRestricted+0x2a>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800319c:	b25b      	sxtb	r3, r3
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a2:	d103      	bne.n	80031ac <vQueueWaitForMessageRestricted+0x40>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031ac:	f001 fba4 	bl	80048f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3324      	adds	r3, #36	; 0x24
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fbd7 	bl	8003974 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff ff02 	bl	8002fd0 <prvUnlockQueue>
    }
 80031cc:	bf00      	nop
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af04      	add	r7, sp, #16
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 fc77 	bl	8004adc <pvPortMalloc>
 80031ee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00e      	beq.n	8003214 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031f6:	2058      	movs	r0, #88	; 0x58
 80031f8:	f001 fc70 	bl	8004adc <pvPortMalloc>
 80031fc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
 800320a:	e005      	b.n	8003218 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f001 fd45 	bl	8004c9c <vPortFree>
 8003212:	e001      	b.n	8003218 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d013      	beq.n	8003246 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	2300      	movs	r3, #0
 8003222:	9303      	str	r3, [sp, #12]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	9302      	str	r3, [sp, #8]
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f80e 	bl	8003256 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800323a:	69f8      	ldr	r0, [r7, #28]
 800323c:	f000 f8a2 	bl	8003384 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003240:	2301      	movs	r3, #1
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	e002      	b.n	800324c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800324c:	69bb      	ldr	r3, [r7, #24]
    }
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b088      	sub	sp, #32
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	461a      	mov	r2, r3
 800326e:	21a5      	movs	r1, #165	; 0xa5
 8003270:	f003 fbe6 	bl	8006a40 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800327e:	3b01      	subs	r3, #1
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f023 0307 	bic.w	r3, r3, #7
 800328c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <prvInitialiseNewTask+0x58>
        __asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	617b      	str	r3, [r7, #20]
    }
 80032aa:	bf00      	nop
 80032ac:	e7fe      	b.n	80032ac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01f      	beq.n	80032f4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	e012      	b.n	80032e0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	4413      	add	r3, r2
 80032c0:	7819      	ldrb	r1, [r3, #0]
 80032c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	3334      	adds	r3, #52	; 0x34
 80032ca:	460a      	mov	r2, r1
 80032cc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3301      	adds	r3, #1
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b09      	cmp	r3, #9
 80032e4:	d9e9      	bls.n	80032ba <prvInitialiseNewTask+0x64>
 80032e6:	e000      	b.n	80032ea <prvInitialiseNewTask+0x94>
            {
                break;
 80032e8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032f2:	e003      	b.n	80032fc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d901      	bls.n	8003306 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003302:	2304      	movs	r3, #4
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003310:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	2200      	movs	r2, #0
 8003316:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	3304      	adds	r3, #4
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f92f 	bl	8002580 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	3318      	adds	r3, #24
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff f92a 	bl	8002580 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003330:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	f1c3 0205 	rsb	r2, r3, #5
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	3350      	adds	r3, #80	; 0x50
 8003346:	2204      	movs	r2, #4
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fb78 	bl	8006a40 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	3354      	adds	r3, #84	; 0x54
 8003354:	2201      	movs	r2, #1
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f003 fb71 	bl	8006a40 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	68f9      	ldr	r1, [r7, #12]
 8003362:	69b8      	ldr	r0, [r7, #24]
 8003364:	f001 f968 	bl	8004638 <pxPortInitialiseStack>
 8003368:	4602      	mov	r2, r0
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003378:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800337a:	bf00      	nop
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800338c:	f001 fa84 	bl	8004898 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003390:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <prvAddNewTaskToReadyList+0xc0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <prvAddNewTaskToReadyList+0xc0>)
 8003398:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800339a:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <prvAddNewTaskToReadyList+0xc4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <prvAddNewTaskToReadyList+0xc4>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033a8:	4b26      	ldr	r3, [pc, #152]	; (8003444 <prvAddNewTaskToReadyList+0xc0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d110      	bne.n	80033d2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80033b0:	f000 fc0e 	bl	8003bd0 <prvInitialiseTaskLists>
 80033b4:	e00d      	b.n	80033d2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <prvAddNewTaskToReadyList+0xc8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033be:	4b22      	ldr	r3, [pc, #136]	; (8003448 <prvAddNewTaskToReadyList+0xc4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d802      	bhi.n	80033d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80033cc:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <prvAddNewTaskToReadyList+0xc4>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80033d2:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <prvAddNewTaskToReadyList+0xcc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <prvAddNewTaskToReadyList+0xcc>)
 80033da:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033dc:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <prvAddNewTaskToReadyList+0xcc>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	2201      	movs	r2, #1
 80033ea:	409a      	lsls	r2, r3
 80033ec:	4b19      	ldr	r3, [pc, #100]	; (8003454 <prvAddNewTaskToReadyList+0xd0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <prvAddNewTaskToReadyList+0xd0>)
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <prvAddNewTaskToReadyList+0xd4>)
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7ff f8c4 	bl	800259a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003412:	f001 fa71 	bl	80048f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <prvAddNewTaskToReadyList+0xc8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00e      	beq.n	800343c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <prvAddNewTaskToReadyList+0xc4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	429a      	cmp	r2, r3
 800342a:	d207      	bcs.n	800343c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <prvAddNewTaskToReadyList+0xd8>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000178 	.word	0x20000178
 8003448:	200000a0 	.word	0x200000a0
 800344c:	20000184 	.word	0x20000184
 8003450:	20000194 	.word	0x20000194
 8003454:	20000180 	.word	0x20000180
 8003458:	200000a4 	.word	0x200000a4
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d017      	beq.n	80034a2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <vTaskDelay+0x60>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <vTaskDelay+0x30>
        __asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	60bb      	str	r3, [r7, #8]
    }
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003490:	f000 f86c 	bl	800356c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fde4 	bl	8004064 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800349c:	f000 f874 	bl	8003588 <xTaskResumeAll>
 80034a0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <vTaskDelay+0x64>)
 80034aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200001a0 	.word	0x200001a0
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <vTaskStartScheduler+0x88>)
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	2300      	movs	r3, #0
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	2282      	movs	r2, #130	; 0x82
 80034da:	491e      	ldr	r1, [pc, #120]	; (8003554 <vTaskStartScheduler+0x8c>)
 80034dc:	481e      	ldr	r0, [pc, #120]	; (8003558 <vTaskStartScheduler+0x90>)
 80034de:	f7ff fe79 	bl	80031d4 <xTaskCreate>
 80034e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d102      	bne.n	80034f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80034ea:	f000 fe21 	bl	8004130 <xTimerCreateTimerTask>
 80034ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d116      	bne.n	8003524 <vTaskStartScheduler+0x5c>
        __asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	60bb      	str	r3, [r7, #8]
    }
 8003508:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <vTaskStartScheduler+0x94>)
 800350c:	f04f 32ff 	mov.w	r2, #4294967295
 8003510:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <vTaskStartScheduler+0x98>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <vTaskStartScheduler+0x9c>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800351e:	f001 f919 	bl	8004754 <xPortStartScheduler>
 8003522:	e00e      	b.n	8003542 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d10a      	bne.n	8003542 <vTaskStartScheduler+0x7a>
        __asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	607b      	str	r3, [r7, #4]
    }
 800353e:	bf00      	nop
 8003540:	e7fe      	b.n	8003540 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <vTaskStartScheduler+0xa0>)
 8003544:	681b      	ldr	r3, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2000019c 	.word	0x2000019c
 8003554:	08007e70 	.word	0x08007e70
 8003558:	08003ba1 	.word	0x08003ba1
 800355c:	20000198 	.word	0x20000198
 8003560:	20000184 	.word	0x20000184
 8003564:	2000017c 	.word	0x2000017c
 8003568:	2000000c 	.word	0x2000000c

0800356c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <vTaskSuspendAll+0x18>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a03      	ldr	r2, [pc, #12]	; (8003584 <vTaskSuspendAll+0x18>)
 8003578:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	200001a0 	.word	0x200001a0

08003588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003596:	4b41      	ldr	r3, [pc, #260]	; (800369c <xTaskResumeAll+0x114>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	603b      	str	r3, [r7, #0]
    }
 80035b0:	bf00      	nop
 80035b2:	e7fe      	b.n	80035b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80035b4:	f001 f970 	bl	8004898 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80035b8:	4b38      	ldr	r3, [pc, #224]	; (800369c <xTaskResumeAll+0x114>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3b01      	subs	r3, #1
 80035be:	4a37      	ldr	r2, [pc, #220]	; (800369c <xTaskResumeAll+0x114>)
 80035c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <xTaskResumeAll+0x114>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d161      	bne.n	800368e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035ca:	4b35      	ldr	r3, [pc, #212]	; (80036a0 <xTaskResumeAll+0x118>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d05d      	beq.n	800368e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d2:	e02e      	b.n	8003632 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <xTaskResumeAll+0x11c>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3318      	adds	r3, #24
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff f837 	bl	8002654 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f832 	bl	8002654 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	2201      	movs	r2, #1
 80035f6:	409a      	lsls	r2, r3
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <xTaskResumeAll+0x120>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <xTaskResumeAll+0x120>)
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4a27      	ldr	r2, [pc, #156]	; (80036ac <xTaskResumeAll+0x124>)
 8003610:	441a      	add	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3304      	adds	r3, #4
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f7fe ffbe 	bl	800259a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003622:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <xTaskResumeAll+0x128>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	429a      	cmp	r2, r3
 800362a:	d302      	bcc.n	8003632 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 800362c:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <xTaskResumeAll+0x12c>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <xTaskResumeAll+0x11c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1cc      	bne.n	80035d4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003640:	f000 fb44 	bl	8003ccc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <xTaskResumeAll+0x130>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d010      	beq.n	8003672 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003650:	f000 f858 	bl	8003704 <xTaskIncrementTick>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <xTaskResumeAll+0x12c>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f1      	bne.n	8003650 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <xTaskResumeAll+0x130>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <xTaskResumeAll+0x12c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800367a:	2301      	movs	r3, #1
 800367c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800367e:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <xTaskResumeAll+0x134>)
 8003680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800368e:	f001 f933 	bl	80048f8 <vPortExitCritical>

    return xAlreadyYielded;
 8003692:	68bb      	ldr	r3, [r7, #8]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	200001a0 	.word	0x200001a0
 80036a0:	20000178 	.word	0x20000178
 80036a4:	20000138 	.word	0x20000138
 80036a8:	20000180 	.word	0x20000180
 80036ac:	200000a4 	.word	0x200000a4
 80036b0:	200000a0 	.word	0x200000a0
 80036b4:	2000018c 	.word	0x2000018c
 80036b8:	20000188 	.word	0x20000188
 80036bc:	e000ed04 	.word	0xe000ed04

080036c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <xTaskGetTickCount+0x1c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80036cc:	687b      	ldr	r3, [r7, #4]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	2000017c 	.word	0x2000017c

080036e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036e6:	f001 f9b9 	bl	8004a5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <xTaskGetTickCountFromISR+0x20>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80036f4:	683b      	ldr	r3, [r7, #0]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	2000017c 	.word	0x2000017c

08003704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800370e:	4b4e      	ldr	r3, [pc, #312]	; (8003848 <xTaskIncrementTick+0x144>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 808e 	bne.w	8003834 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <xTaskIncrementTick+0x148>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003720:	4a4a      	ldr	r2, [pc, #296]	; (800384c <xTaskIncrementTick+0x148>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d120      	bne.n	800376e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800372c:	4b48      	ldr	r3, [pc, #288]	; (8003850 <xTaskIncrementTick+0x14c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <xTaskIncrementTick+0x48>
        __asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	603b      	str	r3, [r7, #0]
    }
 8003748:	bf00      	nop
 800374a:	e7fe      	b.n	800374a <xTaskIncrementTick+0x46>
 800374c:	4b40      	ldr	r3, [pc, #256]	; (8003850 <xTaskIncrementTick+0x14c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b40      	ldr	r3, [pc, #256]	; (8003854 <xTaskIncrementTick+0x150>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3e      	ldr	r2, [pc, #248]	; (8003850 <xTaskIncrementTick+0x14c>)
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4a3e      	ldr	r2, [pc, #248]	; (8003854 <xTaskIncrementTick+0x150>)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <xTaskIncrementTick+0x154>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	4a3c      	ldr	r2, [pc, #240]	; (8003858 <xTaskIncrementTick+0x154>)
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	f000 faaf 	bl	8003ccc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <xTaskIncrementTick+0x158>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	429a      	cmp	r2, r3
 8003776:	d348      	bcc.n	800380a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003778:	4b35      	ldr	r3, [pc, #212]	; (8003850 <xTaskIncrementTick+0x14c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <xTaskIncrementTick+0x158>)
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	601a      	str	r2, [r3, #0]
                    break;
 800378a:	e03e      	b.n	800380a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800378c:	4b30      	ldr	r3, [pc, #192]	; (8003850 <xTaskIncrementTick+0x14c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d203      	bcs.n	80037ac <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80037a4:	4a2d      	ldr	r2, [pc, #180]	; (800385c <xTaskIncrementTick+0x158>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037aa:	e02e      	b.n	800380a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe ff4f 	bl	8002654 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3318      	adds	r3, #24
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ff46 	bl	8002654 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	2201      	movs	r2, #1
 80037ce:	409a      	lsls	r2, r3
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <xTaskIncrementTick+0x15c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	4a22      	ldr	r2, [pc, #136]	; (8003860 <xTaskIncrementTick+0x15c>)
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <xTaskIncrementTick+0x160>)
 80037e8:	441a      	add	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3304      	adds	r3, #4
 80037ee:	4619      	mov	r1, r3
 80037f0:	4610      	mov	r0, r2
 80037f2:	f7fe fed2 	bl	800259a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <xTaskIncrementTick+0x164>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	429a      	cmp	r2, r3
 8003802:	d3b9      	bcc.n	8003778 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003808:	e7b6      	b.n	8003778 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <xTaskIncrementTick+0x164>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	4914      	ldr	r1, [pc, #80]	; (8003864 <xTaskIncrementTick+0x160>)
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d901      	bls.n	8003826 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003822:	2301      	movs	r3, #1
 8003824:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <xTaskIncrementTick+0x168>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800382e:	2301      	movs	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e004      	b.n	800383e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <xTaskIncrementTick+0x16c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <xTaskIncrementTick+0x16c>)
 800383c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800383e:	697b      	ldr	r3, [r7, #20]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	200001a0 	.word	0x200001a0
 800384c:	2000017c 	.word	0x2000017c
 8003850:	20000130 	.word	0x20000130
 8003854:	20000134 	.word	0x20000134
 8003858:	20000190 	.word	0x20000190
 800385c:	20000198 	.word	0x20000198
 8003860:	20000180 	.word	0x20000180
 8003864:	200000a4 	.word	0x200000a4
 8003868:	200000a0 	.word	0x200000a0
 800386c:	2000018c 	.word	0x2000018c
 8003870:	20000188 	.word	0x20000188

08003874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <vTaskSwitchContext+0xa4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003882:	4b26      	ldr	r3, [pc, #152]	; (800391c <vTaskSwitchContext+0xa8>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003888:	e03f      	b.n	800390a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <vTaskSwitchContext+0xa8>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003890:	4b23      	ldr	r3, [pc, #140]	; (8003920 <vTaskSwitchContext+0xac>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	fab3 f383 	clz	r3, r3
 800389c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	f1c3 031f 	rsb	r3, r3, #31
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	491f      	ldr	r1, [pc, #124]	; (8003924 <vTaskSwitchContext+0xb0>)
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	607b      	str	r3, [r7, #4]
    }
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <vTaskSwitchContext+0x5a>
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <vTaskSwitchContext+0xb0>)
 80038dc:	4413      	add	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	3308      	adds	r3, #8
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d104      	bne.n	8003900 <vTaskSwitchContext+0x8c>
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	605a      	str	r2, [r3, #4]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <vTaskSwitchContext+0xb4>)
 8003908:	6013      	str	r3, [r2, #0]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	200001a0 	.word	0x200001a0
 800391c:	2000018c 	.word	0x2000018c
 8003920:	20000180 	.word	0x20000180
 8003924:	200000a4 	.word	0x200000a4
 8003928:	200000a0 	.word	0x200000a0

0800392c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60fb      	str	r3, [r7, #12]
    }
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <vTaskPlaceOnEventList+0x44>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3318      	adds	r3, #24
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fe fe41 	bl	80025e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003960:	2101      	movs	r1, #1
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	f000 fb7e 	bl	8004064 <prvAddCurrentTaskToDelayedList>
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200000a0 	.word	0x200000a0

08003974 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	617b      	str	r3, [r7, #20]
    }
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3318      	adds	r3, #24
 80039a2:	4619      	mov	r1, r3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7fe fdf8 	bl	800259a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295
 80039b4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	68b8      	ldr	r0, [r7, #8]
 80039ba:	f000 fb53 	bl	8004064 <prvAddCurrentTaskToDelayedList>
    }
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200000a0 	.word	0x200000a0

080039cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	60fb      	str	r3, [r7, #12]
    }
 80039f4:	bf00      	nop
 80039f6:	e7fe      	b.n	80039f6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	3318      	adds	r3, #24
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fe29 	bl	8002654 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <xTaskRemoveFromEventList+0xac>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11c      	bne.n	8003a44 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fe20 	bl	8002654 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <xTaskRemoveFromEventList+0xb0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <xTaskRemoveFromEventList+0xb0>)
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <xTaskRemoveFromEventList+0xb4>)
 8003a34:	441a      	add	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7fe fdac 	bl	800259a <vListInsertEnd>
 8003a42:	e005      	b.n	8003a50 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3318      	adds	r3, #24
 8003a48:	4619      	mov	r1, r3
 8003a4a:	480e      	ldr	r0, [pc, #56]	; (8003a84 <xTaskRemoveFromEventList+0xb8>)
 8003a4c:	f7fe fda5 	bl	800259a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <xTaskRemoveFromEventList+0xbc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d905      	bls.n	8003a6a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <xTaskRemoveFromEventList+0xc0>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e001      	b.n	8003a6e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a6e:	697b      	ldr	r3, [r7, #20]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	200001a0 	.word	0x200001a0
 8003a7c:	20000180 	.word	0x20000180
 8003a80:	200000a4 	.word	0x200000a4
 8003a84:	20000138 	.word	0x20000138
 8003a88:	200000a0 	.word	0x200000a0
 8003a8c:	2000018c 	.word	0x2000018c

08003a90 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <vTaskInternalSetTimeOutState+0x24>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <vTaskInternalSetTimeOutState+0x28>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20000190 	.word	0x20000190
 8003ab8:	2000017c 	.word	0x2000017c

08003abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	613b      	str	r3, [r7, #16]
    }
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	60fb      	str	r3, [r7, #12]
    }
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003afe:	f000 fecb 	bl	8004898 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b02:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <xTaskCheckForTimeOut+0xc4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d102      	bne.n	8003b22 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e026      	b.n	8003b70 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <xTaskCheckForTimeOut+0xc8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d00a      	beq.n	8003b44 <xTaskCheckForTimeOut+0x88>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d305      	bcc.n	8003b44 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e015      	b.n	8003b70 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d20b      	bcs.n	8003b66 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad2      	subs	r2, r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ff98 	bl	8003a90 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	e004      	b.n	8003b70 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b70:	f000 fec2 	bl	80048f8 <vPortExitCritical>

    return xReturn;
 8003b74:	69fb      	ldr	r3, [r7, #28]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	2000017c 	.word	0x2000017c
 8003b84:	20000190 	.word	0x20000190

08003b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <vTaskMissedYield+0x14>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	2000018c 	.word	0x2000018c

08003ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ba8:	f000 f852 	bl	8003c50 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <prvIdleTask+0x28>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d9f9      	bls.n	8003ba8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <prvIdleTask+0x2c>)
 8003bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bc4:	e7f0      	b.n	8003ba8 <prvIdleTask+0x8>
 8003bc6:	bf00      	nop
 8003bc8:	200000a4 	.word	0x200000a4
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	e00c      	b.n	8003bf6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <prvInitialiseTaskLists+0x60>)
 8003be8:	4413      	add	r3, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fca8 	bl	8002540 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d9ef      	bls.n	8003bdc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bfc:	480d      	ldr	r0, [pc, #52]	; (8003c34 <prvInitialiseTaskLists+0x64>)
 8003bfe:	f7fe fc9f 	bl	8002540 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c02:	480d      	ldr	r0, [pc, #52]	; (8003c38 <prvInitialiseTaskLists+0x68>)
 8003c04:	f7fe fc9c 	bl	8002540 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c08:	480c      	ldr	r0, [pc, #48]	; (8003c3c <prvInitialiseTaskLists+0x6c>)
 8003c0a:	f7fe fc99 	bl	8002540 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003c0e:	480c      	ldr	r0, [pc, #48]	; (8003c40 <prvInitialiseTaskLists+0x70>)
 8003c10:	f7fe fc96 	bl	8002540 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003c14:	480b      	ldr	r0, [pc, #44]	; (8003c44 <prvInitialiseTaskLists+0x74>)
 8003c16:	f7fe fc93 	bl	8002540 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <prvInitialiseTaskLists+0x78>)
 8003c1c:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <prvInitialiseTaskLists+0x64>)
 8003c1e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <prvInitialiseTaskLists+0x7c>)
 8003c22:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <prvInitialiseTaskLists+0x68>)
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200000a4 	.word	0x200000a4
 8003c34:	20000108 	.word	0x20000108
 8003c38:	2000011c 	.word	0x2000011c
 8003c3c:	20000138 	.word	0x20000138
 8003c40:	2000014c 	.word	0x2000014c
 8003c44:	20000164 	.word	0x20000164
 8003c48:	20000130 	.word	0x20000130
 8003c4c:	20000134 	.word	0x20000134

08003c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c56:	e019      	b.n	8003c8c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c58:	f000 fe1e 	bl	8004898 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <prvCheckTasksWaitingTermination+0x50>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe fcf3 	bl	8002654 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <prvCheckTasksWaitingTermination+0x54>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <prvCheckTasksWaitingTermination+0x54>)
 8003c76:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <prvCheckTasksWaitingTermination+0x58>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <prvCheckTasksWaitingTermination+0x58>)
 8003c80:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c82:	f000 fe39 	bl	80048f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f810 	bl	8003cac <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <prvCheckTasksWaitingTermination+0x58>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e1      	bne.n	8003c58 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	2000014c 	.word	0x2000014c
 8003ca4:	20000178 	.word	0x20000178
 8003ca8:	20000160 	.word	0x20000160

08003cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 ffef 	bl	8004c9c <vPortFree>
                vPortFree( pxTCB );
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 ffec 	bl	8004c9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvResetNextTaskUnblockTime+0x30>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cda:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <prvResetNextTaskUnblockTime+0x34>)
 8003cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003ce2:	e005      	b.n	8003cf0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <prvResetNextTaskUnblockTime+0x30>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <prvResetNextTaskUnblockTime+0x34>)
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000130 	.word	0x20000130
 8003d00:	20000198 	.word	0x20000198

08003d04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <xTaskGetSchedulerState+0x34>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d12:	2301      	movs	r3, #1
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	e008      	b.n	8003d2a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d18:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <xTaskGetSchedulerState+0x38>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d20:	2302      	movs	r3, #2
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	e001      	b.n	8003d2a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d2a:	687b      	ldr	r3, [r7, #4]
    }
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	20000184 	.word	0x20000184
 8003d3c:	200001a0 	.word	0x200001a0

08003d40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d05e      	beq.n	8003e14 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <xTaskPriorityInherit+0xe0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d24e      	bcs.n	8003e02 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	db06      	blt.n	8003d7a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <xTaskPriorityInherit+0xe0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f1c3 0205 	rsb	r2, r3, #5
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6959      	ldr	r1, [r3, #20]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <xTaskPriorityInherit+0xe4>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4299      	cmp	r1, r3
 8003d90:	d12f      	bne.n	8003df2 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fc5c 	bl	8002654 <uxListRemove>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	2201      	movs	r2, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43da      	mvns	r2, r3
 8003dae:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <xTaskPriorityInherit+0xe8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4013      	ands	r3, r2
 8003db4:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <xTaskPriorityInherit+0xe8>)
 8003db6:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <xTaskPriorityInherit+0xe0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <xTaskPriorityInherit+0xe8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <xTaskPriorityInherit+0xe8>)
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4a10      	ldr	r2, [pc, #64]	; (8003e24 <xTaskPriorityInherit+0xe4>)
 8003de2:	441a      	add	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f7fe fbd5 	bl	800259a <vListInsertEnd>
 8003df0:	e004      	b.n	8003dfc <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <xTaskPriorityInherit+0xe0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e008      	b.n	8003e14 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <xTaskPriorityInherit+0xe0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d201      	bcs.n	8003e14 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e14:	68fb      	ldr	r3, [r7, #12]
    }
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200000a0 	.word	0x200000a0
 8003e24:	200000a4 	.word	0x200000a4
 8003e28:	20000180 	.word	0x20000180

08003e2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d063      	beq.n	8003f0a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003e42:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <xTaskPriorityDisinherit+0xe8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d00a      	beq.n	8003e62 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	60fb      	str	r3, [r7, #12]
    }
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	60bb      	str	r3, [r7, #8]
    }
 8003e7c:	bf00      	nop
 8003e7e:	e7fe      	b.n	8003e7e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e84:	1e5a      	subs	r2, r3, #1
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d039      	beq.n	8003f0a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d135      	bne.n	8003f0a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fbd6 	bl	8002654 <uxListRemove>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <xTaskPriorityDisinherit+0xec>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <xTaskPriorityDisinherit+0xec>)
 8003ec2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	f1c3 0205 	rsb	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	2201      	movs	r2, #1
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <xTaskPriorityDisinherit+0xec>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <xTaskPriorityDisinherit+0xec>)
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <xTaskPriorityDisinherit+0xf0>)
 8003ef8:	441a      	add	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f7fe fb4a 	bl	800259a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003f06:	2301      	movs	r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003f0a:	697b      	ldr	r3, [r7, #20]
    }
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200000a0 	.word	0x200000a0
 8003f18:	20000180 	.word	0x20000180
 8003f1c:	200000a4 	.word	0x200000a4

08003f20 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d077      	beq.n	8004028 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	60fb      	str	r3, [r7, #12]
    }
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d902      	bls.n	8003f66 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	e002      	b.n	8003f6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d058      	beq.n	8004028 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d153      	bne.n	8004028 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003f80:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d10a      	bne.n	8003fa0 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60bb      	str	r3, [r7, #8]
    }
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	db04      	blt.n	8003fbe <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f1c3 0205 	rsb	r2, r3, #5
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	6959      	ldr	r1, [r3, #20]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003fce:	4413      	add	r3, r2
 8003fd0:	4299      	cmp	r1, r3
 8003fd2:	d129      	bne.n	8004028 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fb3b 	bl	8002654 <uxListRemove>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	2201      	movs	r2, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003ff8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	4a0b      	ldr	r2, [pc, #44]	; (8004038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4a06      	ldr	r2, [pc, #24]	; (8004034 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800401a:	441a      	add	r2, r3
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f7fe fab9 	bl	800259a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004028:	bf00      	nop
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	200000a0 	.word	0x200000a0
 8004034:	200000a4 	.word	0x200000a4
 8004038:	20000180 	.word	0x20000180

0800403c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <pvTaskIncrementMutexHeldCount+0x24>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d004      	beq.n	8004052 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <pvTaskIncrementMutexHeldCount+0x24>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800404e:	3201      	adds	r2, #1
 8004050:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004052:	4b03      	ldr	r3, [pc, #12]	; (8004060 <pvTaskIncrementMutexHeldCount+0x24>)
 8004054:	681b      	ldr	r3, [r3, #0]
    }
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	200000a0 	.word	0x200000a0

08004064 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800406e:	4b29      	ldr	r3, [pc, #164]	; (8004114 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3304      	adds	r3, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe faea 	bl	8002654 <uxListRemove>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	2201      	movs	r2, #1
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	4b21      	ldr	r3, [pc, #132]	; (800411c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4013      	ands	r3, r2
 800409a:	4a20      	ldr	r2, [pc, #128]	; (800411c <prvAddCurrentTaskToDelayedList+0xb8>)
 800409c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d10a      	bne.n	80040bc <prvAddCurrentTaskToDelayedList+0x58>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ac:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	481a      	ldr	r0, [pc, #104]	; (8004120 <prvAddCurrentTaskToDelayedList+0xbc>)
 80040b6:	f7fe fa70 	bl	800259a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80040ba:	e026      	b.n	800410a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d209      	bcs.n	80040e8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040d4:	4b13      	ldr	r3, [pc, #76]	; (8004124 <prvAddCurrentTaskToDelayedList+0xc0>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3304      	adds	r3, #4
 80040de:	4619      	mov	r1, r3
 80040e0:	4610      	mov	r0, r2
 80040e2:	f7fe fa7e 	bl	80025e2 <vListInsert>
}
 80040e6:	e010      	b.n	800410a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040e8:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <prvAddCurrentTaskToDelayedList+0xc4>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f7fe fa74 	bl	80025e2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <prvAddCurrentTaskToDelayedList+0xc8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	429a      	cmp	r2, r3
 8004102:	d202      	bcs.n	800410a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004104:	4a09      	ldr	r2, [pc, #36]	; (800412c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	2000017c 	.word	0x2000017c
 8004118:	200000a0 	.word	0x200000a0
 800411c:	20000180 	.word	0x20000180
 8004120:	20000164 	.word	0x20000164
 8004124:	20000134 	.word	0x20000134
 8004128:	20000130 	.word	0x20000130
 800412c:	20000198 	.word	0x20000198

08004130 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004136:	2300      	movs	r3, #0
 8004138:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800413a:	f000 fa47 	bl	80045cc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <xTimerCreateTimerTask+0x54>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <xTimerCreateTimerTask+0x58>)
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	2302      	movs	r3, #2
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	2300      	movs	r3, #0
 8004150:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004154:	490d      	ldr	r1, [pc, #52]	; (800418c <xTimerCreateTimerTask+0x5c>)
 8004156:	480e      	ldr	r0, [pc, #56]	; (8004190 <xTimerCreateTimerTask+0x60>)
 8004158:	f7ff f83c 	bl	80031d4 <xTaskCreate>
 800415c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	603b      	str	r3, [r7, #0]
    }
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800417a:	687b      	ldr	r3, [r7, #4]
    }
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200001d4 	.word	0x200001d4
 8004188:	200001d8 	.word	0x200001d8
 800418c:	08007e78 	.word	0x08007e78
 8004190:	08004239 	.word	0x08004239

08004194 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80041a0:	e008      	b.n	80041b4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4413      	add	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	18d1      	adds	r1, r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f8dd 	bl	8004380 <prvInsertTimerInActiveList>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ea      	bne.n	80041a2 <prvReloadTimer+0xe>
        }
    }
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <prvProcessExpiredTimer+0x5c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3304      	adds	r3, #4
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe fa2f 	bl	8002654 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff ffc3 	bl	8004194 <prvReloadTimer>
 800420e:	e008      	b.n	8004222 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	4798      	blx	r3
    }
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	200001cc 	.word	0x200001cc

08004238 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004240:	f107 0308 	add.w	r3, r7, #8
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f857 	bl	80042f8 <prvGetNextExpireTime>
 800424a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4619      	mov	r1, r3
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f803 	bl	800425c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004256:	f000 f8d5 	bl	8004404 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800425a:	e7f1      	b.n	8004240 <prvTimerTask+0x8>

0800425c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004266:	f7ff f981 	bl	800356c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800426a:	f107 0308 	add.w	r3, r7, #8
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f866 	bl	8004340 <prvSampleTimeNow>
 8004274:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d130      	bne.n	80042de <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <prvProcessTimerOrBlockTask+0x3c>
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	429a      	cmp	r2, r3
 8004288:	d806      	bhi.n	8004298 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800428a:	f7ff f97d 	bl	8003588 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ffa1 	bl	80041d8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004296:	e024      	b.n	80042e2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <prvProcessTimerOrBlockTask+0x90>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <prvProcessTimerOrBlockTask+0x50>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <prvProcessTimerOrBlockTask+0x52>
 80042ac:	2300      	movs	r3, #0
 80042ae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <prvProcessTimerOrBlockTask+0x94>)
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	4619      	mov	r1, r3
 80042be:	f7fe ff55 	bl	800316c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80042c2:	f7ff f961 	bl	8003588 <xTaskResumeAll>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <prvProcessTimerOrBlockTask+0x98>)
 80042ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	f3bf 8f6f 	isb	sy
    }
 80042dc:	e001      	b.n	80042e2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80042de:	f7ff f953 	bl	8003588 <xTaskResumeAll>
    }
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200001d0 	.word	0x200001d0
 80042f0:	200001d4 	.word	0x200001d4
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <prvGetNextExpireTime+0x44>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <prvGetNextExpireTime+0x16>
 800430a:	2201      	movs	r2, #1
 800430c:	e000      	b.n	8004310 <prvGetNextExpireTime+0x18>
 800430e:	2200      	movs	r2, #0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <prvGetNextExpireTime+0x44>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e001      	b.n	800432c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800432c:	68fb      	ldr	r3, [r7, #12]
    }
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	200001cc 	.word	0x200001cc

08004340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004348:	f7ff f9ba 	bl	80036c0 <xTaskGetTickCount>
 800434c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <prvSampleTimeNow+0x3c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	429a      	cmp	r2, r3
 8004356:	d205      	bcs.n	8004364 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004358:	f000 f912 	bl	8004580 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e002      	b.n	800436a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800436a:	4a04      	ldr	r2, [pc, #16]	; (800437c <prvSampleTimeNow+0x3c>)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004370:	68fb      	ldr	r3, [r7, #12]
    }
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	200001dc 	.word	0x200001dc

08004380 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d812      	bhi.n	80043cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e01b      	b.n	80043f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <prvInsertTimerInActiveList+0x7c>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f7fe f90c 	bl	80025e2 <vListInsert>
 80043ca:	e012      	b.n	80043f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d206      	bcs.n	80043e2 <prvInsertTimerInActiveList+0x62>
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e007      	b.n	80043f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <prvInsertTimerInActiveList+0x80>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f7fe f8f8 	bl	80025e2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80043f2:	697b      	ldr	r3, [r7, #20]
    }
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	200001d0 	.word	0x200001d0
 8004400:	200001cc 	.word	0x200001cc

08004404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800440a:	e0a6      	b.n	800455a <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f2c0 80a2 	blt.w	8004558 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	3304      	adds	r3, #4
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe f915 	bl	8002654 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800442a:	1d3b      	adds	r3, r7, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff87 	bl	8004340 <prvSampleTimeNow>
 8004432:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3b01      	subs	r3, #1
 8004438:	2b08      	cmp	r3, #8
 800443a:	f200 808e 	bhi.w	800455a <prvProcessReceivedCommands+0x156>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <prvProcessReceivedCommands+0x40>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004469 	.word	0x08004469
 8004448:	08004469 	.word	0x08004469
 800444c:	080044d1 	.word	0x080044d1
 8004450:	080044e5 	.word	0x080044e5
 8004454:	0800452f 	.word	0x0800452f
 8004458:	08004469 	.word	0x08004469
 800445c:	08004469 	.word	0x08004469
 8004460:	080044d1 	.word	0x080044d1
 8004464:	080044e5 	.word	0x080044e5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	b2da      	uxtb	r2, r3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	18d1      	adds	r1, r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	69f8      	ldr	r0, [r7, #28]
 8004488:	f7ff ff7a 	bl	8004380 <prvInsertTimerInActiveList>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d063      	beq.n	800455a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d009      	beq.n	80044b4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	4413      	add	r3, r2
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4619      	mov	r1, r3
 80044ac:	69f8      	ldr	r0, [r7, #28]
 80044ae:	f7ff fe71 	bl	8004194 <prvReloadTimer>
 80044b2:	e008      	b.n	80044c6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	69f8      	ldr	r0, [r7, #28]
 80044cc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80044ce:	e044      	b.n	800455a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80044e2:	e03a      	b.n	800455a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	617b      	str	r3, [r7, #20]
    }
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	18d1      	adds	r1, r2, r3
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	69f8      	ldr	r0, [r7, #28]
 8004528:	f7ff ff2a 	bl	8004380 <prvInsertTimerInActiveList>
                        break;
 800452c:	e015      	b.n	800455a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 800453c:	69f8      	ldr	r0, [r7, #28]
 800453e:	f000 fbad 	bl	8004c9c <vPortFree>
 8004542:	e00a      	b.n	800455a <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004556:	e000      	b.n	800455a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004558:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <prvProcessReceivedCommands+0x178>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f107 0108 	add.w	r1, r7, #8
 8004562:	2200      	movs	r2, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe fa9f 	bl	8002aa8 <xQueueReceive>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	f47f af4d 	bne.w	800440c <prvProcessReceivedCommands+0x8>
        }
    }
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	200001d4 	.word	0x200001d4

08004580 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004586:	e009      	b.n	800459c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <prvSwitchTimerLists+0x44>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004592:	f04f 31ff 	mov.w	r1, #4294967295
 8004596:	6838      	ldr	r0, [r7, #0]
 8004598:	f7ff fe1e 	bl	80041d8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <prvSwitchTimerLists+0x44>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <prvSwitchTimerLists+0x44>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <prvSwitchTimerLists+0x48>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <prvSwitchTimerLists+0x44>)
 80045b2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <prvSwitchTimerLists+0x48>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6013      	str	r3, [r2, #0]
    }
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200001cc 	.word	0x200001cc
 80045c8:	200001d0 	.word	0x200001d0

080045cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80045d0:	f000 f962 	bl	8004898 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <prvCheckForValidListAndQueue+0x54>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11d      	bne.n	8004618 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80045dc:	4811      	ldr	r0, [pc, #68]	; (8004624 <prvCheckForValidListAndQueue+0x58>)
 80045de:	f7fd ffaf 	bl	8002540 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80045e2:	4811      	ldr	r0, [pc, #68]	; (8004628 <prvCheckForValidListAndQueue+0x5c>)
 80045e4:	f7fd ffac 	bl	8002540 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80045e8:	4b10      	ldr	r3, [pc, #64]	; (800462c <prvCheckForValidListAndQueue+0x60>)
 80045ea:	4a0e      	ldr	r2, [pc, #56]	; (8004624 <prvCheckForValidListAndQueue+0x58>)
 80045ec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <prvCheckForValidListAndQueue+0x64>)
 80045f0:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <prvCheckForValidListAndQueue+0x5c>)
 80045f2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80045f4:	2200      	movs	r2, #0
 80045f6:	210c      	movs	r1, #12
 80045f8:	200a      	movs	r0, #10
 80045fa:	f7fe f8e5 	bl	80027c8 <xQueueGenericCreate>
 80045fe:	4603      	mov	r3, r0
 8004600:	4a07      	ldr	r2, [pc, #28]	; (8004620 <prvCheckForValidListAndQueue+0x54>)
 8004602:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004604:	4b06      	ldr	r3, [pc, #24]	; (8004620 <prvCheckForValidListAndQueue+0x54>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <prvCheckForValidListAndQueue+0x54>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4908      	ldr	r1, [pc, #32]	; (8004634 <prvCheckForValidListAndQueue+0x68>)
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fd5c 	bl	80030d0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004618:	f000 f96e 	bl	80048f8 <vPortExitCritical>
    }
 800461c:	bf00      	nop
 800461e:	bd80      	pop	{r7, pc}
 8004620:	200001d4 	.word	0x200001d4
 8004624:	200001a4 	.word	0x200001a4
 8004628:	200001b8 	.word	0x200001b8
 800462c:	200001cc 	.word	0x200001cc
 8004630:	200001d0 	.word	0x200001d0
 8004634:	08007e80 	.word	0x08007e80

08004638 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3b04      	subs	r3, #4
 8004648:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004650:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b04      	subs	r3, #4
 8004656:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3b04      	subs	r3, #4
 8004666:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004668:	4a0c      	ldr	r2, [pc, #48]	; (800469c <pxPortInitialiseStack+0x64>)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3b14      	subs	r3, #20
 8004672:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3b04      	subs	r3, #4
 800467e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f06f 0202 	mvn.w	r2, #2
 8004686:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b20      	subs	r3, #32
 800468c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800468e:	68fb      	ldr	r3, [r7, #12]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	080046a1 	.word	0x080046a1

080046a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <prvTaskExitError+0x54>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d00a      	beq.n	80046ca <prvTaskExitError+0x2a>
        __asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	60fb      	str	r3, [r7, #12]
    }
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <prvTaskExitError+0x28>
        __asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	60bb      	str	r3, [r7, #8]
    }
 80046dc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80046de:	bf00      	nop
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0fc      	beq.n	80046e0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	20000010 	.word	0x20000010
	...

08004700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004700:	4b07      	ldr	r3, [pc, #28]	; (8004720 <pxCurrentTCBConst2>)
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	6808      	ldr	r0, [r1, #0]
 8004706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470a:	f380 8809 	msr	PSP, r0
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8811 	msr	BASEPRI, r0
 800471a:	4770      	bx	lr
 800471c:	f3af 8000 	nop.w

08004720 <pxCurrentTCBConst2>:
 8004720:	200000a0 	.word	0x200000a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004728:	4808      	ldr	r0, [pc, #32]	; (800474c <prvPortStartFirstTask+0x24>)
 800472a:	6800      	ldr	r0, [r0, #0]
 800472c:	6800      	ldr	r0, [r0, #0]
 800472e:	f380 8808 	msr	MSP, r0
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f380 8814 	msr	CONTROL, r0
 800473a:	b662      	cpsie	i
 800473c:	b661      	cpsie	f
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	df00      	svc	0
 8004748:	bf00      	nop
 800474a:	0000      	.short	0x0000
 800474c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop

08004754 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800475a:	4b46      	ldr	r3, [pc, #280]	; (8004874 <xPortStartScheduler+0x120>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a46      	ldr	r2, [pc, #280]	; (8004878 <xPortStartScheduler+0x124>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10a      	bne.n	800477a <xPortStartScheduler+0x26>
        __asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	613b      	str	r3, [r7, #16]
    }
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800477a:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <xPortStartScheduler+0x120>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a3f      	ldr	r2, [pc, #252]	; (800487c <xPortStartScheduler+0x128>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d10a      	bne.n	800479a <xPortStartScheduler+0x46>
        __asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	60fb      	str	r3, [r7, #12]
    }
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800479a:	4b39      	ldr	r3, [pc, #228]	; (8004880 <xPortStartScheduler+0x12c>)
 800479c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	22ff      	movs	r2, #255	; 0xff
 80047aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	4b31      	ldr	r3, [pc, #196]	; (8004884 <xPortStartScheduler+0x130>)
 80047c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047c2:	4b31      	ldr	r3, [pc, #196]	; (8004888 <xPortStartScheduler+0x134>)
 80047c4:	2207      	movs	r2, #7
 80047c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047c8:	e009      	b.n	80047de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80047ca:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <xPortStartScheduler+0x134>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	4a2d      	ldr	r2, [pc, #180]	; (8004888 <xPortStartScheduler+0x134>)
 80047d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	d0ef      	beq.n	80047ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047ea:	4b27      	ldr	r3, [pc, #156]	; (8004888 <xPortStartScheduler+0x134>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1c3 0307 	rsb	r3, r3, #7
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d00a      	beq.n	800480c <xPortStartScheduler+0xb8>
        __asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	60bb      	str	r3, [r7, #8]
    }
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800480c:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <xPortStartScheduler+0x134>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <xPortStartScheduler+0x134>)
 8004814:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004816:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <xPortStartScheduler+0x134>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800481e:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <xPortStartScheduler+0x134>)
 8004820:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800482a:	4b18      	ldr	r3, [pc, #96]	; (800488c <xPortStartScheduler+0x138>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a17      	ldr	r2, [pc, #92]	; (800488c <xPortStartScheduler+0x138>)
 8004830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004834:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <xPortStartScheduler+0x138>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a14      	ldr	r2, [pc, #80]	; (800488c <xPortStartScheduler+0x138>)
 800483c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004840:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004842:	f000 f8db 	bl	80049fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <xPortStartScheduler+0x13c>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800484c:	f000 f8fa 	bl	8004a44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <xPortStartScheduler+0x140>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <xPortStartScheduler+0x140>)
 8004856:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800485a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800485c:	f7ff ff64 	bl	8004728 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004860:	f7ff f808 	bl	8003874 <vTaskSwitchContext>
    prvTaskExitError();
 8004864:	f7ff ff1c 	bl	80046a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	e000ed00 	.word	0xe000ed00
 8004878:	410fc271 	.word	0x410fc271
 800487c:	410fc270 	.word	0x410fc270
 8004880:	e000e400 	.word	0xe000e400
 8004884:	200001e0 	.word	0x200001e0
 8004888:	200001e4 	.word	0x200001e4
 800488c:	e000ed20 	.word	0xe000ed20
 8004890:	20000010 	.word	0x20000010
 8004894:	e000ef34 	.word	0xe000ef34

08004898 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
        __asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	607b      	str	r3, [r7, #4]
    }
 80048b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <vPortEnterCritical+0x58>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <vPortEnterCritical+0x58>)
 80048ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <vPortEnterCritical+0x58>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10f      	bne.n	80048e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <vPortEnterCritical+0x5c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	603b      	str	r3, [r7, #0]
    }
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <vPortEnterCritical+0x4a>
    }
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	20000010 	.word	0x20000010
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <vPortExitCritical+0x50>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <vPortExitCritical+0x24>
        __asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	607b      	str	r3, [r7, #4]
    }
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <vPortExitCritical+0x50>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3b01      	subs	r3, #1
 8004922:	4a09      	ldr	r2, [pc, #36]	; (8004948 <vPortExitCritical+0x50>)
 8004924:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004926:	4b08      	ldr	r3, [pc, #32]	; (8004948 <vPortExitCritical+0x50>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <vPortExitCritical+0x42>
 800492e:	2300      	movs	r3, #0
 8004930:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004938:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000010 	.word	0x20000010
 800494c:	00000000 	.word	0x00000000

08004950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004950:	f3ef 8009 	mrs	r0, PSP
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <pxCurrentTCBConst>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	f01e 0f10 	tst.w	lr, #16
 8004960:	bf08      	it	eq
 8004962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	6010      	str	r0, [r2, #0]
 800496c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004974:	f380 8811 	msr	BASEPRI, r0
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f7fe ff78 	bl	8003874 <vTaskSwitchContext>
 8004984:	f04f 0000 	mov.w	r0, #0
 8004988:	f380 8811 	msr	BASEPRI, r0
 800498c:	bc09      	pop	{r0, r3}
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	6808      	ldr	r0, [r1, #0]
 8004992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004996:	f01e 0f10 	tst.w	lr, #16
 800499a:	bf08      	it	eq
 800499c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049a0:	f380 8809 	msr	PSP, r0
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst>:
 80049b0:	200000a0 	.word	0x200000a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
        __asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	607b      	str	r3, [r7, #4]
    }
 80049d0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80049d2:	f7fe fe97 	bl	8003704 <xTaskIncrementTick>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <SysTick_Handler+0x40>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	2300      	movs	r3, #0
 80049e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f383 8811 	msr	BASEPRI, r3
    }
 80049ee:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <vPortSetupTimerInterrupt+0x34>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <vPortSetupTimerInterrupt+0x38>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <vPortSetupTimerInterrupt+0x3c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <vPortSetupTimerInterrupt+0x40>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <vPortSetupTimerInterrupt+0x44>)
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a1e:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <vPortSetupTimerInterrupt+0x34>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	601a      	str	r2, [r3, #0]
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000e010 	.word	0xe000e010
 8004a34:	e000e018 	.word	0xe000e018
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	10624dd3 	.word	0x10624dd3
 8004a40:	e000e014 	.word	0xe000e014

08004a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a54 <vPortEnableVFP+0x10>
 8004a48:	6801      	ldr	r1, [r0, #0]
 8004a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a4e:	6001      	str	r1, [r0, #0]
 8004a50:	4770      	bx	lr
 8004a52:	0000      	.short	0x0000
 8004a54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop

08004a5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a62:	f3ef 8305 	mrs	r3, IPSR
 8004a66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b0f      	cmp	r3, #15
 8004a6c:	d914      	bls.n	8004a98 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <vPortValidateInterruptPriority+0x70>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <vPortValidateInterruptPriority+0x74>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	7afa      	ldrb	r2, [r7, #11]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d20a      	bcs.n	8004a98 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	607b      	str	r3, [r7, #4]
    }
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <vPortValidateInterruptPriority+0x78>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <vPortValidateInterruptPriority+0x7c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d90a      	bls.n	8004abe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	603b      	str	r3, [r7, #0]
    }
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <vPortValidateInterruptPriority+0x60>
    }
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	e000e3f0 	.word	0xe000e3f0
 8004ad0:	200001e0 	.word	0x200001e0
 8004ad4:	e000ed0c 	.word	0xe000ed0c
 8004ad8:	200001e4 	.word	0x200001e4

08004adc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	; 0x28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004ae8:	f7fe fd40 	bl	800356c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004aec:	4b65      	ldr	r3, [pc, #404]	; (8004c84 <pvPortMalloc+0x1a8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004af4:	f000 f934 	bl	8004d60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004af8:	4b63      	ldr	r3, [pc, #396]	; (8004c88 <pvPortMalloc+0x1ac>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f040 80a7 	bne.w	8004c54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02d      	beq.n	8004b68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d227      	bcs.n	8004b68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004b18:	2208      	movs	r2, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d021      	beq.n	8004b6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f023 0307 	bic.w	r3, r3, #7
 8004b30:	3308      	adds	r3, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d214      	bcs.n	8004b62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	3308      	adds	r3, #8
 8004b40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <pvPortMalloc+0x92>
        __asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	617b      	str	r3, [r7, #20]
    }
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b66:	e002      	b.n	8004b6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	607b      	str	r3, [r7, #4]
 8004b6c:	e000      	b.n	8004b70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d06e      	beq.n	8004c54 <pvPortMalloc+0x178>
 8004b76:	4b45      	ldr	r3, [pc, #276]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d869      	bhi.n	8004c54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b80:	4b43      	ldr	r3, [pc, #268]	; (8004c90 <pvPortMalloc+0x1b4>)
 8004b82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b84:	4b42      	ldr	r3, [pc, #264]	; (8004c90 <pvPortMalloc+0x1b4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b8a:	e004      	b.n	8004b96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d903      	bls.n	8004ba8 <pvPortMalloc+0xcc>
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f1      	bne.n	8004b8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ba8:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <pvPortMalloc+0x1a8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d050      	beq.n	8004c54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	4413      	add	r3, r2
 8004bba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	2308      	movs	r3, #8
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d91f      	bls.n	8004c14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <pvPortMalloc+0x120>
        __asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	613b      	str	r3, [r7, #16]
    }
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c0e:	69b8      	ldr	r0, [r7, #24]
 8004c10:	f000 f908 	bl	8004e24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c14:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004c20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <pvPortMalloc+0x1b8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d203      	bcs.n	8004c36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <pvPortMalloc+0x1b8>)
 8004c34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <pvPortMalloc+0x1ac>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004c4a:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <pvPortMalloc+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <pvPortMalloc+0x1bc>)
 8004c52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c54:	f7fe fc98 	bl	8003588 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <pvPortMalloc+0x19c>
        __asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	60fb      	str	r3, [r7, #12]
    }
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <pvPortMalloc+0x19a>
    return pvReturn;
 8004c78:	69fb      	ldr	r3, [r7, #28]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3728      	adds	r7, #40	; 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20012df0 	.word	0x20012df0
 8004c88:	20012e04 	.word	0x20012e04
 8004c8c:	20012df4 	.word	0x20012df4
 8004c90:	20012de8 	.word	0x20012de8
 8004c94:	20012df8 	.word	0x20012df8
 8004c98:	20012dfc 	.word	0x20012dfc

08004c9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d04d      	beq.n	8004d4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004cae:	2308      	movs	r3, #8
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <vPortFree+0xb8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <vPortFree+0x44>
        __asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	60fb      	str	r3, [r7, #12]
    }
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <vPortFree+0x62>
        __asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60bb      	str	r3, [r7, #8]
    }
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <vPortFree+0xb8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01e      	beq.n	8004d4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11a      	bne.n	8004d4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <vPortFree+0xb8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	401a      	ands	r2, r3
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004d24:	f7fe fc22 	bl	800356c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <vPortFree+0xbc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4413      	add	r3, r2
 8004d32:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <vPortFree+0xbc>)
 8004d34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d36:	6938      	ldr	r0, [r7, #16]
 8004d38:	f000 f874 	bl	8004e24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <vPortFree+0xc0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3301      	adds	r3, #1
 8004d42:	4a06      	ldr	r2, [pc, #24]	; (8004d5c <vPortFree+0xc0>)
 8004d44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004d46:	f7fe fc1f 	bl	8003588 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20012e04 	.word	0x20012e04
 8004d58:	20012df4 	.word	0x20012df4
 8004d5c:	20012e00 	.word	0x20012e00

08004d60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004d6c:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <prvHeapInit+0xac>)
 8004d6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3307      	adds	r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0307 	bic.w	r3, r3, #7
 8004d86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <prvHeapInit+0xac>)
 8004d90:	4413      	add	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <prvHeapInit+0xb0>)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <prvHeapInit+0xb0>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	4413      	add	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004dac:	2208      	movs	r2, #8
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <prvHeapInit+0xb4>)
 8004dc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004dc2:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <prvHeapInit+0xb4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <prvHeapInit+0xb4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	1ad2      	subs	r2, r2, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <prvHeapInit+0xb4>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <prvHeapInit+0xb8>)
 8004dee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <prvHeapInit+0xbc>)
 8004df6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <prvHeapInit+0xc0>)
 8004dfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dfe:	601a      	str	r2, [r3, #0]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	200001e8 	.word	0x200001e8
 8004e10:	20012de8 	.word	0x20012de8
 8004e14:	20012df0 	.word	0x20012df0
 8004e18:	20012df8 	.word	0x20012df8
 8004e1c:	20012df4 	.word	0x20012df4
 8004e20:	20012e04 	.word	0x20012e04

08004e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e2c:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <prvInsertBlockIntoFreeList+0xac>)
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e002      	b.n	8004e38 <prvInsertBlockIntoFreeList+0x14>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d8f7      	bhi.n	8004e32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d108      	bne.n	8004e66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	441a      	add	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	441a      	add	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d118      	bne.n	8004eac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d00d      	beq.n	8004ea2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	441a      	add	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e008      	b.n	8004eb4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e003      	b.n	8004eb4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d002      	beq.n	8004ec2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20012de8 	.word	0x20012de8
 8004ed4:	20012df0 	.word	0x20012df0

08004ed8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004edc:	4803      	ldr	r0, [pc, #12]	; (8004eec <_cbSendSystemDesc+0x14>)
 8004ede:	f001 fc05 	bl	80066ec <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004ee2:	4803      	ldr	r0, [pc, #12]	; (8004ef0 <_cbSendSystemDesc+0x18>)
 8004ee4:	f001 fc02 	bl	80066ec <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ee8:	bf00      	nop
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	08007e88 	.word	0x08007e88
 8004ef0:	08007ecc 	.word	0x08007ecc

08004ef4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <SEGGER_SYSVIEW_Conf+0x24>)
 8004f02:	4a06      	ldr	r2, [pc, #24]	; (8004f1c <SEGGER_SYSVIEW_Conf+0x28>)
 8004f04:	f001 f876 	bl	8005ff4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004f08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004f0c:	f001 f8b6 	bl	800607c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004f10:	bf00      	nop
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000000 	.word	0x20000000
 8004f18:	08004ed9 	.word	0x08004ed9
 8004f1c:	08007f14 	.word	0x08007f14

08004f20 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	e033      	b.n	8004f94 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004f2c:	491e      	ldr	r1, [pc, #120]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	491a      	ldr	r1, [pc, #104]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	6819      	ldr	r1, [r3, #0]
 8004f4e:	4c16      	ldr	r4, [pc, #88]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4423      	add	r3, r4
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	681c      	ldr	r4, [r3, #0]
 8004f60:	4d11      	ldr	r5, [pc, #68]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	442b      	add	r3, r5
 8004f6e:	330c      	adds	r3, #12
 8004f70:	681d      	ldr	r5, [r3, #0]
 8004f72:	4e0d      	ldr	r6, [pc, #52]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4433      	add	r3, r6
 8004f80:	3310      	adds	r3, #16
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	462b      	mov	r3, r5
 8004f88:	4622      	mov	r2, r4
 8004f8a:	f000 f84d 	bl	8005028 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3301      	adds	r3, #1
 8004f92:	607b      	str	r3, [r7, #4]
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <_cbSendTaskList+0x8c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d3c6      	bcc.n	8004f2c <_cbSendTaskList+0xc>
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa8:	20012e08 	.word	0x20012e08
 8004fac:	20012ea8 	.word	0x20012ea8

08004fb0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004fb0:	b5b0      	push	{r4, r5, r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004fb6:	f7fe fb93 	bl	80036e0 <xTaskGetTickCountFromISR>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	f04f 0400 	mov.w	r4, #0
 8004fd2:	f04f 0500 	mov.w	r5, #0
 8004fd6:	015d      	lsls	r5, r3, #5
 8004fd8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004fdc:	0154      	lsls	r4, r2, #5
 8004fde:	4622      	mov	r2, r4
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	1a12      	subs	r2, r2, r0
 8004fe4:	eb63 0301 	sbc.w	r3, r3, r1
 8004fe8:	f04f 0400 	mov.w	r4, #0
 8004fec:	f04f 0500 	mov.w	r5, #0
 8004ff0:	009d      	lsls	r5, r3, #2
 8004ff2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004ff6:	0094      	lsls	r4, r2, #2
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	462b      	mov	r3, r5
 8004ffc:	1812      	adds	r2, r2, r0
 8004ffe:	eb41 0303 	adc.w	r3, r1, r3
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	00d9      	lsls	r1, r3, #3
 800500c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005010:	00d0      	lsls	r0, r2, #3
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800501a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bdb0      	pop	{r4, r5, r7, pc}

08005028 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005036:	f107 0314 	add.w	r3, r7, #20
 800503a:	2214      	movs	r2, #20
 800503c:	2100      	movs	r1, #0
 800503e:	4618      	mov	r0, r3
 8005040:	f001 fcfe 	bl	8006a40 <memset>
  TaskInfo.TaskID     = TaskID;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	4618      	mov	r0, r3
 800505e:	f001 fa4d 	bl	80064fc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005062:	bf00      	nop
 8005064:	3728      	adds	r7, #40	; 0x28
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <__NVIC_EnableIRQ>:
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	2b00      	cmp	r3, #0
 800507c:	db0b      	blt.n	8005096 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	f003 021f 	and.w	r2, r3, #31
 8005084:	4907      	ldr	r1, [pc, #28]	; (80050a4 <__NVIC_EnableIRQ+0x38>)
 8005086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2001      	movs	r0, #1
 800508e:	fa00 f202 	lsl.w	r2, r0, r2
 8005092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	e000e100 	.word	0xe000e100

080050a8 <__NVIC_SetPriority>:
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	db0a      	blt.n	80050d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	490c      	ldr	r1, [pc, #48]	; (80050f4 <__NVIC_SetPriority+0x4c>)
 80050c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c6:	0112      	lsls	r2, r2, #4
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	440b      	add	r3, r1
 80050cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050d0:	e00a      	b.n	80050e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	4908      	ldr	r1, [pc, #32]	; (80050f8 <__NVIC_SetPriority+0x50>)
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	3b04      	subs	r3, #4
 80050e0:	0112      	lsls	r2, r2, #4
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	440b      	add	r3, r1
 80050e6:	761a      	strb	r2, [r3, #24]
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	e000e100 	.word	0xe000e100
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005102:	f001 fc25 	bl	8006950 <SEGGER_SYSVIEW_IsStarted>
 8005106:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800510e:	f001 f879 	bl	8006204 <SEGGER_SYSVIEW_Start>
  }
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <_cbOnUARTRx+0x3c>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d806      	bhi.n	800513c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800512e:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <_cbOnUARTRx+0x3c>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	b2da      	uxtb	r2, r3
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <_cbOnUARTRx+0x3c>)
 8005138:	701a      	strb	r2, [r3, #0]
    goto Done;
 800513a:	e009      	b.n	8005150 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800513c:	f7ff ffde 	bl	80050fc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <_cbOnUARTRx+0x3c>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4618      	mov	r0, r3
 8005146:	1dfb      	adds	r3, r7, #7
 8005148:	2201      	movs	r2, #1
 800514a:	4619      	mov	r1, r3
 800514c:	f000 fbea 	bl	8005924 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005150:	bf00      	nop
}
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000014 	.word	0x20000014

0800515c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005164:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <_cbOnUARTTx+0x5c>)
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d80f      	bhi.n	800518c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800516c:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <_cbOnUARTTx+0x5c>)
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	461a      	mov	r2, r3
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <_cbOnUARTTx+0x60>)
 8005174:	5c9a      	ldrb	r2, [r3, r2]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800517a:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <_cbOnUARTTx+0x5c>)
 800517c:	785b      	ldrb	r3, [r3, #1]
 800517e:	3301      	adds	r3, #1
 8005180:	b2da      	uxtb	r2, r3
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <_cbOnUARTTx+0x5c>)
 8005184:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005186:	2301      	movs	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
    goto Done;
 800518a:	e00f      	b.n	80051ac <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <_cbOnUARTTx+0x5c>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fa19 	bl	80055cc <SEGGER_RTT_ReadUpBufferNoLock>
 800519a:	4603      	mov	r3, r0
 800519c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	da02      	bge.n	80051aa <_cbOnUARTTx+0x4e>
    r = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e000      	b.n	80051ac <_cbOnUARTTx+0x50>
  }
Done:
 80051aa:	bf00      	nop
  return r;
 80051ac:	68fb      	ldr	r3, [r7, #12]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000014 	.word	0x20000014
 80051bc:	08007f1c 	.word	0x08007f1c

080051c0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80051c8:	4a04      	ldr	r2, [pc, #16]	; (80051dc <SEGGER_UART_init+0x1c>)
 80051ca:	4905      	ldr	r1, [pc, #20]	; (80051e0 <SEGGER_UART_init+0x20>)
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f863 	bl	8005298 <HIF_UART_Init>
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	0800511d 	.word	0x0800511d
 80051e0:	0800515d 	.word	0x0800515d

080051e4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80051ea:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <USART2_IRQHandler+0x80>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d011      	beq.n	800521e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80051fa:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <USART2_IRQHandler+0x84>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 030b 	and.w	r3, r3, #11
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800520c:	4b17      	ldr	r3, [pc, #92]	; (800526c <USART2_IRQHandler+0x88>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d004      	beq.n	800521e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005214:	4b15      	ldr	r3, [pc, #84]	; (800526c <USART2_IRQHandler+0x88>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	79fa      	ldrb	r2, [r7, #7]
 800521a:	4610      	mov	r0, r2
 800521c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01a      	beq.n	800525e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005228:	4b11      	ldr	r3, [pc, #68]	; (8005270 <USART2_IRQHandler+0x8c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d015      	beq.n	800525c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <USART2_IRQHandler+0x8c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	1dfa      	adds	r2, r7, #7
 8005236:	4610      	mov	r0, r2
 8005238:	4798      	blx	r3
 800523a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005242:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <USART2_IRQHandler+0x90>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <USART2_IRQHandler+0x90>)
 8005248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e006      	b.n	800525e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <USART2_IRQHandler+0x80>)
 8005252:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005254:	79fa      	ldrb	r2, [r7, #7]
 8005256:	4b04      	ldr	r3, [pc, #16]	; (8005268 <USART2_IRQHandler+0x84>)
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e000      	b.n	800525e <USART2_IRQHandler+0x7a>
      return;
 800525c:	bf00      	nop
    }
  }
}
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40004400 	.word	0x40004400
 8005268:	40004404 	.word	0x40004404
 800526c:	20012eac 	.word	0x20012eac
 8005270:	20012eb0 	.word	0x20012eb0
 8005274:	4000440c 	.word	0x4000440c

08005278 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a04      	ldr	r2, [pc, #16]	; (8005294 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	4000440c 	.word	0x4000440c

08005298 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80052a4:	4b2e      	ldr	r3, [pc, #184]	; (8005360 <HIF_UART_Init+0xc8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2d      	ldr	r2, [pc, #180]	; (8005360 <HIF_UART_Init+0xc8>)
 80052aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ae:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HIF_UART_Init+0xcc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <HIF_UART_Init+0xcc>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80052bc:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <HIF_UART_Init+0xd0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052c8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80052d0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80052d2:	4a25      	ldr	r2, [pc, #148]	; (8005368 <HIF_UART_Init+0xd0>)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80052d8:	4b24      	ldr	r3, [pc, #144]	; (800536c <HIF_UART_Init+0xd4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80052ec:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80052ee:	4a1f      	ldr	r2, [pc, #124]	; (800536c <HIF_UART_Init+0xd4>)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80052f4:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <HIF_UART_Init+0xd8>)
 80052f6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80052fa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80052fc:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <HIF_UART_Init+0xdc>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005302:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <HIF_UART_Init+0xe0>)
 8005304:	2280      	movs	r2, #128	; 0x80
 8005306:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800530e:	4a1b      	ldr	r2, [pc, #108]	; (800537c <HIF_UART_Init+0xe4>)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	3301      	adds	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005326:	d302      	bcc.n	800532e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005328:	f640 73ff 	movw	r3, #4095	; 0xfff
 800532c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	4a11      	ldr	r2, [pc, #68]	; (8005380 <HIF_UART_Init+0xe8>)
 800533a:	b29b      	uxth	r3, r3
 800533c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800533e:	4a11      	ldr	r2, [pc, #68]	; (8005384 <HIF_UART_Init+0xec>)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005344:	4a10      	ldr	r2, [pc, #64]	; (8005388 <HIF_UART_Init+0xf0>)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800534a:	2106      	movs	r1, #6
 800534c:	2026      	movs	r0, #38	; 0x26
 800534e:	f7ff feab 	bl	80050a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005352:	2026      	movs	r0, #38	; 0x26
 8005354:	f7ff fe8a 	bl	800506c <__NVIC_EnableIRQ>
}
 8005358:	bf00      	nop
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40023840 	.word	0x40023840
 8005364:	40023830 	.word	0x40023830
 8005368:	40020020 	.word	0x40020020
 800536c:	40020000 	.word	0x40020000
 8005370:	4000440c 	.word	0x4000440c
 8005374:	40004410 	.word	0x40004410
 8005378:	40004414 	.word	0x40004414
 800537c:	0501bd00 	.word	0x0501bd00
 8005380:	40004408 	.word	0x40004408
 8005384:	20012eac 	.word	0x20012eac
 8005388:	20012eb0 	.word	0x20012eb0

0800538c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005392:	4b24      	ldr	r3, [pc, #144]	; (8005424 <_DoInit+0x98>)
 8005394:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2203      	movs	r2, #3
 800539a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2203      	movs	r2, #3
 80053a0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a20      	ldr	r2, [pc, #128]	; (8005428 <_DoInit+0x9c>)
 80053a6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a20      	ldr	r2, [pc, #128]	; (800542c <_DoInit+0xa0>)
 80053ac:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053b4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <_DoInit+0x9c>)
 80053cc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a17      	ldr	r2, [pc, #92]	; (8005430 <_DoInit+0xa4>)
 80053d2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2210      	movs	r2, #16
 80053d8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3307      	adds	r3, #7
 80053f0:	4a10      	ldr	r2, [pc, #64]	; (8005434 <_DoInit+0xa8>)
 80053f2:	6810      	ldr	r0, [r2, #0]
 80053f4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80053f6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a0e      	ldr	r2, [pc, #56]	; (8005438 <_DoInit+0xac>)
 80053fe:	6810      	ldr	r0, [r2, #0]
 8005400:	6018      	str	r0, [r3, #0]
 8005402:	8891      	ldrh	r1, [r2, #4]
 8005404:	7992      	ldrb	r2, [r2, #6]
 8005406:	8099      	strh	r1, [r3, #4]
 8005408:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800540a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005414:	f3bf 8f5f 	dmb	sy
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	20014480 	.word	0x20014480
 8005428:	08007edc 	.word	0x08007edc
 800542c:	20012eb4 	.word	0x20012eb4
 8005430:	200132b4 	.word	0x200132b4
 8005434:	08007ee8 	.word	0x08007ee8
 8005438:	08007eec 	.word	0x08007eec

0800543c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005448:	2300      	movs	r3, #0
 800544a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	429a      	cmp	r2, r3
 800545e:	d905      	bls.n	800546c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
 800546a:	e007      	b.n	800547c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	1acb      	subs	r3, r1, r3
 8005476:	4413      	add	r3, r2
 8005478:	3b01      	subs	r3, #1
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005486:	4293      	cmp	r3, r2
 8005488:	bf28      	it	cs
 800548a:	4613      	movcs	r3, r2
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4293      	cmp	r3, r2
 8005494:	bf28      	it	cs
 8005496:	4613      	movcs	r3, r2
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80054a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	6978      	ldr	r0, [r7, #20]
 80054aa:	f001 fabb 	bl	8006a24 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80054ae:	6a3a      	ldr	r2, [r7, #32]
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	4413      	add	r3, r2
 80054b4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	4413      	add	r3, r2
 80054bc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	4413      	add	r3, r2
 80054cc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d101      	bne.n	80054dc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80054d8:	2300      	movs	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1b2      	bne.n	8005452 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80054ec:	6a3b      	ldr	r3, [r7, #32]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3728      	adds	r7, #40	; 0x28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b088      	sub	sp, #32
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	d911      	bls.n	800553e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	6938      	ldr	r0, [r7, #16]
 800552a:	f001 fa7b 	bl	8006a24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800552e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	441a      	add	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800553c:	e01f      	b.n	800557e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	6938      	ldr	r0, [r7, #16]
 8005552:	f001 fa67 	bl	8006a24 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	4413      	add	r3, r2
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4619      	mov	r1, r3
 800556e:	6938      	ldr	r0, [r7, #16]
 8005570:	f001 fa58 	bl	8006a24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005574:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	60da      	str	r2, [r3, #12]
}
 800557e:	bf00      	nop
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d808      	bhi.n	80055b4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1ad2      	subs	r2, r2, r3
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	3b01      	subs	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	e004      	b.n	80055be <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80055be:	697b      	ldr	r3, [r7, #20]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08c      	sub	sp, #48	; 0x30
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80055d8:	4b3e      	ldr	r3, [pc, #248]	; (80056d4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80055e6:	f7ff fed1 	bl	800538c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	4613      	mov	r3, r2
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4a37      	ldr	r2, [pc, #220]	; (80056d4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80055f8:	4413      	add	r3, r2
 80055fa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800560c:	2300      	movs	r3, #0
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	429a      	cmp	r2, r3
 8005616:	d92b      	bls.n	8005670 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4293      	cmp	r3, r2
 8005628:	bf28      	it	cs
 800562a:	4613      	movcs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	4413      	add	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	6939      	ldr	r1, [r7, #16]
 800563c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800563e:	f001 f9f1 	bl	8006a24 <memcpy>
    NumBytesRead += NumBytesRem;
 8005642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	4413      	add	r3, r2
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4413      	add	r3, r2
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800565a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4413      	add	r3, r2
 8005660:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005668:	429a      	cmp	r2, r3
 800566a:	d101      	bne.n	8005670 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800566c:	2300      	movs	r3, #0
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4293      	cmp	r3, r2
 800567e:	bf28      	it	cs
 8005680:	4613      	movcs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d019      	beq.n	80056be <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	4413      	add	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	6939      	ldr	r1, [r7, #16]
 8005698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800569a:	f001 f9c3 	bl	8006a24 <memcpy>
    NumBytesRead += NumBytesRem;
 800569e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	4413      	add	r3, r2
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4413      	add	r3, r2
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056c8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3730      	adds	r7, #48	; 0x30
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20014480 	.word	0x20014480

080056d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08c      	sub	sp, #48	; 0x30
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80056e4:	4b3e      	ldr	r3, [pc, #248]	; (80057e0 <SEGGER_RTT_ReadNoLock+0x108>)
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <SEGGER_RTT_ReadNoLock+0x1e>
 80056f2:	f7ff fe4b 	bl	800538c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4613      	mov	r3, r2
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	4413      	add	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	3360      	adds	r3, #96	; 0x60
 8005702:	4a37      	ldr	r2, [pc, #220]	; (80057e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005704:	4413      	add	r3, r2
 8005706:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005718:	2300      	movs	r3, #0
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800571c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	429a      	cmp	r2, r3
 8005722:	d92b      	bls.n	800577c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4293      	cmp	r3, r2
 8005734:	bf28      	it	cs
 8005736:	4613      	movcs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	4413      	add	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	6939      	ldr	r1, [r7, #16]
 8005748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800574a:	f001 f96b 	bl	8006a24 <memcpy>
    NumBytesRead += NumBytesRem;
 800574e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	4413      	add	r3, r2
 8005754:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4413      	add	r3, r2
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005774:	429a      	cmp	r2, r3
 8005776:	d101      	bne.n	800577c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005778:	2300      	movs	r3, #0
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4293      	cmp	r3, r2
 800578a:	bf28      	it	cs
 800578c:	4613      	movcs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d019      	beq.n	80057ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	4413      	add	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	6939      	ldr	r1, [r7, #16]
 80057a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057a6:	f001 f93d 	bl	8006a24 <memcpy>
    NumBytesRead += NumBytesRem;
 80057aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4413      	add	r3, r2
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	4413      	add	r3, r2
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3730      	adds	r7, #48	; 0x30
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20014480 	.word	0x20014480

080057e4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4613      	mov	r3, r2
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	4413      	add	r3, r2
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	3360      	adds	r3, #96	; 0x60
 8005800:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005802:	4413      	add	r3, r2
 8005804:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d029      	beq.n	8005862 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800580e:	2b02      	cmp	r3, #2
 8005810:	d82e      	bhi.n	8005870 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005816:	2b01      	cmp	r3, #1
 8005818:	d013      	beq.n	8005842 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800581a:	e029      	b.n	8005870 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800581c:	6978      	ldr	r0, [r7, #20]
 800581e:	f7ff feb2 	bl	8005586 <_GetAvailWriteSpace>
 8005822:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d202      	bcs.n	8005832 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800582c:	2300      	movs	r3, #0
 800582e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005830:	e021      	b.n	8005876 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	69b9      	ldr	r1, [r7, #24]
 800583a:	6978      	ldr	r0, [r7, #20]
 800583c:	f7ff fe5b 	bl	80054f6 <_WriteNoCheck>
    break;
 8005840:	e019      	b.n	8005876 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005842:	6978      	ldr	r0, [r7, #20]
 8005844:	f7ff fe9f 	bl	8005586 <_GetAvailWriteSpace>
 8005848:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4293      	cmp	r3, r2
 8005850:	bf28      	it	cs
 8005852:	4613      	movcs	r3, r2
 8005854:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	69b9      	ldr	r1, [r7, #24]
 800585a:	6978      	ldr	r0, [r7, #20]
 800585c:	f7ff fe4b 	bl	80054f6 <_WriteNoCheck>
    break;
 8005860:	e009      	b.n	8005876 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	6978      	ldr	r0, [r7, #20]
 8005868:	f7ff fde8 	bl	800543c <_WriteBlocking>
 800586c:	61f8      	str	r0, [r7, #28]
    break;
 800586e:	e002      	b.n	8005876 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005870:	2300      	movs	r3, #0
 8005872:	61fb      	str	r3, [r7, #28]
    break;
 8005874:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005876:	69fb      	ldr	r3, [r7, #28]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20014480 	.word	0x20014480

08005884 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	4613      	mov	r3, r2
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <SEGGER_RTT_WriteNoLock+0x9c>)
 80058a2:	4413      	add	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d029      	beq.n	8005902 <SEGGER_RTT_WriteNoLock+0x7e>
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d82e      	bhi.n	8005910 <SEGGER_RTT_WriteNoLock+0x8c>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <SEGGER_RTT_WriteNoLock+0x38>
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d013      	beq.n	80058e2 <SEGGER_RTT_WriteNoLock+0x5e>
 80058ba:	e029      	b.n	8005910 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058bc:	6978      	ldr	r0, [r7, #20]
 80058be:	f7ff fe62 	bl	8005586 <_GetAvailWriteSpace>
 80058c2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d202      	bcs.n	80058d2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80058d0:	e021      	b.n	8005916 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f7ff fe0b 	bl	80054f6 <_WriteNoCheck>
    break;
 80058e0:	e019      	b.n	8005916 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058e2:	6978      	ldr	r0, [r7, #20]
 80058e4:	f7ff fe4f 	bl	8005586 <_GetAvailWriteSpace>
 80058e8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4293      	cmp	r3, r2
 80058f0:	bf28      	it	cs
 80058f2:	4613      	movcs	r3, r2
 80058f4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	69b9      	ldr	r1, [r7, #24]
 80058fa:	6978      	ldr	r0, [r7, #20]
 80058fc:	f7ff fdfb 	bl	80054f6 <_WriteNoCheck>
    break;
 8005900:	e009      	b.n	8005916 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	69b9      	ldr	r1, [r7, #24]
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f7ff fd98 	bl	800543c <_WriteBlocking>
 800590c:	61f8      	str	r0, [r7, #28]
    break;
 800590e:	e002      	b.n	8005916 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
    break;
 8005914:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005916:	69fb      	ldr	r3, [r7, #28]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20014480 	.word	0x20014480

08005924 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005930:	4b0e      	ldr	r3, [pc, #56]	; (800596c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800593e:	f7ff fd25 	bl	800538c <_DoInit>
  SEGGER_RTT_LOCK();
 8005942:	f3ef 8311 	mrs	r3, BASEPRI
 8005946:	f04f 0120 	mov.w	r1, #32
 800594a:	f381 8811 	msr	BASEPRI, r1
 800594e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff ff45 	bl	80057e4 <SEGGER_RTT_WriteDownBufferNoLock>
 800595a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005962:	697b      	ldr	r3, [r7, #20]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20014480 	.word	0x20014480

08005970 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800597c:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <SEGGER_RTT_Write+0x48>)
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <SEGGER_RTT_Write+0x1e>
 800598a:	f7ff fcff 	bl	800538c <_DoInit>
  SEGGER_RTT_LOCK();
 800598e:	f3ef 8311 	mrs	r3, BASEPRI
 8005992:	f04f 0120 	mov.w	r1, #32
 8005996:	f381 8811 	msr	BASEPRI, r1
 800599a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff ff6f 	bl	8005884 <SEGGER_RTT_WriteNoLock>
 80059a6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80059ae:	697b      	ldr	r3, [r7, #20]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20014480 	.word	0x20014480

080059bc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059ca:	4b3d      	ldr	r3, [pc, #244]	; (8005ac0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <SEGGER_RTT_AllocUpBuffer+0x20>
 80059d8:	f7ff fcd8 	bl	800538c <_DoInit>
  SEGGER_RTT_LOCK();
 80059dc:	f3ef 8311 	mrs	r3, BASEPRI
 80059e0:	f04f 0120 	mov.w	r1, #32
 80059e4:	f381 8811 	msr	BASEPRI, r1
 80059e8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059ea:	4b35      	ldr	r3, [pc, #212]	; (8005ac0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059ec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80059f2:	6939      	ldr	r1, [r7, #16]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	440b      	add	r3, r1
 8005a02:	3304      	adds	r3, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	dbeb      	blt.n	80059f2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a1a:	e000      	b.n	8005a1e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a1c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	da3f      	bge.n	8005aa8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a28:	6939      	ldr	r1, [r7, #16]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	4613      	mov	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a3c:	6939      	ldr	r1, [r7, #16]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	4613      	mov	r3, r2
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a52:	6939      	ldr	r1, [r7, #16]
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	440b      	add	r3, r1
 8005a60:	3320      	adds	r3, #32
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a66:	6939      	ldr	r1, [r7, #16]
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	440b      	add	r3, r1
 8005a74:	3328      	adds	r3, #40	; 0x28
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a7a:	6939      	ldr	r1, [r7, #16]
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	4413      	add	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	440b      	add	r3, r1
 8005a88:	3324      	adds	r3, #36	; 0x24
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a8e:	6939      	ldr	r1, [r7, #16]
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	440b      	add	r3, r1
 8005a9c:	332c      	adds	r3, #44	; 0x2c
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005aa2:	f3bf 8f5f 	dmb	sy
 8005aa6:	e002      	b.n	8005aae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20014480 	.word	0x20014480

08005ac4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005ad2:	4b33      	ldr	r3, [pc, #204]	; (8005ba0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ae0:	f7ff fc54 	bl	800538c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ae4:	4b2e      	ldr	r3, [pc, #184]	; (8005ba0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ae6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	461a      	mov	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d24d      	bcs.n	8005b90 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005af4:	f3ef 8311 	mrs	r3, BASEPRI
 8005af8:	f04f 0120 	mov.w	r1, #32
 8005afc:	f381 8811 	msr	BASEPRI, r1
 8005b00:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d031      	beq.n	8005b6c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005b08:	6979      	ldr	r1, [r7, #20]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	440b      	add	r3, r1
 8005b16:	3360      	adds	r3, #96	; 0x60
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	440b      	add	r3, r1
 8005b2a:	3364      	adds	r3, #100	; 0x64
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4613      	mov	r3, r2
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	4413      	add	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	440b      	add	r3, r1
 8005b3e:	3368      	adds	r3, #104	; 0x68
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005b44:	6979      	ldr	r1, [r7, #20]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	440b      	add	r3, r1
 8005b52:	3370      	adds	r3, #112	; 0x70
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005b58:	6979      	ldr	r1, [r7, #20]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	4413      	add	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	440b      	add	r3, r1
 8005b66:	336c      	adds	r3, #108	; 0x6c
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005b6c:	6979      	ldr	r1, [r7, #20]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4613      	mov	r3, r2
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4413      	add	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	440b      	add	r3, r1
 8005b7a:	3374      	adds	r3, #116	; 0x74
 8005b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b80:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	e002      	b.n	8005b96 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
 8005b94:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005b96:	69fb      	ldr	r3, [r7, #28]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20014480 	.word	0x20014480

08005ba4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005bb4:	e002      	b.n	8005bbc <_EncodeStr+0x18>
    Len++;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1f6      	bne.n	8005bb6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d901      	bls.n	8005bd4 <_EncodeStr+0x30>
    Len = Limit;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2bfe      	cmp	r3, #254	; 0xfe
 8005bd8:	d806      	bhi.n	8005be8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	60fa      	str	r2, [r7, #12]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e011      	b.n	8005c0c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	60fa      	str	r2, [r7, #12]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	60fa      	str	r2, [r7, #12]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	0a19      	lsrs	r1, r3, #8
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	60fa      	str	r2, [r7, #12]
 8005c08:	b2ca      	uxtb	r2, r1
 8005c0a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c10:	e00a      	b.n	8005c28 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	1c53      	adds	r3, r2, #1
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	60f9      	str	r1, [r7, #12]
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
    n++;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	3301      	adds	r3, #1
 8005c26:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d3f0      	bcc.n	8005c12 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005c30:	68fb      	ldr	r3, [r7, #12]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3304      	adds	r3, #4
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <_HandleIncomingPacket+0xe0>)
 8005c60:	7e1b      	ldrb	r3, [r3, #24]
 8005c62:	4618      	mov	r0, r3
 8005c64:	1cfb      	adds	r3, r7, #3
 8005c66:	2201      	movs	r2, #1
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f7ff fd35 	bl	80056d8 <SEGGER_RTT_ReadNoLock>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd54      	ble.n	8005d22 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	2b80      	cmp	r3, #128	; 0x80
 8005c7c:	d032      	beq.n	8005ce4 <_HandleIncomingPacket+0x8c>
 8005c7e:	2b80      	cmp	r3, #128	; 0x80
 8005c80:	dc42      	bgt.n	8005d08 <_HandleIncomingPacket+0xb0>
 8005c82:	2b07      	cmp	r3, #7
 8005c84:	dc16      	bgt.n	8005cb4 <_HandleIncomingPacket+0x5c>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	dd3e      	ble.n	8005d08 <_HandleIncomingPacket+0xb0>
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d83b      	bhi.n	8005d08 <_HandleIncomingPacket+0xb0>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <_HandleIncomingPacket+0x40>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cbb 	.word	0x08005cbb
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc7 	.word	0x08005cc7
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	08005cdf 	.word	0x08005cdf
 8005cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb6:	d036      	beq.n	8005d26 <_HandleIncomingPacket+0xce>
 8005cb8:	e026      	b.n	8005d08 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005cba:	f000 faa3 	bl	8006204 <SEGGER_SYSVIEW_Start>
      break;
 8005cbe:	e037      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005cc0:	f000 fb5c 	bl	800637c <SEGGER_SYSVIEW_Stop>
      break;
 8005cc4:	e034      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005cc6:	f000 fd35 	bl	8006734 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005cca:	e031      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005ccc:	f000 fcfa 	bl	80066c4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005cd0:	e02e      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005cd2:	f000 fb79 	bl	80063c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005cd6:	e02b      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005cd8:	f000 fdfc 	bl	80068d4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005cdc:	e028      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005cde:	f000 fddb 	bl	8006898 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005ce2:	e025      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ce4:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <_HandleIncomingPacket+0xe0>)
 8005ce6:	7e1b      	ldrb	r3, [r3, #24]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	1cfb      	adds	r3, r7, #3
 8005cec:	2201      	movs	r2, #1
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f7ff fcf2 	bl	80056d8 <SEGGER_RTT_ReadNoLock>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dd15      	ble.n	8005d2a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fd49 	bl	8006798 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d06:	e010      	b.n	8005d2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	b25b      	sxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da0e      	bge.n	8005d2e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <_HandleIncomingPacket+0xe0>)
 8005d12:	7e1b      	ldrb	r3, [r3, #24]
 8005d14:	4618      	mov	r0, r3
 8005d16:	1cfb      	adds	r3, r7, #3
 8005d18:	2201      	movs	r2, #1
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f7ff fcdc 	bl	80056d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d20:	e005      	b.n	8005d2e <_HandleIncomingPacket+0xd6>
    }
  }
 8005d22:	bf00      	nop
 8005d24:	e004      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
      break;
 8005d26:	bf00      	nop
 8005d28:	e002      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
      break;
 8005d2a:	bf00      	nop
 8005d2c:	e000      	b.n	8005d30 <_HandleIncomingPacket+0xd8>
      break;
 8005d2e:	bf00      	nop
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	200142cc 	.word	0x200142cc

08005d3c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08c      	sub	sp, #48	; 0x30
 8005d40:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d42:	2301      	movs	r3, #1
 8005d44:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d46:	1d3b      	adds	r3, r7, #4
 8005d48:	3301      	adds	r3, #1
 8005d4a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d50:	4b32      	ldr	r3, [pc, #200]	; (8005e1c <_TrySendOverflowPacket+0xe0>)
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d56:	e00b      	b.n	8005d70 <_TrySendOverflowPacket+0x34>
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	09db      	lsrs	r3, r3, #7
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	2b7f      	cmp	r3, #127	; 0x7f
 8005d74:	d8f0      	bhi.n	8005d58 <_TrySendOverflowPacket+0x1c>
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d86:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <_TrySendOverflowPacket+0xe4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d8c:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <_TrySendOverflowPacket+0xe0>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	623b      	str	r3, [r7, #32]
 8005d9e:	e00b      	b.n	8005db8 <_TrySendOverflowPacket+0x7c>
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1c59      	adds	r1, r3, #1
 8005da8:	6279      	str	r1, [r7, #36]	; 0x24
 8005daa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	09db      	lsrs	r3, r3, #7
 8005db6:	623b      	str	r3, [r7, #32]
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	2b7f      	cmp	r3, #127	; 0x7f
 8005dbc:	d8f0      	bhi.n	8005da0 <_TrySendOverflowPacket+0x64>
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	627a      	str	r2, [r7, #36]	; 0x24
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <_TrySendOverflowPacket+0xe0>)
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	4619      	mov	r1, r3
 8005de0:	f7fa fa16 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005de4:	4603      	mov	r3, r0
 8005de6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005de8:	f7ff fa46 	bl	8005278 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005df2:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <_TrySendOverflowPacket+0xe0>)
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <_TrySendOverflowPacket+0xe0>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <_TrySendOverflowPacket+0xe0>)
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e004      	b.n	8005e10 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e06:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <_TrySendOverflowPacket+0xe0>)
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	4a03      	ldr	r2, [pc, #12]	; (8005e1c <_TrySendOverflowPacket+0xe0>)
 8005e0e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e10:	693b      	ldr	r3, [r7, #16]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3730      	adds	r7, #48	; 0x30
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	200142cc 	.word	0x200142cc
 8005e20:	e0001004 	.word	0xe0001004

08005e24 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e30:	4b6d      	ldr	r3, [pc, #436]	; (8005fe8 <_SendPacket+0x1c4>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d010      	beq.n	8005e5a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e38:	4b6b      	ldr	r3, [pc, #428]	; (8005fe8 <_SendPacket+0x1c4>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80a5 	beq.w	8005f8c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e42:	4b69      	ldr	r3, [pc, #420]	; (8005fe8 <_SendPacket+0x1c4>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d109      	bne.n	8005e5e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e4a:	f7ff ff77 	bl	8005d3c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e4e:	4b66      	ldr	r3, [pc, #408]	; (8005fe8 <_SendPacket+0x1c4>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	f040 809c 	bne.w	8005f90 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005e58:	e001      	b.n	8005e5e <_SendPacket+0x3a>
    goto Send;
 8005e5a:	bf00      	nop
 8005e5c:	e000      	b.n	8005e60 <_SendPacket+0x3c>
Send:
 8005e5e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b1f      	cmp	r3, #31
 8005e64:	d809      	bhi.n	8005e7a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e66:	4b60      	ldr	r3, [pc, #384]	; (8005fe8 <_SendPacket+0x1c4>)
 8005e68:	69da      	ldr	r2, [r3, #28]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 808d 	bne.w	8005f94 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b17      	cmp	r3, #23
 8005e7e:	d807      	bhi.n	8005e90 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e03d      	b.n	8005f0c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9c:	d912      	bls.n	8005ec4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	09da      	lsrs	r2, r3, #7
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	3a01      	subs	r2, #1
 8005eb6:	60fa      	str	r2, [r7, #12]
 8005eb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	e006      	b.n	8005ed2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed6:	d912      	bls.n	8005efe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	09da      	lsrs	r2, r3, #7
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	3a01      	subs	r2, #1
 8005ef0:	60fa      	str	r2, [r7, #12]
 8005ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e006      	b.n	8005f0c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f0c:	4b37      	ldr	r3, [pc, #220]	; (8005fec <_SendPacket+0x1c8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f12:	4b35      	ldr	r3, [pc, #212]	; (8005fe8 <_SendPacket+0x1c4>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	623b      	str	r3, [r7, #32]
 8005f24:	e00b      	b.n	8005f3e <_SendPacket+0x11a>
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	1c59      	adds	r1, r3, #1
 8005f2e:	6279      	str	r1, [r7, #36]	; 0x24
 8005f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	09db      	lsrs	r3, r3, #7
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	2b7f      	cmp	r3, #127	; 0x7f
 8005f42:	d8f0      	bhi.n	8005f26 <_SendPacket+0x102>
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	627a      	str	r2, [r7, #36]	; 0x24
 8005f4a:	6a3a      	ldr	r2, [r7, #32]
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005f54:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <_SendPacket+0x1c4>)
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	461a      	mov	r2, r3
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	f7fa f954 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005f6c:	f7ff f984 	bl	8005278 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f76:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <_SendPacket+0x1c4>)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	60d3      	str	r3, [r2, #12]
 8005f7c:	e00b      	b.n	8005f96 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f7e:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <_SendPacket+0x1c4>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	3301      	adds	r3, #1
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <_SendPacket+0x1c4>)
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e004      	b.n	8005f96 <_SendPacket+0x172>
    goto SendDone;
 8005f8c:	bf00      	nop
 8005f8e:	e002      	b.n	8005f96 <_SendPacket+0x172>
      goto SendDone;
 8005f90:	bf00      	nop
 8005f92:	e000      	b.n	8005f96 <_SendPacket+0x172>
      goto SendDone;
 8005f94:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f96:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <_SendPacket+0x1c4>)
 8005f98:	7e1b      	ldrb	r3, [r3, #24]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <_SendPacket+0x1cc>)
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	440b      	add	r3, r1
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	336c      	adds	r3, #108	; 0x6c
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <_SendPacket+0x1c4>)
 8005fae:	7e1b      	ldrb	r3, [r3, #24]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	490f      	ldr	r1, [pc, #60]	; (8005ff0 <_SendPacket+0x1cc>)
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	4403      	add	r3, r0
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	440b      	add	r3, r1
 8005fbe:	3370      	adds	r3, #112	; 0x70
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d00b      	beq.n	8005fde <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005fc6:	4b08      	ldr	r3, [pc, #32]	; (8005fe8 <_SendPacket+0x1c4>)
 8005fc8:	789b      	ldrb	r3, [r3, #2]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d107      	bne.n	8005fde <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <_SendPacket+0x1c4>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005fd4:	f7ff fe40 	bl	8005c58 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <_SendPacket+0x1c4>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005fde:	bf00      	nop
 8005fe0:	3728      	adds	r7, #40	; 0x28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200142cc 	.word	0x200142cc
 8005fec:	e0001004 	.word	0xe0001004
 8005ff0:	20014480 	.word	0x20014480

08005ff4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006002:	2300      	movs	r3, #0
 8006004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006008:	4917      	ldr	r1, [pc, #92]	; (8006068 <SEGGER_SYSVIEW_Init+0x74>)
 800600a:	4818      	ldr	r0, [pc, #96]	; (800606c <SEGGER_SYSVIEW_Init+0x78>)
 800600c:	f7ff fcd6 	bl	80059bc <SEGGER_RTT_AllocUpBuffer>
 8006010:	4603      	mov	r3, r0
 8006012:	b2da      	uxtb	r2, r3
 8006014:	4b16      	ldr	r3, [pc, #88]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006016:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 800601a:	785a      	ldrb	r2, [r3, #1]
 800601c:	4b14      	ldr	r3, [pc, #80]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 800601e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006020:	4b13      	ldr	r3, [pc, #76]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006022:	7e1b      	ldrb	r3, [r3, #24]
 8006024:	4618      	mov	r0, r3
 8006026:	2300      	movs	r3, #0
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	2308      	movs	r3, #8
 800602c:	4a11      	ldr	r2, [pc, #68]	; (8006074 <SEGGER_SYSVIEW_Init+0x80>)
 800602e:	490f      	ldr	r1, [pc, #60]	; (800606c <SEGGER_SYSVIEW_Init+0x78>)
 8006030:	f7ff fd48 	bl	8005ac4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006036:	2200      	movs	r2, #0
 8006038:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800603a:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <SEGGER_SYSVIEW_Init+0x84>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a0c      	ldr	r2, [pc, #48]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006040:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006042:	4a0b      	ldr	r2, [pc, #44]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006048:	4a09      	ldr	r2, [pc, #36]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800604e:	4a08      	ldr	r2, [pc, #32]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006054:	4a06      	ldr	r2, [pc, #24]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	200132c4 	.word	0x200132c4
 800606c:	08007ef4 	.word	0x08007ef4
 8006070:	200142cc 	.word	0x200142cc
 8006074:	200142c4 	.word	0x200142c4
 8006078:	e0001004 	.word	0xe0001004

0800607c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006084:	4a04      	ldr	r2, [pc, #16]	; (8006098 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6113      	str	r3, [r2, #16]
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	200142cc 	.word	0x200142cc

0800609c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060a4:	f3ef 8311 	mrs	r3, BASEPRI
 80060a8:	f04f 0120 	mov.w	r1, #32
 80060ac:	f381 8811 	msr	BASEPRI, r1
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	4808      	ldr	r0, [pc, #32]	; (80060d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80060b4:	f7ff fdc3 	bl	8005c3e <_PreparePacket>
 80060b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	68b8      	ldr	r0, [r7, #8]
 80060c0:	f7ff feb0 	bl	8005e24 <_SendPacket>
  RECORD_END();
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f383 8811 	msr	BASEPRI, r3
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200142fc 	.word	0x200142fc

080060d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060e2:	f3ef 8311 	mrs	r3, BASEPRI
 80060e6:	f04f 0120 	mov.w	r1, #32
 80060ea:	f381 8811 	msr	BASEPRI, r1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	4816      	ldr	r0, [pc, #88]	; (800614c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80060f2:	f7ff fda4 	bl	8005c3e <_PreparePacket>
 80060f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	e00b      	b.n	800611e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	b2da      	uxtb	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	61f9      	str	r1, [r7, #28]
 8006110:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	09db      	lsrs	r3, r3, #7
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b7f      	cmp	r3, #127	; 0x7f
 8006122:	d8f0      	bhi.n	8006106 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	61fa      	str	r2, [r7, #28]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	68f9      	ldr	r1, [r7, #12]
 8006138:	6938      	ldr	r0, [r7, #16]
 800613a:	f7ff fe73 	bl	8005e24 <_SendPacket>
  RECORD_END();
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f383 8811 	msr	BASEPRI, r3
}
 8006144:	bf00      	nop
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	200142fc 	.word	0x200142fc

08006150 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	; 0x30
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800615c:	f3ef 8311 	mrs	r3, BASEPRI
 8006160:	f04f 0120 	mov.w	r1, #32
 8006164:	f381 8811 	msr	BASEPRI, r1
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	4825      	ldr	r0, [pc, #148]	; (8006200 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800616c:	f7ff fd67 	bl	8005c3e <_PreparePacket>
 8006170:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
 800617e:	e00b      	b.n	8006198 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	b2da      	uxtb	r2, r3
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	1c59      	adds	r1, r3, #1
 8006188:	62f9      	str	r1, [r7, #44]	; 0x2c
 800618a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	09db      	lsrs	r3, r3, #7
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	2b7f      	cmp	r3, #127	; 0x7f
 800619c:	d8f0      	bhi.n	8006180 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	e00b      	b.n	80061d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	6279      	str	r1, [r7, #36]	; 0x24
 80061c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	09db      	lsrs	r3, r3, #7
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	2b7f      	cmp	r3, #127	; 0x7f
 80061d4:	d8f0      	bhi.n	80061b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	627a      	str	r2, [r7, #36]	; 0x24
 80061dc:	6a3a      	ldr	r2, [r7, #32]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	6979      	ldr	r1, [r7, #20]
 80061ea:	69b8      	ldr	r0, [r7, #24]
 80061ec:	f7ff fe1a 	bl	8005e24 <_SendPacket>
  RECORD_END();
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f383 8811 	msr	BASEPRI, r3
}
 80061f6:	bf00      	nop
 80061f8:	3730      	adds	r7, #48	; 0x30
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200142fc 	.word	0x200142fc

08006204 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	; 0x30
 8006208:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800620a:	4b59      	ldr	r3, [pc, #356]	; (8006370 <SEGGER_SYSVIEW_Start+0x16c>)
 800620c:	2201      	movs	r2, #1
 800620e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006210:	f3ef 8311 	mrs	r3, BASEPRI
 8006214:	f04f 0120 	mov.w	r1, #32
 8006218:	f381 8811 	msr	BASEPRI, r1
 800621c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800621e:	4b54      	ldr	r3, [pc, #336]	; (8006370 <SEGGER_SYSVIEW_Start+0x16c>)
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	220a      	movs	r2, #10
 8006224:	4953      	ldr	r1, [pc, #332]	; (8006374 <SEGGER_SYSVIEW_Start+0x170>)
 8006226:	4618      	mov	r0, r3
 8006228:	f7f9 fff2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006232:	f7ff f821 	bl	8005278 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006236:	200a      	movs	r0, #10
 8006238:	f7ff ff30 	bl	800609c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800623c:	f3ef 8311 	mrs	r3, BASEPRI
 8006240:	f04f 0120 	mov.w	r1, #32
 8006244:	f381 8811 	msr	BASEPRI, r1
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	484b      	ldr	r0, [pc, #300]	; (8006378 <SEGGER_SYSVIEW_Start+0x174>)
 800624c:	f7ff fcf7 	bl	8005c3e <_PreparePacket>
 8006250:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625a:	4b45      	ldr	r3, [pc, #276]	; (8006370 <SEGGER_SYSVIEW_Start+0x16c>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006260:	e00b      	b.n	800627a <SEGGER_SYSVIEW_Start+0x76>
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	b2da      	uxtb	r2, r3
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800626c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	09db      	lsrs	r3, r3, #7
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	2b7f      	cmp	r3, #127	; 0x7f
 800627e:	d8f0      	bhi.n	8006262 <SEGGER_SYSVIEW_Start+0x5e>
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
 8006294:	4b36      	ldr	r3, [pc, #216]	; (8006370 <SEGGER_SYSVIEW_Start+0x16c>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	623b      	str	r3, [r7, #32]
 800629a:	e00b      	b.n	80062b4 <SEGGER_SYSVIEW_Start+0xb0>
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	1c59      	adds	r1, r3, #1
 80062a4:	6279      	str	r1, [r7, #36]	; 0x24
 80062a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	09db      	lsrs	r3, r3, #7
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	2b7f      	cmp	r3, #127	; 0x7f
 80062b8:	d8f0      	bhi.n	800629c <SEGGER_SYSVIEW_Start+0x98>
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	627a      	str	r2, [r7, #36]	; 0x24
 80062c0:	6a3a      	ldr	r2, [r7, #32]
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	4b28      	ldr	r3, [pc, #160]	; (8006370 <SEGGER_SYSVIEW_Start+0x16c>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	61bb      	str	r3, [r7, #24]
 80062d4:	e00b      	b.n	80062ee <SEGGER_SYSVIEW_Start+0xea>
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	1c59      	adds	r1, r3, #1
 80062de:	61f9      	str	r1, [r7, #28]
 80062e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	09db      	lsrs	r3, r3, #7
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b7f      	cmp	r3, #127	; 0x7f
 80062f2:	d8f0      	bhi.n	80062d6 <SEGGER_SYSVIEW_Start+0xd2>
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	61fa      	str	r2, [r7, #28]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	2300      	movs	r3, #0
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	e00b      	b.n	8006326 <SEGGER_SYSVIEW_Start+0x122>
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	b2da      	uxtb	r2, r3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	1c59      	adds	r1, r3, #1
 8006316:	6179      	str	r1, [r7, #20]
 8006318:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	09db      	lsrs	r3, r3, #7
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b7f      	cmp	r3, #127	; 0x7f
 800632a:	d8f0      	bhi.n	800630e <SEGGER_SYSVIEW_Start+0x10a>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	617a      	str	r2, [r7, #20]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800633c:	2218      	movs	r2, #24
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff fd6f 	bl	8005e24 <_SendPacket>
      RECORD_END();
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800634c:	4b08      	ldr	r3, [pc, #32]	; (8006370 <SEGGER_SYSVIEW_Start+0x16c>)
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <SEGGER_SYSVIEW_Start+0x16c>)
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800635a:	f000 f9eb 	bl	8006734 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800635e:	f000 f9b1 	bl	80066c4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006362:	f000 fab7 	bl	80068d4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006366:	bf00      	nop
 8006368:	3730      	adds	r7, #48	; 0x30
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	200142cc 	.word	0x200142cc
 8006374:	08007f20 	.word	0x08007f20
 8006378:	200142fc 	.word	0x200142fc

0800637c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006382:	f3ef 8311 	mrs	r3, BASEPRI
 8006386:	f04f 0120 	mov.w	r1, #32
 800638a:	f381 8811 	msr	BASEPRI, r1
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	480b      	ldr	r0, [pc, #44]	; (80063c0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006392:	f7ff fc54 	bl	8005c3e <_PreparePacket>
 8006396:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d007      	beq.n	80063b0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063a0:	220b      	movs	r2, #11
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6838      	ldr	r0, [r7, #0]
 80063a6:	f7ff fd3d 	bl	8005e24 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <SEGGER_SYSVIEW_Stop+0x48>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f383 8811 	msr	BASEPRI, r3
}
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200142fc 	.word	0x200142fc
 80063c4:	200142cc 	.word	0x200142cc

080063c8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08c      	sub	sp, #48	; 0x30
 80063cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063ce:	f3ef 8311 	mrs	r3, BASEPRI
 80063d2:	f04f 0120 	mov.w	r1, #32
 80063d6:	f381 8811 	msr	BASEPRI, r1
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	4845      	ldr	r0, [pc, #276]	; (80064f4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80063de:	f7ff fc2e 	bl	8005c3e <_PreparePacket>
 80063e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ec:	4b42      	ldr	r3, [pc, #264]	; (80064f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f2:	e00b      	b.n	800640c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	09db      	lsrs	r3, r3, #7
 800640a:	62bb      	str	r3, [r7, #40]	; 0x28
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	2b7f      	cmp	r3, #127	; 0x7f
 8006410:	d8f0      	bhi.n	80063f4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
 8006426:	4b34      	ldr	r3, [pc, #208]	; (80064f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	e00b      	b.n	8006446 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	6279      	str	r1, [r7, #36]	; 0x24
 8006438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	09db      	lsrs	r3, r3, #7
 8006444:	623b      	str	r3, [r7, #32]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	2b7f      	cmp	r3, #127	; 0x7f
 800644a:	d8f0      	bhi.n	800642e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	627a      	str	r2, [r7, #36]	; 0x24
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	e00b      	b.n	8006480 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	b2da      	uxtb	r2, r3
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	1c59      	adds	r1, r3, #1
 8006470:	61f9      	str	r1, [r7, #28]
 8006472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	09db      	lsrs	r3, r3, #7
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b7f      	cmp	r3, #127	; 0x7f
 8006484:	d8f0      	bhi.n	8006468 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	61fa      	str	r2, [r7, #28]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e00b      	b.n	80064b8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	6179      	str	r1, [r7, #20]
 80064aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	09db      	lsrs	r3, r3, #7
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b7f      	cmp	r3, #127	; 0x7f
 80064bc:	d8f0      	bhi.n	80064a0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	617a      	str	r2, [r7, #20]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064ce:	2218      	movs	r2, #24
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	f7ff fca6 	bl	8005e24 <_SendPacket>
  RECORD_END();
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064de:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80064e6:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	4798      	blx	r3
  }
}
 80064ec:	bf00      	nop
 80064ee:	3730      	adds	r7, #48	; 0x30
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	200142fc 	.word	0x200142fc
 80064f8:	200142cc 	.word	0x200142cc

080064fc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b092      	sub	sp, #72	; 0x48
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006504:	f3ef 8311 	mrs	r3, BASEPRI
 8006508:	f04f 0120 	mov.w	r1, #32
 800650c:	f381 8811 	msr	BASEPRI, r1
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	486a      	ldr	r0, [pc, #424]	; (80066bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006514:	f7ff fb93 	bl	8005c3e <_PreparePacket>
 8006518:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	647b      	str	r3, [r7, #68]	; 0x44
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b66      	ldr	r3, [pc, #408]	; (80066c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	643b      	str	r3, [r7, #64]	; 0x40
 800652e:	e00b      	b.n	8006548 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006532:	b2da      	uxtb	r2, r3
 8006534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006536:	1c59      	adds	r1, r3, #1
 8006538:	6479      	str	r1, [r7, #68]	; 0x44
 800653a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006544:	09db      	lsrs	r3, r3, #7
 8006546:	643b      	str	r3, [r7, #64]	; 0x40
 8006548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654a:	2b7f      	cmp	r3, #127	; 0x7f
 800654c:	d8f0      	bhi.n	8006530 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800654e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	647a      	str	r2, [r7, #68]	; 0x44
 8006554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800655c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	63bb      	str	r3, [r7, #56]	; 0x38
 8006568:	e00b      	b.n	8006582 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	b2da      	uxtb	r2, r3
 800656e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006570:	1c59      	adds	r1, r3, #1
 8006572:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006574:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	09db      	lsrs	r3, r3, #7
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	2b7f      	cmp	r3, #127	; 0x7f
 8006586:	d8f0      	bhi.n	800656a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800658e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006596:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	4619      	mov	r1, r3
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7ff faff 	bl	8005ba4 <_EncodeStr>
 80065a6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065a8:	2209      	movs	r2, #9
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	6938      	ldr	r0, [r7, #16]
 80065ae:	f7ff fc39 	bl	8005e24 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	637b      	str	r3, [r7, #52]	; 0x34
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b40      	ldr	r3, [pc, #256]	; (80066c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	633b      	str	r3, [r7, #48]	; 0x30
 80065c6:	e00b      	b.n	80065e0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ce:	1c59      	adds	r1, r3, #1
 80065d0:	6379      	str	r1, [r7, #52]	; 0x34
 80065d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	09db      	lsrs	r3, r3, #7
 80065de:	633b      	str	r3, [r7, #48]	; 0x30
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	2b7f      	cmp	r3, #127	; 0x7f
 80065e4:	d8f0      	bhi.n	80065c8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80065e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	637a      	str	r2, [r7, #52]	; 0x34
 80065ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006600:	e00b      	b.n	800661a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	b2da      	uxtb	r2, r3
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	1c59      	adds	r1, r3, #1
 800660a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800660c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	09db      	lsrs	r3, r3, #7
 8006618:	62bb      	str	r3, [r7, #40]	; 0x28
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	2b7f      	cmp	r3, #127	; 0x7f
 800661e:	d8f0      	bhi.n	8006602 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	623b      	str	r3, [r7, #32]
 800663a:	e00b      	b.n	8006654 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	b2da      	uxtb	r2, r3
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	6279      	str	r1, [r7, #36]	; 0x24
 8006646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	09db      	lsrs	r3, r3, #7
 8006652:	623b      	str	r3, [r7, #32]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	2b7f      	cmp	r3, #127	; 0x7f
 8006658:	d8f0      	bhi.n	800663c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	627a      	str	r2, [r7, #36]	; 0x24
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	2300      	movs	r3, #0
 8006670:	61bb      	str	r3, [r7, #24]
 8006672:	e00b      	b.n	800668c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	1c59      	adds	r1, r3, #1
 800667c:	61f9      	str	r1, [r7, #28]
 800667e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	09db      	lsrs	r3, r3, #7
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	2b7f      	cmp	r3, #127	; 0x7f
 8006690:	d8f0      	bhi.n	8006674 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	61fa      	str	r2, [r7, #28]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066a2:	2215      	movs	r2, #21
 80066a4:	68f9      	ldr	r1, [r7, #12]
 80066a6:	6938      	ldr	r0, [r7, #16]
 80066a8:	f7ff fbbc 	bl	8005e24 <_SendPacket>
  RECORD_END();
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f383 8811 	msr	BASEPRI, r3
}
 80066b2:	bf00      	nop
 80066b4:	3748      	adds	r7, #72	; 0x48
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	200142fc 	.word	0x200142fc
 80066c0:	200142cc 	.word	0x200142cc

080066c4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80066c8:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80066da:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4798      	blx	r3
  }
}
 80066e2:	bf00      	nop
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200142cc 	.word	0x200142cc

080066ec <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066f4:	f3ef 8311 	mrs	r3, BASEPRI
 80066f8:	f04f 0120 	mov.w	r1, #32
 80066fc:	f381 8811 	msr	BASEPRI, r1
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	480b      	ldr	r0, [pc, #44]	; (8006730 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006704:	f7ff fa9b 	bl	8005c3e <_PreparePacket>
 8006708:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800670a:	2280      	movs	r2, #128	; 0x80
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	6938      	ldr	r0, [r7, #16]
 8006710:	f7ff fa48 	bl	8005ba4 <_EncodeStr>
 8006714:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006716:	220e      	movs	r2, #14
 8006718:	68f9      	ldr	r1, [r7, #12]
 800671a:	6938      	ldr	r0, [r7, #16]
 800671c:	f7ff fb82 	bl	8005e24 <_SendPacket>
  RECORD_END();
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f383 8811 	msr	BASEPRI, r3
}
 8006726:	bf00      	nop
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	200142fc 	.word	0x200142fc

08006734 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006734:	b590      	push	{r4, r7, lr}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01a      	beq.n	8006778 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006742:	4b13      	ldr	r3, [pc, #76]	; (8006790 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d015      	beq.n	8006778 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800674c:	4b10      	ldr	r3, [pc, #64]	; (8006790 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4798      	blx	r3
 8006754:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006758:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800675a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	000a      	movs	r2, r1
 8006768:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800676a:	4613      	mov	r3, r2
 800676c:	461a      	mov	r2, r3
 800676e:	4621      	mov	r1, r4
 8006770:	200d      	movs	r0, #13
 8006772:	f7ff fced 	bl	8006150 <SEGGER_SYSVIEW_RecordU32x2>
 8006776:	e006      	b.n	8006786 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006778:	4b06      	ldr	r3, [pc, #24]	; (8006794 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4619      	mov	r1, r3
 800677e:	200c      	movs	r0, #12
 8006780:	f7ff fcaa 	bl	80060d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	bd90      	pop	{r4, r7, pc}
 800678e:	bf00      	nop
 8006790:	200142cc 	.word	0x200142cc
 8006794:	e0001004 	.word	0xe0001004

08006798 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006798:	b580      	push	{r7, lr}
 800679a:	b08c      	sub	sp, #48	; 0x30
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80067a2:	4b3b      	ldr	r3, [pc, #236]	; (8006890 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d06d      	beq.n	8006886 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80067aa:	4b39      	ldr	r3, [pc, #228]	; (8006890 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80067b0:	2300      	movs	r3, #0
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b4:	e008      	b.n	80067c8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	3301      	adds	r3, #1
 80067c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d3f2      	bcc.n	80067b6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80067d0:	e000      	b.n	80067d4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80067d2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d055      	beq.n	8006886 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067da:	f3ef 8311 	mrs	r3, BASEPRI
 80067de:	f04f 0120 	mov.w	r1, #32
 80067e2:	f381 8811 	msr	BASEPRI, r1
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	482a      	ldr	r0, [pc, #168]	; (8006894 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80067ea:	f7ff fa28 	bl	8005c3e <_PreparePacket>
 80067ee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	623b      	str	r3, [r7, #32]
 80067fc:	e00b      	b.n	8006816 <SEGGER_SYSVIEW_SendModule+0x7e>
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	1c59      	adds	r1, r3, #1
 8006806:	6279      	str	r1, [r7, #36]	; 0x24
 8006808:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	09db      	lsrs	r3, r3, #7
 8006814:	623b      	str	r3, [r7, #32]
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	2b7f      	cmp	r3, #127	; 0x7f
 800681a:	d8f0      	bhi.n	80067fe <SEGGER_SYSVIEW_SendModule+0x66>
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	627a      	str	r2, [r7, #36]	; 0x24
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	e00b      	b.n	8006850 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	1c59      	adds	r1, r3, #1
 8006840:	61f9      	str	r1, [r7, #28]
 8006842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	09db      	lsrs	r3, r3, #7
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2b7f      	cmp	r3, #127	; 0x7f
 8006854:	d8f0      	bhi.n	8006838 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	61fa      	str	r2, [r7, #28]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2280      	movs	r2, #128	; 0x80
 800686c:	4619      	mov	r1, r3
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff f998 	bl	8005ba4 <_EncodeStr>
 8006874:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006876:	2216      	movs	r2, #22
 8006878:	68f9      	ldr	r1, [r7, #12]
 800687a:	6938      	ldr	r0, [r7, #16]
 800687c:	f7ff fad2 	bl	8005e24 <_SendPacket>
      RECORD_END();
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006886:	bf00      	nop
 8006888:	3730      	adds	r7, #48	; 0x30
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	200142f4 	.word	0x200142f4
 8006894:	200142fc 	.word	0x200142fc

08006898 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800689e:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00f      	beq.n	80068c6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80068a6:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f2      	bne.n	80068ac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	200142f4 	.word	0x200142f4

080068d4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80068da:	f3ef 8311 	mrs	r3, BASEPRI
 80068de:	f04f 0120 	mov.w	r1, #32
 80068e2:	f381 8811 	msr	BASEPRI, r1
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	4817      	ldr	r0, [pc, #92]	; (8006948 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80068ea:	f7ff f9a8 	bl	8005c3e <_PreparePacket>
 80068ee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	4b14      	ldr	r3, [pc, #80]	; (800694c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	e00b      	b.n	8006918 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	b2da      	uxtb	r2, r3
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	1c59      	adds	r1, r3, #1
 8006908:	6179      	str	r1, [r7, #20]
 800690a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	09db      	lsrs	r3, r3, #7
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b7f      	cmp	r3, #127	; 0x7f
 800691c:	d8f0      	bhi.n	8006900 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	617a      	str	r2, [r7, #20]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800692e:	221b      	movs	r2, #27
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	68b8      	ldr	r0, [r7, #8]
 8006934:	f7ff fa76 	bl	8005e24 <_SendPacket>
  RECORD_END();
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f383 8811 	msr	BASEPRI, r3
}
 800693e:	bf00      	nop
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	200142fc 	.word	0x200142fc
 800694c:	200142f8 	.word	0x200142f8

08006950 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006954:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006956:	7e1b      	ldrb	r3, [r3, #24]
 8006958:	4619      	mov	r1, r3
 800695a:	4a13      	ldr	r2, [pc, #76]	; (80069a8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800695c:	460b      	mov	r3, r1
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	440b      	add	r3, r1
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	4413      	add	r3, r2
 8006966:	336c      	adds	r3, #108	; 0x6c
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800696c:	7e1b      	ldrb	r3, [r3, #24]
 800696e:	4618      	mov	r0, r3
 8006970:	490d      	ldr	r1, [pc, #52]	; (80069a8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006972:	4603      	mov	r3, r0
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4403      	add	r3, r0
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	440b      	add	r3, r1
 800697c:	3370      	adds	r3, #112	; 0x70
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d00b      	beq.n	800699c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006984:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006986:	789b      	ldrb	r3, [r3, #2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d107      	bne.n	800699c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800698e:	2201      	movs	r2, #1
 8006990:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006992:	f7ff f961 	bl	8005c58 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006996:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006998:	2200      	movs	r2, #0
 800699a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800699c:	4b01      	ldr	r3, [pc, #4]	; (80069a4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800699e:	781b      	ldrb	r3, [r3, #0]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	200142cc 	.word	0x200142cc
 80069a8:	20014480 	.word	0x20014480

080069ac <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	2000      	movs	r0, #0
 80069c0:	f7fe ffd6 	bl	8005970 <SEGGER_RTT_Write>
  return len;
 80069c4:	683b      	ldr	r3, [r7, #0]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <__errno>:
 80069d0:	4b01      	ldr	r3, [pc, #4]	; (80069d8 <__errno+0x8>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	2000001c 	.word	0x2000001c

080069dc <__libc_init_array>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4d0d      	ldr	r5, [pc, #52]	; (8006a14 <__libc_init_array+0x38>)
 80069e0:	4c0d      	ldr	r4, [pc, #52]	; (8006a18 <__libc_init_array+0x3c>)
 80069e2:	1b64      	subs	r4, r4, r5
 80069e4:	10a4      	asrs	r4, r4, #2
 80069e6:	2600      	movs	r6, #0
 80069e8:	42a6      	cmp	r6, r4
 80069ea:	d109      	bne.n	8006a00 <__libc_init_array+0x24>
 80069ec:	4d0b      	ldr	r5, [pc, #44]	; (8006a1c <__libc_init_array+0x40>)
 80069ee:	4c0c      	ldr	r4, [pc, #48]	; (8006a20 <__libc_init_array+0x44>)
 80069f0:	f001 f9e2 	bl	8007db8 <_init>
 80069f4:	1b64      	subs	r4, r4, r5
 80069f6:	10a4      	asrs	r4, r4, #2
 80069f8:	2600      	movs	r6, #0
 80069fa:	42a6      	cmp	r6, r4
 80069fc:	d105      	bne.n	8006a0a <__libc_init_array+0x2e>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a04:	4798      	blx	r3
 8006a06:	3601      	adds	r6, #1
 8006a08:	e7ee      	b.n	80069e8 <__libc_init_array+0xc>
 8006a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a0e:	4798      	blx	r3
 8006a10:	3601      	adds	r6, #1
 8006a12:	e7f2      	b.n	80069fa <__libc_init_array+0x1e>
 8006a14:	08008080 	.word	0x08008080
 8006a18:	08008080 	.word	0x08008080
 8006a1c:	08008080 	.word	0x08008080
 8006a20:	08008084 	.word	0x08008084

08006a24 <memcpy>:
 8006a24:	440a      	add	r2, r1
 8006a26:	4291      	cmp	r1, r2
 8006a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a2c:	d100      	bne.n	8006a30 <memcpy+0xc>
 8006a2e:	4770      	bx	lr
 8006a30:	b510      	push	{r4, lr}
 8006a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a3a:	4291      	cmp	r1, r2
 8006a3c:	d1f9      	bne.n	8006a32 <memcpy+0xe>
 8006a3e:	bd10      	pop	{r4, pc}

08006a40 <memset>:
 8006a40:	4402      	add	r2, r0
 8006a42:	4603      	mov	r3, r0
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d100      	bne.n	8006a4a <memset+0xa>
 8006a48:	4770      	bx	lr
 8006a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4e:	e7f9      	b.n	8006a44 <memset+0x4>

08006a50 <rand>:
 8006a50:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <rand+0x60>)
 8006a52:	b510      	push	{r4, lr}
 8006a54:	681c      	ldr	r4, [r3, #0]
 8006a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a58:	b9b3      	cbnz	r3, 8006a88 <rand+0x38>
 8006a5a:	2018      	movs	r0, #24
 8006a5c:	f000 f888 	bl	8006b70 <malloc>
 8006a60:	63a0      	str	r0, [r4, #56]	; 0x38
 8006a62:	b928      	cbnz	r0, 8006a70 <rand+0x20>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <rand+0x64>)
 8006a68:	4813      	ldr	r0, [pc, #76]	; (8006ab8 <rand+0x68>)
 8006a6a:	214e      	movs	r1, #78	; 0x4e
 8006a6c:	f000 f850 	bl	8006b10 <__assert_func>
 8006a70:	4a12      	ldr	r2, [pc, #72]	; (8006abc <rand+0x6c>)
 8006a72:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <rand+0x70>)
 8006a74:	e9c0 2300 	strd	r2, r3, [r0]
 8006a78:	4b12      	ldr	r3, [pc, #72]	; (8006ac4 <rand+0x74>)
 8006a7a:	6083      	str	r3, [r0, #8]
 8006a7c:	230b      	movs	r3, #11
 8006a7e:	8183      	strh	r3, [r0, #12]
 8006a80:	2201      	movs	r2, #1
 8006a82:	2300      	movs	r3, #0
 8006a84:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006a88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a8a:	480f      	ldr	r0, [pc, #60]	; (8006ac8 <rand+0x78>)
 8006a8c:	690a      	ldr	r2, [r1, #16]
 8006a8e:	694b      	ldr	r3, [r1, #20]
 8006a90:	4c0e      	ldr	r4, [pc, #56]	; (8006acc <rand+0x7c>)
 8006a92:	4350      	muls	r0, r2
 8006a94:	fb04 0003 	mla	r0, r4, r3, r0
 8006a98:	fba2 3404 	umull	r3, r4, r2, r4
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	4404      	add	r4, r0
 8006aa0:	f144 0000 	adc.w	r0, r4, #0
 8006aa4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8006aa8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	bf00      	nop
 8006ab0:	2000001c 	.word	0x2000001c
 8006ab4:	08007f30 	.word	0x08007f30
 8006ab8:	08007f47 	.word	0x08007f47
 8006abc:	abcd330e 	.word	0xabcd330e
 8006ac0:	e66d1234 	.word	0xe66d1234
 8006ac4:	0005deec 	.word	0x0005deec
 8006ac8:	5851f42d 	.word	0x5851f42d
 8006acc:	4c957f2d 	.word	0x4c957f2d

08006ad0 <siprintf>:
 8006ad0:	b40e      	push	{r1, r2, r3}
 8006ad2:	b500      	push	{lr}
 8006ad4:	b09c      	sub	sp, #112	; 0x70
 8006ad6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ad8:	9002      	str	r0, [sp, #8]
 8006ada:	9006      	str	r0, [sp, #24]
 8006adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ae0:	4809      	ldr	r0, [pc, #36]	; (8006b08 <siprintf+0x38>)
 8006ae2:	9107      	str	r1, [sp, #28]
 8006ae4:	9104      	str	r1, [sp, #16]
 8006ae6:	4909      	ldr	r1, [pc, #36]	; (8006b0c <siprintf+0x3c>)
 8006ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aec:	9105      	str	r1, [sp, #20]
 8006aee:	6800      	ldr	r0, [r0, #0]
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	a902      	add	r1, sp, #8
 8006af4:	f000 f94a 	bl	8006d8c <_svfiprintf_r>
 8006af8:	9b02      	ldr	r3, [sp, #8]
 8006afa:	2200      	movs	r2, #0
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	b01c      	add	sp, #112	; 0x70
 8006b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b04:	b003      	add	sp, #12
 8006b06:	4770      	bx	lr
 8006b08:	2000001c 	.word	0x2000001c
 8006b0c:	ffff0208 	.word	0xffff0208

08006b10 <__assert_func>:
 8006b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b12:	4614      	mov	r4, r2
 8006b14:	461a      	mov	r2, r3
 8006b16:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <__assert_func+0x2c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	68d8      	ldr	r0, [r3, #12]
 8006b1e:	b14c      	cbz	r4, 8006b34 <__assert_func+0x24>
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <__assert_func+0x30>)
 8006b22:	9100      	str	r1, [sp, #0]
 8006b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b28:	4906      	ldr	r1, [pc, #24]	; (8006b44 <__assert_func+0x34>)
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	f000 f80e 	bl	8006b4c <fiprintf>
 8006b30:	f000 fdea 	bl	8007708 <abort>
 8006b34:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <__assert_func+0x38>)
 8006b36:	461c      	mov	r4, r3
 8006b38:	e7f3      	b.n	8006b22 <__assert_func+0x12>
 8006b3a:	bf00      	nop
 8006b3c:	2000001c 	.word	0x2000001c
 8006b40:	08007fa6 	.word	0x08007fa6
 8006b44:	08007fb3 	.word	0x08007fb3
 8006b48:	08007fe1 	.word	0x08007fe1

08006b4c <fiprintf>:
 8006b4c:	b40e      	push	{r1, r2, r3}
 8006b4e:	b503      	push	{r0, r1, lr}
 8006b50:	4601      	mov	r1, r0
 8006b52:	ab03      	add	r3, sp, #12
 8006b54:	4805      	ldr	r0, [pc, #20]	; (8006b6c <fiprintf+0x20>)
 8006b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b5a:	6800      	ldr	r0, [r0, #0]
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	f000 fa3f 	bl	8006fe0 <_vfiprintf_r>
 8006b62:	b002      	add	sp, #8
 8006b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b68:	b003      	add	sp, #12
 8006b6a:	4770      	bx	lr
 8006b6c:	2000001c 	.word	0x2000001c

08006b70 <malloc>:
 8006b70:	4b02      	ldr	r3, [pc, #8]	; (8006b7c <malloc+0xc>)
 8006b72:	4601      	mov	r1, r0
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	f000 b853 	b.w	8006c20 <_malloc_r>
 8006b7a:	bf00      	nop
 8006b7c:	2000001c 	.word	0x2000001c

08006b80 <_free_r>:
 8006b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b82:	2900      	cmp	r1, #0
 8006b84:	d048      	beq.n	8006c18 <_free_r+0x98>
 8006b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8a:	9001      	str	r0, [sp, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b92:	bfb8      	it	lt
 8006b94:	18e4      	addlt	r4, r4, r3
 8006b96:	f000 fff7 	bl	8007b88 <__malloc_lock>
 8006b9a:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <_free_r+0x9c>)
 8006b9c:	9801      	ldr	r0, [sp, #4]
 8006b9e:	6813      	ldr	r3, [r2, #0]
 8006ba0:	4615      	mov	r5, r2
 8006ba2:	b933      	cbnz	r3, 8006bb2 <_free_r+0x32>
 8006ba4:	6063      	str	r3, [r4, #4]
 8006ba6:	6014      	str	r4, [r2, #0]
 8006ba8:	b003      	add	sp, #12
 8006baa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bae:	f000 bff1 	b.w	8007b94 <__malloc_unlock>
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	d90b      	bls.n	8006bce <_free_r+0x4e>
 8006bb6:	6821      	ldr	r1, [r4, #0]
 8006bb8:	1862      	adds	r2, r4, r1
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	bf04      	itt	eq
 8006bbe:	681a      	ldreq	r2, [r3, #0]
 8006bc0:	685b      	ldreq	r3, [r3, #4]
 8006bc2:	6063      	str	r3, [r4, #4]
 8006bc4:	bf04      	itt	eq
 8006bc6:	1852      	addeq	r2, r2, r1
 8006bc8:	6022      	streq	r2, [r4, #0]
 8006bca:	602c      	str	r4, [r5, #0]
 8006bcc:	e7ec      	b.n	8006ba8 <_free_r+0x28>
 8006bce:	461a      	mov	r2, r3
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	b10b      	cbz	r3, 8006bd8 <_free_r+0x58>
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d9fa      	bls.n	8006bce <_free_r+0x4e>
 8006bd8:	6811      	ldr	r1, [r2, #0]
 8006bda:	1855      	adds	r5, r2, r1
 8006bdc:	42a5      	cmp	r5, r4
 8006bde:	d10b      	bne.n	8006bf8 <_free_r+0x78>
 8006be0:	6824      	ldr	r4, [r4, #0]
 8006be2:	4421      	add	r1, r4
 8006be4:	1854      	adds	r4, r2, r1
 8006be6:	42a3      	cmp	r3, r4
 8006be8:	6011      	str	r1, [r2, #0]
 8006bea:	d1dd      	bne.n	8006ba8 <_free_r+0x28>
 8006bec:	681c      	ldr	r4, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	6053      	str	r3, [r2, #4]
 8006bf2:	4421      	add	r1, r4
 8006bf4:	6011      	str	r1, [r2, #0]
 8006bf6:	e7d7      	b.n	8006ba8 <_free_r+0x28>
 8006bf8:	d902      	bls.n	8006c00 <_free_r+0x80>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	6003      	str	r3, [r0, #0]
 8006bfe:	e7d3      	b.n	8006ba8 <_free_r+0x28>
 8006c00:	6825      	ldr	r5, [r4, #0]
 8006c02:	1961      	adds	r1, r4, r5
 8006c04:	428b      	cmp	r3, r1
 8006c06:	bf04      	itt	eq
 8006c08:	6819      	ldreq	r1, [r3, #0]
 8006c0a:	685b      	ldreq	r3, [r3, #4]
 8006c0c:	6063      	str	r3, [r4, #4]
 8006c0e:	bf04      	itt	eq
 8006c10:	1949      	addeq	r1, r1, r5
 8006c12:	6021      	streq	r1, [r4, #0]
 8006c14:	6054      	str	r4, [r2, #4]
 8006c16:	e7c7      	b.n	8006ba8 <_free_r+0x28>
 8006c18:	b003      	add	sp, #12
 8006c1a:	bd30      	pop	{r4, r5, pc}
 8006c1c:	200143e0 	.word	0x200143e0

08006c20 <_malloc_r>:
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	1ccd      	adds	r5, r1, #3
 8006c24:	f025 0503 	bic.w	r5, r5, #3
 8006c28:	3508      	adds	r5, #8
 8006c2a:	2d0c      	cmp	r5, #12
 8006c2c:	bf38      	it	cc
 8006c2e:	250c      	movcc	r5, #12
 8006c30:	2d00      	cmp	r5, #0
 8006c32:	4606      	mov	r6, r0
 8006c34:	db01      	blt.n	8006c3a <_malloc_r+0x1a>
 8006c36:	42a9      	cmp	r1, r5
 8006c38:	d903      	bls.n	8006c42 <_malloc_r+0x22>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	6033      	str	r3, [r6, #0]
 8006c3e:	2000      	movs	r0, #0
 8006c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c42:	f000 ffa1 	bl	8007b88 <__malloc_lock>
 8006c46:	4921      	ldr	r1, [pc, #132]	; (8006ccc <_malloc_r+0xac>)
 8006c48:	680a      	ldr	r2, [r1, #0]
 8006c4a:	4614      	mov	r4, r2
 8006c4c:	b99c      	cbnz	r4, 8006c76 <_malloc_r+0x56>
 8006c4e:	4f20      	ldr	r7, [pc, #128]	; (8006cd0 <_malloc_r+0xb0>)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	b923      	cbnz	r3, 8006c5e <_malloc_r+0x3e>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4630      	mov	r0, r6
 8006c58:	f000 fc86 	bl	8007568 <_sbrk_r>
 8006c5c:	6038      	str	r0, [r7, #0]
 8006c5e:	4629      	mov	r1, r5
 8006c60:	4630      	mov	r0, r6
 8006c62:	f000 fc81 	bl	8007568 <_sbrk_r>
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	d123      	bne.n	8006cb2 <_malloc_r+0x92>
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	6033      	str	r3, [r6, #0]
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f000 ff90 	bl	8007b94 <__malloc_unlock>
 8006c74:	e7e3      	b.n	8006c3e <_malloc_r+0x1e>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	1b5b      	subs	r3, r3, r5
 8006c7a:	d417      	bmi.n	8006cac <_malloc_r+0x8c>
 8006c7c:	2b0b      	cmp	r3, #11
 8006c7e:	d903      	bls.n	8006c88 <_malloc_r+0x68>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	441c      	add	r4, r3
 8006c84:	6025      	str	r5, [r4, #0]
 8006c86:	e004      	b.n	8006c92 <_malloc_r+0x72>
 8006c88:	6863      	ldr	r3, [r4, #4]
 8006c8a:	42a2      	cmp	r2, r4
 8006c8c:	bf0c      	ite	eq
 8006c8e:	600b      	streq	r3, [r1, #0]
 8006c90:	6053      	strne	r3, [r2, #4]
 8006c92:	4630      	mov	r0, r6
 8006c94:	f000 ff7e 	bl	8007b94 <__malloc_unlock>
 8006c98:	f104 000b 	add.w	r0, r4, #11
 8006c9c:	1d23      	adds	r3, r4, #4
 8006c9e:	f020 0007 	bic.w	r0, r0, #7
 8006ca2:	1ac2      	subs	r2, r0, r3
 8006ca4:	d0cc      	beq.n	8006c40 <_malloc_r+0x20>
 8006ca6:	1a1b      	subs	r3, r3, r0
 8006ca8:	50a3      	str	r3, [r4, r2]
 8006caa:	e7c9      	b.n	8006c40 <_malloc_r+0x20>
 8006cac:	4622      	mov	r2, r4
 8006cae:	6864      	ldr	r4, [r4, #4]
 8006cb0:	e7cc      	b.n	8006c4c <_malloc_r+0x2c>
 8006cb2:	1cc4      	adds	r4, r0, #3
 8006cb4:	f024 0403 	bic.w	r4, r4, #3
 8006cb8:	42a0      	cmp	r0, r4
 8006cba:	d0e3      	beq.n	8006c84 <_malloc_r+0x64>
 8006cbc:	1a21      	subs	r1, r4, r0
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f000 fc52 	bl	8007568 <_sbrk_r>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d1dd      	bne.n	8006c84 <_malloc_r+0x64>
 8006cc8:	e7cf      	b.n	8006c6a <_malloc_r+0x4a>
 8006cca:	bf00      	nop
 8006ccc:	200143e0 	.word	0x200143e0
 8006cd0:	200143e4 	.word	0x200143e4

08006cd4 <__ssputs_r>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	688e      	ldr	r6, [r1, #8]
 8006cda:	429e      	cmp	r6, r3
 8006cdc:	4682      	mov	sl, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	4690      	mov	r8, r2
 8006ce2:	461f      	mov	r7, r3
 8006ce4:	d838      	bhi.n	8006d58 <__ssputs_r+0x84>
 8006ce6:	898a      	ldrh	r2, [r1, #12]
 8006ce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cec:	d032      	beq.n	8006d54 <__ssputs_r+0x80>
 8006cee:	6825      	ldr	r5, [r4, #0]
 8006cf0:	6909      	ldr	r1, [r1, #16]
 8006cf2:	eba5 0901 	sub.w	r9, r5, r1
 8006cf6:	6965      	ldr	r5, [r4, #20]
 8006cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d00:	3301      	adds	r3, #1
 8006d02:	444b      	add	r3, r9
 8006d04:	106d      	asrs	r5, r5, #1
 8006d06:	429d      	cmp	r5, r3
 8006d08:	bf38      	it	cc
 8006d0a:	461d      	movcc	r5, r3
 8006d0c:	0553      	lsls	r3, r2, #21
 8006d0e:	d531      	bpl.n	8006d74 <__ssputs_r+0xa0>
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7ff ff85 	bl	8006c20 <_malloc_r>
 8006d16:	4606      	mov	r6, r0
 8006d18:	b950      	cbnz	r0, 8006d30 <__ssputs_r+0x5c>
 8006d1a:	230c      	movs	r3, #12
 8006d1c:	f8ca 3000 	str.w	r3, [sl]
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d30:	6921      	ldr	r1, [r4, #16]
 8006d32:	464a      	mov	r2, r9
 8006d34:	f7ff fe76 	bl	8006a24 <memcpy>
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	81a3      	strh	r3, [r4, #12]
 8006d44:	6126      	str	r6, [r4, #16]
 8006d46:	6165      	str	r5, [r4, #20]
 8006d48:	444e      	add	r6, r9
 8006d4a:	eba5 0509 	sub.w	r5, r5, r9
 8006d4e:	6026      	str	r6, [r4, #0]
 8006d50:	60a5      	str	r5, [r4, #8]
 8006d52:	463e      	mov	r6, r7
 8006d54:	42be      	cmp	r6, r7
 8006d56:	d900      	bls.n	8006d5a <__ssputs_r+0x86>
 8006d58:	463e      	mov	r6, r7
 8006d5a:	4632      	mov	r2, r6
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	4641      	mov	r1, r8
 8006d60:	f000 fef8 	bl	8007b54 <memmove>
 8006d64:	68a3      	ldr	r3, [r4, #8]
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	1b9b      	subs	r3, r3, r6
 8006d6a:	4432      	add	r2, r6
 8006d6c:	60a3      	str	r3, [r4, #8]
 8006d6e:	6022      	str	r2, [r4, #0]
 8006d70:	2000      	movs	r0, #0
 8006d72:	e7db      	b.n	8006d2c <__ssputs_r+0x58>
 8006d74:	462a      	mov	r2, r5
 8006d76:	f000 ff13 	bl	8007ba0 <_realloc_r>
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d1e1      	bne.n	8006d44 <__ssputs_r+0x70>
 8006d80:	6921      	ldr	r1, [r4, #16]
 8006d82:	4650      	mov	r0, sl
 8006d84:	f7ff fefc 	bl	8006b80 <_free_r>
 8006d88:	e7c7      	b.n	8006d1a <__ssputs_r+0x46>
	...

08006d8c <_svfiprintf_r>:
 8006d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d90:	4698      	mov	r8, r3
 8006d92:	898b      	ldrh	r3, [r1, #12]
 8006d94:	061b      	lsls	r3, r3, #24
 8006d96:	b09d      	sub	sp, #116	; 0x74
 8006d98:	4607      	mov	r7, r0
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	d50e      	bpl.n	8006dbe <_svfiprintf_r+0x32>
 8006da0:	690b      	ldr	r3, [r1, #16]
 8006da2:	b963      	cbnz	r3, 8006dbe <_svfiprintf_r+0x32>
 8006da4:	2140      	movs	r1, #64	; 0x40
 8006da6:	f7ff ff3b 	bl	8006c20 <_malloc_r>
 8006daa:	6028      	str	r0, [r5, #0]
 8006dac:	6128      	str	r0, [r5, #16]
 8006dae:	b920      	cbnz	r0, 8006dba <_svfiprintf_r+0x2e>
 8006db0:	230c      	movs	r3, #12
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	e0d1      	b.n	8006f5e <_svfiprintf_r+0x1d2>
 8006dba:	2340      	movs	r3, #64	; 0x40
 8006dbc:	616b      	str	r3, [r5, #20]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc2:	2320      	movs	r3, #32
 8006dc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dcc:	2330      	movs	r3, #48	; 0x30
 8006dce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f78 <_svfiprintf_r+0x1ec>
 8006dd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dd6:	f04f 0901 	mov.w	r9, #1
 8006dda:	4623      	mov	r3, r4
 8006ddc:	469a      	mov	sl, r3
 8006dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006de2:	b10a      	cbz	r2, 8006de8 <_svfiprintf_r+0x5c>
 8006de4:	2a25      	cmp	r2, #37	; 0x25
 8006de6:	d1f9      	bne.n	8006ddc <_svfiprintf_r+0x50>
 8006de8:	ebba 0b04 	subs.w	fp, sl, r4
 8006dec:	d00b      	beq.n	8006e06 <_svfiprintf_r+0x7a>
 8006dee:	465b      	mov	r3, fp
 8006df0:	4622      	mov	r2, r4
 8006df2:	4629      	mov	r1, r5
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff ff6d 	bl	8006cd4 <__ssputs_r>
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f000 80aa 	beq.w	8006f54 <_svfiprintf_r+0x1c8>
 8006e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e02:	445a      	add	r2, fp
 8006e04:	9209      	str	r2, [sp, #36]	; 0x24
 8006e06:	f89a 3000 	ldrb.w	r3, [sl]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 80a2 	beq.w	8006f54 <_svfiprintf_r+0x1c8>
 8006e10:	2300      	movs	r3, #0
 8006e12:	f04f 32ff 	mov.w	r2, #4294967295
 8006e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e1a:	f10a 0a01 	add.w	sl, sl, #1
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	9307      	str	r3, [sp, #28]
 8006e22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e26:	931a      	str	r3, [sp, #104]	; 0x68
 8006e28:	4654      	mov	r4, sl
 8006e2a:	2205      	movs	r2, #5
 8006e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e30:	4851      	ldr	r0, [pc, #324]	; (8006f78 <_svfiprintf_r+0x1ec>)
 8006e32:	f7f9 fa45 	bl	80002c0 <memchr>
 8006e36:	9a04      	ldr	r2, [sp, #16]
 8006e38:	b9d8      	cbnz	r0, 8006e72 <_svfiprintf_r+0xe6>
 8006e3a:	06d0      	lsls	r0, r2, #27
 8006e3c:	bf44      	itt	mi
 8006e3e:	2320      	movmi	r3, #32
 8006e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e44:	0711      	lsls	r1, r2, #28
 8006e46:	bf44      	itt	mi
 8006e48:	232b      	movmi	r3, #43	; 0x2b
 8006e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e52:	2b2a      	cmp	r3, #42	; 0x2a
 8006e54:	d015      	beq.n	8006e82 <_svfiprintf_r+0xf6>
 8006e56:	9a07      	ldr	r2, [sp, #28]
 8006e58:	4654      	mov	r4, sl
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f04f 0c0a 	mov.w	ip, #10
 8006e60:	4621      	mov	r1, r4
 8006e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e66:	3b30      	subs	r3, #48	; 0x30
 8006e68:	2b09      	cmp	r3, #9
 8006e6a:	d94e      	bls.n	8006f0a <_svfiprintf_r+0x17e>
 8006e6c:	b1b0      	cbz	r0, 8006e9c <_svfiprintf_r+0x110>
 8006e6e:	9207      	str	r2, [sp, #28]
 8006e70:	e014      	b.n	8006e9c <_svfiprintf_r+0x110>
 8006e72:	eba0 0308 	sub.w	r3, r0, r8
 8006e76:	fa09 f303 	lsl.w	r3, r9, r3
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	46a2      	mov	sl, r4
 8006e80:	e7d2      	b.n	8006e28 <_svfiprintf_r+0x9c>
 8006e82:	9b03      	ldr	r3, [sp, #12]
 8006e84:	1d19      	adds	r1, r3, #4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	9103      	str	r1, [sp, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bfbb      	ittet	lt
 8006e8e:	425b      	neglt	r3, r3
 8006e90:	f042 0202 	orrlt.w	r2, r2, #2
 8006e94:	9307      	strge	r3, [sp, #28]
 8006e96:	9307      	strlt	r3, [sp, #28]
 8006e98:	bfb8      	it	lt
 8006e9a:	9204      	strlt	r2, [sp, #16]
 8006e9c:	7823      	ldrb	r3, [r4, #0]
 8006e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8006ea0:	d10c      	bne.n	8006ebc <_svfiprintf_r+0x130>
 8006ea2:	7863      	ldrb	r3, [r4, #1]
 8006ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea6:	d135      	bne.n	8006f14 <_svfiprintf_r+0x188>
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	1d1a      	adds	r2, r3, #4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	9203      	str	r2, [sp, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bfb8      	it	lt
 8006eb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eb8:	3402      	adds	r4, #2
 8006eba:	9305      	str	r3, [sp, #20]
 8006ebc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f88 <_svfiprintf_r+0x1fc>
 8006ec0:	7821      	ldrb	r1, [r4, #0]
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	f7f9 f9fb 	bl	80002c0 <memchr>
 8006eca:	b140      	cbz	r0, 8006ede <_svfiprintf_r+0x152>
 8006ecc:	2340      	movs	r3, #64	; 0x40
 8006ece:	eba0 000a 	sub.w	r0, r0, sl
 8006ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ed6:	9b04      	ldr	r3, [sp, #16]
 8006ed8:	4303      	orrs	r3, r0
 8006eda:	3401      	adds	r4, #1
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee2:	4826      	ldr	r0, [pc, #152]	; (8006f7c <_svfiprintf_r+0x1f0>)
 8006ee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ee8:	2206      	movs	r2, #6
 8006eea:	f7f9 f9e9 	bl	80002c0 <memchr>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d038      	beq.n	8006f64 <_svfiprintf_r+0x1d8>
 8006ef2:	4b23      	ldr	r3, [pc, #140]	; (8006f80 <_svfiprintf_r+0x1f4>)
 8006ef4:	bb1b      	cbnz	r3, 8006f3e <_svfiprintf_r+0x1b2>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	3307      	adds	r3, #7
 8006efa:	f023 0307 	bic.w	r3, r3, #7
 8006efe:	3308      	adds	r3, #8
 8006f00:	9303      	str	r3, [sp, #12]
 8006f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f04:	4433      	add	r3, r6
 8006f06:	9309      	str	r3, [sp, #36]	; 0x24
 8006f08:	e767      	b.n	8006dda <_svfiprintf_r+0x4e>
 8006f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f0e:	460c      	mov	r4, r1
 8006f10:	2001      	movs	r0, #1
 8006f12:	e7a5      	b.n	8006e60 <_svfiprintf_r+0xd4>
 8006f14:	2300      	movs	r3, #0
 8006f16:	3401      	adds	r4, #1
 8006f18:	9305      	str	r3, [sp, #20]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	f04f 0c0a 	mov.w	ip, #10
 8006f20:	4620      	mov	r0, r4
 8006f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f26:	3a30      	subs	r2, #48	; 0x30
 8006f28:	2a09      	cmp	r2, #9
 8006f2a:	d903      	bls.n	8006f34 <_svfiprintf_r+0x1a8>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0c5      	beq.n	8006ebc <_svfiprintf_r+0x130>
 8006f30:	9105      	str	r1, [sp, #20]
 8006f32:	e7c3      	b.n	8006ebc <_svfiprintf_r+0x130>
 8006f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f38:	4604      	mov	r4, r0
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e7f0      	b.n	8006f20 <_svfiprintf_r+0x194>
 8006f3e:	ab03      	add	r3, sp, #12
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	462a      	mov	r2, r5
 8006f44:	4b0f      	ldr	r3, [pc, #60]	; (8006f84 <_svfiprintf_r+0x1f8>)
 8006f46:	a904      	add	r1, sp, #16
 8006f48:	4638      	mov	r0, r7
 8006f4a:	f3af 8000 	nop.w
 8006f4e:	1c42      	adds	r2, r0, #1
 8006f50:	4606      	mov	r6, r0
 8006f52:	d1d6      	bne.n	8006f02 <_svfiprintf_r+0x176>
 8006f54:	89ab      	ldrh	r3, [r5, #12]
 8006f56:	065b      	lsls	r3, r3, #25
 8006f58:	f53f af2c 	bmi.w	8006db4 <_svfiprintf_r+0x28>
 8006f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f5e:	b01d      	add	sp, #116	; 0x74
 8006f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f64:	ab03      	add	r3, sp, #12
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <_svfiprintf_r+0x1f8>)
 8006f6c:	a904      	add	r1, sp, #16
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f000 f9d4 	bl	800731c <_printf_i>
 8006f74:	e7eb      	b.n	8006f4e <_svfiprintf_r+0x1c2>
 8006f76:	bf00      	nop
 8006f78:	08007fe2 	.word	0x08007fe2
 8006f7c:	08007fec 	.word	0x08007fec
 8006f80:	00000000 	.word	0x00000000
 8006f84:	08006cd5 	.word	0x08006cd5
 8006f88:	08007fe8 	.word	0x08007fe8

08006f8c <__sfputc_r>:
 8006f8c:	6893      	ldr	r3, [r2, #8]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	b410      	push	{r4}
 8006f94:	6093      	str	r3, [r2, #8]
 8006f96:	da08      	bge.n	8006faa <__sfputc_r+0x1e>
 8006f98:	6994      	ldr	r4, [r2, #24]
 8006f9a:	42a3      	cmp	r3, r4
 8006f9c:	db01      	blt.n	8006fa2 <__sfputc_r+0x16>
 8006f9e:	290a      	cmp	r1, #10
 8006fa0:	d103      	bne.n	8006faa <__sfputc_r+0x1e>
 8006fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fa6:	f000 baef 	b.w	8007588 <__swbuf_r>
 8006faa:	6813      	ldr	r3, [r2, #0]
 8006fac:	1c58      	adds	r0, r3, #1
 8006fae:	6010      	str	r0, [r2, #0]
 8006fb0:	7019      	strb	r1, [r3, #0]
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <__sfputs_r>:
 8006fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	460f      	mov	r7, r1
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	18d5      	adds	r5, r2, r3
 8006fc4:	42ac      	cmp	r4, r5
 8006fc6:	d101      	bne.n	8006fcc <__sfputs_r+0x12>
 8006fc8:	2000      	movs	r0, #0
 8006fca:	e007      	b.n	8006fdc <__sfputs_r+0x22>
 8006fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd0:	463a      	mov	r2, r7
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7ff ffda 	bl	8006f8c <__sfputc_r>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d1f3      	bne.n	8006fc4 <__sfputs_r+0xa>
 8006fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fe0 <_vfiprintf_r>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	460d      	mov	r5, r1
 8006fe6:	b09d      	sub	sp, #116	; 0x74
 8006fe8:	4614      	mov	r4, r2
 8006fea:	4698      	mov	r8, r3
 8006fec:	4606      	mov	r6, r0
 8006fee:	b118      	cbz	r0, 8006ff8 <_vfiprintf_r+0x18>
 8006ff0:	6983      	ldr	r3, [r0, #24]
 8006ff2:	b90b      	cbnz	r3, 8006ff8 <_vfiprintf_r+0x18>
 8006ff4:	f000 fcaa 	bl	800794c <__sinit>
 8006ff8:	4b89      	ldr	r3, [pc, #548]	; (8007220 <_vfiprintf_r+0x240>)
 8006ffa:	429d      	cmp	r5, r3
 8006ffc:	d11b      	bne.n	8007036 <_vfiprintf_r+0x56>
 8006ffe:	6875      	ldr	r5, [r6, #4]
 8007000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007002:	07d9      	lsls	r1, r3, #31
 8007004:	d405      	bmi.n	8007012 <_vfiprintf_r+0x32>
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	059a      	lsls	r2, r3, #22
 800700a:	d402      	bmi.n	8007012 <_vfiprintf_r+0x32>
 800700c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800700e:	f000 fd3b 	bl	8007a88 <__retarget_lock_acquire_recursive>
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	071b      	lsls	r3, r3, #28
 8007016:	d501      	bpl.n	800701c <_vfiprintf_r+0x3c>
 8007018:	692b      	ldr	r3, [r5, #16]
 800701a:	b9eb      	cbnz	r3, 8007058 <_vfiprintf_r+0x78>
 800701c:	4629      	mov	r1, r5
 800701e:	4630      	mov	r0, r6
 8007020:	f000 fb04 	bl	800762c <__swsetup_r>
 8007024:	b1c0      	cbz	r0, 8007058 <_vfiprintf_r+0x78>
 8007026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007028:	07dc      	lsls	r4, r3, #31
 800702a:	d50e      	bpl.n	800704a <_vfiprintf_r+0x6a>
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	b01d      	add	sp, #116	; 0x74
 8007032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007036:	4b7b      	ldr	r3, [pc, #492]	; (8007224 <_vfiprintf_r+0x244>)
 8007038:	429d      	cmp	r5, r3
 800703a:	d101      	bne.n	8007040 <_vfiprintf_r+0x60>
 800703c:	68b5      	ldr	r5, [r6, #8]
 800703e:	e7df      	b.n	8007000 <_vfiprintf_r+0x20>
 8007040:	4b79      	ldr	r3, [pc, #484]	; (8007228 <_vfiprintf_r+0x248>)
 8007042:	429d      	cmp	r5, r3
 8007044:	bf08      	it	eq
 8007046:	68f5      	ldreq	r5, [r6, #12]
 8007048:	e7da      	b.n	8007000 <_vfiprintf_r+0x20>
 800704a:	89ab      	ldrh	r3, [r5, #12]
 800704c:	0598      	lsls	r0, r3, #22
 800704e:	d4ed      	bmi.n	800702c <_vfiprintf_r+0x4c>
 8007050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007052:	f000 fd1a 	bl	8007a8a <__retarget_lock_release_recursive>
 8007056:	e7e9      	b.n	800702c <_vfiprintf_r+0x4c>
 8007058:	2300      	movs	r3, #0
 800705a:	9309      	str	r3, [sp, #36]	; 0x24
 800705c:	2320      	movs	r3, #32
 800705e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007062:	f8cd 800c 	str.w	r8, [sp, #12]
 8007066:	2330      	movs	r3, #48	; 0x30
 8007068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800722c <_vfiprintf_r+0x24c>
 800706c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007070:	f04f 0901 	mov.w	r9, #1
 8007074:	4623      	mov	r3, r4
 8007076:	469a      	mov	sl, r3
 8007078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800707c:	b10a      	cbz	r2, 8007082 <_vfiprintf_r+0xa2>
 800707e:	2a25      	cmp	r2, #37	; 0x25
 8007080:	d1f9      	bne.n	8007076 <_vfiprintf_r+0x96>
 8007082:	ebba 0b04 	subs.w	fp, sl, r4
 8007086:	d00b      	beq.n	80070a0 <_vfiprintf_r+0xc0>
 8007088:	465b      	mov	r3, fp
 800708a:	4622      	mov	r2, r4
 800708c:	4629      	mov	r1, r5
 800708e:	4630      	mov	r0, r6
 8007090:	f7ff ff93 	bl	8006fba <__sfputs_r>
 8007094:	3001      	adds	r0, #1
 8007096:	f000 80aa 	beq.w	80071ee <_vfiprintf_r+0x20e>
 800709a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800709c:	445a      	add	r2, fp
 800709e:	9209      	str	r2, [sp, #36]	; 0x24
 80070a0:	f89a 3000 	ldrb.w	r3, [sl]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80a2 	beq.w	80071ee <_vfiprintf_r+0x20e>
 80070aa:	2300      	movs	r3, #0
 80070ac:	f04f 32ff 	mov.w	r2, #4294967295
 80070b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070b4:	f10a 0a01 	add.w	sl, sl, #1
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	9307      	str	r3, [sp, #28]
 80070bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070c0:	931a      	str	r3, [sp, #104]	; 0x68
 80070c2:	4654      	mov	r4, sl
 80070c4:	2205      	movs	r2, #5
 80070c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ca:	4858      	ldr	r0, [pc, #352]	; (800722c <_vfiprintf_r+0x24c>)
 80070cc:	f7f9 f8f8 	bl	80002c0 <memchr>
 80070d0:	9a04      	ldr	r2, [sp, #16]
 80070d2:	b9d8      	cbnz	r0, 800710c <_vfiprintf_r+0x12c>
 80070d4:	06d1      	lsls	r1, r2, #27
 80070d6:	bf44      	itt	mi
 80070d8:	2320      	movmi	r3, #32
 80070da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070de:	0713      	lsls	r3, r2, #28
 80070e0:	bf44      	itt	mi
 80070e2:	232b      	movmi	r3, #43	; 0x2b
 80070e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e8:	f89a 3000 	ldrb.w	r3, [sl]
 80070ec:	2b2a      	cmp	r3, #42	; 0x2a
 80070ee:	d015      	beq.n	800711c <_vfiprintf_r+0x13c>
 80070f0:	9a07      	ldr	r2, [sp, #28]
 80070f2:	4654      	mov	r4, sl
 80070f4:	2000      	movs	r0, #0
 80070f6:	f04f 0c0a 	mov.w	ip, #10
 80070fa:	4621      	mov	r1, r4
 80070fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007100:	3b30      	subs	r3, #48	; 0x30
 8007102:	2b09      	cmp	r3, #9
 8007104:	d94e      	bls.n	80071a4 <_vfiprintf_r+0x1c4>
 8007106:	b1b0      	cbz	r0, 8007136 <_vfiprintf_r+0x156>
 8007108:	9207      	str	r2, [sp, #28]
 800710a:	e014      	b.n	8007136 <_vfiprintf_r+0x156>
 800710c:	eba0 0308 	sub.w	r3, r0, r8
 8007110:	fa09 f303 	lsl.w	r3, r9, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	9304      	str	r3, [sp, #16]
 8007118:	46a2      	mov	sl, r4
 800711a:	e7d2      	b.n	80070c2 <_vfiprintf_r+0xe2>
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	1d19      	adds	r1, r3, #4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	9103      	str	r1, [sp, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfbb      	ittet	lt
 8007128:	425b      	neglt	r3, r3
 800712a:	f042 0202 	orrlt.w	r2, r2, #2
 800712e:	9307      	strge	r3, [sp, #28]
 8007130:	9307      	strlt	r3, [sp, #28]
 8007132:	bfb8      	it	lt
 8007134:	9204      	strlt	r2, [sp, #16]
 8007136:	7823      	ldrb	r3, [r4, #0]
 8007138:	2b2e      	cmp	r3, #46	; 0x2e
 800713a:	d10c      	bne.n	8007156 <_vfiprintf_r+0x176>
 800713c:	7863      	ldrb	r3, [r4, #1]
 800713e:	2b2a      	cmp	r3, #42	; 0x2a
 8007140:	d135      	bne.n	80071ae <_vfiprintf_r+0x1ce>
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	1d1a      	adds	r2, r3, #4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	9203      	str	r2, [sp, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	bfb8      	it	lt
 800714e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007152:	3402      	adds	r4, #2
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800723c <_vfiprintf_r+0x25c>
 800715a:	7821      	ldrb	r1, [r4, #0]
 800715c:	2203      	movs	r2, #3
 800715e:	4650      	mov	r0, sl
 8007160:	f7f9 f8ae 	bl	80002c0 <memchr>
 8007164:	b140      	cbz	r0, 8007178 <_vfiprintf_r+0x198>
 8007166:	2340      	movs	r3, #64	; 0x40
 8007168:	eba0 000a 	sub.w	r0, r0, sl
 800716c:	fa03 f000 	lsl.w	r0, r3, r0
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	4303      	orrs	r3, r0
 8007174:	3401      	adds	r4, #1
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	482c      	ldr	r0, [pc, #176]	; (8007230 <_vfiprintf_r+0x250>)
 800717e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007182:	2206      	movs	r2, #6
 8007184:	f7f9 f89c 	bl	80002c0 <memchr>
 8007188:	2800      	cmp	r0, #0
 800718a:	d03f      	beq.n	800720c <_vfiprintf_r+0x22c>
 800718c:	4b29      	ldr	r3, [pc, #164]	; (8007234 <_vfiprintf_r+0x254>)
 800718e:	bb1b      	cbnz	r3, 80071d8 <_vfiprintf_r+0x1f8>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	3307      	adds	r3, #7
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	3308      	adds	r3, #8
 800719a:	9303      	str	r3, [sp, #12]
 800719c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719e:	443b      	add	r3, r7
 80071a0:	9309      	str	r3, [sp, #36]	; 0x24
 80071a2:	e767      	b.n	8007074 <_vfiprintf_r+0x94>
 80071a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a8:	460c      	mov	r4, r1
 80071aa:	2001      	movs	r0, #1
 80071ac:	e7a5      	b.n	80070fa <_vfiprintf_r+0x11a>
 80071ae:	2300      	movs	r3, #0
 80071b0:	3401      	adds	r4, #1
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f04f 0c0a 	mov.w	ip, #10
 80071ba:	4620      	mov	r0, r4
 80071bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c0:	3a30      	subs	r2, #48	; 0x30
 80071c2:	2a09      	cmp	r2, #9
 80071c4:	d903      	bls.n	80071ce <_vfiprintf_r+0x1ee>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0c5      	beq.n	8007156 <_vfiprintf_r+0x176>
 80071ca:	9105      	str	r1, [sp, #20]
 80071cc:	e7c3      	b.n	8007156 <_vfiprintf_r+0x176>
 80071ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d2:	4604      	mov	r4, r0
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7f0      	b.n	80071ba <_vfiprintf_r+0x1da>
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	462a      	mov	r2, r5
 80071de:	4b16      	ldr	r3, [pc, #88]	; (8007238 <_vfiprintf_r+0x258>)
 80071e0:	a904      	add	r1, sp, #16
 80071e2:	4630      	mov	r0, r6
 80071e4:	f3af 8000 	nop.w
 80071e8:	4607      	mov	r7, r0
 80071ea:	1c78      	adds	r0, r7, #1
 80071ec:	d1d6      	bne.n	800719c <_vfiprintf_r+0x1bc>
 80071ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071f0:	07d9      	lsls	r1, r3, #31
 80071f2:	d405      	bmi.n	8007200 <_vfiprintf_r+0x220>
 80071f4:	89ab      	ldrh	r3, [r5, #12]
 80071f6:	059a      	lsls	r2, r3, #22
 80071f8:	d402      	bmi.n	8007200 <_vfiprintf_r+0x220>
 80071fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071fc:	f000 fc45 	bl	8007a8a <__retarget_lock_release_recursive>
 8007200:	89ab      	ldrh	r3, [r5, #12]
 8007202:	065b      	lsls	r3, r3, #25
 8007204:	f53f af12 	bmi.w	800702c <_vfiprintf_r+0x4c>
 8007208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720a:	e711      	b.n	8007030 <_vfiprintf_r+0x50>
 800720c:	ab03      	add	r3, sp, #12
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	462a      	mov	r2, r5
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <_vfiprintf_r+0x258>)
 8007214:	a904      	add	r1, sp, #16
 8007216:	4630      	mov	r0, r6
 8007218:	f000 f880 	bl	800731c <_printf_i>
 800721c:	e7e4      	b.n	80071e8 <_vfiprintf_r+0x208>
 800721e:	bf00      	nop
 8007220:	08008038 	.word	0x08008038
 8007224:	08008058 	.word	0x08008058
 8007228:	08008018 	.word	0x08008018
 800722c:	08007fe2 	.word	0x08007fe2
 8007230:	08007fec 	.word	0x08007fec
 8007234:	00000000 	.word	0x00000000
 8007238:	08006fbb 	.word	0x08006fbb
 800723c:	08007fe8 	.word	0x08007fe8

08007240 <_printf_common>:
 8007240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007244:	4616      	mov	r6, r2
 8007246:	4699      	mov	r9, r3
 8007248:	688a      	ldr	r2, [r1, #8]
 800724a:	690b      	ldr	r3, [r1, #16]
 800724c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007250:	4293      	cmp	r3, r2
 8007252:	bfb8      	it	lt
 8007254:	4613      	movlt	r3, r2
 8007256:	6033      	str	r3, [r6, #0]
 8007258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800725c:	4607      	mov	r7, r0
 800725e:	460c      	mov	r4, r1
 8007260:	b10a      	cbz	r2, 8007266 <_printf_common+0x26>
 8007262:	3301      	adds	r3, #1
 8007264:	6033      	str	r3, [r6, #0]
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	0699      	lsls	r1, r3, #26
 800726a:	bf42      	ittt	mi
 800726c:	6833      	ldrmi	r3, [r6, #0]
 800726e:	3302      	addmi	r3, #2
 8007270:	6033      	strmi	r3, [r6, #0]
 8007272:	6825      	ldr	r5, [r4, #0]
 8007274:	f015 0506 	ands.w	r5, r5, #6
 8007278:	d106      	bne.n	8007288 <_printf_common+0x48>
 800727a:	f104 0a19 	add.w	sl, r4, #25
 800727e:	68e3      	ldr	r3, [r4, #12]
 8007280:	6832      	ldr	r2, [r6, #0]
 8007282:	1a9b      	subs	r3, r3, r2
 8007284:	42ab      	cmp	r3, r5
 8007286:	dc26      	bgt.n	80072d6 <_printf_common+0x96>
 8007288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800728c:	1e13      	subs	r3, r2, #0
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	bf18      	it	ne
 8007292:	2301      	movne	r3, #1
 8007294:	0692      	lsls	r2, r2, #26
 8007296:	d42b      	bmi.n	80072f0 <_printf_common+0xb0>
 8007298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800729c:	4649      	mov	r1, r9
 800729e:	4638      	mov	r0, r7
 80072a0:	47c0      	blx	r8
 80072a2:	3001      	adds	r0, #1
 80072a4:	d01e      	beq.n	80072e4 <_printf_common+0xa4>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	68e5      	ldr	r5, [r4, #12]
 80072aa:	6832      	ldr	r2, [r6, #0]
 80072ac:	f003 0306 	and.w	r3, r3, #6
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	bf08      	it	eq
 80072b4:	1aad      	subeq	r5, r5, r2
 80072b6:	68a3      	ldr	r3, [r4, #8]
 80072b8:	6922      	ldr	r2, [r4, #16]
 80072ba:	bf0c      	ite	eq
 80072bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c0:	2500      	movne	r5, #0
 80072c2:	4293      	cmp	r3, r2
 80072c4:	bfc4      	itt	gt
 80072c6:	1a9b      	subgt	r3, r3, r2
 80072c8:	18ed      	addgt	r5, r5, r3
 80072ca:	2600      	movs	r6, #0
 80072cc:	341a      	adds	r4, #26
 80072ce:	42b5      	cmp	r5, r6
 80072d0:	d11a      	bne.n	8007308 <_printf_common+0xc8>
 80072d2:	2000      	movs	r0, #0
 80072d4:	e008      	b.n	80072e8 <_printf_common+0xa8>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4652      	mov	r2, sl
 80072da:	4649      	mov	r1, r9
 80072dc:	4638      	mov	r0, r7
 80072de:	47c0      	blx	r8
 80072e0:	3001      	adds	r0, #1
 80072e2:	d103      	bne.n	80072ec <_printf_common+0xac>
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ec:	3501      	adds	r5, #1
 80072ee:	e7c6      	b.n	800727e <_printf_common+0x3e>
 80072f0:	18e1      	adds	r1, r4, r3
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	2030      	movs	r0, #48	; 0x30
 80072f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072fa:	4422      	add	r2, r4
 80072fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007304:	3302      	adds	r3, #2
 8007306:	e7c7      	b.n	8007298 <_printf_common+0x58>
 8007308:	2301      	movs	r3, #1
 800730a:	4622      	mov	r2, r4
 800730c:	4649      	mov	r1, r9
 800730e:	4638      	mov	r0, r7
 8007310:	47c0      	blx	r8
 8007312:	3001      	adds	r0, #1
 8007314:	d0e6      	beq.n	80072e4 <_printf_common+0xa4>
 8007316:	3601      	adds	r6, #1
 8007318:	e7d9      	b.n	80072ce <_printf_common+0x8e>
	...

0800731c <_printf_i>:
 800731c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	460c      	mov	r4, r1
 8007322:	4691      	mov	r9, r2
 8007324:	7e27      	ldrb	r7, [r4, #24]
 8007326:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007328:	2f78      	cmp	r7, #120	; 0x78
 800732a:	4680      	mov	r8, r0
 800732c:	469a      	mov	sl, r3
 800732e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007332:	d807      	bhi.n	8007344 <_printf_i+0x28>
 8007334:	2f62      	cmp	r7, #98	; 0x62
 8007336:	d80a      	bhi.n	800734e <_printf_i+0x32>
 8007338:	2f00      	cmp	r7, #0
 800733a:	f000 80d8 	beq.w	80074ee <_printf_i+0x1d2>
 800733e:	2f58      	cmp	r7, #88	; 0x58
 8007340:	f000 80a3 	beq.w	800748a <_printf_i+0x16e>
 8007344:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800734c:	e03a      	b.n	80073c4 <_printf_i+0xa8>
 800734e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007352:	2b15      	cmp	r3, #21
 8007354:	d8f6      	bhi.n	8007344 <_printf_i+0x28>
 8007356:	a001      	add	r0, pc, #4	; (adr r0, 800735c <_printf_i+0x40>)
 8007358:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800735c:	080073b5 	.word	0x080073b5
 8007360:	080073c9 	.word	0x080073c9
 8007364:	08007345 	.word	0x08007345
 8007368:	08007345 	.word	0x08007345
 800736c:	08007345 	.word	0x08007345
 8007370:	08007345 	.word	0x08007345
 8007374:	080073c9 	.word	0x080073c9
 8007378:	08007345 	.word	0x08007345
 800737c:	08007345 	.word	0x08007345
 8007380:	08007345 	.word	0x08007345
 8007384:	08007345 	.word	0x08007345
 8007388:	080074d5 	.word	0x080074d5
 800738c:	080073f9 	.word	0x080073f9
 8007390:	080074b7 	.word	0x080074b7
 8007394:	08007345 	.word	0x08007345
 8007398:	08007345 	.word	0x08007345
 800739c:	080074f7 	.word	0x080074f7
 80073a0:	08007345 	.word	0x08007345
 80073a4:	080073f9 	.word	0x080073f9
 80073a8:	08007345 	.word	0x08007345
 80073ac:	08007345 	.word	0x08007345
 80073b0:	080074bf 	.word	0x080074bf
 80073b4:	680b      	ldr	r3, [r1, #0]
 80073b6:	1d1a      	adds	r2, r3, #4
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	600a      	str	r2, [r1, #0]
 80073bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c4:	2301      	movs	r3, #1
 80073c6:	e0a3      	b.n	8007510 <_printf_i+0x1f4>
 80073c8:	6825      	ldr	r5, [r4, #0]
 80073ca:	6808      	ldr	r0, [r1, #0]
 80073cc:	062e      	lsls	r6, r5, #24
 80073ce:	f100 0304 	add.w	r3, r0, #4
 80073d2:	d50a      	bpl.n	80073ea <_printf_i+0xce>
 80073d4:	6805      	ldr	r5, [r0, #0]
 80073d6:	600b      	str	r3, [r1, #0]
 80073d8:	2d00      	cmp	r5, #0
 80073da:	da03      	bge.n	80073e4 <_printf_i+0xc8>
 80073dc:	232d      	movs	r3, #45	; 0x2d
 80073de:	426d      	negs	r5, r5
 80073e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e4:	485e      	ldr	r0, [pc, #376]	; (8007560 <_printf_i+0x244>)
 80073e6:	230a      	movs	r3, #10
 80073e8:	e019      	b.n	800741e <_printf_i+0x102>
 80073ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073ee:	6805      	ldr	r5, [r0, #0]
 80073f0:	600b      	str	r3, [r1, #0]
 80073f2:	bf18      	it	ne
 80073f4:	b22d      	sxthne	r5, r5
 80073f6:	e7ef      	b.n	80073d8 <_printf_i+0xbc>
 80073f8:	680b      	ldr	r3, [r1, #0]
 80073fa:	6825      	ldr	r5, [r4, #0]
 80073fc:	1d18      	adds	r0, r3, #4
 80073fe:	6008      	str	r0, [r1, #0]
 8007400:	0628      	lsls	r0, r5, #24
 8007402:	d501      	bpl.n	8007408 <_printf_i+0xec>
 8007404:	681d      	ldr	r5, [r3, #0]
 8007406:	e002      	b.n	800740e <_printf_i+0xf2>
 8007408:	0669      	lsls	r1, r5, #25
 800740a:	d5fb      	bpl.n	8007404 <_printf_i+0xe8>
 800740c:	881d      	ldrh	r5, [r3, #0]
 800740e:	4854      	ldr	r0, [pc, #336]	; (8007560 <_printf_i+0x244>)
 8007410:	2f6f      	cmp	r7, #111	; 0x6f
 8007412:	bf0c      	ite	eq
 8007414:	2308      	moveq	r3, #8
 8007416:	230a      	movne	r3, #10
 8007418:	2100      	movs	r1, #0
 800741a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800741e:	6866      	ldr	r6, [r4, #4]
 8007420:	60a6      	str	r6, [r4, #8]
 8007422:	2e00      	cmp	r6, #0
 8007424:	bfa2      	ittt	ge
 8007426:	6821      	ldrge	r1, [r4, #0]
 8007428:	f021 0104 	bicge.w	r1, r1, #4
 800742c:	6021      	strge	r1, [r4, #0]
 800742e:	b90d      	cbnz	r5, 8007434 <_printf_i+0x118>
 8007430:	2e00      	cmp	r6, #0
 8007432:	d04d      	beq.n	80074d0 <_printf_i+0x1b4>
 8007434:	4616      	mov	r6, r2
 8007436:	fbb5 f1f3 	udiv	r1, r5, r3
 800743a:	fb03 5711 	mls	r7, r3, r1, r5
 800743e:	5dc7      	ldrb	r7, [r0, r7]
 8007440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007444:	462f      	mov	r7, r5
 8007446:	42bb      	cmp	r3, r7
 8007448:	460d      	mov	r5, r1
 800744a:	d9f4      	bls.n	8007436 <_printf_i+0x11a>
 800744c:	2b08      	cmp	r3, #8
 800744e:	d10b      	bne.n	8007468 <_printf_i+0x14c>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	07df      	lsls	r7, r3, #31
 8007454:	d508      	bpl.n	8007468 <_printf_i+0x14c>
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	6861      	ldr	r1, [r4, #4]
 800745a:	4299      	cmp	r1, r3
 800745c:	bfde      	ittt	le
 800745e:	2330      	movle	r3, #48	; 0x30
 8007460:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007464:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007468:	1b92      	subs	r2, r2, r6
 800746a:	6122      	str	r2, [r4, #16]
 800746c:	f8cd a000 	str.w	sl, [sp]
 8007470:	464b      	mov	r3, r9
 8007472:	aa03      	add	r2, sp, #12
 8007474:	4621      	mov	r1, r4
 8007476:	4640      	mov	r0, r8
 8007478:	f7ff fee2 	bl	8007240 <_printf_common>
 800747c:	3001      	adds	r0, #1
 800747e:	d14c      	bne.n	800751a <_printf_i+0x1fe>
 8007480:	f04f 30ff 	mov.w	r0, #4294967295
 8007484:	b004      	add	sp, #16
 8007486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748a:	4835      	ldr	r0, [pc, #212]	; (8007560 <_printf_i+0x244>)
 800748c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	680e      	ldr	r6, [r1, #0]
 8007494:	061f      	lsls	r7, r3, #24
 8007496:	f856 5b04 	ldr.w	r5, [r6], #4
 800749a:	600e      	str	r6, [r1, #0]
 800749c:	d514      	bpl.n	80074c8 <_printf_i+0x1ac>
 800749e:	07d9      	lsls	r1, r3, #31
 80074a0:	bf44      	itt	mi
 80074a2:	f043 0320 	orrmi.w	r3, r3, #32
 80074a6:	6023      	strmi	r3, [r4, #0]
 80074a8:	b91d      	cbnz	r5, 80074b2 <_printf_i+0x196>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	f023 0320 	bic.w	r3, r3, #32
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	2310      	movs	r3, #16
 80074b4:	e7b0      	b.n	8007418 <_printf_i+0xfc>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	f043 0320 	orr.w	r3, r3, #32
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	2378      	movs	r3, #120	; 0x78
 80074c0:	4828      	ldr	r0, [pc, #160]	; (8007564 <_printf_i+0x248>)
 80074c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074c6:	e7e3      	b.n	8007490 <_printf_i+0x174>
 80074c8:	065e      	lsls	r6, r3, #25
 80074ca:	bf48      	it	mi
 80074cc:	b2ad      	uxthmi	r5, r5
 80074ce:	e7e6      	b.n	800749e <_printf_i+0x182>
 80074d0:	4616      	mov	r6, r2
 80074d2:	e7bb      	b.n	800744c <_printf_i+0x130>
 80074d4:	680b      	ldr	r3, [r1, #0]
 80074d6:	6826      	ldr	r6, [r4, #0]
 80074d8:	6960      	ldr	r0, [r4, #20]
 80074da:	1d1d      	adds	r5, r3, #4
 80074dc:	600d      	str	r5, [r1, #0]
 80074de:	0635      	lsls	r5, r6, #24
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	d501      	bpl.n	80074e8 <_printf_i+0x1cc>
 80074e4:	6018      	str	r0, [r3, #0]
 80074e6:	e002      	b.n	80074ee <_printf_i+0x1d2>
 80074e8:	0671      	lsls	r1, r6, #25
 80074ea:	d5fb      	bpl.n	80074e4 <_printf_i+0x1c8>
 80074ec:	8018      	strh	r0, [r3, #0]
 80074ee:	2300      	movs	r3, #0
 80074f0:	6123      	str	r3, [r4, #16]
 80074f2:	4616      	mov	r6, r2
 80074f4:	e7ba      	b.n	800746c <_printf_i+0x150>
 80074f6:	680b      	ldr	r3, [r1, #0]
 80074f8:	1d1a      	adds	r2, r3, #4
 80074fa:	600a      	str	r2, [r1, #0]
 80074fc:	681e      	ldr	r6, [r3, #0]
 80074fe:	6862      	ldr	r2, [r4, #4]
 8007500:	2100      	movs	r1, #0
 8007502:	4630      	mov	r0, r6
 8007504:	f7f8 fedc 	bl	80002c0 <memchr>
 8007508:	b108      	cbz	r0, 800750e <_printf_i+0x1f2>
 800750a:	1b80      	subs	r0, r0, r6
 800750c:	6060      	str	r0, [r4, #4]
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	6123      	str	r3, [r4, #16]
 8007512:	2300      	movs	r3, #0
 8007514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007518:	e7a8      	b.n	800746c <_printf_i+0x150>
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	4632      	mov	r2, r6
 800751e:	4649      	mov	r1, r9
 8007520:	4640      	mov	r0, r8
 8007522:	47d0      	blx	sl
 8007524:	3001      	adds	r0, #1
 8007526:	d0ab      	beq.n	8007480 <_printf_i+0x164>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	079b      	lsls	r3, r3, #30
 800752c:	d413      	bmi.n	8007556 <_printf_i+0x23a>
 800752e:	68e0      	ldr	r0, [r4, #12]
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	4298      	cmp	r0, r3
 8007534:	bfb8      	it	lt
 8007536:	4618      	movlt	r0, r3
 8007538:	e7a4      	b.n	8007484 <_printf_i+0x168>
 800753a:	2301      	movs	r3, #1
 800753c:	4632      	mov	r2, r6
 800753e:	4649      	mov	r1, r9
 8007540:	4640      	mov	r0, r8
 8007542:	47d0      	blx	sl
 8007544:	3001      	adds	r0, #1
 8007546:	d09b      	beq.n	8007480 <_printf_i+0x164>
 8007548:	3501      	adds	r5, #1
 800754a:	68e3      	ldr	r3, [r4, #12]
 800754c:	9903      	ldr	r1, [sp, #12]
 800754e:	1a5b      	subs	r3, r3, r1
 8007550:	42ab      	cmp	r3, r5
 8007552:	dcf2      	bgt.n	800753a <_printf_i+0x21e>
 8007554:	e7eb      	b.n	800752e <_printf_i+0x212>
 8007556:	2500      	movs	r5, #0
 8007558:	f104 0619 	add.w	r6, r4, #25
 800755c:	e7f5      	b.n	800754a <_printf_i+0x22e>
 800755e:	bf00      	nop
 8007560:	08007ff3 	.word	0x08007ff3
 8007564:	08008004 	.word	0x08008004

08007568 <_sbrk_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d06      	ldr	r5, [pc, #24]	; (8007584 <_sbrk_r+0x1c>)
 800756c:	2300      	movs	r3, #0
 800756e:	4604      	mov	r4, r0
 8007570:	4608      	mov	r0, r1
 8007572:	602b      	str	r3, [r5, #0]
 8007574:	f7f9 fbb0 	bl	8000cd8 <_sbrk>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_sbrk_r+0x1a>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_sbrk_r+0x1a>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20014534 	.word	0x20014534

08007588 <__swbuf_r>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	460e      	mov	r6, r1
 800758c:	4614      	mov	r4, r2
 800758e:	4605      	mov	r5, r0
 8007590:	b118      	cbz	r0, 800759a <__swbuf_r+0x12>
 8007592:	6983      	ldr	r3, [r0, #24]
 8007594:	b90b      	cbnz	r3, 800759a <__swbuf_r+0x12>
 8007596:	f000 f9d9 	bl	800794c <__sinit>
 800759a:	4b21      	ldr	r3, [pc, #132]	; (8007620 <__swbuf_r+0x98>)
 800759c:	429c      	cmp	r4, r3
 800759e:	d12b      	bne.n	80075f8 <__swbuf_r+0x70>
 80075a0:	686c      	ldr	r4, [r5, #4]
 80075a2:	69a3      	ldr	r3, [r4, #24]
 80075a4:	60a3      	str	r3, [r4, #8]
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	071a      	lsls	r2, r3, #28
 80075aa:	d52f      	bpl.n	800760c <__swbuf_r+0x84>
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	b36b      	cbz	r3, 800760c <__swbuf_r+0x84>
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	6820      	ldr	r0, [r4, #0]
 80075b4:	1ac0      	subs	r0, r0, r3
 80075b6:	6963      	ldr	r3, [r4, #20]
 80075b8:	b2f6      	uxtb	r6, r6
 80075ba:	4283      	cmp	r3, r0
 80075bc:	4637      	mov	r7, r6
 80075be:	dc04      	bgt.n	80075ca <__swbuf_r+0x42>
 80075c0:	4621      	mov	r1, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 f92e 	bl	8007824 <_fflush_r>
 80075c8:	bb30      	cbnz	r0, 8007618 <__swbuf_r+0x90>
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	60a3      	str	r3, [r4, #8]
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	6022      	str	r2, [r4, #0]
 80075d6:	701e      	strb	r6, [r3, #0]
 80075d8:	6963      	ldr	r3, [r4, #20]
 80075da:	3001      	adds	r0, #1
 80075dc:	4283      	cmp	r3, r0
 80075de:	d004      	beq.n	80075ea <__swbuf_r+0x62>
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	07db      	lsls	r3, r3, #31
 80075e4:	d506      	bpl.n	80075f4 <__swbuf_r+0x6c>
 80075e6:	2e0a      	cmp	r6, #10
 80075e8:	d104      	bne.n	80075f4 <__swbuf_r+0x6c>
 80075ea:	4621      	mov	r1, r4
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 f919 	bl	8007824 <_fflush_r>
 80075f2:	b988      	cbnz	r0, 8007618 <__swbuf_r+0x90>
 80075f4:	4638      	mov	r0, r7
 80075f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f8:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <__swbuf_r+0x9c>)
 80075fa:	429c      	cmp	r4, r3
 80075fc:	d101      	bne.n	8007602 <__swbuf_r+0x7a>
 80075fe:	68ac      	ldr	r4, [r5, #8]
 8007600:	e7cf      	b.n	80075a2 <__swbuf_r+0x1a>
 8007602:	4b09      	ldr	r3, [pc, #36]	; (8007628 <__swbuf_r+0xa0>)
 8007604:	429c      	cmp	r4, r3
 8007606:	bf08      	it	eq
 8007608:	68ec      	ldreq	r4, [r5, #12]
 800760a:	e7ca      	b.n	80075a2 <__swbuf_r+0x1a>
 800760c:	4621      	mov	r1, r4
 800760e:	4628      	mov	r0, r5
 8007610:	f000 f80c 	bl	800762c <__swsetup_r>
 8007614:	2800      	cmp	r0, #0
 8007616:	d0cb      	beq.n	80075b0 <__swbuf_r+0x28>
 8007618:	f04f 37ff 	mov.w	r7, #4294967295
 800761c:	e7ea      	b.n	80075f4 <__swbuf_r+0x6c>
 800761e:	bf00      	nop
 8007620:	08008038 	.word	0x08008038
 8007624:	08008058 	.word	0x08008058
 8007628:	08008018 	.word	0x08008018

0800762c <__swsetup_r>:
 800762c:	4b32      	ldr	r3, [pc, #200]	; (80076f8 <__swsetup_r+0xcc>)
 800762e:	b570      	push	{r4, r5, r6, lr}
 8007630:	681d      	ldr	r5, [r3, #0]
 8007632:	4606      	mov	r6, r0
 8007634:	460c      	mov	r4, r1
 8007636:	b125      	cbz	r5, 8007642 <__swsetup_r+0x16>
 8007638:	69ab      	ldr	r3, [r5, #24]
 800763a:	b913      	cbnz	r3, 8007642 <__swsetup_r+0x16>
 800763c:	4628      	mov	r0, r5
 800763e:	f000 f985 	bl	800794c <__sinit>
 8007642:	4b2e      	ldr	r3, [pc, #184]	; (80076fc <__swsetup_r+0xd0>)
 8007644:	429c      	cmp	r4, r3
 8007646:	d10f      	bne.n	8007668 <__swsetup_r+0x3c>
 8007648:	686c      	ldr	r4, [r5, #4]
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007650:	0719      	lsls	r1, r3, #28
 8007652:	d42c      	bmi.n	80076ae <__swsetup_r+0x82>
 8007654:	06dd      	lsls	r5, r3, #27
 8007656:	d411      	bmi.n	800767c <__swsetup_r+0x50>
 8007658:	2309      	movs	r3, #9
 800765a:	6033      	str	r3, [r6, #0]
 800765c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007660:	81a3      	strh	r3, [r4, #12]
 8007662:	f04f 30ff 	mov.w	r0, #4294967295
 8007666:	e03e      	b.n	80076e6 <__swsetup_r+0xba>
 8007668:	4b25      	ldr	r3, [pc, #148]	; (8007700 <__swsetup_r+0xd4>)
 800766a:	429c      	cmp	r4, r3
 800766c:	d101      	bne.n	8007672 <__swsetup_r+0x46>
 800766e:	68ac      	ldr	r4, [r5, #8]
 8007670:	e7eb      	b.n	800764a <__swsetup_r+0x1e>
 8007672:	4b24      	ldr	r3, [pc, #144]	; (8007704 <__swsetup_r+0xd8>)
 8007674:	429c      	cmp	r4, r3
 8007676:	bf08      	it	eq
 8007678:	68ec      	ldreq	r4, [r5, #12]
 800767a:	e7e6      	b.n	800764a <__swsetup_r+0x1e>
 800767c:	0758      	lsls	r0, r3, #29
 800767e:	d512      	bpl.n	80076a6 <__swsetup_r+0x7a>
 8007680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007682:	b141      	cbz	r1, 8007696 <__swsetup_r+0x6a>
 8007684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007688:	4299      	cmp	r1, r3
 800768a:	d002      	beq.n	8007692 <__swsetup_r+0x66>
 800768c:	4630      	mov	r0, r6
 800768e:	f7ff fa77 	bl	8006b80 <_free_r>
 8007692:	2300      	movs	r3, #0
 8007694:	6363      	str	r3, [r4, #52]	; 0x34
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800769c:	81a3      	strh	r3, [r4, #12]
 800769e:	2300      	movs	r3, #0
 80076a0:	6063      	str	r3, [r4, #4]
 80076a2:	6923      	ldr	r3, [r4, #16]
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	f043 0308 	orr.w	r3, r3, #8
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	b94b      	cbnz	r3, 80076c6 <__swsetup_r+0x9a>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076bc:	d003      	beq.n	80076c6 <__swsetup_r+0x9a>
 80076be:	4621      	mov	r1, r4
 80076c0:	4630      	mov	r0, r6
 80076c2:	f000 fa07 	bl	8007ad4 <__smakebuf_r>
 80076c6:	89a0      	ldrh	r0, [r4, #12]
 80076c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076cc:	f010 0301 	ands.w	r3, r0, #1
 80076d0:	d00a      	beq.n	80076e8 <__swsetup_r+0xbc>
 80076d2:	2300      	movs	r3, #0
 80076d4:	60a3      	str	r3, [r4, #8]
 80076d6:	6963      	ldr	r3, [r4, #20]
 80076d8:	425b      	negs	r3, r3
 80076da:	61a3      	str	r3, [r4, #24]
 80076dc:	6923      	ldr	r3, [r4, #16]
 80076de:	b943      	cbnz	r3, 80076f2 <__swsetup_r+0xc6>
 80076e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076e4:	d1ba      	bne.n	800765c <__swsetup_r+0x30>
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	0781      	lsls	r1, r0, #30
 80076ea:	bf58      	it	pl
 80076ec:	6963      	ldrpl	r3, [r4, #20]
 80076ee:	60a3      	str	r3, [r4, #8]
 80076f0:	e7f4      	b.n	80076dc <__swsetup_r+0xb0>
 80076f2:	2000      	movs	r0, #0
 80076f4:	e7f7      	b.n	80076e6 <__swsetup_r+0xba>
 80076f6:	bf00      	nop
 80076f8:	2000001c 	.word	0x2000001c
 80076fc:	08008038 	.word	0x08008038
 8007700:	08008058 	.word	0x08008058
 8007704:	08008018 	.word	0x08008018

08007708 <abort>:
 8007708:	b508      	push	{r3, lr}
 800770a:	2006      	movs	r0, #6
 800770c:	f000 fa96 	bl	8007c3c <raise>
 8007710:	2001      	movs	r0, #1
 8007712:	f7f9 fa85 	bl	8000c20 <_exit>
	...

08007718 <__sflush_r>:
 8007718:	898a      	ldrh	r2, [r1, #12]
 800771a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	4605      	mov	r5, r0
 8007720:	0710      	lsls	r0, r2, #28
 8007722:	460c      	mov	r4, r1
 8007724:	d458      	bmi.n	80077d8 <__sflush_r+0xc0>
 8007726:	684b      	ldr	r3, [r1, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	dc05      	bgt.n	8007738 <__sflush_r+0x20>
 800772c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	dc02      	bgt.n	8007738 <__sflush_r+0x20>
 8007732:	2000      	movs	r0, #0
 8007734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800773a:	2e00      	cmp	r6, #0
 800773c:	d0f9      	beq.n	8007732 <__sflush_r+0x1a>
 800773e:	2300      	movs	r3, #0
 8007740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007744:	682f      	ldr	r7, [r5, #0]
 8007746:	602b      	str	r3, [r5, #0]
 8007748:	d032      	beq.n	80077b0 <__sflush_r+0x98>
 800774a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	075a      	lsls	r2, r3, #29
 8007750:	d505      	bpl.n	800775e <__sflush_r+0x46>
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	1ac0      	subs	r0, r0, r3
 8007756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007758:	b10b      	cbz	r3, 800775e <__sflush_r+0x46>
 800775a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800775c:	1ac0      	subs	r0, r0, r3
 800775e:	2300      	movs	r3, #0
 8007760:	4602      	mov	r2, r0
 8007762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007764:	6a21      	ldr	r1, [r4, #32]
 8007766:	4628      	mov	r0, r5
 8007768:	47b0      	blx	r6
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	d106      	bne.n	800777e <__sflush_r+0x66>
 8007770:	6829      	ldr	r1, [r5, #0]
 8007772:	291d      	cmp	r1, #29
 8007774:	d82c      	bhi.n	80077d0 <__sflush_r+0xb8>
 8007776:	4a2a      	ldr	r2, [pc, #168]	; (8007820 <__sflush_r+0x108>)
 8007778:	40ca      	lsrs	r2, r1
 800777a:	07d6      	lsls	r6, r2, #31
 800777c:	d528      	bpl.n	80077d0 <__sflush_r+0xb8>
 800777e:	2200      	movs	r2, #0
 8007780:	6062      	str	r2, [r4, #4]
 8007782:	04d9      	lsls	r1, r3, #19
 8007784:	6922      	ldr	r2, [r4, #16]
 8007786:	6022      	str	r2, [r4, #0]
 8007788:	d504      	bpl.n	8007794 <__sflush_r+0x7c>
 800778a:	1c42      	adds	r2, r0, #1
 800778c:	d101      	bne.n	8007792 <__sflush_r+0x7a>
 800778e:	682b      	ldr	r3, [r5, #0]
 8007790:	b903      	cbnz	r3, 8007794 <__sflush_r+0x7c>
 8007792:	6560      	str	r0, [r4, #84]	; 0x54
 8007794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007796:	602f      	str	r7, [r5, #0]
 8007798:	2900      	cmp	r1, #0
 800779a:	d0ca      	beq.n	8007732 <__sflush_r+0x1a>
 800779c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077a0:	4299      	cmp	r1, r3
 80077a2:	d002      	beq.n	80077aa <__sflush_r+0x92>
 80077a4:	4628      	mov	r0, r5
 80077a6:	f7ff f9eb 	bl	8006b80 <_free_r>
 80077aa:	2000      	movs	r0, #0
 80077ac:	6360      	str	r0, [r4, #52]	; 0x34
 80077ae:	e7c1      	b.n	8007734 <__sflush_r+0x1c>
 80077b0:	6a21      	ldr	r1, [r4, #32]
 80077b2:	2301      	movs	r3, #1
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b0      	blx	r6
 80077b8:	1c41      	adds	r1, r0, #1
 80077ba:	d1c7      	bne.n	800774c <__sflush_r+0x34>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0c4      	beq.n	800774c <__sflush_r+0x34>
 80077c2:	2b1d      	cmp	r3, #29
 80077c4:	d001      	beq.n	80077ca <__sflush_r+0xb2>
 80077c6:	2b16      	cmp	r3, #22
 80077c8:	d101      	bne.n	80077ce <__sflush_r+0xb6>
 80077ca:	602f      	str	r7, [r5, #0]
 80077cc:	e7b1      	b.n	8007732 <__sflush_r+0x1a>
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	e7ad      	b.n	8007734 <__sflush_r+0x1c>
 80077d8:	690f      	ldr	r7, [r1, #16]
 80077da:	2f00      	cmp	r7, #0
 80077dc:	d0a9      	beq.n	8007732 <__sflush_r+0x1a>
 80077de:	0793      	lsls	r3, r2, #30
 80077e0:	680e      	ldr	r6, [r1, #0]
 80077e2:	bf08      	it	eq
 80077e4:	694b      	ldreq	r3, [r1, #20]
 80077e6:	600f      	str	r7, [r1, #0]
 80077e8:	bf18      	it	ne
 80077ea:	2300      	movne	r3, #0
 80077ec:	eba6 0807 	sub.w	r8, r6, r7
 80077f0:	608b      	str	r3, [r1, #8]
 80077f2:	f1b8 0f00 	cmp.w	r8, #0
 80077f6:	dd9c      	ble.n	8007732 <__sflush_r+0x1a>
 80077f8:	6a21      	ldr	r1, [r4, #32]
 80077fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077fc:	4643      	mov	r3, r8
 80077fe:	463a      	mov	r2, r7
 8007800:	4628      	mov	r0, r5
 8007802:	47b0      	blx	r6
 8007804:	2800      	cmp	r0, #0
 8007806:	dc06      	bgt.n	8007816 <__sflush_r+0xfe>
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	e78e      	b.n	8007734 <__sflush_r+0x1c>
 8007816:	4407      	add	r7, r0
 8007818:	eba8 0800 	sub.w	r8, r8, r0
 800781c:	e7e9      	b.n	80077f2 <__sflush_r+0xda>
 800781e:	bf00      	nop
 8007820:	20400001 	.word	0x20400001

08007824 <_fflush_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	690b      	ldr	r3, [r1, #16]
 8007828:	4605      	mov	r5, r0
 800782a:	460c      	mov	r4, r1
 800782c:	b913      	cbnz	r3, 8007834 <_fflush_r+0x10>
 800782e:	2500      	movs	r5, #0
 8007830:	4628      	mov	r0, r5
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	b118      	cbz	r0, 800783e <_fflush_r+0x1a>
 8007836:	6983      	ldr	r3, [r0, #24]
 8007838:	b90b      	cbnz	r3, 800783e <_fflush_r+0x1a>
 800783a:	f000 f887 	bl	800794c <__sinit>
 800783e:	4b14      	ldr	r3, [pc, #80]	; (8007890 <_fflush_r+0x6c>)
 8007840:	429c      	cmp	r4, r3
 8007842:	d11b      	bne.n	800787c <_fflush_r+0x58>
 8007844:	686c      	ldr	r4, [r5, #4]
 8007846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0ef      	beq.n	800782e <_fflush_r+0xa>
 800784e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007850:	07d0      	lsls	r0, r2, #31
 8007852:	d404      	bmi.n	800785e <_fflush_r+0x3a>
 8007854:	0599      	lsls	r1, r3, #22
 8007856:	d402      	bmi.n	800785e <_fflush_r+0x3a>
 8007858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800785a:	f000 f915 	bl	8007a88 <__retarget_lock_acquire_recursive>
 800785e:	4628      	mov	r0, r5
 8007860:	4621      	mov	r1, r4
 8007862:	f7ff ff59 	bl	8007718 <__sflush_r>
 8007866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007868:	07da      	lsls	r2, r3, #31
 800786a:	4605      	mov	r5, r0
 800786c:	d4e0      	bmi.n	8007830 <_fflush_r+0xc>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	059b      	lsls	r3, r3, #22
 8007872:	d4dd      	bmi.n	8007830 <_fflush_r+0xc>
 8007874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007876:	f000 f908 	bl	8007a8a <__retarget_lock_release_recursive>
 800787a:	e7d9      	b.n	8007830 <_fflush_r+0xc>
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <_fflush_r+0x70>)
 800787e:	429c      	cmp	r4, r3
 8007880:	d101      	bne.n	8007886 <_fflush_r+0x62>
 8007882:	68ac      	ldr	r4, [r5, #8]
 8007884:	e7df      	b.n	8007846 <_fflush_r+0x22>
 8007886:	4b04      	ldr	r3, [pc, #16]	; (8007898 <_fflush_r+0x74>)
 8007888:	429c      	cmp	r4, r3
 800788a:	bf08      	it	eq
 800788c:	68ec      	ldreq	r4, [r5, #12]
 800788e:	e7da      	b.n	8007846 <_fflush_r+0x22>
 8007890:	08008038 	.word	0x08008038
 8007894:	08008058 	.word	0x08008058
 8007898:	08008018 	.word	0x08008018

0800789c <std>:
 800789c:	2300      	movs	r3, #0
 800789e:	b510      	push	{r4, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	e9c0 3300 	strd	r3, r3, [r0]
 80078a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078aa:	6083      	str	r3, [r0, #8]
 80078ac:	8181      	strh	r1, [r0, #12]
 80078ae:	6643      	str	r3, [r0, #100]	; 0x64
 80078b0:	81c2      	strh	r2, [r0, #14]
 80078b2:	6183      	str	r3, [r0, #24]
 80078b4:	4619      	mov	r1, r3
 80078b6:	2208      	movs	r2, #8
 80078b8:	305c      	adds	r0, #92	; 0x5c
 80078ba:	f7ff f8c1 	bl	8006a40 <memset>
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <std+0x38>)
 80078c0:	6263      	str	r3, [r4, #36]	; 0x24
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <std+0x3c>)
 80078c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <std+0x40>)
 80078c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078ca:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <std+0x44>)
 80078cc:	6224      	str	r4, [r4, #32]
 80078ce:	6323      	str	r3, [r4, #48]	; 0x30
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	bf00      	nop
 80078d4:	08007c75 	.word	0x08007c75
 80078d8:	08007c97 	.word	0x08007c97
 80078dc:	08007ccf 	.word	0x08007ccf
 80078e0:	08007cf3 	.word	0x08007cf3

080078e4 <_cleanup_r>:
 80078e4:	4901      	ldr	r1, [pc, #4]	; (80078ec <_cleanup_r+0x8>)
 80078e6:	f000 b8af 	b.w	8007a48 <_fwalk_reent>
 80078ea:	bf00      	nop
 80078ec:	08007825 	.word	0x08007825

080078f0 <__sfmoreglue>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	1e4a      	subs	r2, r1, #1
 80078f4:	2568      	movs	r5, #104	; 0x68
 80078f6:	4355      	muls	r5, r2
 80078f8:	460e      	mov	r6, r1
 80078fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078fe:	f7ff f98f 	bl	8006c20 <_malloc_r>
 8007902:	4604      	mov	r4, r0
 8007904:	b140      	cbz	r0, 8007918 <__sfmoreglue+0x28>
 8007906:	2100      	movs	r1, #0
 8007908:	e9c0 1600 	strd	r1, r6, [r0]
 800790c:	300c      	adds	r0, #12
 800790e:	60a0      	str	r0, [r4, #8]
 8007910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007914:	f7ff f894 	bl	8006a40 <memset>
 8007918:	4620      	mov	r0, r4
 800791a:	bd70      	pop	{r4, r5, r6, pc}

0800791c <__sfp_lock_acquire>:
 800791c:	4801      	ldr	r0, [pc, #4]	; (8007924 <__sfp_lock_acquire+0x8>)
 800791e:	f000 b8b3 	b.w	8007a88 <__retarget_lock_acquire_recursive>
 8007922:	bf00      	nop
 8007924:	20014530 	.word	0x20014530

08007928 <__sfp_lock_release>:
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <__sfp_lock_release+0x8>)
 800792a:	f000 b8ae 	b.w	8007a8a <__retarget_lock_release_recursive>
 800792e:	bf00      	nop
 8007930:	20014530 	.word	0x20014530

08007934 <__sinit_lock_acquire>:
 8007934:	4801      	ldr	r0, [pc, #4]	; (800793c <__sinit_lock_acquire+0x8>)
 8007936:	f000 b8a7 	b.w	8007a88 <__retarget_lock_acquire_recursive>
 800793a:	bf00      	nop
 800793c:	2001452b 	.word	0x2001452b

08007940 <__sinit_lock_release>:
 8007940:	4801      	ldr	r0, [pc, #4]	; (8007948 <__sinit_lock_release+0x8>)
 8007942:	f000 b8a2 	b.w	8007a8a <__retarget_lock_release_recursive>
 8007946:	bf00      	nop
 8007948:	2001452b 	.word	0x2001452b

0800794c <__sinit>:
 800794c:	b510      	push	{r4, lr}
 800794e:	4604      	mov	r4, r0
 8007950:	f7ff fff0 	bl	8007934 <__sinit_lock_acquire>
 8007954:	69a3      	ldr	r3, [r4, #24]
 8007956:	b11b      	cbz	r3, 8007960 <__sinit+0x14>
 8007958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800795c:	f7ff bff0 	b.w	8007940 <__sinit_lock_release>
 8007960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007964:	6523      	str	r3, [r4, #80]	; 0x50
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <__sinit+0x68>)
 8007968:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <__sinit+0x6c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	62a2      	str	r2, [r4, #40]	; 0x28
 800796e:	42a3      	cmp	r3, r4
 8007970:	bf04      	itt	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	61a3      	streq	r3, [r4, #24]
 8007976:	4620      	mov	r0, r4
 8007978:	f000 f820 	bl	80079bc <__sfp>
 800797c:	6060      	str	r0, [r4, #4]
 800797e:	4620      	mov	r0, r4
 8007980:	f000 f81c 	bl	80079bc <__sfp>
 8007984:	60a0      	str	r0, [r4, #8]
 8007986:	4620      	mov	r0, r4
 8007988:	f000 f818 	bl	80079bc <__sfp>
 800798c:	2200      	movs	r2, #0
 800798e:	60e0      	str	r0, [r4, #12]
 8007990:	2104      	movs	r1, #4
 8007992:	6860      	ldr	r0, [r4, #4]
 8007994:	f7ff ff82 	bl	800789c <std>
 8007998:	68a0      	ldr	r0, [r4, #8]
 800799a:	2201      	movs	r2, #1
 800799c:	2109      	movs	r1, #9
 800799e:	f7ff ff7d 	bl	800789c <std>
 80079a2:	68e0      	ldr	r0, [r4, #12]
 80079a4:	2202      	movs	r2, #2
 80079a6:	2112      	movs	r1, #18
 80079a8:	f7ff ff78 	bl	800789c <std>
 80079ac:	2301      	movs	r3, #1
 80079ae:	61a3      	str	r3, [r4, #24]
 80079b0:	e7d2      	b.n	8007958 <__sinit+0xc>
 80079b2:	bf00      	nop
 80079b4:	08007f2c 	.word	0x08007f2c
 80079b8:	080078e5 	.word	0x080078e5

080079bc <__sfp>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	4607      	mov	r7, r0
 80079c0:	f7ff ffac 	bl	800791c <__sfp_lock_acquire>
 80079c4:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <__sfp+0x84>)
 80079c6:	681e      	ldr	r6, [r3, #0]
 80079c8:	69b3      	ldr	r3, [r6, #24]
 80079ca:	b913      	cbnz	r3, 80079d2 <__sfp+0x16>
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff ffbd 	bl	800794c <__sinit>
 80079d2:	3648      	adds	r6, #72	; 0x48
 80079d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079d8:	3b01      	subs	r3, #1
 80079da:	d503      	bpl.n	80079e4 <__sfp+0x28>
 80079dc:	6833      	ldr	r3, [r6, #0]
 80079de:	b30b      	cbz	r3, 8007a24 <__sfp+0x68>
 80079e0:	6836      	ldr	r6, [r6, #0]
 80079e2:	e7f7      	b.n	80079d4 <__sfp+0x18>
 80079e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079e8:	b9d5      	cbnz	r5, 8007a20 <__sfp+0x64>
 80079ea:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <__sfp+0x88>)
 80079ec:	60e3      	str	r3, [r4, #12]
 80079ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079f2:	6665      	str	r5, [r4, #100]	; 0x64
 80079f4:	f000 f847 	bl	8007a86 <__retarget_lock_init_recursive>
 80079f8:	f7ff ff96 	bl	8007928 <__sfp_lock_release>
 80079fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a04:	6025      	str	r5, [r4, #0]
 8007a06:	61a5      	str	r5, [r4, #24]
 8007a08:	2208      	movs	r2, #8
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a10:	f7ff f816 	bl	8006a40 <memset>
 8007a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a20:	3468      	adds	r4, #104	; 0x68
 8007a22:	e7d9      	b.n	80079d8 <__sfp+0x1c>
 8007a24:	2104      	movs	r1, #4
 8007a26:	4638      	mov	r0, r7
 8007a28:	f7ff ff62 	bl	80078f0 <__sfmoreglue>
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	6030      	str	r0, [r6, #0]
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d1d5      	bne.n	80079e0 <__sfp+0x24>
 8007a34:	f7ff ff78 	bl	8007928 <__sfp_lock_release>
 8007a38:	230c      	movs	r3, #12
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	e7ee      	b.n	8007a1c <__sfp+0x60>
 8007a3e:	bf00      	nop
 8007a40:	08007f2c 	.word	0x08007f2c
 8007a44:	ffff0001 	.word	0xffff0001

08007a48 <_fwalk_reent>:
 8007a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	4688      	mov	r8, r1
 8007a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a54:	2700      	movs	r7, #0
 8007a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a5e:	d505      	bpl.n	8007a6c <_fwalk_reent+0x24>
 8007a60:	6824      	ldr	r4, [r4, #0]
 8007a62:	2c00      	cmp	r4, #0
 8007a64:	d1f7      	bne.n	8007a56 <_fwalk_reent+0xe>
 8007a66:	4638      	mov	r0, r7
 8007a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6c:	89ab      	ldrh	r3, [r5, #12]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d907      	bls.n	8007a82 <_fwalk_reent+0x3a>
 8007a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a76:	3301      	adds	r3, #1
 8007a78:	d003      	beq.n	8007a82 <_fwalk_reent+0x3a>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	47c0      	blx	r8
 8007a80:	4307      	orrs	r7, r0
 8007a82:	3568      	adds	r5, #104	; 0x68
 8007a84:	e7e9      	b.n	8007a5a <_fwalk_reent+0x12>

08007a86 <__retarget_lock_init_recursive>:
 8007a86:	4770      	bx	lr

08007a88 <__retarget_lock_acquire_recursive>:
 8007a88:	4770      	bx	lr

08007a8a <__retarget_lock_release_recursive>:
 8007a8a:	4770      	bx	lr

08007a8c <__swhatbuf_r>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	460e      	mov	r6, r1
 8007a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a94:	2900      	cmp	r1, #0
 8007a96:	b096      	sub	sp, #88	; 0x58
 8007a98:	4614      	mov	r4, r2
 8007a9a:	461d      	mov	r5, r3
 8007a9c:	da07      	bge.n	8007aae <__swhatbuf_r+0x22>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	89b3      	ldrh	r3, [r6, #12]
 8007aa4:	061a      	lsls	r2, r3, #24
 8007aa6:	d410      	bmi.n	8007aca <__swhatbuf_r+0x3e>
 8007aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aac:	e00e      	b.n	8007acc <__swhatbuf_r+0x40>
 8007aae:	466a      	mov	r2, sp
 8007ab0:	f000 f934 	bl	8007d1c <_fstat_r>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	dbf2      	blt.n	8007a9e <__swhatbuf_r+0x12>
 8007ab8:	9a01      	ldr	r2, [sp, #4]
 8007aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ac2:	425a      	negs	r2, r3
 8007ac4:	415a      	adcs	r2, r3
 8007ac6:	602a      	str	r2, [r5, #0]
 8007ac8:	e7ee      	b.n	8007aa8 <__swhatbuf_r+0x1c>
 8007aca:	2340      	movs	r3, #64	; 0x40
 8007acc:	2000      	movs	r0, #0
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	b016      	add	sp, #88	; 0x58
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}

08007ad4 <__smakebuf_r>:
 8007ad4:	898b      	ldrh	r3, [r1, #12]
 8007ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ad8:	079d      	lsls	r5, r3, #30
 8007ada:	4606      	mov	r6, r0
 8007adc:	460c      	mov	r4, r1
 8007ade:	d507      	bpl.n	8007af0 <__smakebuf_r+0x1c>
 8007ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	2301      	movs	r3, #1
 8007aea:	6163      	str	r3, [r4, #20]
 8007aec:	b002      	add	sp, #8
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	ab01      	add	r3, sp, #4
 8007af2:	466a      	mov	r2, sp
 8007af4:	f7ff ffca 	bl	8007a8c <__swhatbuf_r>
 8007af8:	9900      	ldr	r1, [sp, #0]
 8007afa:	4605      	mov	r5, r0
 8007afc:	4630      	mov	r0, r6
 8007afe:	f7ff f88f 	bl	8006c20 <_malloc_r>
 8007b02:	b948      	cbnz	r0, 8007b18 <__smakebuf_r+0x44>
 8007b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b08:	059a      	lsls	r2, r3, #22
 8007b0a:	d4ef      	bmi.n	8007aec <__smakebuf_r+0x18>
 8007b0c:	f023 0303 	bic.w	r3, r3, #3
 8007b10:	f043 0302 	orr.w	r3, r3, #2
 8007b14:	81a3      	strh	r3, [r4, #12]
 8007b16:	e7e3      	b.n	8007ae0 <__smakebuf_r+0xc>
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <__smakebuf_r+0x7c>)
 8007b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	6020      	str	r0, [r4, #0]
 8007b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	9b00      	ldr	r3, [sp, #0]
 8007b28:	6163      	str	r3, [r4, #20]
 8007b2a:	9b01      	ldr	r3, [sp, #4]
 8007b2c:	6120      	str	r0, [r4, #16]
 8007b2e:	b15b      	cbz	r3, 8007b48 <__smakebuf_r+0x74>
 8007b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b34:	4630      	mov	r0, r6
 8007b36:	f000 f903 	bl	8007d40 <_isatty_r>
 8007b3a:	b128      	cbz	r0, 8007b48 <__smakebuf_r+0x74>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	81a3      	strh	r3, [r4, #12]
 8007b48:	89a0      	ldrh	r0, [r4, #12]
 8007b4a:	4305      	orrs	r5, r0
 8007b4c:	81a5      	strh	r5, [r4, #12]
 8007b4e:	e7cd      	b.n	8007aec <__smakebuf_r+0x18>
 8007b50:	080078e5 	.word	0x080078e5

08007b54 <memmove>:
 8007b54:	4288      	cmp	r0, r1
 8007b56:	b510      	push	{r4, lr}
 8007b58:	eb01 0402 	add.w	r4, r1, r2
 8007b5c:	d902      	bls.n	8007b64 <memmove+0x10>
 8007b5e:	4284      	cmp	r4, r0
 8007b60:	4623      	mov	r3, r4
 8007b62:	d807      	bhi.n	8007b74 <memmove+0x20>
 8007b64:	1e43      	subs	r3, r0, #1
 8007b66:	42a1      	cmp	r1, r4
 8007b68:	d008      	beq.n	8007b7c <memmove+0x28>
 8007b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b72:	e7f8      	b.n	8007b66 <memmove+0x12>
 8007b74:	4402      	add	r2, r0
 8007b76:	4601      	mov	r1, r0
 8007b78:	428a      	cmp	r2, r1
 8007b7a:	d100      	bne.n	8007b7e <memmove+0x2a>
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b86:	e7f7      	b.n	8007b78 <memmove+0x24>

08007b88 <__malloc_lock>:
 8007b88:	4801      	ldr	r0, [pc, #4]	; (8007b90 <__malloc_lock+0x8>)
 8007b8a:	f7ff bf7d 	b.w	8007a88 <__retarget_lock_acquire_recursive>
 8007b8e:	bf00      	nop
 8007b90:	2001452c 	.word	0x2001452c

08007b94 <__malloc_unlock>:
 8007b94:	4801      	ldr	r0, [pc, #4]	; (8007b9c <__malloc_unlock+0x8>)
 8007b96:	f7ff bf78 	b.w	8007a8a <__retarget_lock_release_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	2001452c 	.word	0x2001452c

08007ba0 <_realloc_r>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	460e      	mov	r6, r1
 8007ba8:	b921      	cbnz	r1, 8007bb4 <_realloc_r+0x14>
 8007baa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bae:	4611      	mov	r1, r2
 8007bb0:	f7ff b836 	b.w	8006c20 <_malloc_r>
 8007bb4:	b922      	cbnz	r2, 8007bc0 <_realloc_r+0x20>
 8007bb6:	f7fe ffe3 	bl	8006b80 <_free_r>
 8007bba:	4625      	mov	r5, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc0:	f000 f8e0 	bl	8007d84 <_malloc_usable_size_r>
 8007bc4:	42a0      	cmp	r0, r4
 8007bc6:	d20f      	bcs.n	8007be8 <_realloc_r+0x48>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4638      	mov	r0, r7
 8007bcc:	f7ff f828 	bl	8006c20 <_malloc_r>
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d0f2      	beq.n	8007bbc <_realloc_r+0x1c>
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4622      	mov	r2, r4
 8007bda:	f7fe ff23 	bl	8006a24 <memcpy>
 8007bde:	4631      	mov	r1, r6
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7fe ffcd 	bl	8006b80 <_free_r>
 8007be6:	e7e9      	b.n	8007bbc <_realloc_r+0x1c>
 8007be8:	4635      	mov	r5, r6
 8007bea:	e7e7      	b.n	8007bbc <_realloc_r+0x1c>

08007bec <_raise_r>:
 8007bec:	291f      	cmp	r1, #31
 8007bee:	b538      	push	{r3, r4, r5, lr}
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	460d      	mov	r5, r1
 8007bf4:	d904      	bls.n	8007c00 <_raise_r+0x14>
 8007bf6:	2316      	movs	r3, #22
 8007bf8:	6003      	str	r3, [r0, #0]
 8007bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c02:	b112      	cbz	r2, 8007c0a <_raise_r+0x1e>
 8007c04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c08:	b94b      	cbnz	r3, 8007c1e <_raise_r+0x32>
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 f830 	bl	8007c70 <_getpid_r>
 8007c10:	462a      	mov	r2, r5
 8007c12:	4601      	mov	r1, r0
 8007c14:	4620      	mov	r0, r4
 8007c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c1a:	f000 b817 	b.w	8007c4c <_kill_r>
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d00a      	beq.n	8007c38 <_raise_r+0x4c>
 8007c22:	1c59      	adds	r1, r3, #1
 8007c24:	d103      	bne.n	8007c2e <_raise_r+0x42>
 8007c26:	2316      	movs	r3, #22
 8007c28:	6003      	str	r3, [r0, #0]
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	e7e7      	b.n	8007bfe <_raise_r+0x12>
 8007c2e:	2400      	movs	r4, #0
 8007c30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c34:	4628      	mov	r0, r5
 8007c36:	4798      	blx	r3
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e7e0      	b.n	8007bfe <_raise_r+0x12>

08007c3c <raise>:
 8007c3c:	4b02      	ldr	r3, [pc, #8]	; (8007c48 <raise+0xc>)
 8007c3e:	4601      	mov	r1, r0
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	f7ff bfd3 	b.w	8007bec <_raise_r>
 8007c46:	bf00      	nop
 8007c48:	2000001c 	.word	0x2000001c

08007c4c <_kill_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4d07      	ldr	r5, [pc, #28]	; (8007c6c <_kill_r+0x20>)
 8007c50:	2300      	movs	r3, #0
 8007c52:	4604      	mov	r4, r0
 8007c54:	4608      	mov	r0, r1
 8007c56:	4611      	mov	r1, r2
 8007c58:	602b      	str	r3, [r5, #0]
 8007c5a:	f7f8 ffd1 	bl	8000c00 <_kill>
 8007c5e:	1c43      	adds	r3, r0, #1
 8007c60:	d102      	bne.n	8007c68 <_kill_r+0x1c>
 8007c62:	682b      	ldr	r3, [r5, #0]
 8007c64:	b103      	cbz	r3, 8007c68 <_kill_r+0x1c>
 8007c66:	6023      	str	r3, [r4, #0]
 8007c68:	bd38      	pop	{r3, r4, r5, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20014534 	.word	0x20014534

08007c70 <_getpid_r>:
 8007c70:	f7f8 bfbe 	b.w	8000bf0 <_getpid>

08007c74 <__sread>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	460c      	mov	r4, r1
 8007c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c7c:	f000 f88a 	bl	8007d94 <_read_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	bfab      	itete	ge
 8007c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c86:	89a3      	ldrhlt	r3, [r4, #12]
 8007c88:	181b      	addge	r3, r3, r0
 8007c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c8e:	bfac      	ite	ge
 8007c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c92:	81a3      	strhlt	r3, [r4, #12]
 8007c94:	bd10      	pop	{r4, pc}

08007c96 <__swrite>:
 8007c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9a:	461f      	mov	r7, r3
 8007c9c:	898b      	ldrh	r3, [r1, #12]
 8007c9e:	05db      	lsls	r3, r3, #23
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	4616      	mov	r6, r2
 8007ca6:	d505      	bpl.n	8007cb4 <__swrite+0x1e>
 8007ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cac:	2302      	movs	r3, #2
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f000 f856 	bl	8007d60 <_lseek_r>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	463b      	mov	r3, r7
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cca:	f7fe be6f 	b.w	80069ac <_write_r>

08007cce <__sseek>:
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd6:	f000 f843 	bl	8007d60 <_lseek_r>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	bf15      	itete	ne
 8007ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cea:	81a3      	strheq	r3, [r4, #12]
 8007cec:	bf18      	it	ne
 8007cee:	81a3      	strhne	r3, [r4, #12]
 8007cf0:	bd10      	pop	{r4, pc}

08007cf2 <__sclose>:
 8007cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf6:	f000 b801 	b.w	8007cfc <_close_r>
	...

08007cfc <_close_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4d06      	ldr	r5, [pc, #24]	; (8007d18 <_close_r+0x1c>)
 8007d00:	2300      	movs	r3, #0
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	f7f8 ffb1 	bl	8000c6e <_close>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_close_r+0x1a>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_close_r+0x1a>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20014534 	.word	0x20014534

08007d1c <_fstat_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d07      	ldr	r5, [pc, #28]	; (8007d3c <_fstat_r+0x20>)
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	4611      	mov	r1, r2
 8007d28:	602b      	str	r3, [r5, #0]
 8007d2a:	f7f8 ffac 	bl	8000c86 <_fstat>
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	d102      	bne.n	8007d38 <_fstat_r+0x1c>
 8007d32:	682b      	ldr	r3, [r5, #0]
 8007d34:	b103      	cbz	r3, 8007d38 <_fstat_r+0x1c>
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20014534 	.word	0x20014534

08007d40 <_isatty_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d06      	ldr	r5, [pc, #24]	; (8007d5c <_isatty_r+0x1c>)
 8007d44:	2300      	movs	r3, #0
 8007d46:	4604      	mov	r4, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	f7f8 ffab 	bl	8000ca6 <_isatty>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_isatty_r+0x1a>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_isatty_r+0x1a>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	20014534 	.word	0x20014534

08007d60 <_lseek_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4d07      	ldr	r5, [pc, #28]	; (8007d80 <_lseek_r+0x20>)
 8007d64:	4604      	mov	r4, r0
 8007d66:	4608      	mov	r0, r1
 8007d68:	4611      	mov	r1, r2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	602a      	str	r2, [r5, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f7f8 ffa4 	bl	8000cbc <_lseek>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d102      	bne.n	8007d7e <_lseek_r+0x1e>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	b103      	cbz	r3, 8007d7e <_lseek_r+0x1e>
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	20014534 	.word	0x20014534

08007d84 <_malloc_usable_size_r>:
 8007d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d88:	1f18      	subs	r0, r3, #4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	bfbc      	itt	lt
 8007d8e:	580b      	ldrlt	r3, [r1, r0]
 8007d90:	18c0      	addlt	r0, r0, r3
 8007d92:	4770      	bx	lr

08007d94 <_read_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	; (8007db4 <_read_r+0x20>)
 8007d98:	4604      	mov	r4, r0
 8007d9a:	4608      	mov	r0, r1
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	602a      	str	r2, [r5, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f7f8 ff46 	bl	8000c34 <_read>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_read_r+0x1e>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_read_r+0x1e>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	20014534 	.word	0x20014534

08007db8 <_init>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr

08007dc4 <_fini>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	bf00      	nop
 8007dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dca:	bc08      	pop	{r3}
 8007dcc:	469e      	mov	lr, r3
 8007dce:	4770      	bx	lr
