
003TaskDelayUntil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08006d54  08006d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed8  08006ed8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ee0  08006ee0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014488  2000001c  08006f04  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144a4  08006f04  000244a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019771  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003564  00000000  00000000  000397bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0003cd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d27  00000000  00000000  0003f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015758  00000000  00000000  00062fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db7d6  00000000  00000000  0007871f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153ef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005130  00000000  00000000  00153f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d3c 	.word	0x08006d3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08006d3c 	.word	0x08006d3c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200143fc 	.word	0x200143fc

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fad7 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f86d 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f8d7 	bl	800075c <MX_GPIO_Init>

  //To Start the Sysview recording we have to Call these
  SEGGER_UART_init(250000);//UART
 80005ae:	482d      	ldr	r0, [pc, #180]	; (8000664 <main+0xc8>)
 80005b0:	f004 f91e 	bl	80047f0 <SEGGER_UART_init>

  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0); //Set the zeroth bit to one //SEGGER UART
 80005b4:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <main+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a2b      	ldr	r2, [pc, #172]	; (8000668 <main+0xcc>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c0:	f003 ff48 	bl	8004454 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start(); //Already done in UART

  status = xTaskCreate( LedGreenTask, "Led_Green_Task", 200, NULL , 2, &GreenTaskHandle );
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	4926      	ldr	r1, [pc, #152]	; (800066c <main+0xd0>)
 80005d4:	4826      	ldr	r0, [pc, #152]	; (8000670 <main+0xd4>)
 80005d6:	f002 f90f 	bl	80027f8 <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x5a>
  status = xTaskCreate( LedRedTask, "Led_Red_Task", 200, NULL , 2, &RedTaskHandle );
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	491b      	ldr	r1, [pc, #108]	; (8000674 <main+0xd8>)
 8000608:	481b      	ldr	r0, [pc, #108]	; (8000678 <main+0xdc>)
 800060a:	f002 f8f5 	bl	80027f8 <xTaskCreate>
 800060e:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00a      	beq.n	800062c <main+0x90>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	617b      	str	r3, [r7, #20]
    }
 8000628:	bf00      	nop
 800062a:	e7fe      	b.n	800062a <main+0x8e>
  status = xTaskCreate( LedYellowTask, "Led_Yellow_Task", 200, NULL , 2, &YellowTaskHandle );
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	2302      	movs	r3, #2
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	22c8      	movs	r2, #200	; 0xc8
 8000638:	4910      	ldr	r1, [pc, #64]	; (800067c <main+0xe0>)
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <main+0xe4>)
 800063c:	f002 f8dc 	bl	80027f8 <xTaskCreate>
 8000640:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d00a      	beq.n	800065e <main+0xc2>
        __asm volatile
 8000648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064c:	f383 8811 	msr	BASEPRI, r3
 8000650:	f3bf 8f6f 	isb	sy
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	613b      	str	r3, [r7, #16]
    }
 800065a:	bf00      	nop
 800065c:	e7fe      	b.n	800065c <main+0xc0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 800065e:	f002 fab1 	bl	8002bc4 <vTaskStartScheduler>
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0xc6>
 8000664:	0003d090 	.word	0x0003d090
 8000668:	e0001000 	.word	0xe0001000
 800066c:	08006d54 	.word	0x08006d54
 8000670:	080008b1 	.word	0x080008b1
 8000674:	08006d64 	.word	0x08006d64
 8000678:	080008e9 	.word	0x080008e9
 800067c:	08006d74 	.word	0x08006d74
 8000680:	0800091d 	.word	0x0800091d

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fb4a 	bl	8006d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a28      	ldr	r2, [pc, #160]	; (8000754 <SystemClock_Config+0xd0>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a22      	ldr	r2, [pc, #136]	; (8000758 <SystemClock_Config+0xd4>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f8:	23a8      	movs	r3, #168	; 0xa8
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fff7 	bl	8001700 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000718:	f000 f92e 	bl	8000978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2105      	movs	r1, #5
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fcf6 	bl	800112c <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000746:	f000 f917 	bl	8000978 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	; 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b49      	ldr	r3, [pc, #292]	; (800089c <MX_GPIO_Init+0x140>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a48      	ldr	r2, [pc, #288]	; (800089c <MX_GPIO_Init+0x140>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <MX_GPIO_Init+0x140>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b42      	ldr	r3, [pc, #264]	; (800089c <MX_GPIO_Init+0x140>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a41      	ldr	r2, [pc, #260]	; (800089c <MX_GPIO_Init+0x140>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b3f      	ldr	r3, [pc, #252]	; (800089c <MX_GPIO_Init+0x140>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b3b      	ldr	r3, [pc, #236]	; (800089c <MX_GPIO_Init+0x140>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a3a      	ldr	r2, [pc, #232]	; (800089c <MX_GPIO_Init+0x140>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <MX_GPIO_Init+0x140>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <MX_GPIO_Init+0x140>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a33      	ldr	r2, [pc, #204]	; (800089c <MX_GPIO_Init+0x140>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <MX_GPIO_Init+0x140>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 7108 	mov.w	r1, #544	; 0x220
 80007e8:	482d      	ldr	r0, [pc, #180]	; (80008a0 <MX_GPIO_Init+0x144>)
 80007ea:	f000 fc6b 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	482c      	ldr	r0, [pc, #176]	; (80008a4 <MX_GPIO_Init+0x148>)
 80007f4:	f000 fc66 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	482a      	ldr	r0, [pc, #168]	; (80008a8 <MX_GPIO_Init+0x14c>)
 80007fe:	f000 fc61 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <MX_GPIO_Init+0x150>)
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4823      	ldr	r0, [pc, #140]	; (80008a4 <MX_GPIO_Init+0x148>)
 8000818:	f000 fac0 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800081c:	230c      	movs	r3, #12
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800082c:	2307      	movs	r3, #7
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	481a      	ldr	r0, [pc, #104]	; (80008a0 <MX_GPIO_Init+0x144>)
 8000838:	f000 fab0 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800083c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_GPIO_Init+0x144>)
 8000856:	f000 faa1 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <MX_GPIO_Init+0x148>)
 8000872:	f000 fa93 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_GPIO_Init+0x14c>)
 800088e:	f000 fa85 	bl	8000d9c <HAL_GPIO_Init>

}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	; 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	10210000 	.word	0x10210000

080008b0 <LedGreenTask>:

/* USER CODE BEGIN 4 */
void LedGreenTask(void *parameter){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80008b8:	f002 fa94 	bl	8002de4 <xTaskGetTickCount>
 80008bc:	4603      	mov	r3, r0
 80008be:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //D8 or PA9
 80008c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <LedGreenTask+0x30>)
 80008c6:	f000 fc16 	bl	80010f6 <HAL_GPIO_TogglePin>
//		vTaskDelay(1000/portTICK_PERIOD_MS);
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 f8f4 	bl	8002ac0 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("GREEN LED Task");
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <LedGreenTask+0x34>)
 80008da:	f006 f949 	bl	8006b70 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //D8 or PA9
 80008de:	e7ef      	b.n	80008c0 <LedGreenTask+0x10>
 80008e0:	40020000 	.word	0x40020000
 80008e4:	08006d84 	.word	0x08006d84

080008e8 <LedRedTask>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void LedRedTask(void *parameter){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80008f0:	f002 fa78 	bl	8002de4 <xTaskGetTickCount>
 80008f4:	4603      	mov	r3, r0
 80008f6:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //D10 or PB6
 80008f8:	2140      	movs	r1, #64	; 0x40
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <LedRedTask+0x2c>)
 80008fc:	f000 fbfb 	bl	80010f6 <HAL_GPIO_TogglePin>
//		vTaskDelay(250);
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(250));
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	21fa      	movs	r1, #250	; 0xfa
 8000906:	4618      	mov	r0, r3
 8000908:	f002 f8da 	bl	8002ac0 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("RED LED Task");
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <LedRedTask+0x30>)
 800090e:	f006 f92f 	bl	8006b70 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //D10 or PB6
 8000912:	e7f1      	b.n	80008f8 <LedRedTask+0x10>
 8000914:	40020400 	.word	0x40020400
 8000918:	08006d94 	.word	0x08006d94

0800091c <LedYellowTask>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void LedYellowTask(void *parameter){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000924:	f002 fa5e 	bl	8002de4 <xTaskGetTickCount>
 8000928:	4603      	mov	r3, r0
 800092a:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <LedYellowTask+0x30>)
 8000930:	f000 fbe1 	bl	80010f6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(500));
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800093c:	4618      	mov	r0, r3
 800093e:	f002 f8bf 	bl	8002ac0 <xTaskDelayUntil>
//		vTaskDelay(pdMS_TO_TICKS(500));
		SEGGER_SYSVIEW_PrintfTarget("YELLOW LED Task");
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <LedYellowTask+0x34>)
 8000944:	f006 f914 	bl	8006b70 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000948:	e7f0      	b.n	800092c <LedYellowTask+0x10>
 800094a:	bf00      	nop
 800094c:	40020800 	.word	0x40020800
 8000950:	08006da4 	.word	0x08006da4

08000954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 f917 	bl	8000b98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40000c00 	.word	0x40000c00

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009c6:	f003 f98f 	bl	8003ce8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	2032      	movs	r0, #50	; 0x32
 80009ee:	f000 f9ab 	bl	8000d48 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f000 f9c4 	bl	8000d80 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_InitTick+0xa4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_InitTick+0xa4>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_InitTick+0xa4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a14:	f107 0210 	add.w	r2, r7, #16
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fc8a 	bl	8001338 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a24:	f000 fc74 	bl	8001310 <HAL_RCC_GetPCLK1Freq>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9b      	lsrs	r3, r3, #18
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_InitTick+0xac>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_InitTick+0xb0>)
 8000a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_InitTick+0xac>)
 8000a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a48:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_InitTick+0xac>)
 8000a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_InitTick+0xac>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_InitTick+0xac>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_InitTick+0xac>)
 8000a5e:	f001 f8a9 	bl	8001bb4 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d104      	bne.n	8000a72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <HAL_InitTick+0xac>)
 8000a6a:	f001 f8d8 	bl	8001c1e <HAL_TIM_Base_Start_IT>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20014378 	.word	0x20014378
 8000a88:	40000c00 	.word	0x40000c00

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TIM5_IRQHandler+0x10>)
 8000ac6:	f001 f8ce 	bl	8001c66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20014378 	.word	0x20014378

08000ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <SystemInit+0x28>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ade:	4a07      	ldr	r2, [pc, #28]	; (8000afc <SystemInit+0x28>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SystemInit+0x28>)
 8000aea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aee:	609a      	str	r2, [r3, #8]
#endif
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b06:	e003      	b.n	8000b10 <LoopCopyDataInit>

08000b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b0e:	3104      	adds	r1, #4

08000b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b18:	d3f6      	bcc.n	8000b08 <CopyDataInit>
  ldr  r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b1c:	e002      	b.n	8000b24 <LoopFillZerobss>

08000b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b20:	f842 3b04 	str.w	r3, [r2], #4

08000b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b28:	d3f9      	bcc.n	8000b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b2a:	f7ff ffd3 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f006 f8bd 	bl	8006cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fd33 	bl	800059c <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b3c:	08006ee8 	.word	0x08006ee8
  ldr  r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b44:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000b48:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000b4c:	200144a4 	.word	0x200144a4

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_Init+0x40>)
 8000b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_Init+0x40>)
 8000b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_Init+0x40>)
 8000b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f8d8 	bl	8000d32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ff28 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fefe 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023c00 	.word	0x40023c00

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	200143b8 	.word	0x200143b8

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200143b8 	.word	0x200143b8

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	; (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ff4c 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5a:	f7ff ff61 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	6978      	ldr	r0, [r7, #20]
 8000d66:	f7ff ffb1 	bl	8000ccc <NVIC_EncodePriority>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff80 	bl	8000c78 <__NVIC_SetPriority>
}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff54 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	e165      	b.n	8001084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f040 8154 	bne.w	800107e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d00b      	beq.n	8000df6 <HAL_GPIO_Init+0x5a>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dea:	2b11      	cmp	r3, #17
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d130      	bne.n	8000e58 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	f003 0201 	and.w	r2, r3, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0xfc>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b12      	cmp	r3, #18
 8000e96:	d123      	bne.n	8000ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	69b9      	ldr	r1, [r7, #24]
 8000edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0203 	and.w	r2, r3, #3
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80ae 	beq.w	800107e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b5d      	ldr	r3, [pc, #372]	; (800109c <HAL_GPIO_Init+0x300>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a5c      	ldr	r2, [pc, #368]	; (800109c <HAL_GPIO_Init+0x300>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b5a      	ldr	r3, [pc, #360]	; (800109c <HAL_GPIO_Init+0x300>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3e:	4a58      	ldr	r2, [pc, #352]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_GPIO_Init+0x308>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x21a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x216>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4d      	ldr	r2, [pc, #308]	; (80010ac <HAL_GPIO_Init+0x310>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x212>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_GPIO_Init+0x314>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x20e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <HAL_GPIO_Init+0x318>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x20a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4a      	ldr	r2, [pc, #296]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x206>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a49      	ldr	r2, [pc, #292]	; (80010bc <HAL_GPIO_Init+0x320>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x202>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e00c      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e00a      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x21c>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_GPIO_Init+0x324>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104e:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_GPIO_Init+0x324>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f ae96 	bls.w	8000db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40021400 	.word	0x40021400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40013c00 	.word	0x40013c00

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	401a      	ands	r2, r3
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	429a      	cmp	r2, r3
 800110e:	d104      	bne.n	800111a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	041a      	lsls	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001118:	e002      	b.n	8001120 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0cc      	b.n	80012da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001140:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d90c      	bls.n	8001168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114e:	4b65      	ldr	r3, [pc, #404]	; (80012e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001156:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d001      	beq.n	8001168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0b8      	b.n	80012da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4a58      	ldr	r2, [pc, #352]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800118a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001198:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a4:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	494d      	ldr	r1, [pc, #308]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d044      	beq.n	800124c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d107      	bne.n	80011da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d119      	bne.n	800120a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e07f      	b.n	80012da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d003      	beq.n	80011ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d107      	bne.n	80011fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d109      	bne.n	800120a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e06f      	b.n	80012da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e067      	b.n	80012da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120a:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f023 0203 	bic.w	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4934      	ldr	r1, [pc, #208]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	4313      	orrs	r3, r2
 800121a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800121c:	f7ff fcd0 	bl	8000bc0 <HAL_GetTick>
 8001220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001222:	e00a      	b.n	800123a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001224:	f7ff fccc 	bl	8000bc0 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001232:	4293      	cmp	r3, r2
 8001234:	d901      	bls.n	800123a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e04f      	b.n	80012da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 020c 	and.w	r2, r3, #12
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	429a      	cmp	r2, r3
 800124a:	d1eb      	bne.n	8001224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_RCC_ClockConfig+0x1b8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d20c      	bcs.n	8001274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d001      	beq.n	8001274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e032      	b.n	80012da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	4916      	ldr	r1, [pc, #88]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	4313      	orrs	r3, r2
 8001290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d009      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	490e      	ldr	r1, [pc, #56]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012b2:	f000 f873 	bl	800139c <HAL_RCC_GetSysClockFreq>
 80012b6:	4602      	mov	r2, r0
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	490a      	ldr	r1, [pc, #40]	; (80012ec <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	5ccb      	ldrb	r3, [r1, r3]
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_RCC_ClockConfig+0x1c8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fb80 	bl	80009d8 <HAL_InitTick>

  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00
 80012e8:	40023800 	.word	0x40023800
 80012ec:	08006e98 	.word	0x08006e98
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_RCC_GetHCLKFreq+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000

08001310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001314:	f7ff fff0 	bl	80012f8 <HAL_RCC_GetHCLKFreq>
 8001318:	4602      	mov	r2, r0
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	0a9b      	lsrs	r3, r3, #10
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	4903      	ldr	r1, [pc, #12]	; (8001334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001326:	5ccb      	ldrb	r3, [r1, r3]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	08006ea8 	.word	0x08006ea8

08001338 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	220f      	movs	r2, #15
 8001346:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_RCC_GetClockConfig+0x5c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_RCC_GetClockConfig+0x5c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_RCC_GetClockConfig+0x5c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_GetClockConfig+0x5c>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	08db      	lsrs	r3, r3, #3
 8001372:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_RCC_GetClockConfig+0x60>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 020f 	and.w	r2, r3, #15
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40023c00 	.word	0x40023c00

0800139c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800139c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a0:	b088      	sub	sp, #32
 80013a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013b8:	4bce      	ldr	r3, [pc, #824]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	f200 818d 	bhi.w	80016e0 <HAL_RCC_GetSysClockFreq+0x344>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <HAL_RCC_GetSysClockFreq+0x30>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	08001401 	.word	0x08001401
 80013d0:	080016e1 	.word	0x080016e1
 80013d4:	080016e1 	.word	0x080016e1
 80013d8:	080016e1 	.word	0x080016e1
 80013dc:	08001407 	.word	0x08001407
 80013e0:	080016e1 	.word	0x080016e1
 80013e4:	080016e1 	.word	0x080016e1
 80013e8:	080016e1 	.word	0x080016e1
 80013ec:	0800140d 	.word	0x0800140d
 80013f0:	080016e1 	.word	0x080016e1
 80013f4:	080016e1 	.word	0x080016e1
 80013f8:	080016e1 	.word	0x080016e1
 80013fc:	08001581 	.word	0x08001581
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001400:	4bbd      	ldr	r3, [pc, #756]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001402:	61bb      	str	r3, [r7, #24]
       break;
 8001404:	e16f      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001406:	4bbd      	ldr	r3, [pc, #756]	; (80016fc <HAL_RCC_GetSysClockFreq+0x360>)
 8001408:	61bb      	str	r3, [r7, #24]
      break;
 800140a:	e16c      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800140c:	4bb9      	ldr	r3, [pc, #740]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001414:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001416:	4bb7      	ldr	r3, [pc, #732]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d053      	beq.n	80014ca <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001422:	4bb4      	ldr	r3, [pc, #720]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	099b      	lsrs	r3, r3, #6
 8001428:	461a      	mov	r2, r3
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001432:	f04f 0100 	mov.w	r1, #0
 8001436:	ea02 0400 	and.w	r4, r2, r0
 800143a:	603c      	str	r4, [r7, #0]
 800143c:	400b      	ands	r3, r1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001444:	4620      	mov	r0, r4
 8001446:	4629      	mov	r1, r5
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	014b      	lsls	r3, r1, #5
 8001452:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001456:	0142      	lsls	r2, r0, #5
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	4623      	mov	r3, r4
 800145e:	1ac0      	subs	r0, r0, r3
 8001460:	462b      	mov	r3, r5
 8001462:	eb61 0103 	sbc.w	r1, r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	018b      	lsls	r3, r1, #6
 8001470:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001474:	0182      	lsls	r2, r0, #6
 8001476:	1a12      	subs	r2, r2, r0
 8001478:	eb63 0301 	sbc.w	r3, r3, r1
 800147c:	f04f 0000 	mov.w	r0, #0
 8001480:	f04f 0100 	mov.w	r1, #0
 8001484:	00d9      	lsls	r1, r3, #3
 8001486:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800148a:	00d0      	lsls	r0, r2, #3
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4621      	mov	r1, r4
 8001492:	1852      	adds	r2, r2, r1
 8001494:	4629      	mov	r1, r5
 8001496:	eb43 0101 	adc.w	r1, r3, r1
 800149a:	460b      	mov	r3, r1
 800149c:	f04f 0000 	mov.w	r0, #0
 80014a0:	f04f 0100 	mov.w	r1, #0
 80014a4:	0259      	lsls	r1, r3, #9
 80014a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80014aa:	0250      	lsls	r0, r2, #9
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	461a      	mov	r2, r3
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f7fe fef2 	bl	80002a4 <__aeabi_uldivmod>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4613      	mov	r3, r2
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	e04c      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ca:	4b8a      	ldr	r3, [pc, #552]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	099b      	lsrs	r3, r3, #6
 80014d0:	461a      	mov	r2, r3
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	ea02 0a00 	and.w	sl, r2, r0
 80014e2:	ea03 0b01 	and.w	fp, r3, r1
 80014e6:	4650      	mov	r0, sl
 80014e8:	4659      	mov	r1, fp
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	014b      	lsls	r3, r1, #5
 80014f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014f8:	0142      	lsls	r2, r0, #5
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	ebb0 000a 	subs.w	r0, r0, sl
 8001502:	eb61 010b 	sbc.w	r1, r1, fp
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	018b      	lsls	r3, r1, #6
 8001510:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001514:	0182      	lsls	r2, r0, #6
 8001516:	1a12      	subs	r2, r2, r0
 8001518:	eb63 0301 	sbc.w	r3, r3, r1
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	f04f 0100 	mov.w	r1, #0
 8001524:	00d9      	lsls	r1, r3, #3
 8001526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800152a:	00d0      	lsls	r0, r2, #3
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	eb12 020a 	adds.w	r2, r2, sl
 8001534:	eb43 030b 	adc.w	r3, r3, fp
 8001538:	f04f 0000 	mov.w	r0, #0
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	0299      	lsls	r1, r3, #10
 8001542:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001546:	0290      	lsls	r0, r2, #10
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	461a      	mov	r2, r3
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	f7fe fea4 	bl	80002a4 <__aeabi_uldivmod>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4613      	mov	r3, r2
 8001562:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001564:	4b63      	ldr	r3, [pc, #396]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	3301      	adds	r3, #1
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	fbb2 f3f3 	udiv	r3, r2, r3
 800157c:	61bb      	str	r3, [r7, #24]
      break;
 800157e:	e0b2      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001580:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001588:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800158a:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d04d      	beq.n	8001632 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001596:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	099b      	lsrs	r3, r3, #6
 800159c:	461a      	mov	r2, r3
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015a6:	f04f 0100 	mov.w	r1, #0
 80015aa:	ea02 0800 	and.w	r8, r2, r0
 80015ae:	ea03 0901 	and.w	r9, r3, r1
 80015b2:	4640      	mov	r0, r8
 80015b4:	4649      	mov	r1, r9
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	014b      	lsls	r3, r1, #5
 80015c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015c4:	0142      	lsls	r2, r0, #5
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	ebb0 0008 	subs.w	r0, r0, r8
 80015ce:	eb61 0109 	sbc.w	r1, r1, r9
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	018b      	lsls	r3, r1, #6
 80015dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015e0:	0182      	lsls	r2, r0, #6
 80015e2:	1a12      	subs	r2, r2, r0
 80015e4:	eb63 0301 	sbc.w	r3, r3, r1
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	00d9      	lsls	r1, r3, #3
 80015f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015f6:	00d0      	lsls	r0, r2, #3
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	eb12 0208 	adds.w	r2, r2, r8
 8001600:	eb43 0309 	adc.w	r3, r3, r9
 8001604:	f04f 0000 	mov.w	r0, #0
 8001608:	f04f 0100 	mov.w	r1, #0
 800160c:	0259      	lsls	r1, r3, #9
 800160e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001612:	0250      	lsls	r0, r2, #9
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	461a      	mov	r2, r3
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	f7fe fe3e 	bl	80002a4 <__aeabi_uldivmod>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4613      	mov	r3, r2
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	e04a      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	099b      	lsrs	r3, r3, #6
 8001638:	461a      	mov	r2, r3
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001642:	f04f 0100 	mov.w	r1, #0
 8001646:	ea02 0400 	and.w	r4, r2, r0
 800164a:	ea03 0501 	and.w	r5, r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	014b      	lsls	r3, r1, #5
 800165c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001660:	0142      	lsls	r2, r0, #5
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	1b00      	subs	r0, r0, r4
 8001668:	eb61 0105 	sbc.w	r1, r1, r5
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	018b      	lsls	r3, r1, #6
 8001676:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800167a:	0182      	lsls	r2, r0, #6
 800167c:	1a12      	subs	r2, r2, r0
 800167e:	eb63 0301 	sbc.w	r3, r3, r1
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	00d9      	lsls	r1, r3, #3
 800168c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001690:	00d0      	lsls	r0, r2, #3
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	1912      	adds	r2, r2, r4
 8001698:	eb45 0303 	adc.w	r3, r5, r3
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	f04f 0100 	mov.w	r1, #0
 80016a4:	0299      	lsls	r1, r3, #10
 80016a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016aa:	0290      	lsls	r0, r2, #10
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	461a      	mov	r2, r3
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	f7fe fdf2 	bl	80002a4 <__aeabi_uldivmod>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4613      	mov	r3, r2
 80016c6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x358>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	0f1b      	lsrs	r3, r3, #28
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	61bb      	str	r3, [r7, #24]
      break;
 80016de:	e002      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016e2:	61bb      	str	r3, [r7, #24]
      break;
 80016e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e6:	69bb      	ldr	r3, [r7, #24]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	007a1200 	.word	0x007a1200

08001700 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8083 	beq.w	8001820 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800171a:	4b95      	ldr	r3, [pc, #596]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b04      	cmp	r3, #4
 8001724:	d019      	beq.n	800175a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001726:	4b92      	ldr	r3, [pc, #584]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800172e:	2b08      	cmp	r3, #8
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001732:	4b8f      	ldr	r3, [pc, #572]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800173e:	d00c      	beq.n	800175a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001740:	4b8b      	ldr	r3, [pc, #556]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d112      	bne.n	8001772 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174c:	4b88      	ldr	r3, [pc, #544]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001758:	d10b      	bne.n	8001772 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175a:	4b85      	ldr	r3, [pc, #532]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d05b      	beq.n	800181e <HAL_RCC_OscConfig+0x11e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d157      	bne.n	800181e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e216      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x8a>
 800177c:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a7b      	ldr	r2, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e01d      	b.n	80017c6 <HAL_RCC_OscConfig+0xc6>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001792:	d10c      	bne.n	80017ae <HAL_RCC_OscConfig+0xae>
 8001794:	4b76      	ldr	r3, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a75      	ldr	r2, [pc, #468]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800179a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a72      	ldr	r2, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_OscConfig+0xc6>
 80017ae:	4b70      	ldr	r3, [pc, #448]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6f      	ldr	r2, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a6c      	ldr	r2, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d013      	beq.n	80017f6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f9f7 	bl	8000bc0 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d6:	f7ff f9f3 	bl	8000bc0 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b64      	cmp	r3, #100	; 0x64
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1db      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e8:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0xd6>
 80017f4:	e014      	b.n	8001820 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff f9e3 	bl	8000bc0 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fe:	f7ff f9df 	bl	8000bc0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b64      	cmp	r3, #100	; 0x64
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1c7      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001810:	4b57      	ldr	r3, [pc, #348]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0xfe>
 800181c:	e000      	b.n	8001820 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d06f      	beq.n	800190c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b00      	cmp	r3, #0
 8001836:	d017      	beq.n	8001868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001838:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001840:	2b08      	cmp	r3, #8
 8001842:	d105      	bne.n	8001850 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001844:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00b      	beq.n	8001868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001850:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d11c      	bne.n	8001896 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185c:	4b44      	ldr	r3, [pc, #272]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d116      	bne.n	8001896 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001868:	4b41      	ldr	r3, [pc, #260]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x180>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d001      	beq.n	8001880 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e18f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4938      	ldr	r1, [pc, #224]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001894:	e03a      	b.n	800190c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d020      	beq.n	80018e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189e:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_RCC_OscConfig+0x274>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f98c 	bl	8000bc0 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff f988 	bl	8000bc0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e170      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4925      	ldr	r1, [pc, #148]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
 80018de:	e015      	b.n	800190c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_RCC_OscConfig+0x274>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff f96b 	bl	8000bc0 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff f967 	bl	8000bc0 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e14f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d037      	beq.n	8001988 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d016      	beq.n	800194e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_RCC_OscConfig+0x278>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff f94b 	bl	8000bc0 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff f947 	bl	8000bc0 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e12f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x22e>
 800194c:	e01c      	b.n	8001988 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_OscConfig+0x278>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff f934 	bl	8000bc0 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195a:	e00f      	b.n	800197c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff f930 	bl	8000bc0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d908      	bls.n	800197c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e118      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	42470000 	.word	0x42470000
 8001978:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	4b8a      	ldr	r3, [pc, #552]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 800197e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e9      	bne.n	800195c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8097 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199a:	4b83      	ldr	r3, [pc, #524]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10f      	bne.n	80019c6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b7f      	ldr	r3, [pc, #508]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a7e      	ldr	r2, [pc, #504]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b7c      	ldr	r3, [pc, #496]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	4b79      	ldr	r3, [pc, #484]	; (8001bac <HAL_RCC_OscConfig+0x4ac>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d118      	bne.n	8001a04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d2:	4b76      	ldr	r3, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a75      	ldr	r2, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019de:	f7ff f8ef 	bl	8000bc0 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7ff f8eb 	bl	8000bc0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0d3      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b6c      	ldr	r3, [pc, #432]	; (8001bac <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x31a>
 8001a0c:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	4a65      	ldr	r2, [pc, #404]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6713      	str	r3, [r2, #112]	; 0x70
 8001a18:	e01c      	b.n	8001a54 <HAL_RCC_OscConfig+0x354>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x33c>
 8001a22:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a60      	ldr	r2, [pc, #384]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4a5d      	ldr	r2, [pc, #372]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0x354>
 8001a3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	6713      	str	r3, [r2, #112]	; 0x70
 8001a48:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4c:	4a56      	ldr	r2, [pc, #344]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a4e:	f023 0304 	bic.w	r3, r3, #4
 8001a52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d015      	beq.n	8001a88 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f8b0 	bl	8000bc0 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff f8ac 	bl	8000bc0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e092      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0ee      	beq.n	8001a64 <HAL_RCC_OscConfig+0x364>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff f89a 	bl	8000bc0 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7ff f896 	bl	8000bc0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e07c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1ee      	bne.n	8001a90 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	4a3a      	ldr	r2, [pc, #232]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d068      	beq.n	8001b9e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d060      	beq.n	8001b9a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d145      	bne.n	8001b6c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_RCC_OscConfig+0x4b0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f86b 	bl	8000bc0 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff f867 	bl	8000bc0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e04f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	019b      	lsls	r3, r3, #6
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	3b01      	subs	r3, #1
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	061b      	lsls	r3, r3, #24
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	071b      	lsls	r3, r3, #28
 8001b38:	491b      	ldr	r1, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_RCC_OscConfig+0x4b0>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f83c 	bl	8000bc0 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f838 	bl	8000bc0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e020      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x44c>
 8001b6a:	e018      	b.n	8001b9e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_RCC_OscConfig+0x4b0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff f825 	bl	8000bc0 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff f821 	bl	8000bc0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e009      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_OscConfig+0x4a8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x47a>
 8001b98:	e001      	b.n	8001b9e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000
 8001bb0:	42470060 	.word	0x42470060

08001bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e01d      	b.n	8001c02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f815 	bl	8001c0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f000 f968 	bl	8001ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b06      	cmp	r3, #6
 8001c46:	d007      	beq.n	8001c58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d122      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d11b      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0202 	mvn.w	r2, #2
 8001c92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8ee 	bl	8001e8a <HAL_TIM_IC_CaptureCallback>
 8001cae:	e005      	b.n	8001cbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f8e0 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8f1 	bl	8001e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d122      	bne.n	8001d16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d11b      	bne.n	8001d16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0204 	mvn.w	r2, #4
 8001ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8c4 	bl	8001e8a <HAL_TIM_IC_CaptureCallback>
 8001d02:	e005      	b.n	8001d10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8b6 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8c7 	bl	8001e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d122      	bne.n	8001d6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11b      	bne.n	8001d6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f06f 0208 	mvn.w	r2, #8
 8001d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f89a 	bl	8001e8a <HAL_TIM_IC_CaptureCallback>
 8001d56:	e005      	b.n	8001d64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f88c 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f89d 	bl	8001e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b10      	cmp	r3, #16
 8001d76:	d122      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d11b      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f06f 0210 	mvn.w	r2, #16
 8001d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2208      	movs	r2, #8
 8001d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f870 	bl	8001e8a <HAL_TIM_IC_CaptureCallback>
 8001daa:	e005      	b.n	8001db8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f862 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f873 	bl	8001e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d10e      	bne.n	8001dea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0201 	mvn.w	r2, #1
 8001de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7fe fdb5 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	2b80      	cmp	r3, #128	; 0x80
 8001df6:	d10e      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f903 	bl	800201c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e20:	2b40      	cmp	r3, #64	; 0x40
 8001e22:	d10e      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2e:	2b40      	cmp	r3, #64	; 0x40
 8001e30:	d107      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f838 	bl	8001eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d10e      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d107      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0220 	mvn.w	r2, #32
 8001e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f8cd 	bl	8002008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <TIM_Base_SetConfig+0x114>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee6:	d00f      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3d      	ldr	r2, [pc, #244]	; (8001fe0 <TIM_Base_SetConfig+0x118>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00b      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3c      	ldr	r2, [pc, #240]	; (8001fe4 <TIM_Base_SetConfig+0x11c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3b      	ldr	r2, [pc, #236]	; (8001fe8 <TIM_Base_SetConfig+0x120>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3a      	ldr	r2, [pc, #232]	; (8001fec <TIM_Base_SetConfig+0x124>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d108      	bne.n	8001f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <TIM_Base_SetConfig+0x114>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02b      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d027      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <TIM_Base_SetConfig+0x118>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d023      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <TIM_Base_SetConfig+0x11c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <TIM_Base_SetConfig+0x120>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01b      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a29      	ldr	r2, [pc, #164]	; (8001fec <TIM_Base_SetConfig+0x124>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d017      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <TIM_Base_SetConfig+0x128>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <TIM_Base_SetConfig+0x12c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00f      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <TIM_Base_SetConfig+0x130>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <TIM_Base_SetConfig+0x134>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a24      	ldr	r2, [pc, #144]	; (8002000 <TIM_Base_SetConfig+0x138>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a23      	ldr	r2, [pc, #140]	; (8002004 <TIM_Base_SetConfig+0x13c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <TIM_Base_SetConfig+0x114>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <TIM_Base_SetConfig+0xf8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <TIM_Base_SetConfig+0x124>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d103      	bne.n	8001fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	615a      	str	r2, [r3, #20]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40010400 	.word	0x40010400
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400
 8001ff8:	40014800 	.word	0x40014800
 8001ffc:	40001800 	.word	0x40001800
 8002000:	40001c00 	.word	0x40001c00
 8002004:	40002000 	.word	0x40002000

08002008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f103 0208 	add.w	r2, r3, #8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f103 0208 	add.w	r2, r3, #8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f103 0208 	add.w	r2, r3, #8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	601a      	str	r2, [r3, #0]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d103      	bne.n	80020f2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e00c      	b.n	800210c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3308      	adds	r3, #8
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e002      	b.n	8002100 <vListInsert+0x2e>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	429a      	cmp	r2, r3
 800210a:	d2f6      	bcs.n	80020fa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6892      	ldr	r2, [r2, #8]
 800215a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6852      	ldr	r2, [r2, #4]
 8002164:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d103      	bne.n	8002178 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1e5a      	subs	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021a2:	2301      	movs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <xQueueGenericReset+0x2e>
        __asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	60fb      	str	r3, [r7, #12]
    }
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05d      	beq.n	8002288 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d059      	beq.n	8002288 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	2100      	movs	r1, #0
 80021de:	fba3 2302 	umull	r2, r3, r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d000      	beq.n	80021e8 <xQueueGenericReset+0x50>
 80021e6:	2101      	movs	r1, #1
 80021e8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d14c      	bne.n	8002288 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80021ee:	f001 fdf9 	bl	8003de4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	6939      	ldr	r1, [r7, #16]
 80021fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	441a      	add	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2200      	movs	r2, #0
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221e:	3b01      	subs	r3, #1
 8002220:	6939      	ldr	r1, [r7, #16]
 8002222:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	441a      	add	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	22ff      	movs	r2, #255	; 0xff
 8002232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	22ff      	movs	r2, #255	; 0xff
 800223a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d114      	bne.n	800226e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01a      	beq.n	8002282 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3310      	adds	r3, #16
 8002250:	4618      	mov	r0, r3
 8002252:	f000 ff61 	bl	8003118 <xTaskRemoveFromEventList>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <xQueueGenericReset+0x11c>)
 800225e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	e009      	b.n	8002282 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	3310      	adds	r3, #16
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fedc 	bl	8002030 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	3324      	adds	r3, #36	; 0x24
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fed7 	bl	8002030 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002282:	f001 fddf 	bl	8003e44 <vPortExitCritical>
 8002286:	e001      	b.n	800228c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <xQueueGenericReset+0x110>
        __asm volatile
 8002292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	60bb      	str	r3, [r7, #8]
    }
 80022a4:	bf00      	nop
 80022a6:	e7fe      	b.n	80022a6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022a8:	697b      	ldr	r3, [r7, #20]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000ed04 	.word	0xe000ed04

080022b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	4613      	mov	r3, r2
 80022c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02e      	beq.n	800232e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022d0:	2100      	movs	r1, #0
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	fba3 2302 	umull	r2, r3, r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d000      	beq.n	80022e0 <xQueueGenericCreate+0x28>
 80022de:	2101      	movs	r1, #1
 80022e0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d123      	bne.n	800232e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022ee:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022f2:	d81c      	bhi.n	800232e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	3350      	adds	r3, #80	; 0x50
 8002302:	4618      	mov	r0, r3
 8002304:	f001 fe9a 	bl	800403c <pvPortMalloc>
 8002308:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01c      	beq.n	800234a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3350      	adds	r3, #80	; 0x50
 8002318:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800231a:	79fa      	ldrb	r2, [r7, #7]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f814 	bl	8002354 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800232c:	e00d      	b.n	800234a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <xQueueGenericCreate+0x92>
        __asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	613b      	str	r3, [r7, #16]
    }
 8002346:	bf00      	nop
 8002348:	e7fe      	b.n	8002348 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800234a:	69fb      	ldr	r3, [r7, #28]
    }
 800234c:	4618      	mov	r0, r3
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e002      	b.n	8002376 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002382:	2101      	movs	r1, #1
 8002384:	69b8      	ldr	r0, [r7, #24]
 8002386:	f7ff ff07 	bl	8002198 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	68f9      	ldr	r1, [r7, #12]
 8002398:	2073      	movs	r0, #115	; 0x73
 800239a:	f003 fd6f 	bl	8005e7c <SEGGER_SYSVIEW_RecordU32x3>
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b08f      	sub	sp, #60	; 0x3c
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <xQueueReceive+0x30>
        __asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	623b      	str	r3, [r7, #32]
    }
 80023d4:	bf00      	nop
 80023d6:	e7fe      	b.n	80023d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <xQueueReceive+0x3e>
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <xQueueReceive+0x42>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <xQueueReceive+0x44>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <xQueueReceive+0x5e>
        __asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	61fb      	str	r3, [r7, #28]
    }
 8002402:	bf00      	nop
 8002404:	e7fe      	b.n	8002404 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002406:	f001 f827 	bl	8003458 <xTaskGetSchedulerState>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <xQueueReceive+0x6e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <xQueueReceive+0x72>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <xQueueReceive+0x74>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueReceive+0x8e>
        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	61bb      	str	r3, [r7, #24]
    }
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002436:	f001 fcd5 	bl	8003de4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2b00      	cmp	r3, #0
 8002444:	d02f      	beq.n	80024a6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800244a:	f000 f8bd 	bl	80025c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	4618      	mov	r0, r3
 8002452:	f004 faa1 	bl	8006998 <SEGGER_SYSVIEW_ShrinkId>
 8002456:	4604      	mov	r4, r0
 8002458:	2000      	movs	r0, #0
 800245a:	f004 fa9d 	bl	8006998 <SEGGER_SYSVIEW_ShrinkId>
 800245e:	4602      	mov	r2, r0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2101      	movs	r1, #1
 8002464:	9100      	str	r1, [sp, #0]
 8002466:	4621      	mov	r1, r4
 8002468:	205c      	movs	r0, #92	; 0x5c
 800246a:	f003 fd7d 	bl	8005f68 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00f      	beq.n	800249e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	3310      	adds	r3, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fe48 	bl	8003118 <xTaskRemoveFromEventList>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <xQueueReceive+0x21c>)
 8002490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800249e:	f001 fcd1 	bl	8003e44 <vPortExitCritical>
                return pdPASS;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e08a      	b.n	80025bc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d113      	bne.n	80024d4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024ac:	f001 fcca 	bl	8003e44 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	4618      	mov	r0, r3
 80024b4:	f004 fa70 	bl	8006998 <SEGGER_SYSVIEW_ShrinkId>
 80024b8:	4604      	mov	r4, r0
 80024ba:	2000      	movs	r0, #0
 80024bc:	f004 fa6c 	bl	8006998 <SEGGER_SYSVIEW_ShrinkId>
 80024c0:	4602      	mov	r2, r0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2101      	movs	r1, #1
 80024c6:	9100      	str	r1, [sp, #0]
 80024c8:	4621      	mov	r1, r4
 80024ca:	205c      	movs	r0, #92	; 0x5c
 80024cc:	f003 fd4c 	bl	8005f68 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e073      	b.n	80025bc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fe80 	bl	80031e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024e8:	f001 fcac 	bl	8003e44 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024ec:	f000 fbcc 	bl	8002c88 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024f0:	f001 fc78 	bl	8003de4 <vPortEnterCritical>
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d103      	bne.n	800250a <xQueueReceive+0x162>
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002510:	b25b      	sxtb	r3, r3
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d103      	bne.n	8002520 <xQueueReceive+0x178>
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002520:	f001 fc90 	bl	8003e44 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002524:	1d3a      	adds	r2, r7, #4
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fe6f 	bl	8003210 <xTaskCheckForTimeOut>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d124      	bne.n	8002582 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253a:	f000 f8bd 	bl	80026b8 <prvIsQueueEmpty>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d018      	beq.n	8002576 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	3324      	adds	r3, #36	; 0x24
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fd91 	bl	8003074 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002554:	f000 f85e 	bl	8002614 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002558:	f000 fba4 	bl	8002ca4 <xTaskResumeAll>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	f47f af69 	bne.w	8002436 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <xQueueReceive+0x21c>)
 8002566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	e75f      	b.n	8002436 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002578:	f000 f84c 	bl	8002614 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800257c:	f000 fb92 	bl	8002ca4 <xTaskResumeAll>
 8002580:	e759      	b.n	8002436 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002584:	f000 f846 	bl	8002614 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002588:	f000 fb8c 	bl	8002ca4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800258c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800258e:	f000 f893 	bl	80026b8 <prvIsQueueEmpty>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	f43f af4e 	beq.w	8002436 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	4618      	mov	r0, r3
 800259e:	f004 f9fb 	bl	8006998 <SEGGER_SYSVIEW_ShrinkId>
 80025a2:	4604      	mov	r4, r0
 80025a4:	2000      	movs	r0, #0
 80025a6:	f004 f9f7 	bl	8006998 <SEGGER_SYSVIEW_ShrinkId>
 80025aa:	4602      	mov	r2, r0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2101      	movs	r1, #1
 80025b0:	9100      	str	r1, [sp, #0]
 80025b2:	4621      	mov	r1, r4
 80025b4:	205c      	movs	r0, #92	; 0x5c
 80025b6:	f003 fcd7 	bl	8005f68 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80025ba:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3734      	adds	r7, #52	; 0x34
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d018      	beq.n	800260c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	441a      	add	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d303      	bcc.n	80025fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68d9      	ldr	r1, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	461a      	mov	r2, r3
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	f004 fb82 	bl	8006d10 <memcpy>
    }
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800261c:	f001 fbe2 	bl	8003de4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002626:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002628:	e011      	b.n	800264e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3324      	adds	r3, #36	; 0x24
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fd6e 	bl	8003118 <xTaskRemoveFromEventList>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002642:	f000 fe4b 	bl	80032dc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3b01      	subs	r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	dce9      	bgt.n	800262a <prvUnlockQueue+0x16>
 8002656:	e000      	b.n	800265a <prvUnlockQueue+0x46>
                        break;
 8002658:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	22ff      	movs	r2, #255	; 0xff
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002662:	f001 fbef 	bl	8003e44 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002666:	f001 fbbd 	bl	8003de4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002670:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002672:	e011      	b.n	8002698 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3310      	adds	r3, #16
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fd49 	bl	8003118 <xTaskRemoveFromEventList>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800268c:	f000 fe26 	bl	80032dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002690:	7bbb      	ldrb	r3, [r7, #14]
 8002692:	3b01      	subs	r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800269c:	2b00      	cmp	r3, #0
 800269e:	dce9      	bgt.n	8002674 <prvUnlockQueue+0x60>
 80026a0:	e000      	b.n	80026a4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026a2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	22ff      	movs	r2, #255	; 0xff
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80026ac:	f001 fbca 	bl	8003e44 <vPortExitCritical>
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026c0:	f001 fb90 	bl	8003de4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e001      	b.n	80026d6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026d6:	f001 fbb5 	bl	8003e44 <vPortExitCritical>

    return xReturn;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <vQueueAddToRegistry+0x26>
        __asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	60fb      	str	r3, [r7, #12]
    }
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d024      	beq.n	800275e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e01e      	b.n	8002758 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800271a:	4a1c      	ldr	r2, [pc, #112]	; (800278c <vQueueAddToRegistry+0xa8>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	429a      	cmp	r2, r3
 8002728:	d105      	bne.n	8002736 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4a17      	ldr	r2, [pc, #92]	; (800278c <vQueueAddToRegistry+0xa8>)
 8002730:	4413      	add	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
                    break;
 8002734:	e013      	b.n	800275e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <vQueueAddToRegistry+0x6e>
 800273c:	4a13      	ldr	r2, [pc, #76]	; (800278c <vQueueAddToRegistry+0xa8>)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4a0f      	ldr	r2, [pc, #60]	; (800278c <vQueueAddToRegistry+0xa8>)
 800274e:	4413      	add	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b07      	cmp	r3, #7
 800275c:	d9dd      	bls.n	800271a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00f      	beq.n	8002784 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4618      	mov	r0, r3
 8002774:	f004 f910 	bl	8006998 <SEGGER_SYSVIEW_ShrinkId>
 8002778:	4601      	mov	r1, r0
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	2071      	movs	r0, #113	; 0x71
 8002780:	f003 fb22 	bl	8005dc8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002784:	bf00      	nop
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200143bc 	.word	0x200143bc

08002790 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027a0:	f001 fb20 	bl	8003de4 <vPortEnterCritical>
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d103      	bne.n	80027ba <vQueueWaitForMessageRestricted+0x2a>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d103      	bne.n	80027d0 <vQueueWaitForMessageRestricted+0x40>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d0:	f001 fb38 	bl	8003e44 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fc69 	bl	80030bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff12 	bl	8002614 <prvUnlockQueue>
    }
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af04      	add	r7, sp, #16
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fc15 	bl	800403c <pvPortMalloc>
 8002812:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800281a:	2058      	movs	r0, #88	; 0x58
 800281c:	f001 fc0e 	bl	800403c <pvPortMalloc>
 8002820:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
 800282e:	e005      	b.n	800283c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f001 fce3 	bl	80041fc <vPortFree>
 8002836:	e001      	b.n	800283c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d013      	beq.n	800286a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002842:	88fa      	ldrh	r2, [r7, #6]
 8002844:	2300      	movs	r3, #0
 8002846:	9303      	str	r3, [sp, #12]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f80e 	bl	800287a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800285e:	69f8      	ldr	r0, [r7, #28]
 8002860:	f000 f8a2 	bl	80029a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002864:	2301      	movs	r3, #1
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e002      	b.n	8002870 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002870:	69bb      	ldr	r3, [r7, #24]
    }
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b088      	sub	sp, #32
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	461a      	mov	r2, r3
 8002892:	21a5      	movs	r1, #165	; 0xa5
 8002894:	f004 fa4a 	bl	8006d2c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028a2:	3b01      	subs	r3, #1
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f023 0307 	bic.w	r3, r3, #7
 80028b0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	617b      	str	r3, [r7, #20]
    }
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01f      	beq.n	8002918 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	e012      	b.n	8002904 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	7819      	ldrb	r1, [r3, #0]
 80028e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	3334      	adds	r3, #52	; 0x34
 80028ee:	460a      	mov	r2, r1
 80028f0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3301      	adds	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b09      	cmp	r3, #9
 8002908:	d9e9      	bls.n	80028de <prvInitialiseNewTask+0x64>
 800290a:	e000      	b.n	800290e <prvInitialiseNewTask+0x94>
            {
                break;
 800290c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002916:	e003      	b.n	8002920 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	2b04      	cmp	r3, #4
 8002924:	d901      	bls.n	800292a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002926:	2304      	movs	r3, #4
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002934:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	2200      	movs	r2, #0
 800293a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	3304      	adds	r3, #4
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fb95 	bl	8002070 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	3318      	adds	r3, #24
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fb90 	bl	8002070 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002954:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	f1c3 0205 	rsb	r2, r3, #5
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	3350      	adds	r3, #80	; 0x50
 800296a:	2204      	movs	r2, #4
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f004 f9dc 	bl	8006d2c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	3354      	adds	r3, #84	; 0x54
 8002978:	2201      	movs	r2, #1
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f004 f9d5 	bl	8006d2c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	69b8      	ldr	r0, [r7, #24]
 8002988:	f001 f880 	bl	8003a8c <pxPortInitialiseStack>
 800298c:	4602      	mov	r2, r0
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800299e:	bf00      	nop
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029b0:	f001 fa18 	bl	8003de4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029b4:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <prvAddNewTaskToReadyList+0xfc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	4a3a      	ldr	r2, [pc, #232]	; (8002aa4 <prvAddNewTaskToReadyList+0xfc>)
 80029bc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029be:	4b3a      	ldr	r3, [pc, #232]	; (8002aa8 <prvAddNewTaskToReadyList+0x100>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029c6:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <prvAddNewTaskToReadyList+0x100>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <prvAddNewTaskToReadyList+0xfc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d110      	bne.n	80029f6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029d4:	f000 fca6 	bl	8003324 <prvInitialiseTaskLists>
 80029d8:	e00d      	b.n	80029f6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <prvAddNewTaskToReadyList+0x104>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029e2:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <prvAddNewTaskToReadyList+0x100>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d802      	bhi.n	80029f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029f0:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <prvAddNewTaskToReadyList+0x100>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <prvAddNewTaskToReadyList+0x108>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	4a2c      	ldr	r2, [pc, #176]	; (8002ab0 <prvAddNewTaskToReadyList+0x108>)
 80029fe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <prvAddNewTaskToReadyList+0x108>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d016      	beq.n	8002a3c <prvAddNewTaskToReadyList+0x94>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 fe9b 	bl	800674c <SEGGER_SYSVIEW_OnTaskCreate>
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	461d      	mov	r5, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461c      	mov	r4, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	1ae3      	subs	r3, r4, r3
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	462b      	mov	r3, r5
 8002a38:	f001 fda6 	bl	8004588 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 ff08 	bl	8006854 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	2201      	movs	r2, #1
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <prvAddNewTaskToReadyList+0x10c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <prvAddNewTaskToReadyList+0x10c>)
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <prvAddNewTaskToReadyList+0x110>)
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7ff fb0c 	bl	800208a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a72:	f001 f9e7 	bl	8003e44 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <prvAddNewTaskToReadyList+0x104>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00e      	beq.n	8002a9c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <prvAddNewTaskToReadyList+0x100>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d207      	bcs.n	8002a9c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <prvAddNewTaskToReadyList+0x114>)
 8002a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa4:	20000110 	.word	0x20000110
 8002aa8:	20000038 	.word	0x20000038
 8002aac:	2000011c 	.word	0x2000011c
 8002ab0:	2000012c 	.word	0x2000012c
 8002ab4:	20000118 	.word	0x20000118
 8002ab8:	2000003c 	.word	0x2000003c
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <xTaskDelayUntil+0x2a>
        __asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	617b      	str	r3, [r7, #20]
    }
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xTaskDelayUntil+0x46>
        __asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	613b      	str	r3, [r7, #16]
    }
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8002b06:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <xTaskDelayUntil+0xf8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <xTaskDelayUntil+0x64>
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	60fb      	str	r3, [r7, #12]
    }
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002b24:	f000 f8b0 	bl	8002c88 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002b28:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <xTaskDelayUntil+0xfc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d20b      	bcs.n	8002b5a <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d211      	bcs.n	8002b70 <xTaskDelayUntil+0xb0>
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d90d      	bls.n	8002b70 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	e00a      	b.n	8002b70 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d303      	bcc.n	8002b6c <xTaskDelayUntil+0xac>
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d901      	bls.n	8002b70 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d009      	beq.n	8002b90 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002b7c:	2024      	movs	r0, #36	; 0x24
 8002b7e:	f003 f8c9 	bl	8005d14 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fc82 	bl	8003494 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002b90:	f000 f888 	bl	8002ca4 <xTaskResumeAll>
 8002b94:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <xTaskDelayUntil+0x100>)
 8002b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3728      	adds	r7, #40	; 0x28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000138 	.word	0x20000138
 8002bbc:	20000114 	.word	0x20000114
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <vTaskStartScheduler+0xa4>)
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2282      	movs	r2, #130	; 0x82
 8002bd6:	4925      	ldr	r1, [pc, #148]	; (8002c6c <vTaskStartScheduler+0xa8>)
 8002bd8:	4825      	ldr	r0, [pc, #148]	; (8002c70 <vTaskStartScheduler+0xac>)
 8002bda:	f7ff fe0d 	bl	80027f8 <xTaskCreate>
 8002bde:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d102      	bne.n	8002bec <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002be6:	f000 fccd 	bl	8003584 <xTimerCreateTimerTask>
 8002bea:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d124      	bne.n	8002c3c <vTaskStartScheduler+0x78>
        __asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	60bb      	str	r3, [r7, #8]
    }
 8002c04:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <vTaskStartScheduler+0xb0>)
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <vTaskStartScheduler+0xb4>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <vTaskStartScheduler+0xb8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002c1a:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <vTaskStartScheduler+0xbc>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <vTaskStartScheduler+0xa4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d102      	bne.n	8002c2c <vTaskStartScheduler+0x68>
 8002c26:	f003 fd75 	bl	8006714 <SEGGER_SYSVIEW_OnIdle>
 8002c2a:	e004      	b.n	8002c36 <vTaskStartScheduler+0x72>
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <vTaskStartScheduler+0xbc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fdcd 	bl	80067d0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002c36:	f000 ffb5 	bl	8003ba4 <xPortStartScheduler>
 8002c3a:	e00e      	b.n	8002c5a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c42:	d10a      	bne.n	8002c5a <vTaskStartScheduler+0x96>
        __asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	607b      	str	r3, [r7, #4]
    }
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <vTaskStartScheduler+0xc0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000134 	.word	0x20000134
 8002c6c:	08006db4 	.word	0x08006db4
 8002c70:	080032f5 	.word	0x080032f5
 8002c74:	20000130 	.word	0x20000130
 8002c78:	2000011c 	.word	0x2000011c
 8002c7c:	20000114 	.word	0x20000114
 8002c80:	20000038 	.word	0x20000038
 8002c84:	2000000c 	.word	0x2000000c

08002c88 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <vTaskSuspendAll+0x18>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3301      	adds	r3, #1
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <vTaskSuspendAll+0x18>)
 8002c94:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	20000138 	.word	0x20000138

08002ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <xTaskResumeAll+0x11c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <xTaskResumeAll+0x2c>
        __asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	603b      	str	r3, [r7, #0]
    }
 8002ccc:	bf00      	nop
 8002cce:	e7fe      	b.n	8002cce <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002cd0:	f001 f888 	bl	8003de4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <xTaskResumeAll+0x11c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	4a39      	ldr	r2, [pc, #228]	; (8002dc0 <xTaskResumeAll+0x11c>)
 8002cdc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cde:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <xTaskResumeAll+0x11c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d165      	bne.n	8002db2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <xTaskResumeAll+0x120>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d061      	beq.n	8002db2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cee:	e032      	b.n	8002d56 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cf0:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <xTaskResumeAll+0x124>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fa21 	bl	8002144 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fa1c 	bl	8002144 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 fda0 	bl	8006854 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2201      	movs	r2, #1
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <xTaskResumeAll+0x128>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	4a2a      	ldr	r2, [pc, #168]	; (8002dcc <xTaskResumeAll+0x128>)
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <xTaskResumeAll+0x12c>)
 8002d34:	441a      	add	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7ff f9a4 	bl	800208a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <xTaskResumeAll+0x130>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <xTaskResumeAll+0x134>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <xTaskResumeAll+0x124>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1c8      	bne.n	8002cf0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d64:	f000 fb5c 	bl	8003420 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d68:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <xTaskResumeAll+0x138>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d010      	beq.n	8002d96 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d74:	f000 f858 	bl	8002e28 <xTaskIncrementTick>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <xTaskResumeAll+0x134>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f1      	bne.n	8002d74 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <xTaskResumeAll+0x138>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <xTaskResumeAll+0x134>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <xTaskResumeAll+0x13c>)
 8002da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002db2:	f001 f847 	bl	8003e44 <vPortExitCritical>

    return xAlreadyYielded;
 8002db6:	68bb      	ldr	r3, [r7, #8]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000138 	.word	0x20000138
 8002dc4:	20000110 	.word	0x20000110
 8002dc8:	200000d0 	.word	0x200000d0
 8002dcc:	20000118 	.word	0x20000118
 8002dd0:	2000003c 	.word	0x2000003c
 8002dd4:	20000038 	.word	0x20000038
 8002dd8:	20000124 	.word	0x20000124
 8002ddc:	20000120 	.word	0x20000120
 8002de0:	e000ed04 	.word	0xe000ed04

08002de4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <xTaskGetTickCount+0x1c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002df0:	687b      	ldr	r3, [r7, #4]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000114 	.word	0x20000114

08002e04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e0a:	f001 f8d7 	bl	8003fbc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <xTaskGetTickCountFromISR+0x20>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002e18:	683b      	ldr	r3, [r7, #0]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000114 	.word	0x20000114

08002e28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e32:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <xTaskIncrementTick+0x14c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 8092 	bne.w	8002f60 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <xTaskIncrementTick+0x150>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e44:	4a4c      	ldr	r2, [pc, #304]	; (8002f78 <xTaskIncrementTick+0x150>)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d120      	bne.n	8002e92 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <xTaskIncrementTick+0x154>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <xTaskIncrementTick+0x48>
        __asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	603b      	str	r3, [r7, #0]
    }
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <xTaskIncrementTick+0x46>
 8002e70:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <xTaskIncrementTick+0x154>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <xTaskIncrementTick+0x158>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a40      	ldr	r2, [pc, #256]	; (8002f7c <xTaskIncrementTick+0x154>)
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4a40      	ldr	r2, [pc, #256]	; (8002f80 <xTaskIncrementTick+0x158>)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <xTaskIncrementTick+0x15c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	4a3e      	ldr	r2, [pc, #248]	; (8002f84 <xTaskIncrementTick+0x15c>)
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	f000 fac7 	bl	8003420 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <xTaskIncrementTick+0x160>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d34c      	bcc.n	8002f36 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <xTaskIncrementTick+0x154>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <xTaskIncrementTick+0x160>)
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	601a      	str	r2, [r3, #0]
                    break;
 8002eae:	e042      	b.n	8002f36 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <xTaskIncrementTick+0x154>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d203      	bcs.n	8002ed0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ec8:	4a2f      	ldr	r2, [pc, #188]	; (8002f88 <xTaskIncrementTick+0x160>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ece:	e032      	b.n	8002f36 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff f935 	bl	8002144 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3318      	adds	r3, #24
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f92c 	bl	8002144 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f003 fcb0 	bl	8006854 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	2201      	movs	r2, #1
 8002efa:	409a      	lsls	r2, r3
 8002efc:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <xTaskIncrementTick+0x164>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <xTaskIncrementTick+0x164>)
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <xTaskIncrementTick+0x168>)
 8002f14:	441a      	add	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f7ff f8b4 	bl	800208a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <xTaskIncrementTick+0x16c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3b5      	bcc.n	8002e9c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002f30:	2301      	movs	r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f34:	e7b2      	b.n	8002e9c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <xTaskIncrementTick+0x16c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	4914      	ldr	r1, [pc, #80]	; (8002f90 <xTaskIncrementTick+0x168>)
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d901      	bls.n	8002f52 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <xTaskIncrementTick+0x170>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e004      	b.n	8002f6a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <xTaskIncrementTick+0x174>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <xTaskIncrementTick+0x174>)
 8002f68:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002f6a:	697b      	ldr	r3, [r7, #20]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000138 	.word	0x20000138
 8002f78:	20000114 	.word	0x20000114
 8002f7c:	200000c8 	.word	0x200000c8
 8002f80:	200000cc 	.word	0x200000cc
 8002f84:	20000128 	.word	0x20000128
 8002f88:	20000130 	.word	0x20000130
 8002f8c:	20000118 	.word	0x20000118
 8002f90:	2000003c 	.word	0x2000003c
 8002f94:	20000038 	.word	0x20000038
 8002f98:	20000124 	.word	0x20000124
 8002f9c:	20000120 	.word	0x20000120

08002fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	; (800305c <vTaskSwitchContext+0xbc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fae:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <vTaskSwitchContext+0xc0>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002fb4:	e04d      	b.n	8003052 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <vTaskSwitchContext+0xc0>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <vTaskSwitchContext+0xc4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	fab3 f383 	clz	r3, r3
 8002fc8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	f1c3 031f 	rsb	r3, r3, #31
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	4925      	ldr	r1, [pc, #148]	; (8003068 <vTaskSwitchContext+0xc8>)
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <vTaskSwitchContext+0x5c>
        __asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	607b      	str	r3, [r7, #4]
    }
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <vTaskSwitchContext+0x5a>
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <vTaskSwitchContext+0xc8>)
 8003008:	4413      	add	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3308      	adds	r3, #8
 800301e:	429a      	cmp	r2, r3
 8003020:	d104      	bne.n	800302c <vTaskSwitchContext+0x8c>
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4a0e      	ldr	r2, [pc, #56]	; (800306c <vTaskSwitchContext+0xcc>)
 8003034:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <vTaskSwitchContext+0xcc>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <vTaskSwitchContext+0xd0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d102      	bne.n	8003048 <vTaskSwitchContext+0xa8>
 8003042:	f003 fb67 	bl	8006714 <SEGGER_SYSVIEW_OnIdle>
}
 8003046:	e004      	b.n	8003052 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <vTaskSwitchContext+0xcc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fbbf 	bl	80067d0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000138 	.word	0x20000138
 8003060:	20000124 	.word	0x20000124
 8003064:	20000118 	.word	0x20000118
 8003068:	2000003c 	.word	0x2000003c
 800306c:	20000038 	.word	0x20000038
 8003070:	20000134 	.word	0x20000134

08003074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	60fb      	str	r3, [r7, #12]
    }
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <vTaskPlaceOnEventList+0x44>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3318      	adds	r3, #24
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff f815 	bl	80020d2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030a8:	2101      	movs	r1, #1
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	f000 f9f2 	bl	8003494 <prvAddCurrentTaskToDelayedList>
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000038 	.word	0x20000038

080030bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	617b      	str	r3, [r7, #20]
    }
 80030e0:	bf00      	nop
 80030e2:	e7fe      	b.n	80030e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <vTaskPlaceOnEventListRestricted+0x58>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3318      	adds	r3, #24
 80030ea:	4619      	mov	r1, r3
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7fe ffcc 	bl	800208a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80030f8:	f04f 33ff 	mov.w	r3, #4294967295
 80030fc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80030fe:	2024      	movs	r0, #36	; 0x24
 8003100:	f002 fe08 	bl	8005d14 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	68b8      	ldr	r0, [r7, #8]
 8003108:	f000 f9c4 	bl	8003494 <prvAddCurrentTaskToDelayedList>
    }
 800310c:	bf00      	nop
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000038 	.word	0x20000038

08003118 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	60fb      	str	r3, [r7, #12]
    }
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	3318      	adds	r3, #24
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe fffb 	bl	8002144 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800314e:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <xTaskRemoveFromEventList+0xb4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d120      	bne.n	8003198 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	3304      	adds	r3, #4
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fff2 	bl	8002144 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4618      	mov	r0, r3
 8003164:	f003 fb76 	bl	8006854 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	2201      	movs	r2, #1
 800316e:	409a      	lsls	r2, r3
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <xTaskRemoveFromEventList+0xb8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4313      	orrs	r3, r2
 8003176:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <xTaskRemoveFromEventList+0xb8>)
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <xTaskRemoveFromEventList+0xbc>)
 8003188:	441a      	add	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	3304      	adds	r3, #4
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f7fe ff7a 	bl	800208a <vListInsertEnd>
 8003196:	e005      	b.n	80031a4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	3318      	adds	r3, #24
 800319c:	4619      	mov	r1, r3
 800319e:	480e      	ldr	r0, [pc, #56]	; (80031d8 <xTaskRemoveFromEventList+0xc0>)
 80031a0:	f7fe ff73 	bl	800208a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <xTaskRemoveFromEventList+0xc4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d905      	bls.n	80031be <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <xTaskRemoveFromEventList+0xc8>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e001      	b.n	80031c2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80031c2:	697b      	ldr	r3, [r7, #20]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000138 	.word	0x20000138
 80031d0:	20000118 	.word	0x20000118
 80031d4:	2000003c 	.word	0x2000003c
 80031d8:	200000d0 	.word	0x200000d0
 80031dc:	20000038 	.word	0x20000038
 80031e0:	20000124 	.word	0x20000124

080031e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <vTaskInternalSetTimeOutState+0x24>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <vTaskInternalSetTimeOutState+0x28>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	605a      	str	r2, [r3, #4]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	20000128 	.word	0x20000128
 800320c:	20000114 	.word	0x20000114

08003210 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	613b      	str	r3, [r7, #16]
    }
 8003232:	bf00      	nop
 8003234:	e7fe      	b.n	8003234 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	60fb      	str	r3, [r7, #12]
    }
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003252:	f000 fdc7 	bl	8003de4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <xTaskCheckForTimeOut+0xc4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d102      	bne.n	8003276 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e026      	b.n	80032c4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <xTaskCheckForTimeOut+0xc8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d00a      	beq.n	8003298 <xTaskCheckForTimeOut+0x88>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	429a      	cmp	r2, r3
 800328a:	d305      	bcc.n	8003298 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e015      	b.n	80032c4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d20b      	bcs.n	80032ba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad2      	subs	r2, r2, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ff98 	bl	80031e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	e004      	b.n	80032c4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80032c4:	f000 fdbe 	bl	8003e44 <vPortExitCritical>

    return xReturn;
 80032c8:	69fb      	ldr	r3, [r7, #28]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000114 	.word	0x20000114
 80032d8:	20000128 	.word	0x20000128

080032dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <vTaskMissedYield+0x14>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	20000124 	.word	0x20000124

080032f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80032fc:	f000 f852 	bl	80033a4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <prvIdleTask+0x28>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d9f9      	bls.n	80032fc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <prvIdleTask+0x2c>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003318:	e7f0      	b.n	80032fc <prvIdleTask+0x8>
 800331a:	bf00      	nop
 800331c:	2000003c 	.word	0x2000003c
 8003320:	e000ed04 	.word	0xe000ed04

08003324 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	e00c      	b.n	800334a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <prvInitialiseTaskLists+0x60>)
 800333c:	4413      	add	r3, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fe76 	bl	8002030 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3301      	adds	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d9ef      	bls.n	8003330 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003350:	480d      	ldr	r0, [pc, #52]	; (8003388 <prvInitialiseTaskLists+0x64>)
 8003352:	f7fe fe6d 	bl	8002030 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003356:	480d      	ldr	r0, [pc, #52]	; (800338c <prvInitialiseTaskLists+0x68>)
 8003358:	f7fe fe6a 	bl	8002030 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <prvInitialiseTaskLists+0x6c>)
 800335e:	f7fe fe67 	bl	8002030 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003362:	480c      	ldr	r0, [pc, #48]	; (8003394 <prvInitialiseTaskLists+0x70>)
 8003364:	f7fe fe64 	bl	8002030 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003368:	480b      	ldr	r0, [pc, #44]	; (8003398 <prvInitialiseTaskLists+0x74>)
 800336a:	f7fe fe61 	bl	8002030 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <prvInitialiseTaskLists+0x78>)
 8003370:	4a05      	ldr	r2, [pc, #20]	; (8003388 <prvInitialiseTaskLists+0x64>)
 8003372:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <prvInitialiseTaskLists+0x7c>)
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <prvInitialiseTaskLists+0x68>)
 8003378:	601a      	str	r2, [r3, #0]
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	2000003c 	.word	0x2000003c
 8003388:	200000a0 	.word	0x200000a0
 800338c:	200000b4 	.word	0x200000b4
 8003390:	200000d0 	.word	0x200000d0
 8003394:	200000e4 	.word	0x200000e4
 8003398:	200000fc 	.word	0x200000fc
 800339c:	200000c8 	.word	0x200000c8
 80033a0:	200000cc 	.word	0x200000cc

080033a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033aa:	e019      	b.n	80033e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80033ac:	f000 fd1a 	bl	8003de4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <prvCheckTasksWaitingTermination+0x50>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fec1 	bl	8002144 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <prvCheckTasksWaitingTermination+0x54>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <prvCheckTasksWaitingTermination+0x54>)
 80033ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <prvCheckTasksWaitingTermination+0x58>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <prvCheckTasksWaitingTermination+0x58>)
 80033d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80033d6:	f000 fd35 	bl	8003e44 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f810 	bl	8003400 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <prvCheckTasksWaitingTermination+0x58>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e1      	bne.n	80033ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200000e4 	.word	0x200000e4
 80033f8:	20000110 	.word	0x20000110
 80033fc:	200000f8 	.word	0x200000f8

08003400 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fef5 	bl	80041fc <vPortFree>
                vPortFree( pxTCB );
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fef2 	bl	80041fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <prvResetNextTaskUnblockTime+0x30>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d104      	bne.n	8003438 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <prvResetNextTaskUnblockTime+0x34>)
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003436:	e005      	b.n	8003444 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <prvResetNextTaskUnblockTime+0x30>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <prvResetNextTaskUnblockTime+0x34>)
 8003442:	6013      	str	r3, [r2, #0]
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	200000c8 	.word	0x200000c8
 8003454:	20000130 	.word	0x20000130

08003458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <xTaskGetSchedulerState+0x34>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003466:	2301      	movs	r3, #1
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	e008      	b.n	800347e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <xTaskGetSchedulerState+0x38>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003474:	2302      	movs	r3, #2
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	e001      	b.n	800347e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800347e:	687b      	ldr	r3, [r7, #4]
    }
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	2000011c 	.word	0x2000011c
 8003490:	20000138 	.word	0x20000138

08003494 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800349e:	4b32      	ldr	r3, [pc, #200]	; (8003568 <prvAddCurrentTaskToDelayedList+0xd4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a4:	4b31      	ldr	r3, [pc, #196]	; (800356c <prvAddCurrentTaskToDelayedList+0xd8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fe4a 	bl	8002144 <uxListRemove>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <prvAddCurrentTaskToDelayedList+0xd8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2201      	movs	r2, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <prvAddCurrentTaskToDelayedList+0xdc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4013      	ands	r3, r2
 80034ca:	4a29      	ldr	r2, [pc, #164]	; (8003570 <prvAddCurrentTaskToDelayedList+0xdc>)
 80034cc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d110      	bne.n	80034f8 <prvAddCurrentTaskToDelayedList+0x64>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80034dc:	4b23      	ldr	r3, [pc, #140]	; (800356c <prvAddCurrentTaskToDelayedList+0xd8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	211b      	movs	r1, #27
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 f9f8 	bl	80068d8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <prvAddCurrentTaskToDelayedList+0xd8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4820      	ldr	r0, [pc, #128]	; (8003574 <prvAddCurrentTaskToDelayedList+0xe0>)
 80034f2:	f7fe fdca 	bl	800208a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80034f6:	e032      	b.n	800355e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	429a      	cmp	r2, r3
 800350e:	d20f      	bcs.n	8003530 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003510:	4b16      	ldr	r3, [pc, #88]	; (800356c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2104      	movs	r1, #4
 8003516:	4618      	mov	r0, r3
 8003518:	f003 f9de 	bl	80068d8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800351c:	4b16      	ldr	r3, [pc, #88]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe4>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3304      	adds	r3, #4
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f7fe fdd2 	bl	80020d2 <vListInsert>
}
 800352e:	e016      	b.n	800355e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2104      	movs	r1, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f003 f9ce 	bl	80068d8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <prvAddCurrentTaskToDelayedList+0xe8>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3304      	adds	r3, #4
 8003546:	4619      	mov	r1, r3
 8003548:	4610      	mov	r0, r2
 800354a:	f7fe fdc2 	bl	80020d2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <prvAddCurrentTaskToDelayedList+0xec>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	429a      	cmp	r2, r3
 8003556:	d202      	bcs.n	800355e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003558:	4a09      	ldr	r2, [pc, #36]	; (8003580 <prvAddCurrentTaskToDelayedList+0xec>)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6013      	str	r3, [r2, #0]
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000114 	.word	0x20000114
 800356c:	20000038 	.word	0x20000038
 8003570:	20000118 	.word	0x20000118
 8003574:	200000fc 	.word	0x200000fc
 8003578:	200000cc 	.word	0x200000cc
 800357c:	200000c8 	.word	0x200000c8
 8003580:	20000130 	.word	0x20000130

08003584 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800358e:	f000 fa47 	bl	8003a20 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <xTimerCreateTimerTask+0x54>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <xTimerCreateTimerTask+0x58>)
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	2302      	movs	r3, #2
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035a8:	490d      	ldr	r1, [pc, #52]	; (80035e0 <xTimerCreateTimerTask+0x5c>)
 80035aa:	480e      	ldr	r0, [pc, #56]	; (80035e4 <xTimerCreateTimerTask+0x60>)
 80035ac:	f7ff f924 	bl	80027f8 <xTaskCreate>
 80035b0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	603b      	str	r3, [r7, #0]
    }
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80035ce:	687b      	ldr	r3, [r7, #4]
    }
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	2000016c 	.word	0x2000016c
 80035dc:	20000170 	.word	0x20000170
 80035e0:	08006dbc 	.word	0x08006dbc
 80035e4:	0800368d 	.word	0x0800368d

080035e8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80035f4:	e008      	b.n	8003608 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	699a      	ldr	r2, [r3, #24]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	18d1      	adds	r1, r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f8dd 	bl	80037d4 <prvInsertTimerInActiveList>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1ea      	bne.n	80035f6 <prvReloadTimer+0xe>
        }
    }
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <prvProcessExpiredTimer+0x5c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3304      	adds	r3, #4
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe fd7d 	bl	8002144 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ffc3 	bl	80035e8 <prvReloadTimer>
 8003662:	e008      	b.n	8003676 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	4798      	blx	r3
    }
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000164 	.word	0x20000164

0800368c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003694:	f107 0308 	add.w	r3, r7, #8
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f857 	bl	800374c <prvGetNextExpireTime>
 800369e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4619      	mov	r1, r3
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f803 	bl	80036b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036aa:	f000 f8d5 	bl	8003858 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036ae:	e7f1      	b.n	8003694 <prvTimerTask+0x8>

080036b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80036ba:	f7ff fae5 	bl	8002c88 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f866 	bl	8003794 <prvSampleTimeNow>
 80036c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d130      	bne.n	8003732 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <prvProcessTimerOrBlockTask+0x3c>
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d806      	bhi.n	80036ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80036de:	f7ff fae1 	bl	8002ca4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036e2:	68f9      	ldr	r1, [r7, #12]
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ffa1 	bl	800362c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80036ea:	e024      	b.n	8003736 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036f2:	4b13      	ldr	r3, [pc, #76]	; (8003740 <prvProcessTimerOrBlockTask+0x90>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <prvProcessTimerOrBlockTask+0x50>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <prvProcessTimerOrBlockTask+0x52>
 8003700:	2300      	movs	r3, #0
 8003702:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <prvProcessTimerOrBlockTask+0x94>)
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	f7ff f83d 	bl	8002790 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003716:	f7ff fac5 	bl	8002ca4 <xTaskResumeAll>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <prvProcessTimerOrBlockTask+0x98>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
    }
 8003730:	e001      	b.n	8003736 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003732:	f7ff fab7 	bl	8002ca4 <xTaskResumeAll>
    }
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000168 	.word	0x20000168
 8003744:	2000016c 	.word	0x2000016c
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <prvGetNextExpireTime+0x44>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <prvGetNextExpireTime+0x16>
 800375e:	2201      	movs	r2, #1
 8003760:	e000      	b.n	8003764 <prvGetNextExpireTime+0x18>
 8003762:	2200      	movs	r2, #0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <prvGetNextExpireTime+0x44>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e001      	b.n	8003780 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003780:	68fb      	ldr	r3, [r7, #12]
    }
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000164 	.word	0x20000164

08003794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800379c:	f7ff fb22 	bl	8002de4 <xTaskGetTickCount>
 80037a0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <prvSampleTimeNow+0x3c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d205      	bcs.n	80037b8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037ac:	f000 f912 	bl	80039d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e002      	b.n	80037be <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80037be:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <prvSampleTimeNow+0x3c>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80037c4:	68fb      	ldr	r3, [r7, #12]
    }
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000174 	.word	0x20000174

080037d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d812      	bhi.n	8003820 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	429a      	cmp	r2, r3
 8003806:	d302      	bcc.n	800380e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e01b      	b.n	8003846 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <prvInsertTimerInActiveList+0x7c>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7fe fc5a 	bl	80020d2 <vListInsert>
 800381e:	e012      	b.n	8003846 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d206      	bcs.n	8003836 <prvInsertTimerInActiveList+0x62>
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e007      	b.n	8003846 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <prvInsertTimerInActiveList+0x80>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3304      	adds	r3, #4
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f7fe fc46 	bl	80020d2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003846:	697b      	ldr	r3, [r7, #20]
    }
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000168 	.word	0x20000168
 8003854:	20000164 	.word	0x20000164

08003858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800385e:	e0a6      	b.n	80039ae <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f2c0 80a2 	blt.w	80039ac <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	3304      	adds	r3, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fc63 	bl	8002144 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800387e:	1d3b      	adds	r3, r7, #4
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff87 	bl	8003794 <prvSampleTimeNow>
 8003886:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	3b01      	subs	r3, #1
 800388c:	2b08      	cmp	r3, #8
 800388e:	f200 808e 	bhi.w	80039ae <prvProcessReceivedCommands+0x156>
 8003892:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <prvProcessReceivedCommands+0x40>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	080038bd 	.word	0x080038bd
 800389c:	080038bd 	.word	0x080038bd
 80038a0:	08003925 	.word	0x08003925
 80038a4:	08003939 	.word	0x08003939
 80038a8:	08003983 	.word	0x08003983
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038bd 	.word	0x080038bd
 80038b4:	08003925 	.word	0x08003925
 80038b8:	08003939 	.word	0x08003939
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	18d1      	adds	r1, r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	69f8      	ldr	r0, [r7, #28]
 80038dc:	f7ff ff7a 	bl	80037d4 <prvInsertTimerInActiveList>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d063      	beq.n	80039ae <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	4413      	add	r3, r2
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4619      	mov	r1, r3
 8003900:	69f8      	ldr	r0, [r7, #28]
 8003902:	f7ff fe71 	bl	80035e8 <prvReloadTimer>
 8003906:	e008      	b.n	800391a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	b2da      	uxtb	r2, r3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	69f8      	ldr	r0, [r7, #28]
 8003920:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003922:	e044      	b.n	80039ae <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	b2da      	uxtb	r2, r3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003936:	e03a      	b.n	80039ae <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	617b      	str	r3, [r7, #20]
    }
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	18d1      	adds	r1, r2, r3
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	69f8      	ldr	r0, [r7, #28]
 800397c:	f7ff ff2a 	bl	80037d4 <prvInsertTimerInActiveList>
                        break;
 8003980:	e015      	b.n	80039ae <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003990:	69f8      	ldr	r0, [r7, #28]
 8003992:	f000 fc33 	bl	80041fc <vPortFree>
 8003996:	e00a      	b.n	80039ae <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039aa:	e000      	b.n	80039ae <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039ac:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <prvProcessReceivedCommands+0x178>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f107 0108 	add.w	r1, r7, #8
 80039b6:	2200      	movs	r2, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fcf5 	bl	80023a8 <xQueueReceive>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f47f af4d 	bne.w	8003860 <prvProcessReceivedCommands+0x8>
        }
    }
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000016c 	.word	0x2000016c

080039d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039da:	e009      	b.n	80039f0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039dc:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <prvSwitchTimerLists+0x44>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80039e6:	f04f 31ff 	mov.w	r1, #4294967295
 80039ea:	6838      	ldr	r0, [r7, #0]
 80039ec:	f7ff fe1e 	bl	800362c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <prvSwitchTimerLists+0x44>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80039fa:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <prvSwitchTimerLists+0x44>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <prvSwitchTimerLists+0x48>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <prvSwitchTimerLists+0x44>)
 8003a06:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <prvSwitchTimerLists+0x48>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
    }
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000164 	.word	0x20000164
 8003a1c:	20000168 	.word	0x20000168

08003a20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a24:	f000 f9de 	bl	8003de4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <prvCheckForValidListAndQueue+0x54>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11d      	bne.n	8003a6c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a30:	4811      	ldr	r0, [pc, #68]	; (8003a78 <prvCheckForValidListAndQueue+0x58>)
 8003a32:	f7fe fafd 	bl	8002030 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a36:	4811      	ldr	r0, [pc, #68]	; (8003a7c <prvCheckForValidListAndQueue+0x5c>)
 8003a38:	f7fe fafa 	bl	8002030 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <prvCheckForValidListAndQueue+0x60>)
 8003a3e:	4a0e      	ldr	r2, [pc, #56]	; (8003a78 <prvCheckForValidListAndQueue+0x58>)
 8003a40:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <prvCheckForValidListAndQueue+0x64>)
 8003a44:	4a0d      	ldr	r2, [pc, #52]	; (8003a7c <prvCheckForValidListAndQueue+0x5c>)
 8003a46:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a48:	2200      	movs	r2, #0
 8003a4a:	210c      	movs	r1, #12
 8003a4c:	200a      	movs	r0, #10
 8003a4e:	f7fe fc33 	bl	80022b8 <xQueueGenericCreate>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4a07      	ldr	r2, [pc, #28]	; (8003a74 <prvCheckForValidListAndQueue+0x54>)
 8003a56:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <prvCheckForValidListAndQueue+0x54>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <prvCheckForValidListAndQueue+0x54>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4908      	ldr	r1, [pc, #32]	; (8003a88 <prvCheckForValidListAndQueue+0x68>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fe3c 	bl	80026e4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a6c:	f000 f9ea 	bl	8003e44 <vPortExitCritical>
    }
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	2000016c 	.word	0x2000016c
 8003a78:	2000013c 	.word	0x2000013c
 8003a7c:	20000150 	.word	0x20000150
 8003a80:	20000164 	.word	0x20000164
 8003a84:	20000168 	.word	0x20000168
 8003a88:	08006dc4 	.word	0x08006dc4

08003a8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aa4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3b04      	subs	r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f023 0201 	bic.w	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3b04      	subs	r3, #4
 8003aba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003abc:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <pxPortInitialiseStack+0x64>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b14      	subs	r3, #20
 8003ac6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3b04      	subs	r3, #4
 8003ad2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f06f 0202 	mvn.w	r2, #2
 8003ada:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3b20      	subs	r3, #32
 8003ae0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	08003af5 	.word	0x08003af5

08003af4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <prvTaskExitError+0x54>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d00a      	beq.n	8003b1e <prvTaskExitError+0x2a>
        __asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	60fb      	str	r3, [r7, #12]
    }
 8003b1a:	bf00      	nop
 8003b1c:	e7fe      	b.n	8003b1c <prvTaskExitError+0x28>
        __asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	60bb      	str	r3, [r7, #8]
    }
 8003b30:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b32:	bf00      	nop
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0fc      	beq.n	8003b34 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b3a:	bf00      	nop
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	20000010 	.word	0x20000010
 8003b4c:	00000000 	.word	0x00000000

08003b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <pxCurrentTCBConst2>)
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	6808      	ldr	r0, [r1, #0]
 8003b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5a:	f380 8809 	msr	PSP, r0
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f380 8811 	msr	BASEPRI, r0
 8003b6a:	4770      	bx	lr
 8003b6c:	f3af 8000 	nop.w

08003b70 <pxCurrentTCBConst2>:
 8003b70:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop

08003b78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b78:	4808      	ldr	r0, [pc, #32]	; (8003b9c <prvPortStartFirstTask+0x24>)
 8003b7a:	6800      	ldr	r0, [r0, #0]
 8003b7c:	6800      	ldr	r0, [r0, #0]
 8003b7e:	f380 8808 	msr	MSP, r0
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f380 8814 	msr	CONTROL, r0
 8003b8a:	b662      	cpsie	i
 8003b8c:	b661      	cpsie	f
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	df00      	svc	0
 8003b98:	bf00      	nop
 8003b9a:	0000      	.short	0x0000
 8003b9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop

08003ba4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003baa:	4b46      	ldr	r3, [pc, #280]	; (8003cc4 <xPortStartScheduler+0x120>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a46      	ldr	r2, [pc, #280]	; (8003cc8 <xPortStartScheduler+0x124>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10a      	bne.n	8003bca <xPortStartScheduler+0x26>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	613b      	str	r3, [r7, #16]
    }
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bca:	4b3e      	ldr	r3, [pc, #248]	; (8003cc4 <xPortStartScheduler+0x120>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a3f      	ldr	r2, [pc, #252]	; (8003ccc <xPortStartScheduler+0x128>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d10a      	bne.n	8003bea <xPortStartScheduler+0x46>
        __asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	60fb      	str	r3, [r7, #12]
    }
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bea:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <xPortStartScheduler+0x12c>)
 8003bec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <xPortStartScheduler+0x130>)
 8003c10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c12:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <xPortStartScheduler+0x134>)
 8003c14:	2207      	movs	r2, #7
 8003c16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c18:	e009      	b.n	8003c2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003c1a:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <xPortStartScheduler+0x134>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	4a2d      	ldr	r2, [pc, #180]	; (8003cd8 <xPortStartScheduler+0x134>)
 8003c22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d0ef      	beq.n	8003c1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c3a:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <xPortStartScheduler+0x134>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1c3 0307 	rsb	r3, r3, #7
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d00a      	beq.n	8003c5c <xPortStartScheduler+0xb8>
        __asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	60bb      	str	r3, [r7, #8]
    }
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c5c:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <xPortStartScheduler+0x134>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <xPortStartScheduler+0x134>)
 8003c64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c66:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <xPortStartScheduler+0x134>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <xPortStartScheduler+0x134>)
 8003c70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c7a:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <xPortStartScheduler+0x138>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <xPortStartScheduler+0x138>)
 8003c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <xPortStartScheduler+0x138>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <xPortStartScheduler+0x138>)
 8003c8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c92:	f000 f963 	bl	8003f5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <xPortStartScheduler+0x13c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c9c:	f000 f982 	bl	8003fa4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <xPortStartScheduler+0x140>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <xPortStartScheduler+0x140>)
 8003ca6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003caa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003cac:	f7ff ff64 	bl	8003b78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003cb0:	f7ff f976 	bl	8002fa0 <vTaskSwitchContext>
    prvTaskExitError();
 8003cb4:	f7ff ff1e 	bl	8003af4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	e000ed00 	.word	0xe000ed00
 8003cc8:	410fc271 	.word	0x410fc271
 8003ccc:	410fc270 	.word	0x410fc270
 8003cd0:	e000e400 	.word	0xe000e400
 8003cd4:	20000178 	.word	0x20000178
 8003cd8:	2000017c 	.word	0x2000017c
 8003cdc:	e000ed20 	.word	0xe000ed20
 8003ce0:	20000010 	.word	0x20000010
 8003ce4:	e000ef34 	.word	0xe000ef34

08003ce8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <vInitPrioGroupValue+0xe4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a37      	ldr	r2, [pc, #220]	; (8003dd0 <vInitPrioGroupValue+0xe8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10a      	bne.n	8003d0e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	613b      	str	r3, [r7, #16]
    }
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d0e:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <vInitPrioGroupValue+0xe4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a30      	ldr	r2, [pc, #192]	; (8003dd4 <vInitPrioGroupValue+0xec>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d10a      	bne.n	8003d2e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	60fb      	str	r3, [r7, #12]
    }
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <vInitPrioGroupValue+0xf0>)
 8003d30:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	22ff      	movs	r2, #255	; 0xff
 8003d3e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <vInitPrioGroupValue+0xf4>)
 8003d54:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <vInitPrioGroupValue+0xf8>)
 8003d58:	2207      	movs	r2, #7
 8003d5a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d5c:	e009      	b.n	8003d72 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003d5e:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <vInitPrioGroupValue+0xf8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <vInitPrioGroupValue+0xf8>)
 8003d66:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7a:	2b80      	cmp	r3, #128	; 0x80
 8003d7c:	d0ef      	beq.n	8003d5e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d7e:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <vInitPrioGroupValue+0xf8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1c3 0307 	rsb	r3, r3, #7
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d00a      	beq.n	8003da0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60bb      	str	r3, [r7, #8]
    }
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <vInitPrioGroupValue+0xf8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <vInitPrioGroupValue+0xf8>)
 8003da8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <vInitPrioGroupValue+0xf8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003db2:	4a0b      	ldr	r2, [pc, #44]	; (8003de0 <vInitPrioGroupValue+0xf8>)
 8003db4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000ed00 	.word	0xe000ed00
 8003dd0:	410fc271 	.word	0x410fc271
 8003dd4:	410fc270 	.word	0x410fc270
 8003dd8:	e000e400 	.word	0xe000e400
 8003ddc:	20000178 	.word	0x20000178
 8003de0:	2000017c 	.word	0x2000017c

08003de4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
        __asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	607b      	str	r3, [r7, #4]
    }
 8003dfc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e06:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10f      	bne.n	8003e30 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <vPortEnterCritical+0x5c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <vPortEnterCritical+0x4c>
        __asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	603b      	str	r3, [r7, #0]
    }
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <vPortEnterCritical+0x4a>
    }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	20000010 	.word	0x20000010
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <vPortExitCritical+0x50>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <vPortExitCritical+0x24>
        __asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	607b      	str	r3, [r7, #4]
    }
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <vPortExitCritical+0x50>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <vPortExitCritical+0x50>)
 8003e70:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <vPortExitCritical+0x50>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <vPortExitCritical+0x42>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e84:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000010 	.word	0x20000010
	...

08003ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ea0:	f3ef 8009 	mrs	r0, PSP
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <pxCurrentTCBConst>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	f01e 0f10 	tst.w	lr, #16
 8003eb0:	bf08      	it	eq
 8003eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	6010      	str	r0, [r2, #0]
 8003ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ec4:	f380 8811 	msr	BASEPRI, r0
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f7ff f866 	bl	8002fa0 <vTaskSwitchContext>
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f380 8811 	msr	BASEPRI, r0
 8003edc:	bc09      	pop	{r0, r3}
 8003ede:	6819      	ldr	r1, [r3, #0]
 8003ee0:	6808      	ldr	r0, [r1, #0]
 8003ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee6:	f01e 0f10 	tst.w	lr, #16
 8003eea:	bf08      	it	eq
 8003eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ef0:	f380 8809 	msr	PSP, r0
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	f3af 8000 	nop.w

08003f00 <pxCurrentTCBConst>:
 8003f00:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	607b      	str	r3, [r7, #4]
    }
 8003f20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003f22:	f002 fb7d 	bl	8006620 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f26:	f7fe ff7f 	bl	8002e28 <xTaskIncrementTick>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d006      	beq.n	8003f3e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003f30:	f002 fbd4 	bl	80066dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f34:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <SysTick_Handler+0x50>)
 8003f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e001      	b.n	8003f42 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003f3e:	f002 fbb1 	bl	80066a4 <SEGGER_SYSVIEW_RecordExitISR>
 8003f42:	2300      	movs	r3, #0
 8003f44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f383 8811 	msr	BASEPRI, r3
    }
 8003f4c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <vPortSetupTimerInterrupt+0x34>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <vPortSetupTimerInterrupt+0x38>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <vPortSetupTimerInterrupt+0x3c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <vPortSetupTimerInterrupt+0x40>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	099b      	lsrs	r3, r3, #6
 8003f78:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <vPortSetupTimerInterrupt+0x44>)
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <vPortSetupTimerInterrupt+0x34>)
 8003f80:	2207      	movs	r2, #7
 8003f82:	601a      	str	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000e010 	.word	0xe000e010
 8003f94:	e000e018 	.word	0xe000e018
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	10624dd3 	.word	0x10624dd3
 8003fa0:	e000e014 	.word	0xe000e014

08003fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fb4 <vPortEnableVFP+0x10>
 8003fa8:	6801      	ldr	r1, [r0, #0]
 8003faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003fae:	6001      	str	r1, [r0, #0]
 8003fb0:	4770      	bx	lr
 8003fb2:	0000      	.short	0x0000
 8003fb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop

08003fbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003fc2:	f3ef 8305 	mrs	r3, IPSR
 8003fc6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b0f      	cmp	r3, #15
 8003fcc:	d914      	bls.n	8003ff8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fce:	4a17      	ldr	r2, [pc, #92]	; (800402c <vPortValidateInterruptPriority+0x70>)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fd8:	4b15      	ldr	r3, [pc, #84]	; (8004030 <vPortValidateInterruptPriority+0x74>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	7afa      	ldrb	r2, [r7, #11]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d20a      	bcs.n	8003ff8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	607b      	str	r3, [r7, #4]
    }
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <vPortValidateInterruptPriority+0x78>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004000:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <vPortValidateInterruptPriority+0x7c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d90a      	bls.n	800401e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	603b      	str	r3, [r7, #0]
    }
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <vPortValidateInterruptPriority+0x60>
    }
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000e3f0 	.word	0xe000e3f0
 8004030:	20000178 	.word	0x20000178
 8004034:	e000ed0c 	.word	0xe000ed0c
 8004038:	2000017c 	.word	0x2000017c

0800403c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	; 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004044:	2300      	movs	r3, #0
 8004046:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004048:	f7fe fe1e 	bl	8002c88 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800404c:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <pvPortMalloc+0x1a8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004054:	f000 f934 	bl	80042c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004058:	4b63      	ldr	r3, [pc, #396]	; (80041e8 <pvPortMalloc+0x1ac>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 80a7 	bne.w	80041b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02d      	beq.n	80040c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800406c:	2208      	movs	r2, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	429a      	cmp	r2, r3
 8004076:	d227      	bcs.n	80040c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004078:	2208      	movs	r2, #8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	2b00      	cmp	r3, #0
 8004088:	d021      	beq.n	80040ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f023 0307 	bic.w	r3, r3, #7
 8004090:	3308      	adds	r3, #8
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	429a      	cmp	r2, r3
 8004096:	d214      	bcs.n	80040c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f023 0307 	bic.w	r3, r3, #7
 800409e:	3308      	adds	r3, #8
 80040a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d010      	beq.n	80040ce <pvPortMalloc+0x92>
        __asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	617b      	str	r3, [r7, #20]
    }
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040c6:	e002      	b.n	80040ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	e000      	b.n	80040d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d06e      	beq.n	80041b4 <pvPortMalloc+0x178>
 80040d6:	4b45      	ldr	r3, [pc, #276]	; (80041ec <pvPortMalloc+0x1b0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d869      	bhi.n	80041b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80040e0:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <pvPortMalloc+0x1b4>)
 80040e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80040e4:	4b42      	ldr	r3, [pc, #264]	; (80041f0 <pvPortMalloc+0x1b4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ea:	e004      	b.n	80040f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d903      	bls.n	8004108 <pvPortMalloc+0xcc>
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f1      	bne.n	80040ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004108:	4b36      	ldr	r3, [pc, #216]	; (80041e4 <pvPortMalloc+0x1a8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410e:	429a      	cmp	r2, r3
 8004110:	d050      	beq.n	80041b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2208      	movs	r2, #8
 8004118:	4413      	add	r3, r2
 800411a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	1ad2      	subs	r2, r2, r3
 800412c:	2308      	movs	r3, #8
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	429a      	cmp	r2, r3
 8004132:	d91f      	bls.n	8004174 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <pvPortMalloc+0x120>
        __asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	613b      	str	r3, [r7, #16]
    }
 8004158:	bf00      	nop
 800415a:	e7fe      	b.n	800415a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800416e:	69b8      	ldr	r0, [r7, #24]
 8004170:	f000 f908 	bl	8004384 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <pvPortMalloc+0x1b0>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <pvPortMalloc+0x1b0>)
 8004180:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004182:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <pvPortMalloc+0x1b0>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <pvPortMalloc+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d203      	bcs.n	8004196 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800418e:	4b17      	ldr	r3, [pc, #92]	; (80041ec <pvPortMalloc+0x1b0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <pvPortMalloc+0x1b8>)
 8004194:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <pvPortMalloc+0x1ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	431a      	orrs	r2, r3
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80041aa:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <pvPortMalloc+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	4a11      	ldr	r2, [pc, #68]	; (80041f8 <pvPortMalloc+0x1bc>)
 80041b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80041b4:	f7fe fd76 	bl	8002ca4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <pvPortMalloc+0x19c>
        __asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60fb      	str	r3, [r7, #12]
    }
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80041d8:	69fb      	ldr	r3, [r7, #28]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3728      	adds	r7, #40	; 0x28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20012d88 	.word	0x20012d88
 80041e8:	20012d9c 	.word	0x20012d9c
 80041ec:	20012d8c 	.word	0x20012d8c
 80041f0:	20012d80 	.word	0x20012d80
 80041f4:	20012d90 	.word	0x20012d90
 80041f8:	20012d94 	.word	0x20012d94

080041fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d04d      	beq.n	80042aa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800420e:	2308      	movs	r3, #8
 8004210:	425b      	negs	r3, r3
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4413      	add	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <vPortFree+0xb8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <vPortFree+0x44>
        __asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	60fb      	str	r3, [r7, #12]
    }
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <vPortFree+0x62>
        __asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	60bb      	str	r3, [r7, #8]
    }
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <vPortFree+0xb8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01e      	beq.n	80042aa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d11a      	bne.n	80042aa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <vPortFree+0xb8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	43db      	mvns	r3, r3
 800427e:	401a      	ands	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004284:	f7fe fd00 	bl	8002c88 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <vPortFree+0xbc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4413      	add	r3, r2
 8004292:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <vPortFree+0xbc>)
 8004294:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004296:	6938      	ldr	r0, [r7, #16]
 8004298:	f000 f874 	bl	8004384 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <vPortFree+0xc0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	4a06      	ldr	r2, [pc, #24]	; (80042bc <vPortFree+0xc0>)
 80042a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80042a6:	f7fe fcfd 	bl	8002ca4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20012d9c 	.word	0x20012d9c
 80042b8:	20012d8c 	.word	0x20012d8c
 80042bc:	20012d98 	.word	0x20012d98

080042c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042c6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80042ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80042cc:	4b27      	ldr	r3, [pc, #156]	; (800436c <prvHeapInit+0xac>)
 80042ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3307      	adds	r3, #7
 80042de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0307 	bic.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	4a1f      	ldr	r2, [pc, #124]	; (800436c <prvHeapInit+0xac>)
 80042f0:	4413      	add	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042f8:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <prvHeapInit+0xb0>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042fe:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <prvHeapInit+0xb0>)
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4413      	add	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800430c:	2208      	movs	r2, #8
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0307 	bic.w	r3, r3, #7
 800431a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a15      	ldr	r2, [pc, #84]	; (8004374 <prvHeapInit+0xb4>)
 8004320:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <prvHeapInit+0xb4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <prvHeapInit+0xb4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	1ad2      	subs	r2, r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <prvHeapInit+0xb4>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <prvHeapInit+0xb8>)
 800434e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4a09      	ldr	r2, [pc, #36]	; (800437c <prvHeapInit+0xbc>)
 8004356:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <prvHeapInit+0xc0>)
 800435a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800435e:	601a      	str	r2, [r3, #0]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000180 	.word	0x20000180
 8004370:	20012d80 	.word	0x20012d80
 8004374:	20012d88 	.word	0x20012d88
 8004378:	20012d90 	.word	0x20012d90
 800437c:	20012d8c 	.word	0x20012d8c
 8004380:	20012d9c 	.word	0x20012d9c

08004384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800438c:	4b28      	ldr	r3, [pc, #160]	; (8004430 <prvInsertBlockIntoFreeList+0xac>)
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e002      	b.n	8004398 <prvInsertBlockIntoFreeList+0x14>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d8f7      	bhi.n	8004392 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	4413      	add	r3, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d108      	bne.n	80043c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	441a      	add	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	441a      	add	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d118      	bne.n	800440c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <prvInsertBlockIntoFreeList+0xb0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d00d      	beq.n	8004402 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e008      	b.n	8004414 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <prvInsertBlockIntoFreeList+0xb0>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	e003      	b.n	8004414 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d002      	beq.n	8004422 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20012d80 	.word	0x20012d80
 8004434:	20012d88 	.word	0x20012d88

08004438 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800443c:	4803      	ldr	r0, [pc, #12]	; (800444c <_cbSendSystemDesc+0x14>)
 800443e:	f002 f899 	bl	8006574 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004442:	4803      	ldr	r0, [pc, #12]	; (8004450 <_cbSendSystemDesc+0x18>)
 8004444:	f002 f896 	bl	8006574 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004448:	bf00      	nop
 800444a:	bd80      	pop	{r7, pc}
 800444c:	08006dcc 	.word	0x08006dcc
 8004450:	08006e10 	.word	0x08006e10

08004454 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <SEGGER_SYSVIEW_Conf+0x20>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <SEGGER_SYSVIEW_Conf+0x20>)
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <SEGGER_SYSVIEW_Conf+0x24>)
 8004462:	4a06      	ldr	r2, [pc, #24]	; (800447c <SEGGER_SYSVIEW_Conf+0x28>)
 8004464:	f001 fc02 	bl	8005c6c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004468:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800446c:	f001 fc42 	bl	8005cf4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004470:	bf00      	nop
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000000 	.word	0x20000000
 8004478:	08004439 	.word	0x08004439
 800447c:	08006eb0 	.word	0x08006eb0

08004480 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004482:	b085      	sub	sp, #20
 8004484:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	e033      	b.n	80044f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800448c:	491e      	ldr	r1, [pc, #120]	; (8004508 <_cbSendTaskList+0x88>)
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	491a      	ldr	r1, [pc, #104]	; (8004508 <_cbSendTaskList+0x88>)
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	3304      	adds	r3, #4
 80044ac:	6819      	ldr	r1, [r3, #0]
 80044ae:	4c16      	ldr	r4, [pc, #88]	; (8004508 <_cbSendTaskList+0x88>)
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4423      	add	r3, r4
 80044bc:	3308      	adds	r3, #8
 80044be:	681c      	ldr	r4, [r3, #0]
 80044c0:	4d11      	ldr	r5, [pc, #68]	; (8004508 <_cbSendTaskList+0x88>)
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	442b      	add	r3, r5
 80044ce:	330c      	adds	r3, #12
 80044d0:	681d      	ldr	r5, [r3, #0]
 80044d2:	4e0d      	ldr	r6, [pc, #52]	; (8004508 <_cbSendTaskList+0x88>)
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4433      	add	r3, r6
 80044e0:	3310      	adds	r3, #16
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	462b      	mov	r3, r5
 80044e8:	4622      	mov	r2, r4
 80044ea:	f000 f8b5 	bl	8004658 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3301      	adds	r3, #1
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <_cbSendTaskList+0x8c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3c6      	bcc.n	800448c <_cbSendTaskList+0xc>
  }
}
 80044fe:	bf00      	nop
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004508:	20012da0 	.word	0x20012da0
 800450c:	20012e40 	.word	0x20012e40

08004510 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004510:	b5b0      	push	{r4, r5, r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004516:	f7fe fc75 	bl	8002e04 <xTaskGetTickCountFromISR>
 800451a:	4603      	mov	r3, r0
 800451c:	461a      	mov	r2, r3
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004526:	e9d7 0100 	ldrd	r0, r1, [r7]
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	f04f 0400 	mov.w	r4, #0
 8004532:	f04f 0500 	mov.w	r5, #0
 8004536:	015d      	lsls	r5, r3, #5
 8004538:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800453c:	0154      	lsls	r4, r2, #5
 800453e:	4622      	mov	r2, r4
 8004540:	462b      	mov	r3, r5
 8004542:	1a12      	subs	r2, r2, r0
 8004544:	eb63 0301 	sbc.w	r3, r3, r1
 8004548:	f04f 0400 	mov.w	r4, #0
 800454c:	f04f 0500 	mov.w	r5, #0
 8004550:	009d      	lsls	r5, r3, #2
 8004552:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004556:	0094      	lsls	r4, r2, #2
 8004558:	4622      	mov	r2, r4
 800455a:	462b      	mov	r3, r5
 800455c:	1812      	adds	r2, r2, r0
 800455e:	eb41 0303 	adc.w	r3, r1, r3
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	00d9      	lsls	r1, r3, #3
 800456c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004570:	00d0      	lsls	r0, r2, #3
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800457a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bdb0      	pop	{r4, r5, r7, pc}

08004588 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004596:	2205      	movs	r2, #5
 8004598:	492b      	ldr	r1, [pc, #172]	; (8004648 <SYSVIEW_AddTask+0xc0>)
 800459a:	68b8      	ldr	r0, [r7, #8]
 800459c:	f002 fbaa 	bl	8006cf4 <memcmp>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d04b      	beq.n	800463e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <SYSVIEW_AddTask+0xc4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b07      	cmp	r3, #7
 80045ac:	d903      	bls.n	80045b6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80045ae:	4828      	ldr	r0, [pc, #160]	; (8004650 <SYSVIEW_AddTask+0xc8>)
 80045b0:	f002 faf2 	bl	8006b98 <SEGGER_SYSVIEW_Warn>
    return;
 80045b4:	e044      	b.n	8004640 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80045b6:	4b25      	ldr	r3, [pc, #148]	; (800464c <SYSVIEW_AddTask+0xc4>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4926      	ldr	r1, [pc, #152]	; (8004654 <SYSVIEW_AddTask+0xcc>)
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <SYSVIEW_AddTask+0xc4>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4921      	ldr	r1, [pc, #132]	; (8004654 <SYSVIEW_AddTask+0xcc>)
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	3304      	adds	r3, #4
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <SYSVIEW_AddTask+0xc4>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	491b      	ldr	r1, [pc, #108]	; (8004654 <SYSVIEW_AddTask+0xcc>)
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	3308      	adds	r3, #8
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <SYSVIEW_AddTask+0xc4>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4916      	ldr	r1, [pc, #88]	; (8004654 <SYSVIEW_AddTask+0xcc>)
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	330c      	adds	r3, #12
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <SYSVIEW_AddTask+0xc4>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4910      	ldr	r1, [pc, #64]	; (8004654 <SYSVIEW_AddTask+0xcc>)
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	3310      	adds	r3, #16
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <SYSVIEW_AddTask+0xc4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	4a08      	ldr	r2, [pc, #32]	; (800464c <SYSVIEW_AddTask+0xc4>)
 800462a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f80e 	bl	8004658 <SYSVIEW_SendTaskInfo>
 800463c:	e000      	b.n	8004640 <SYSVIEW_AddTask+0xb8>
    return;
 800463e:	bf00      	nop

}
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	08006e20 	.word	0x08006e20
 800464c:	20012e40 	.word	0x20012e40
 8004650:	08006e28 	.word	0x08006e28
 8004654:	20012da0 	.word	0x20012da0

08004658 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	; 0x28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004666:	f107 0314 	add.w	r3, r7, #20
 800466a:	2214      	movs	r2, #20
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f002 fb5c 	bl	8006d2c <memset>
  TaskInfo.TaskID     = TaskID;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004688:	f107 0314 	add.w	r3, r7, #20
 800468c:	4618      	mov	r0, r3
 800468e:	f001 fe79 	bl	8006384 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004692:	bf00      	nop
 8004694:	3728      	adds	r7, #40	; 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <__NVIC_EnableIRQ>:
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	db0b      	blt.n	80046c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	f003 021f 	and.w	r2, r3, #31
 80046b4:	4907      	ldr	r1, [pc, #28]	; (80046d4 <__NVIC_EnableIRQ+0x38>)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2001      	movs	r0, #1
 80046be:	fa00 f202 	lsl.w	r2, r0, r2
 80046c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	e000e100 	.word	0xe000e100

080046d8 <__NVIC_SetPriority>:
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	6039      	str	r1, [r7, #0]
 80046e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	db0a      	blt.n	8004702 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	490c      	ldr	r1, [pc, #48]	; (8004724 <__NVIC_SetPriority+0x4c>)
 80046f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f6:	0112      	lsls	r2, r2, #4
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	440b      	add	r3, r1
 80046fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004700:	e00a      	b.n	8004718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	b2da      	uxtb	r2, r3
 8004706:	4908      	ldr	r1, [pc, #32]	; (8004728 <__NVIC_SetPriority+0x50>)
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	3b04      	subs	r3, #4
 8004710:	0112      	lsls	r2, r2, #4
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	440b      	add	r3, r1
 8004716:	761a      	strb	r2, [r3, #24]
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	e000e100 	.word	0xe000e100
 8004728:	e000ed00 	.word	0xe000ed00

0800472c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004732:	f002 fa8d 	bl	8006c50 <SEGGER_SYSVIEW_IsStarted>
 8004736:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800473e:	f001 fca5 	bl	800608c <SEGGER_SYSVIEW_Start>
  }
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <_cbOnUARTRx+0x3c>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d806      	bhi.n	800476c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800475e:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <_cbOnUARTRx+0x3c>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <_cbOnUARTRx+0x3c>)
 8004768:	701a      	strb	r2, [r3, #0]
    goto Done;
 800476a:	e009      	b.n	8004780 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800476c:	f7ff ffde 	bl	800472c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <_cbOnUARTRx+0x3c>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4618      	mov	r0, r3
 8004776:	1dfb      	adds	r3, r7, #7
 8004778:	2201      	movs	r2, #1
 800477a:	4619      	mov	r1, r3
 800477c:	f000 fb9a 	bl	8004eb4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004780:	bf00      	nop
}
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000014 	.word	0x20000014

0800478c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004794:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <_cbOnUARTTx+0x5c>)
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d80f      	bhi.n	80047bc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800479c:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <_cbOnUARTTx+0x5c>)
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	461a      	mov	r2, r3
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <_cbOnUARTTx+0x60>)
 80047a4:	5c9a      	ldrb	r2, [r3, r2]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <_cbOnUARTTx+0x5c>)
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	3301      	adds	r3, #1
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <_cbOnUARTTx+0x5c>)
 80047b4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80047ba:	e00f      	b.n	80047dc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <_cbOnUARTTx+0x5c>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fa19 	bl	8004bfc <SEGGER_RTT_ReadUpBufferNoLock>
 80047ca:	4603      	mov	r3, r0
 80047cc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	da02      	bge.n	80047da <_cbOnUARTTx+0x4e>
    r = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e000      	b.n	80047dc <_cbOnUARTTx+0x50>
  }
Done:
 80047da:	bf00      	nop
  return r;
 80047dc:	68fb      	ldr	r3, [r7, #12]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000014 	.word	0x20000014
 80047ec:	08006eb8 	.word	0x08006eb8

080047f0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80047f8:	4a04      	ldr	r2, [pc, #16]	; (800480c <SEGGER_UART_init+0x1c>)
 80047fa:	4905      	ldr	r1, [pc, #20]	; (8004810 <SEGGER_UART_init+0x20>)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f863 	bl	80048c8 <HIF_UART_Init>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	0800474d 	.word	0x0800474d
 8004810:	0800478d 	.word	0x0800478d

08004814 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <USART2_IRQHandler+0x80>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d011      	beq.n	800484e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <USART2_IRQHandler+0x84>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 030b 	and.w	r3, r3, #11
 8004838:	2b00      	cmp	r3, #0
 800483a:	d108      	bne.n	800484e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800483c:	4b17      	ldr	r3, [pc, #92]	; (800489c <USART2_IRQHandler+0x88>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <USART2_IRQHandler+0x88>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	79fa      	ldrb	r2, [r7, #7]
 800484a:	4610      	mov	r0, r2
 800484c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01a      	beq.n	800488e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <USART2_IRQHandler+0x8c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <USART2_IRQHandler+0x8c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1dfa      	adds	r2, r7, #7
 8004866:	4610      	mov	r0, r2
 8004868:	4798      	blx	r3
 800486a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004872:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <USART2_IRQHandler+0x90>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a0b      	ldr	r2, [pc, #44]	; (80048a4 <USART2_IRQHandler+0x90>)
 8004878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e006      	b.n	800488e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004880:	4b04      	ldr	r3, [pc, #16]	; (8004894 <USART2_IRQHandler+0x80>)
 8004882:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004884:	79fa      	ldrb	r2, [r7, #7]
 8004886:	4b04      	ldr	r3, [pc, #16]	; (8004898 <USART2_IRQHandler+0x84>)
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e000      	b.n	800488e <USART2_IRQHandler+0x7a>
      return;
 800488c:	bf00      	nop
    }
  }
}
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40004400 	.word	0x40004400
 8004898:	40004404 	.word	0x40004404
 800489c:	20012e44 	.word	0x20012e44
 80048a0:	20012e48 	.word	0x20012e48
 80048a4:	4000440c 	.word	0x4000440c

080048a8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a04      	ldr	r2, [pc, #16]	; (80048c4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	6013      	str	r3, [r2, #0]
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	4000440c 	.word	0x4000440c

080048c8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80048d4:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <HIF_UART_Init+0xc8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2d      	ldr	r2, [pc, #180]	; (8004990 <HIF_UART_Init+0xc8>)
 80048da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048de:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80048e0:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <HIF_UART_Init+0xcc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <HIF_UART_Init+0xcc>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HIF_UART_Init+0xd0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048f8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004900:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004902:	4a25      	ldr	r2, [pc, #148]	; (8004998 <HIF_UART_Init+0xd0>)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004908:	4b24      	ldr	r3, [pc, #144]	; (800499c <HIF_UART_Init+0xd4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004914:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800491c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800491e:	4a1f      	ldr	r2, [pc, #124]	; (800499c <HIF_UART_Init+0xd4>)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004924:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <HIF_UART_Init+0xd8>)
 8004926:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800492a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800492c:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HIF_UART_Init+0xdc>)
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HIF_UART_Init+0xe0>)
 8004934:	2280      	movs	r2, #128	; 0x80
 8004936:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800493e:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <HIF_UART_Init+0xe4>)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	3301      	adds	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d302      	bcc.n	800495e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004958:	f640 73ff 	movw	r3, #4095	; 0xfff
 800495c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <HIF_UART_Init+0xe8>)
 800496a:	b29b      	uxth	r3, r3
 800496c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800496e:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <HIF_UART_Init+0xec>)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004974:	4a10      	ldr	r2, [pc, #64]	; (80049b8 <HIF_UART_Init+0xf0>)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800497a:	2106      	movs	r1, #6
 800497c:	2026      	movs	r0, #38	; 0x26
 800497e:	f7ff feab 	bl	80046d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004982:	2026      	movs	r0, #38	; 0x26
 8004984:	f7ff fe8a 	bl	800469c <__NVIC_EnableIRQ>
}
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40023840 	.word	0x40023840
 8004994:	40023830 	.word	0x40023830
 8004998:	40020020 	.word	0x40020020
 800499c:	40020000 	.word	0x40020000
 80049a0:	4000440c 	.word	0x4000440c
 80049a4:	40004410 	.word	0x40004410
 80049a8:	40004414 	.word	0x40004414
 80049ac:	0501bd00 	.word	0x0501bd00
 80049b0:	40004408 	.word	0x40004408
 80049b4:	20012e44 	.word	0x20012e44
 80049b8:	20012e48 	.word	0x20012e48

080049bc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <_DoInit+0x98>)
 80049c4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2203      	movs	r2, #3
 80049ca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2203      	movs	r2, #3
 80049d0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <_DoInit+0x9c>)
 80049d6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <_DoInit+0xa0>)
 80049dc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049e4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <_DoInit+0x9c>)
 80049fc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <_DoInit+0xa4>)
 8004a02:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2210      	movs	r2, #16
 8004a08:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3307      	adds	r3, #7
 8004a20:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <_DoInit+0xa8>)
 8004a22:	6810      	ldr	r0, [r2, #0]
 8004a24:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a26:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a0e      	ldr	r2, [pc, #56]	; (8004a68 <_DoInit+0xac>)
 8004a2e:	6810      	ldr	r0, [r2, #0]
 8004a30:	6018      	str	r0, [r3, #0]
 8004a32:	8891      	ldrh	r1, [r2, #4]
 8004a34:	7992      	ldrb	r2, [r2, #6]
 8004a36:	8099      	strh	r1, [r3, #4]
 8004a38:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a3a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a44:	f3bf 8f5f 	dmb	sy
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	200143fc 	.word	0x200143fc
 8004a58:	08006e78 	.word	0x08006e78
 8004a5c:	20012e4c 	.word	0x20012e4c
 8004a60:	2001324c 	.word	0x2001324c
 8004a64:	08006e84 	.word	0x08006e84
 8004a68:	08006e88 	.word	0x08006e88

08004a6c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d905      	bls.n	8004a9c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9a:	e007      	b.n	8004aac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	69b9      	ldr	r1, [r7, #24]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	1acb      	subs	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	bf28      	it	cs
 8004aba:	4613      	movcs	r3, r2
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bf28      	it	cs
 8004ac6:	4613      	movcs	r3, r2
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	f002 f919 	bl	8006d10 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004ade:	6a3a      	ldr	r2, [r7, #32]
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	4413      	add	r3, r2
 8004ae4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	4413      	add	r3, r2
 8004aec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	4413      	add	r3, r2
 8004afc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d101      	bne.n	8004b0c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b0c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1b2      	bne.n	8004a82 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3728      	adds	r7, #40	; 0x28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b088      	sub	sp, #32
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d911      	bls.n	8004b6e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	6938      	ldr	r0, [r7, #16]
 8004b5a:	f002 f8d9 	bl	8006d10 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b5e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	441a      	add	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004b6c:	e01f      	b.n	8004bae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	6938      	ldr	r0, [r7, #16]
 8004b82:	f002 f8c5 	bl	8006d10 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6938      	ldr	r0, [r7, #16]
 8004ba0:	f002 f8b6 	bl	8006d10 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ba4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	60da      	str	r2, [r3, #12]
}
 8004bae:	bf00      	nop
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d808      	bhi.n	8004be4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad2      	subs	r2, r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	3b01      	subs	r3, #1
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e004      	b.n	8004bee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004bee:	697b      	ldr	r3, [r7, #20]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	; 0x30
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004c08:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004c0a:	623b      	str	r3, [r7, #32]
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004c16:	f7ff fed1 	bl	80049bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	4613      	mov	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4a37      	ldr	r2, [pc, #220]	; (8004d04 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004c28:	4413      	add	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d92b      	bls.n	8004ca0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	bf28      	it	cs
 8004c5a:	4613      	movcs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	4413      	add	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	6939      	ldr	r1, [r7, #16]
 8004c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c6e:	f002 f84f 	bl	8006d10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4413      	add	r3, r2
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	4413      	add	r3, r2
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	4413      	add	r3, r2
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d101      	bne.n	8004ca0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	bf28      	it	cs
 8004cb0:	4613      	movcs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d019      	beq.n	8004cee <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	4413      	add	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	6939      	ldr	r1, [r7, #16]
 8004cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cca:	f002 f821 	bl	8006d10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4413      	add	r3, r2
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3730      	adds	r7, #48	; 0x30
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	200143fc 	.word	0x200143fc

08004d08 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	; 0x30
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004d14:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d16:	623b      	str	r3, [r7, #32]
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <SEGGER_RTT_ReadNoLock+0x1e>
 8004d22:	f7ff fe4b 	bl	80049bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	3360      	adds	r3, #96	; 0x60
 8004d32:	4a37      	ldr	r2, [pc, #220]	; (8004e10 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d34:	4413      	add	r3, r2
 8004d36:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d92b      	bls.n	8004dac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bf28      	it	cs
 8004d66:	4613      	movcs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	4413      	add	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	6939      	ldr	r1, [r7, #16]
 8004d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d7a:	f001 ffc9 	bl	8006d10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4413      	add	r3, r2
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d101      	bne.n	8004dac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	bf28      	it	cs
 8004dbc:	4613      	movcs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d019      	beq.n	8004dfa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	4413      	add	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	6939      	ldr	r1, [r7, #16]
 8004dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dd6:	f001 ff9b 	bl	8006d10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	4413      	add	r3, r2
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4413      	add	r3, r2
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e04:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3730      	adds	r7, #48	; 0x30
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200143fc 	.word	0x200143fc

08004e14 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	3360      	adds	r3, #96	; 0x60
 8004e30:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004e32:	4413      	add	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d029      	beq.n	8004e92 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d82e      	bhi.n	8004ea0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d013      	beq.n	8004e72 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004e4a:	e029      	b.n	8004ea0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e4c:	6978      	ldr	r0, [r7, #20]
 8004e4e:	f7ff feb2 	bl	8004bb6 <_GetAvailWriteSpace>
 8004e52:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d202      	bcs.n	8004e62 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004e60:	e021      	b.n	8004ea6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	6978      	ldr	r0, [r7, #20]
 8004e6c:	f7ff fe5b 	bl	8004b26 <_WriteNoCheck>
    break;
 8004e70:	e019      	b.n	8004ea6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e72:	6978      	ldr	r0, [r7, #20]
 8004e74:	f7ff fe9f 	bl	8004bb6 <_GetAvailWriteSpace>
 8004e78:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	bf28      	it	cs
 8004e82:	4613      	movcs	r3, r2
 8004e84:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	69b9      	ldr	r1, [r7, #24]
 8004e8a:	6978      	ldr	r0, [r7, #20]
 8004e8c:	f7ff fe4b 	bl	8004b26 <_WriteNoCheck>
    break;
 8004e90:	e009      	b.n	8004ea6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f7ff fde8 	bl	8004a6c <_WriteBlocking>
 8004e9c:	61f8      	str	r0, [r7, #28]
    break;
 8004e9e:	e002      	b.n	8004ea6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
    break;
 8004ea4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	200143fc 	.word	0x200143fc

08004eb4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004ece:	f7ff fd75 	bl	80049bc <_DoInit>
  SEGGER_RTT_LOCK();
 8004ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed6:	f04f 0120 	mov.w	r1, #32
 8004eda:	f381 8811 	msr	BASEPRI, r1
 8004ede:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff ff95 	bl	8004e14 <SEGGER_RTT_WriteDownBufferNoLock>
 8004eea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004ef2:	697b      	ldr	r3, [r7, #20]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	200143fc 	.word	0x200143fc

08004f00 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f0e:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f1c:	f7ff fd4e 	bl	80049bc <_DoInit>
  SEGGER_RTT_LOCK();
 8004f20:	f3ef 8311 	mrs	r3, BASEPRI
 8004f24:	f04f 0120 	mov.w	r1, #32
 8004f28:	f381 8811 	msr	BASEPRI, r1
 8004f2c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f2e:	4b35      	ldr	r3, [pc, #212]	; (8005004 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f30:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f36:	6939      	ldr	r1, [r7, #16]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	3304      	adds	r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	dbeb      	blt.n	8004f36 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f5e:	e000      	b.n	8004f62 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f60:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	da3f      	bge.n	8004fec <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f6c:	6939      	ldr	r1, [r7, #16]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	4613      	mov	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f80:	6939      	ldr	r1, [r7, #16]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	3304      	adds	r3, #4
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004f96:	6939      	ldr	r1, [r7, #16]
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3320      	adds	r3, #32
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004faa:	6939      	ldr	r1, [r7, #16]
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	4413      	add	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3328      	adds	r3, #40	; 0x28
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004fbe:	6939      	ldr	r1, [r7, #16]
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	440b      	add	r3, r1
 8004fcc:	3324      	adds	r3, #36	; 0x24
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004fd2:	6939      	ldr	r1, [r7, #16]
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	440b      	add	r3, r1
 8004fe0:	332c      	adds	r3, #44	; 0x2c
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fe6:	f3bf 8f5f 	dmb	sy
 8004fea:	e002      	b.n	8004ff2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004fec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	200143fc 	.word	0x200143fc

08005008 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005016:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005024:	f7ff fcca 	bl	80049bc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005028:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800502a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	461a      	mov	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4293      	cmp	r3, r2
 8005036:	d24d      	bcs.n	80050d4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005038:	f3ef 8311 	mrs	r3, BASEPRI
 800503c:	f04f 0120 	mov.w	r1, #32
 8005040:	f381 8811 	msr	BASEPRI, r1
 8005044:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d031      	beq.n	80050b0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800504c:	6979      	ldr	r1, [r7, #20]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4613      	mov	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4413      	add	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	440b      	add	r3, r1
 800505a:	3360      	adds	r3, #96	; 0x60
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005060:	6979      	ldr	r1, [r7, #20]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4613      	mov	r3, r2
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	4413      	add	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	440b      	add	r3, r1
 800506e:	3364      	adds	r3, #100	; 0x64
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005074:	6979      	ldr	r1, [r7, #20]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	440b      	add	r3, r1
 8005082:	3368      	adds	r3, #104	; 0x68
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005088:	6979      	ldr	r1, [r7, #20]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4613      	mov	r3, r2
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	440b      	add	r3, r1
 8005096:	3370      	adds	r3, #112	; 0x70
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800509c:	6979      	ldr	r1, [r7, #20]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4613      	mov	r3, r2
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4413      	add	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	440b      	add	r3, r1
 80050aa:	336c      	adds	r3, #108	; 0x6c
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	440b      	add	r3, r1
 80050be:	3374      	adds	r3, #116	; 0x74
 80050c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050c4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e002      	b.n	80050da <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80050d4:	f04f 33ff 	mov.w	r3, #4294967295
 80050d8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80050da:	69fb      	ldr	r3, [r7, #28]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	200143fc 	.word	0x200143fc

080050e8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80050f8:	e002      	b.n	8005100 <_EncodeStr+0x18>
    Len++;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3301      	adds	r3, #1
 80050fe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4413      	add	r3, r2
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f6      	bne.n	80050fa <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d901      	bls.n	8005118 <_EncodeStr+0x30>
    Len = Limit;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2bfe      	cmp	r3, #254	; 0xfe
 800511c:	d806      	bhi.n	800512c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	60fa      	str	r2, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e011      	b.n	8005150 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	60fa      	str	r2, [r7, #12]
 8005132:	22ff      	movs	r2, #255	; 0xff
 8005134:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	60fa      	str	r2, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	0a19      	lsrs	r1, r3, #8
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	60fa      	str	r2, [r7, #12]
 800514c:	b2ca      	uxtb	r2, r1
 800514e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005154:	e00a      	b.n	800516c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	1c53      	adds	r3, r2, #1
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	60f9      	str	r1, [r7, #12]
 8005162:	7812      	ldrb	r2, [r2, #0]
 8005164:	701a      	strb	r2, [r3, #0]
    n++;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	3301      	adds	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	429a      	cmp	r2, r3
 8005172:	d3f0      	bcc.n	8005156 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005174:	68fb      	ldr	r3, [r7, #12]
}
 8005176:	4618      	mov	r0, r3
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3304      	adds	r3, #4
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051a2:	4b36      	ldr	r3, [pc, #216]	; (800527c <_HandleIncomingPacket+0xe0>)
 80051a4:	7e1b      	ldrb	r3, [r3, #24]
 80051a6:	4618      	mov	r0, r3
 80051a8:	1cfb      	adds	r3, r7, #3
 80051aa:	2201      	movs	r2, #1
 80051ac:	4619      	mov	r1, r3
 80051ae:	f7ff fdab 	bl	8004d08 <SEGGER_RTT_ReadNoLock>
 80051b2:	4603      	mov	r3, r0
 80051b4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dd54      	ble.n	8005266 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	2b80      	cmp	r3, #128	; 0x80
 80051c0:	d032      	beq.n	8005228 <_HandleIncomingPacket+0x8c>
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	dc42      	bgt.n	800524c <_HandleIncomingPacket+0xb0>
 80051c6:	2b07      	cmp	r3, #7
 80051c8:	dc16      	bgt.n	80051f8 <_HandleIncomingPacket+0x5c>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	dd3e      	ble.n	800524c <_HandleIncomingPacket+0xb0>
 80051ce:	3b01      	subs	r3, #1
 80051d0:	2b06      	cmp	r3, #6
 80051d2:	d83b      	bhi.n	800524c <_HandleIncomingPacket+0xb0>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <_HandleIncomingPacket+0x40>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051ff 	.word	0x080051ff
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520b 	.word	0x0800520b
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005217 	.word	0x08005217
 80051f0:	0800521d 	.word	0x0800521d
 80051f4:	08005223 	.word	0x08005223
 80051f8:	2b7f      	cmp	r3, #127	; 0x7f
 80051fa:	d036      	beq.n	800526a <_HandleIncomingPacket+0xce>
 80051fc:	e026      	b.n	800524c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80051fe:	f000 ff45 	bl	800608c <SEGGER_SYSVIEW_Start>
      break;
 8005202:	e037      	b.n	8005274 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005204:	f000 fffe 	bl	8006204 <SEGGER_SYSVIEW_Stop>
      break;
 8005208:	e034      	b.n	8005274 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800520a:	f001 f9d7 	bl	80065bc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800520e:	e031      	b.n	8005274 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005210:	f001 f99c 	bl	800654c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005214:	e02e      	b.n	8005274 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005216:	f001 f81b 	bl	8006250 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800521a:	e02b      	b.n	8005274 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800521c:	f001 fc6a 	bl	8006af4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005220:	e028      	b.n	8005274 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005222:	f001 fc49 	bl	8006ab8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005226:	e025      	b.n	8005274 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <_HandleIncomingPacket+0xe0>)
 800522a:	7e1b      	ldrb	r3, [r3, #24]
 800522c:	4618      	mov	r0, r3
 800522e:	1cfb      	adds	r3, r7, #3
 8005230:	2201      	movs	r2, #1
 8005232:	4619      	mov	r1, r3
 8005234:	f7ff fd68 	bl	8004d08 <SEGGER_RTT_ReadNoLock>
 8005238:	4603      	mov	r3, r0
 800523a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	dd15      	ble.n	800526e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	4618      	mov	r0, r3
 8005246:	f001 fbb7 	bl	80069b8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800524a:	e010      	b.n	800526e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	b25b      	sxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	da0e      	bge.n	8005272 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <_HandleIncomingPacket+0xe0>)
 8005256:	7e1b      	ldrb	r3, [r3, #24]
 8005258:	4618      	mov	r0, r3
 800525a:	1cfb      	adds	r3, r7, #3
 800525c:	2201      	movs	r2, #1
 800525e:	4619      	mov	r1, r3
 8005260:	f7ff fd52 	bl	8004d08 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005264:	e005      	b.n	8005272 <_HandleIncomingPacket+0xd6>
    }
  }
 8005266:	bf00      	nop
 8005268:	e004      	b.n	8005274 <_HandleIncomingPacket+0xd8>
      break;
 800526a:	bf00      	nop
 800526c:	e002      	b.n	8005274 <_HandleIncomingPacket+0xd8>
      break;
 800526e:	bf00      	nop
 8005270:	e000      	b.n	8005274 <_HandleIncomingPacket+0xd8>
      break;
 8005272:	bf00      	nop
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20014264 	.word	0x20014264

08005280 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b08c      	sub	sp, #48	; 0x30
 8005284:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005286:	2301      	movs	r3, #1
 8005288:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	3301      	adds	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005294:	4b32      	ldr	r3, [pc, #200]	; (8005360 <_TrySendOverflowPacket+0xe0>)
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28
 800529a:	e00b      	b.n	80052b4 <_TrySendOverflowPacket+0x34>
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	1c59      	adds	r1, r3, #1
 80052a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	09db      	lsrs	r3, r3, #7
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	2b7f      	cmp	r3, #127	; 0x7f
 80052b8:	d8f0      	bhi.n	800529c <_TrySendOverflowPacket+0x1c>
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052ca:	4b26      	ldr	r3, [pc, #152]	; (8005364 <_TrySendOverflowPacket+0xe4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <_TrySendOverflowPacket+0xe0>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	623b      	str	r3, [r7, #32]
 80052e2:	e00b      	b.n	80052fc <_TrySendOverflowPacket+0x7c>
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	1c59      	adds	r1, r3, #1
 80052ec:	6279      	str	r1, [r7, #36]	; 0x24
 80052ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	09db      	lsrs	r3, r3, #7
 80052fa:	623b      	str	r3, [r7, #32]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005300:	d8f0      	bhi.n	80052e4 <_TrySendOverflowPacket+0x64>
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	627a      	str	r2, [r7, #36]	; 0x24
 8005308:	6a3a      	ldr	r2, [r7, #32]
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005312:	4b13      	ldr	r3, [pc, #76]	; (8005360 <_TrySendOverflowPacket+0xe0>)
 8005314:	785b      	ldrb	r3, [r3, #1]
 8005316:	4618      	mov	r0, r3
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	461a      	mov	r2, r3
 8005320:	1d3b      	adds	r3, r7, #4
 8005322:	4619      	mov	r1, r3
 8005324:	f7fa ff74 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005328:	4603      	mov	r3, r0
 800532a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800532c:	f7ff fabc 	bl	80048a8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005336:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <_TrySendOverflowPacket+0xe0>)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <_TrySendOverflowPacket+0xe0>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	3b01      	subs	r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <_TrySendOverflowPacket+0xe0>)
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	e004      	b.n	8005354 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <_TrySendOverflowPacket+0xe0>)
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	3301      	adds	r3, #1
 8005350:	4a03      	ldr	r2, [pc, #12]	; (8005360 <_TrySendOverflowPacket+0xe0>)
 8005352:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005354:	693b      	ldr	r3, [r7, #16]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3730      	adds	r7, #48	; 0x30
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20014264 	.word	0x20014264
 8005364:	e0001004 	.word	0xe0001004

08005368 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005374:	4b6d      	ldr	r3, [pc, #436]	; (800552c <_SendPacket+0x1c4>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d010      	beq.n	800539e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800537c:	4b6b      	ldr	r3, [pc, #428]	; (800552c <_SendPacket+0x1c4>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a5 	beq.w	80054d0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005386:	4b69      	ldr	r3, [pc, #420]	; (800552c <_SendPacket+0x1c4>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d109      	bne.n	80053a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800538e:	f7ff ff77 	bl	8005280 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005392:	4b66      	ldr	r3, [pc, #408]	; (800552c <_SendPacket+0x1c4>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b01      	cmp	r3, #1
 8005398:	f040 809c 	bne.w	80054d4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800539c:	e001      	b.n	80053a2 <_SendPacket+0x3a>
    goto Send;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <_SendPacket+0x3c>
Send:
 80053a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b1f      	cmp	r3, #31
 80053a8:	d809      	bhi.n	80053be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80053aa:	4b60      	ldr	r3, [pc, #384]	; (800552c <_SendPacket+0x1c4>)
 80053ac:	69da      	ldr	r2, [r3, #28]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f040 808d 	bne.w	80054d8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b17      	cmp	r3, #23
 80053c2:	d807      	bhi.n	80053d4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	e03d      	b.n	8005450 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b7f      	cmp	r3, #127	; 0x7f
 80053e0:	d912      	bls.n	8005408 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	09da      	lsrs	r2, r3, #7
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	3a01      	subs	r2, #1
 80053fa:	60fa      	str	r2, [r7, #12]
 80053fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005400:	b2da      	uxtb	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e006      	b.n	8005416 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3b01      	subs	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b7f      	cmp	r3, #127	; 0x7f
 800541a:	d912      	bls.n	8005442 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	09da      	lsrs	r2, r3, #7
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3b01      	subs	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	3a01      	subs	r2, #1
 8005434:	60fa      	str	r2, [r7, #12]
 8005436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	e006      	b.n	8005450 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3b01      	subs	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005450:	4b37      	ldr	r3, [pc, #220]	; (8005530 <_SendPacket+0x1c8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005456:	4b35      	ldr	r3, [pc, #212]	; (800552c <_SendPacket+0x1c4>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	623b      	str	r3, [r7, #32]
 8005468:	e00b      	b.n	8005482 <_SendPacket+0x11a>
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1c59      	adds	r1, r3, #1
 8005472:	6279      	str	r1, [r7, #36]	; 0x24
 8005474:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	09db      	lsrs	r3, r3, #7
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	2b7f      	cmp	r3, #127	; 0x7f
 8005486:	d8f0      	bhi.n	800546a <_SendPacket+0x102>
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	627a      	str	r2, [r7, #36]	; 0x24
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005498:	4b24      	ldr	r3, [pc, #144]	; (800552c <_SendPacket+0x1c4>)
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	4618      	mov	r0, r3
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	f7fa feb2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054ac:	4603      	mov	r3, r0
 80054ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80054b0:	f7ff f9fa 	bl	80048a8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054ba:	4a1c      	ldr	r2, [pc, #112]	; (800552c <_SendPacket+0x1c4>)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	60d3      	str	r3, [r2, #12]
 80054c0:	e00b      	b.n	80054da <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80054c2:	4b1a      	ldr	r3, [pc, #104]	; (800552c <_SendPacket+0x1c4>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	4b18      	ldr	r3, [pc, #96]	; (800552c <_SendPacket+0x1c4>)
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e004      	b.n	80054da <_SendPacket+0x172>
    goto SendDone;
 80054d0:	bf00      	nop
 80054d2:	e002      	b.n	80054da <_SendPacket+0x172>
      goto SendDone;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <_SendPacket+0x172>
      goto SendDone;
 80054d8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <_SendPacket+0x1c4>)
 80054dc:	7e1b      	ldrb	r3, [r3, #24]
 80054de:	4619      	mov	r1, r3
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <_SendPacket+0x1cc>)
 80054e2:	460b      	mov	r3, r1
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	440b      	add	r3, r1
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	336c      	adds	r3, #108	; 0x6c
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <_SendPacket+0x1c4>)
 80054f2:	7e1b      	ldrb	r3, [r3, #24]
 80054f4:	4618      	mov	r0, r3
 80054f6:	490f      	ldr	r1, [pc, #60]	; (8005534 <_SendPacket+0x1cc>)
 80054f8:	4603      	mov	r3, r0
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4403      	add	r3, r0
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	440b      	add	r3, r1
 8005502:	3370      	adds	r3, #112	; 0x70
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d00b      	beq.n	8005522 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800550a:	4b08      	ldr	r3, [pc, #32]	; (800552c <_SendPacket+0x1c4>)
 800550c:	789b      	ldrb	r3, [r3, #2]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005512:	4b06      	ldr	r3, [pc, #24]	; (800552c <_SendPacket+0x1c4>)
 8005514:	2201      	movs	r2, #1
 8005516:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005518:	f7ff fe40 	bl	800519c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <_SendPacket+0x1c4>)
 800551e:	2200      	movs	r2, #0
 8005520:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005522:	bf00      	nop
 8005524:	3728      	adds	r7, #40	; 0x28
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20014264 	.word	0x20014264
 8005530:	e0001004 	.word	0xe0001004
 8005534:	200143fc 	.word	0x200143fc

08005538 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	3301      	adds	r3, #1
 800554e:	2b80      	cmp	r3, #128	; 0x80
 8005550:	d80a      	bhi.n	8005568 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6051      	str	r1, [r2, #4]
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d15a      	bne.n	8005626 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	623b      	str	r3, [r7, #32]
 8005590:	e00b      	b.n	80055aa <_StoreChar+0x72>
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	b2da      	uxtb	r2, r3
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	1c59      	adds	r1, r3, #1
 800559a:	6279      	str	r1, [r7, #36]	; 0x24
 800559c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	09db      	lsrs	r3, r3, #7
 80055a8:	623b      	str	r3, [r7, #32]
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	2b7f      	cmp	r3, #127	; 0x7f
 80055ae:	d8f0      	bhi.n	8005592 <_StoreChar+0x5a>
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	627a      	str	r2, [r7, #36]	; 0x24
 80055b6:	6a3a      	ldr	r2, [r7, #32]
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	e00b      	b.n	80055e2 <_StoreChar+0xaa>
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	1c59      	adds	r1, r3, #1
 80055d2:	61f9      	str	r1, [r7, #28]
 80055d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	09db      	lsrs	r3, r3, #7
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b7f      	cmp	r3, #127	; 0x7f
 80055e6:	d8f0      	bhi.n	80055ca <_StoreChar+0x92>
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	61fa      	str	r2, [r7, #28]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	221a      	movs	r2, #26
 80055fe:	6939      	ldr	r1, [r7, #16]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff feb1 	bl	8005368 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fdb9 	bl	8005182 <_PreparePacket>
 8005610:	4602      	mov	r2, r0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
  }
}
 8005626:	bf00      	nop
 8005628:	3728      	adds	r7, #40	; 0x28
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005642:	2301      	movs	r3, #1
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005646:	2301      	movs	r3, #1
 8005648:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800564a:	e007      	b.n	800565c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800564c:	6a3a      	ldr	r2, [r7, #32]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	623b      	str	r3, [r7, #32]
    Width++;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3301      	adds	r3, #1
 800565a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800565c:	6a3a      	ldr	r2, [r7, #32]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d2f3      	bcs.n	800564c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	429a      	cmp	r2, r3
 800566a:	d901      	bls.n	8005670 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d11f      	bne.n	80056ba <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01c      	beq.n	80056ba <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <_PrintUnsigned+0x66>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <_PrintUnsigned+0x66>
        c = '0';
 8005690:	2330      	movs	r3, #48	; 0x30
 8005692:	76fb      	strb	r3, [r7, #27]
 8005694:	e001      	b.n	800569a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005696:	2320      	movs	r3, #32
 8005698:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800569a:	e007      	b.n	80056ac <_PrintUnsigned+0x7c>
        FieldWidth--;
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	3b01      	subs	r3, #1
 80056a0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80056a2:	7efb      	ldrb	r3, [r7, #27]
 80056a4:	4619      	mov	r1, r3
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff ff46 	bl	8005538 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <_PrintUnsigned+0x8a>
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d3f0      	bcc.n	800569c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d903      	bls.n	80056c8 <_PrintUnsigned+0x98>
      NumDigits--;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	e009      	b.n	80056dc <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d200      	bcs.n	80056dc <_PrintUnsigned+0xac>
        break;
 80056da:	e005      	b.n	80056e8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	fb02 f303 	mul.w	r3, r2, r3
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80056e6:	e7e8      	b.n	80056ba <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005700:	4a15      	ldr	r2, [pc, #84]	; (8005758 <_PrintUnsigned+0x128>)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	4413      	add	r3, r2
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4619      	mov	r1, r3
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff ff14 	bl	8005538 <_StoreChar>
    Digit /= Base;
 8005710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e3      	bne.n	80056e8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d011      	beq.n	800574e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00e      	beq.n	800574e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005730:	e006      	b.n	8005740 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	3b01      	subs	r3, #1
 8005736:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005738:	2120      	movs	r1, #32
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff fefc 	bl	8005538 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <_PrintUnsigned+0x11e>
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	429a      	cmp	r2, r3
 800574c:	d3f1      	bcc.n	8005732 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800574e:	bf00      	nop
 8005750:	3728      	adds	r7, #40	; 0x28
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	08006ec8 	.word	0x08006ec8

0800575c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	bfb8      	it	lt
 8005770:	425b      	neglt	r3, r3
 8005772:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005774:	2301      	movs	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005778:	e007      	b.n	800578a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005782:	613b      	str	r3, [r7, #16]
    Width++;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	3301      	adds	r3, #1
 8005788:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	429a      	cmp	r2, r3
 8005790:	daf3      	bge.n	800577a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	429a      	cmp	r2, r3
 8005798:	d901      	bls.n	800579e <_PrintInt+0x42>
    Width = NumDigits;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <_PrintInt+0x5e>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	db04      	blt.n	80057b4 <_PrintInt+0x58>
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <_PrintInt+0x5e>
    FieldWidth--;
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <_PrintInt+0x6e>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d016      	beq.n	80057f8 <_PrintInt+0x9c>
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d111      	bne.n	80057f8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00e      	beq.n	80057f8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057da:	e006      	b.n	80057ea <_PrintInt+0x8e>
        FieldWidth--;
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	3b01      	subs	r3, #1
 80057e0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80057e2:	2120      	movs	r1, #32
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff fea7 	bl	8005538 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <_PrintInt+0x9c>
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d3f1      	bcc.n	80057dc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da07      	bge.n	800580e <_PrintInt+0xb2>
    v = -v;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	425b      	negs	r3, r3
 8005802:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005804:	212d      	movs	r1, #45	; 0x2d
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7ff fe96 	bl	8005538 <_StoreChar>
 800580c:	e008      	b.n	8005820 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005818:	212b      	movs	r1, #43	; 0x2b
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7ff fe8c 	bl	8005538 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d019      	beq.n	800585e <_PrintInt+0x102>
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d114      	bne.n	800585e <_PrintInt+0x102>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d111      	bne.n	800585e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00e      	beq.n	800585e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005840:	e006      	b.n	8005850 <_PrintInt+0xf4>
        FieldWidth--;
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	3b01      	subs	r3, #1
 8005846:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005848:	2130      	movs	r1, #48	; 0x30
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff fe74 	bl	8005538 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <_PrintInt+0x102>
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	429a      	cmp	r2, r3
 800585c:	d3f1      	bcc.n	8005842 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff fedf 	bl	8005630 <_PrintUnsigned>
}
 8005872:	bf00      	nop
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b098      	sub	sp, #96	; 0x60
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005888:	f3ef 8311 	mrs	r3, BASEPRI
 800588c:	f04f 0120 	mov.w	r1, #32
 8005890:	f381 8811 	msr	BASEPRI, r1
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
 8005896:	48b7      	ldr	r0, [pc, #732]	; (8005b74 <_VPrintTarget+0x2f8>)
 8005898:	f7ff fc73 	bl	8005182 <_PreparePacket>
 800589c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800589e:	4bb5      	ldr	r3, [pc, #724]	; (8005b74 <_VPrintTarget+0x2f8>)
 80058a0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80058a2:	2300      	movs	r3, #0
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3301      	adds	r3, #1
 80058ae:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80058c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8183 	beq.w	8005bd2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80058cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058d0:	2b25      	cmp	r3, #37	; 0x25
 80058d2:	f040 8170 	bne.w	8005bb6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80058d6:	2300      	movs	r3, #0
 80058d8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80058da:	2301      	movs	r3, #1
 80058dc:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80058e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ea:	3b23      	subs	r3, #35	; 0x23
 80058ec:	2b0d      	cmp	r3, #13
 80058ee:	d83f      	bhi.n	8005970 <_VPrintTarget+0xf4>
 80058f0:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <_VPrintTarget+0x7c>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	08005961 	.word	0x08005961
 80058fc:	08005971 	.word	0x08005971
 8005900:	08005971 	.word	0x08005971
 8005904:	08005971 	.word	0x08005971
 8005908:	08005971 	.word	0x08005971
 800590c:	08005971 	.word	0x08005971
 8005910:	08005971 	.word	0x08005971
 8005914:	08005971 	.word	0x08005971
 8005918:	08005951 	.word	0x08005951
 800591c:	08005971 	.word	0x08005971
 8005920:	08005931 	.word	0x08005931
 8005924:	08005971 	.word	0x08005971
 8005928:	08005971 	.word	0x08005971
 800592c:	08005941 	.word	0x08005941
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	64bb      	str	r3, [r7, #72]	; 0x48
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	e01a      	b.n	8005976 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005942:	f043 0302 	orr.w	r3, r3, #2
 8005946:	64bb      	str	r3, [r7, #72]	; 0x48
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e012      	b.n	8005976 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005952:	f043 0304 	orr.w	r3, r3, #4
 8005956:	64bb      	str	r3, [r7, #72]	; 0x48
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e00a      	b.n	8005976 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005962:	f043 0308 	orr.w	r3, r3, #8
 8005966:	64bb      	str	r3, [r7, #72]	; 0x48
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	e002      	b.n	8005976 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005970:	2300      	movs	r3, #0
 8005972:	653b      	str	r3, [r7, #80]	; 0x50
 8005974:	bf00      	nop
        }
      } while (v);
 8005976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1b0      	bne.n	80058de <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800597c:	2300      	movs	r3, #0
 800597e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800598c:	2b2f      	cmp	r3, #47	; 0x2f
 800598e:	d912      	bls.n	80059b6 <_VPrintTarget+0x13a>
 8005990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005994:	2b39      	cmp	r3, #57	; 0x39
 8005996:	d80e      	bhi.n	80059b6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800599e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	461a      	mov	r2, r3
 80059aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ae:	4413      	add	r3, r2
 80059b0:	3b30      	subs	r3, #48	; 0x30
 80059b2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80059b4:	e7e4      	b.n	8005980 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80059b6:	2300      	movs	r3, #0
 80059b8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80059c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059c6:	2b2e      	cmp	r3, #46	; 0x2e
 80059c8:	d11d      	bne.n	8005a06 <_VPrintTarget+0x18a>
        sFormat++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3301      	adds	r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80059d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059dc:	2b2f      	cmp	r3, #47	; 0x2f
 80059de:	d912      	bls.n	8005a06 <_VPrintTarget+0x18a>
 80059e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059e4:	2b39      	cmp	r3, #57	; 0x39
 80059e6:	d80e      	bhi.n	8005a06 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80059ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	461a      	mov	r2, r3
 80059fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059fe:	4413      	add	r3, r2
 8005a00:	3b30      	subs	r3, #48	; 0x30
 8005a02:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005a04:	e7e4      	b.n	80059d0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005a0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a12:	2b6c      	cmp	r3, #108	; 0x6c
 8005a14:	d003      	beq.n	8005a1e <_VPrintTarget+0x1a2>
 8005a16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a1a:	2b68      	cmp	r3, #104	; 0x68
 8005a1c:	d107      	bne.n	8005a2e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005a2c:	e7ef      	b.n	8005a0e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005a2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a32:	2b25      	cmp	r3, #37	; 0x25
 8005a34:	f000 80b3 	beq.w	8005b9e <_VPrintTarget+0x322>
 8005a38:	2b25      	cmp	r3, #37	; 0x25
 8005a3a:	f2c0 80b7 	blt.w	8005bac <_VPrintTarget+0x330>
 8005a3e:	2b78      	cmp	r3, #120	; 0x78
 8005a40:	f300 80b4 	bgt.w	8005bac <_VPrintTarget+0x330>
 8005a44:	2b58      	cmp	r3, #88	; 0x58
 8005a46:	f2c0 80b1 	blt.w	8005bac <_VPrintTarget+0x330>
 8005a4a:	3b58      	subs	r3, #88	; 0x58
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	f200 80ad 	bhi.w	8005bac <_VPrintTarget+0x330>
 8005a52:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <_VPrintTarget+0x1dc>)
 8005a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a58:	08005b4f 	.word	0x08005b4f
 8005a5c:	08005bad 	.word	0x08005bad
 8005a60:	08005bad 	.word	0x08005bad
 8005a64:	08005bad 	.word	0x08005bad
 8005a68:	08005bad 	.word	0x08005bad
 8005a6c:	08005bad 	.word	0x08005bad
 8005a70:	08005bad 	.word	0x08005bad
 8005a74:	08005bad 	.word	0x08005bad
 8005a78:	08005bad 	.word	0x08005bad
 8005a7c:	08005bad 	.word	0x08005bad
 8005a80:	08005bad 	.word	0x08005bad
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005b03 	.word	0x08005b03
 8005a8c:	08005bad 	.word	0x08005bad
 8005a90:	08005bad 	.word	0x08005bad
 8005a94:	08005bad 	.word	0x08005bad
 8005a98:	08005bad 	.word	0x08005bad
 8005a9c:	08005bad 	.word	0x08005bad
 8005aa0:	08005bad 	.word	0x08005bad
 8005aa4:	08005bad 	.word	0x08005bad
 8005aa8:	08005bad 	.word	0x08005bad
 8005aac:	08005bad 	.word	0x08005bad
 8005ab0:	08005bad 	.word	0x08005bad
 8005ab4:	08005bad 	.word	0x08005bad
 8005ab8:	08005b79 	.word	0x08005b79
 8005abc:	08005bad 	.word	0x08005bad
 8005ac0:	08005bad 	.word	0x08005bad
 8005ac4:	08005bad 	.word	0x08005bad
 8005ac8:	08005bad 	.word	0x08005bad
 8005acc:	08005b29 	.word	0x08005b29
 8005ad0:	08005bad 	.word	0x08005bad
 8005ad4:	08005bad 	.word	0x08005bad
 8005ad8:	08005b4f 	.word	0x08005b4f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	1d19      	adds	r1, r3, #4
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6011      	str	r1, [r2, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005af0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005af4:	f107 0314 	add.w	r3, r7, #20
 8005af8:	4611      	mov	r1, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fd1c 	bl	8005538 <_StoreChar>
        break;
 8005b00:	e055      	b.n	8005bae <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	1d19      	adds	r1, r3, #4
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6011      	str	r1, [r2, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005b10:	f107 0014 	add.w	r0, r7, #20
 8005b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1e:	220a      	movs	r2, #10
 8005b20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b22:	f7ff fe1b 	bl	800575c <_PrintInt>
        break;
 8005b26:	e042      	b.n	8005bae <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	1d19      	adds	r1, r3, #4
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6011      	str	r1, [r2, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005b36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b38:	f107 0014 	add.w	r0, r7, #20
 8005b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b46:	220a      	movs	r2, #10
 8005b48:	f7ff fd72 	bl	8005630 <_PrintUnsigned>
        break;
 8005b4c:	e02f      	b.n	8005bae <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	1d19      	adds	r1, r3, #4
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6011      	str	r1, [r2, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005b5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b5e:	f107 0014 	add.w	r0, r7, #20
 8005b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6c:	2210      	movs	r2, #16
 8005b6e:	f7ff fd5f 	bl	8005630 <_PrintUnsigned>
        break;
 8005b72:	e01c      	b.n	8005bae <_VPrintTarget+0x332>
 8005b74:	20014294 	.word	0x20014294
      case 'p':
        v = va_arg(*pParamList, int);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	1d19      	adds	r1, r3, #4
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6011      	str	r1, [r2, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005b86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b88:	f107 0014 	add.w	r0, r7, #20
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	2308      	movs	r3, #8
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2308      	movs	r3, #8
 8005b96:	2210      	movs	r2, #16
 8005b98:	f7ff fd4a 	bl	8005630 <_PrintUnsigned>
        break;
 8005b9c:	e007      	b.n	8005bae <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005b9e:	f107 0314 	add.w	r3, r7, #20
 8005ba2:	2125      	movs	r1, #37	; 0x25
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fcc7 	bl	8005538 <_StoreChar>
        break;
 8005baa:	e000      	b.n	8005bae <_VPrintTarget+0x332>
      default:
        break;
 8005bac:	bf00      	nop
      }
      sFormat++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e007      	b.n	8005bc6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005bb6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005bba:	f107 0314 	add.w	r3, r7, #20
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fcb9 	bl	8005538 <_StoreChar>
    }
  } while (*sFormat);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f47f ae72 	bne.w	80058b4 <_VPrintTarget+0x38>
 8005bd0:	e000      	b.n	8005bd4 <_VPrintTarget+0x358>
      break;
 8005bd2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d041      	beq.n	8005c5e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	643b      	str	r3, [r7, #64]	; 0x40
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bea:	e00b      	b.n	8005c04 <_VPrintTarget+0x388>
 8005bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf2:	1c59      	adds	r1, r3, #1
 8005bf4:	6439      	str	r1, [r7, #64]	; 0x40
 8005bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c00:	09db      	lsrs	r3, r3, #7
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c06:	2b7f      	cmp	r3, #127	; 0x7f
 8005c08:	d8f0      	bhi.n	8005bec <_VPrintTarget+0x370>
 8005c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	643a      	str	r2, [r7, #64]	; 0x40
 8005c10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c18:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c1e:	2300      	movs	r3, #0
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
 8005c22:	e00b      	b.n	8005c3c <_VPrintTarget+0x3c0>
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	1c59      	adds	r1, r3, #1
 8005c2c:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	09db      	lsrs	r3, r3, #7
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c40:	d8f0      	bhi.n	8005c24 <_VPrintTarget+0x3a8>
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	69b9      	ldr	r1, [r7, #24]
 8005c56:	221a      	movs	r2, #26
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fb85 	bl	8005368 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005c64:	bf00      	nop
 8005c66:	3758      	adds	r7, #88	; 0x58
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c80:	4917      	ldr	r1, [pc, #92]	; (8005ce0 <SEGGER_SYSVIEW_Init+0x74>)
 8005c82:	4818      	ldr	r0, [pc, #96]	; (8005ce4 <SEGGER_SYSVIEW_Init+0x78>)
 8005c84:	f7ff f93c 	bl	8004f00 <SEGGER_RTT_AllocUpBuffer>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c8e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005c90:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c92:	785a      	ldrb	r2, [r3, #1]
 8005c94:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c96:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c98:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c9a:	7e1b      	ldrb	r3, [r3, #24]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	4a11      	ldr	r2, [pc, #68]	; (8005cec <SEGGER_SYSVIEW_Init+0x80>)
 8005ca6:	490f      	ldr	r1, [pc, #60]	; (8005ce4 <SEGGER_SYSVIEW_Init+0x78>)
 8005ca8:	f7ff f9ae 	bl	8005008 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005cac:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005cb2:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <SEGGER_SYSVIEW_Init+0x84>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cb8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005cba:	4a0b      	ldr	r2, [pc, #44]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005cc0:	4a09      	ldr	r2, [pc, #36]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005ccc:	4a06      	ldr	r2, [pc, #24]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	2001325c 	.word	0x2001325c
 8005ce4:	08006e90 	.word	0x08006e90
 8005ce8:	20014264 	.word	0x20014264
 8005cec:	2001425c 	.word	0x2001425c
 8005cf0:	e0001004 	.word	0xe0001004

08005cf4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005cfc:	4a04      	ldr	r2, [pc, #16]	; (8005d10 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6113      	str	r3, [r2, #16]
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20014264 	.word	0x20014264

08005d14 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d20:	f04f 0120 	mov.w	r1, #32
 8005d24:	f381 8811 	msr	BASEPRI, r1
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	4808      	ldr	r0, [pc, #32]	; (8005d4c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005d2c:	f7ff fa29 	bl	8005182 <_PreparePacket>
 8005d30:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	68b8      	ldr	r0, [r7, #8]
 8005d38:	f7ff fb16 	bl	8005368 <_SendPacket>
  RECORD_END();
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f383 8811 	msr	BASEPRI, r3
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20014294 	.word	0x20014294

08005d50 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d5e:	f04f 0120 	mov.w	r1, #32
 8005d62:	f381 8811 	msr	BASEPRI, r1
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	4816      	ldr	r0, [pc, #88]	; (8005dc4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005d6a:	f7ff fa0a 	bl	8005182 <_PreparePacket>
 8005d6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	e00b      	b.n	8005d96 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	1c59      	adds	r1, r3, #1
 8005d86:	61f9      	str	r1, [r7, #28]
 8005d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	09db      	lsrs	r3, r3, #7
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b7f      	cmp	r3, #127	; 0x7f
 8005d9a:	d8f0      	bhi.n	8005d7e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	61fa      	str	r2, [r7, #28]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	6938      	ldr	r0, [r7, #16]
 8005db2:	f7ff fad9 	bl	8005368 <_SendPacket>
  RECORD_END();
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f383 8811 	msr	BASEPRI, r3
}
 8005dbc:	bf00      	nop
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20014294 	.word	0x20014294

08005dc8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	; 0x30
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd8:	f04f 0120 	mov.w	r1, #32
 8005ddc:	f381 8811 	msr	BASEPRI, r1
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	4825      	ldr	r0, [pc, #148]	; (8005e78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005de4:	f7ff f9cd 	bl	8005182 <_PreparePacket>
 8005de8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df6:	e00b      	b.n	8005e10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	09db      	lsrs	r3, r3, #7
 8005e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	2b7f      	cmp	r3, #127	; 0x7f
 8005e14:	d8f0      	bhi.n	8005df8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	e00b      	b.n	8005e48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	1c59      	adds	r1, r3, #1
 8005e38:	6279      	str	r1, [r7, #36]	; 0x24
 8005e3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	09db      	lsrs	r3, r3, #7
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e4c:	d8f0      	bhi.n	8005e30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	627a      	str	r2, [r7, #36]	; 0x24
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	6979      	ldr	r1, [r7, #20]
 8005e62:	69b8      	ldr	r0, [r7, #24]
 8005e64:	f7ff fa80 	bl	8005368 <_SendPacket>
  RECORD_END();
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
}
 8005e6e:	bf00      	nop
 8005e70:	3730      	adds	r7, #48	; 0x30
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20014294 	.word	0x20014294

08005e7c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08e      	sub	sp, #56	; 0x38
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e8e:	f04f 0120 	mov.w	r1, #32
 8005e92:	f381 8811 	msr	BASEPRI, r1
 8005e96:	61fb      	str	r3, [r7, #28]
 8005e98:	4832      	ldr	r0, [pc, #200]	; (8005f64 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005e9a:	f7ff f972 	bl	8005182 <_PreparePacket>
 8005e9e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8005eac:	e00b      	b.n	8005ec6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb4:	1c59      	adds	r1, r3, #1
 8005eb6:	6379      	str	r1, [r7, #52]	; 0x34
 8005eb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	09db      	lsrs	r3, r3, #7
 8005ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eca:	d8f0      	bhi.n	8005eae <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee4:	e00b      	b.n	8005efe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	1c59      	adds	r1, r3, #1
 8005eee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	09db      	lsrs	r3, r3, #7
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	2b7f      	cmp	r3, #127	; 0x7f
 8005f02:	d8f0      	bhi.n	8005ee6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	623b      	str	r3, [r7, #32]
 8005f1c:	e00b      	b.n	8005f36 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	1c59      	adds	r1, r3, #1
 8005f26:	6279      	str	r1, [r7, #36]	; 0x24
 8005f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	09db      	lsrs	r3, r3, #7
 8005f34:	623b      	str	r3, [r7, #32]
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3a:	d8f0      	bhi.n	8005f1e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	627a      	str	r2, [r7, #36]	; 0x24
 8005f42:	6a3a      	ldr	r2, [r7, #32]
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	6979      	ldr	r1, [r7, #20]
 8005f50:	69b8      	ldr	r0, [r7, #24]
 8005f52:	f7ff fa09 	bl	8005368 <_SendPacket>
  RECORD_END();
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f383 8811 	msr	BASEPRI, r3
}
 8005f5c:	bf00      	nop
 8005f5e:	3738      	adds	r7, #56	; 0x38
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20014294 	.word	0x20014294

08005f68 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b090      	sub	sp, #64	; 0x40
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f76:	f3ef 8311 	mrs	r3, BASEPRI
 8005f7a:	f04f 0120 	mov.w	r1, #32
 8005f7e:	f381 8811 	msr	BASEPRI, r1
 8005f82:	61fb      	str	r3, [r7, #28]
 8005f84:	4840      	ldr	r0, [pc, #256]	; (8006088 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005f86:	f7ff f8fc 	bl	8005182 <_PreparePacket>
 8005f8a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f98:	e00b      	b.n	8005fb2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	1c59      	adds	r1, r3, #1
 8005fa2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	09db      	lsrs	r3, r3, #7
 8005fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb6:	d8f0      	bhi.n	8005f9a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd0:	e00b      	b.n	8005fea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd8:	1c59      	adds	r1, r3, #1
 8005fda:	6379      	str	r1, [r7, #52]	; 0x34
 8005fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	09db      	lsrs	r3, r3, #7
 8005fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	2b7f      	cmp	r3, #127	; 0x7f
 8005fee:	d8f0      	bhi.n	8005fd2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	637a      	str	r2, [r7, #52]	; 0x34
 8005ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
 8006008:	e00b      	b.n	8006022 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	1c59      	adds	r1, r3, #1
 8006012:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	2b7f      	cmp	r3, #127	; 0x7f
 8006026:	d8f0      	bhi.n	800600a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800602e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
 800603c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800603e:	623b      	str	r3, [r7, #32]
 8006040:	e00b      	b.n	800605a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	b2da      	uxtb	r2, r3
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	1c59      	adds	r1, r3, #1
 800604a:	6279      	str	r1, [r7, #36]	; 0x24
 800604c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	09db      	lsrs	r3, r3, #7
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	2b7f      	cmp	r3, #127	; 0x7f
 800605e:	d8f0      	bhi.n	8006042 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	627a      	str	r2, [r7, #36]	; 0x24
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	69b8      	ldr	r0, [r7, #24]
 8006076:	f7ff f977 	bl	8005368 <_SendPacket>
  RECORD_END();
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f383 8811 	msr	BASEPRI, r3
}
 8006080:	bf00      	nop
 8006082:	3740      	adds	r7, #64	; 0x40
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20014294 	.word	0x20014294

0800608c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006092:	4b59      	ldr	r3, [pc, #356]	; (80061f8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006098:	f3ef 8311 	mrs	r3, BASEPRI
 800609c:	f04f 0120 	mov.w	r1, #32
 80060a0:	f381 8811 	msr	BASEPRI, r1
 80060a4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80060a6:	4b54      	ldr	r3, [pc, #336]	; (80061f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	220a      	movs	r2, #10
 80060ac:	4953      	ldr	r1, [pc, #332]	; (80061fc <SEGGER_SYSVIEW_Start+0x170>)
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa f8ae 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80060ba:	f7fe fbf5 	bl	80048a8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80060be:	200a      	movs	r0, #10
 80060c0:	f7ff fe28 	bl	8005d14 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060c4:	f3ef 8311 	mrs	r3, BASEPRI
 80060c8:	f04f 0120 	mov.w	r1, #32
 80060cc:	f381 8811 	msr	BASEPRI, r1
 80060d0:	60bb      	str	r3, [r7, #8]
 80060d2:	484b      	ldr	r0, [pc, #300]	; (8006200 <SEGGER_SYSVIEW_Start+0x174>)
 80060d4:	f7ff f855 	bl	8005182 <_PreparePacket>
 80060d8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e2:	4b45      	ldr	r3, [pc, #276]	; (80061f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e8:	e00b      	b.n	8006102 <SEGGER_SYSVIEW_Start+0x76>
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	1c59      	adds	r1, r3, #1
 80060f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	09db      	lsrs	r3, r3, #7
 8006100:	62bb      	str	r3, [r7, #40]	; 0x28
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	2b7f      	cmp	r3, #127	; 0x7f
 8006106:	d8f0      	bhi.n	80060ea <SEGGER_SYSVIEW_Start+0x5e>
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800610e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
 800611c:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <SEGGER_SYSVIEW_Start+0x16c>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	e00b      	b.n	800613c <SEGGER_SYSVIEW_Start+0xb0>
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	6279      	str	r1, [r7, #36]	; 0x24
 800612e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	09db      	lsrs	r3, r3, #7
 800613a:	623b      	str	r3, [r7, #32]
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	2b7f      	cmp	r3, #127	; 0x7f
 8006140:	d8f0      	bhi.n	8006124 <SEGGER_SYSVIEW_Start+0x98>
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	627a      	str	r2, [r7, #36]	; 0x24
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	61fb      	str	r3, [r7, #28]
 8006156:	4b28      	ldr	r3, [pc, #160]	; (80061f8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	e00b      	b.n	8006176 <SEGGER_SYSVIEW_Start+0xea>
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	1c59      	adds	r1, r3, #1
 8006166:	61f9      	str	r1, [r7, #28]
 8006168:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	09db      	lsrs	r3, r3, #7
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b7f      	cmp	r3, #127	; 0x7f
 800617a:	d8f0      	bhi.n	800615e <SEGGER_SYSVIEW_Start+0xd2>
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	61fa      	str	r2, [r7, #28]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	2300      	movs	r3, #0
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	e00b      	b.n	80061ae <SEGGER_SYSVIEW_Start+0x122>
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	1c59      	adds	r1, r3, #1
 800619e:	6179      	str	r1, [r7, #20]
 80061a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	09db      	lsrs	r3, r3, #7
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b7f      	cmp	r3, #127	; 0x7f
 80061b2:	d8f0      	bhi.n	8006196 <SEGGER_SYSVIEW_Start+0x10a>
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	617a      	str	r2, [r7, #20]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80061c4:	2218      	movs	r2, #24
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff f8cd 	bl	8005368 <_SendPacket>
      RECORD_END();
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80061d4:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80061e2:	f000 f9eb 	bl	80065bc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80061e6:	f000 f9b1 	bl	800654c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80061ea:	f000 fc83 	bl	8006af4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80061ee:	bf00      	nop
 80061f0:	3730      	adds	r7, #48	; 0x30
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20014264 	.word	0x20014264
 80061fc:	08006ebc 	.word	0x08006ebc
 8006200:	20014294 	.word	0x20014294

08006204 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800620a:	f3ef 8311 	mrs	r3, BASEPRI
 800620e:	f04f 0120 	mov.w	r1, #32
 8006212:	f381 8811 	msr	BASEPRI, r1
 8006216:	607b      	str	r3, [r7, #4]
 8006218:	480b      	ldr	r0, [pc, #44]	; (8006248 <SEGGER_SYSVIEW_Stop+0x44>)
 800621a:	f7fe ffb2 	bl	8005182 <_PreparePacket>
 800621e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <SEGGER_SYSVIEW_Stop+0x48>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006228:	220b      	movs	r2, #11
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6838      	ldr	r0, [r7, #0]
 800622e:	f7ff f89b 	bl	8005368 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <SEGGER_SYSVIEW_Stop+0x48>)
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f383 8811 	msr	BASEPRI, r3
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20014294 	.word	0x20014294
 800624c:	20014264 	.word	0x20014264

08006250 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b08c      	sub	sp, #48	; 0x30
 8006254:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006256:	f3ef 8311 	mrs	r3, BASEPRI
 800625a:	f04f 0120 	mov.w	r1, #32
 800625e:	f381 8811 	msr	BASEPRI, r1
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	4845      	ldr	r0, [pc, #276]	; (800637c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006266:	f7fe ff8c 	bl	8005182 <_PreparePacket>
 800626a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006274:	4b42      	ldr	r3, [pc, #264]	; (8006380 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
 800627a:	e00b      	b.n	8006294 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	b2da      	uxtb	r2, r3
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	1c59      	adds	r1, r3, #1
 8006284:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	09db      	lsrs	r3, r3, #7
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	2b7f      	cmp	r3, #127	; 0x7f
 8006298:	d8f0      	bhi.n	800627c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
 80062ae:	4b34      	ldr	r3, [pc, #208]	; (8006380 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	e00b      	b.n	80062ce <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	1c59      	adds	r1, r3, #1
 80062be:	6279      	str	r1, [r7, #36]	; 0x24
 80062c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	09db      	lsrs	r3, r3, #7
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	2b7f      	cmp	r3, #127	; 0x7f
 80062d2:	d8f0      	bhi.n	80062b6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	627a      	str	r2, [r7, #36]	; 0x24
 80062da:	6a3a      	ldr	r2, [r7, #32]
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	4b25      	ldr	r3, [pc, #148]	; (8006380 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	e00b      	b.n	8006308 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	1c59      	adds	r1, r3, #1
 80062f8:	61f9      	str	r1, [r7, #28]
 80062fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	09db      	lsrs	r3, r3, #7
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b7f      	cmp	r3, #127	; 0x7f
 800630c:	d8f0      	bhi.n	80062f0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	61fa      	str	r2, [r7, #28]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	e00b      	b.n	8006340 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	b2da      	uxtb	r2, r3
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	1c59      	adds	r1, r3, #1
 8006330:	6179      	str	r1, [r7, #20]
 8006332:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	09db      	lsrs	r3, r3, #7
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b7f      	cmp	r3, #127	; 0x7f
 8006344:	d8f0      	bhi.n	8006328 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	617a      	str	r2, [r7, #20]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006356:	2218      	movs	r2, #24
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	68b8      	ldr	r0, [r7, #8]
 800635c:	f7ff f804 	bl	8005368 <_SendPacket>
  RECORD_END();
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006366:	4b06      	ldr	r3, [pc, #24]	; (8006380 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800636e:	4b04      	ldr	r3, [pc, #16]	; (8006380 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	4798      	blx	r3
  }
}
 8006374:	bf00      	nop
 8006376:	3730      	adds	r7, #48	; 0x30
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20014294 	.word	0x20014294
 8006380:	20014264 	.word	0x20014264

08006384 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b092      	sub	sp, #72	; 0x48
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800638c:	f3ef 8311 	mrs	r3, BASEPRI
 8006390:	f04f 0120 	mov.w	r1, #32
 8006394:	f381 8811 	msr	BASEPRI, r1
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	486a      	ldr	r0, [pc, #424]	; (8006544 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800639c:	f7fe fef1 	bl	8005182 <_PreparePacket>
 80063a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	647b      	str	r3, [r7, #68]	; 0x44
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b66      	ldr	r3, [pc, #408]	; (8006548 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	643b      	str	r3, [r7, #64]	; 0x40
 80063b6:	e00b      	b.n	80063d0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80063b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063be:	1c59      	adds	r1, r3, #1
 80063c0:	6479      	str	r1, [r7, #68]	; 0x44
 80063c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063cc:	09db      	lsrs	r3, r3, #7
 80063ce:	643b      	str	r3, [r7, #64]	; 0x40
 80063d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d2:	2b7f      	cmp	r3, #127	; 0x7f
 80063d4:	d8f0      	bhi.n	80063b8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80063d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	647a      	str	r2, [r7, #68]	; 0x44
 80063dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80063f0:	e00b      	b.n	800640a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f8:	1c59      	adds	r1, r3, #1
 80063fa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	09db      	lsrs	r3, r3, #7
 8006408:	63bb      	str	r3, [r7, #56]	; 0x38
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	2b7f      	cmp	r3, #127	; 0x7f
 800640e:	d8f0      	bhi.n	80063f2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	4619      	mov	r1, r3
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7fe fe5d 	bl	80050e8 <_EncodeStr>
 800642e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006430:	2209      	movs	r2, #9
 8006432:	68f9      	ldr	r1, [r7, #12]
 8006434:	6938      	ldr	r0, [r7, #16]
 8006436:	f7fe ff97 	bl	8005368 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b40      	ldr	r3, [pc, #256]	; (8006548 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	633b      	str	r3, [r7, #48]	; 0x30
 800644e:	e00b      	b.n	8006468 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	b2da      	uxtb	r2, r3
 8006454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	6379      	str	r1, [r7, #52]	; 0x34
 800645a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	09db      	lsrs	r3, r3, #7
 8006466:	633b      	str	r3, [r7, #48]	; 0x30
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	2b7f      	cmp	r3, #127	; 0x7f
 800646c:	d8f0      	bhi.n	8006450 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800646e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	637a      	str	r2, [r7, #52]	; 0x34
 8006474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
 8006488:	e00b      	b.n	80064a2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	b2da      	uxtb	r2, r3
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	1c59      	adds	r1, r3, #1
 8006492:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	09db      	lsrs	r3, r3, #7
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	2b7f      	cmp	r3, #127	; 0x7f
 80064a6:	d8f0      	bhi.n	800648a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	e00b      	b.n	80064dc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	1c59      	adds	r1, r3, #1
 80064cc:	6279      	str	r1, [r7, #36]	; 0x24
 80064ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	09db      	lsrs	r3, r3, #7
 80064da:	623b      	str	r3, [r7, #32]
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	2b7f      	cmp	r3, #127	; 0x7f
 80064e0:	d8f0      	bhi.n	80064c4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	627a      	str	r2, [r7, #36]	; 0x24
 80064e8:	6a3a      	ldr	r2, [r7, #32]
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	2300      	movs	r3, #0
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	e00b      	b.n	8006514 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	1c59      	adds	r1, r3, #1
 8006504:	61f9      	str	r1, [r7, #28]
 8006506:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	09db      	lsrs	r3, r3, #7
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b7f      	cmp	r3, #127	; 0x7f
 8006518:	d8f0      	bhi.n	80064fc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	61fa      	str	r2, [r7, #28]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800652a:	2215      	movs	r2, #21
 800652c:	68f9      	ldr	r1, [r7, #12]
 800652e:	6938      	ldr	r0, [r7, #16]
 8006530:	f7fe ff1a 	bl	8005368 <_SendPacket>
  RECORD_END();
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f383 8811 	msr	BASEPRI, r3
}
 800653a:	bf00      	nop
 800653c:	3748      	adds	r7, #72	; 0x48
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20014294 	.word	0x20014294
 8006548:	20014264 	.word	0x20014264

0800654c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006558:	4b05      	ldr	r3, [pc, #20]	; (8006570 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006562:	4b03      	ldr	r3, [pc, #12]	; (8006570 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4798      	blx	r3
  }
}
 800656a:	bf00      	nop
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20014264 	.word	0x20014264

08006574 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800657c:	f3ef 8311 	mrs	r3, BASEPRI
 8006580:	f04f 0120 	mov.w	r1, #32
 8006584:	f381 8811 	msr	BASEPRI, r1
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	480b      	ldr	r0, [pc, #44]	; (80065b8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800658c:	f7fe fdf9 	bl	8005182 <_PreparePacket>
 8006590:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006592:	2280      	movs	r2, #128	; 0x80
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	6938      	ldr	r0, [r7, #16]
 8006598:	f7fe fda6 	bl	80050e8 <_EncodeStr>
 800659c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800659e:	220e      	movs	r2, #14
 80065a0:	68f9      	ldr	r1, [r7, #12]
 80065a2:	6938      	ldr	r0, [r7, #16]
 80065a4:	f7fe fee0 	bl	8005368 <_SendPacket>
  RECORD_END();
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f383 8811 	msr	BASEPRI, r3
}
 80065ae:	bf00      	nop
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20014294 	.word	0x20014294

080065bc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80065bc:	b590      	push	{r4, r7, lr}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01a      	beq.n	8006600 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80065ca:	4b13      	ldr	r3, [pc, #76]	; (8006618 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d015      	beq.n	8006600 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80065d4:	4b10      	ldr	r3, [pc, #64]	; (8006618 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4798      	blx	r3
 80065dc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065e0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80065e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	000a      	movs	r2, r1
 80065f0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065f2:	4613      	mov	r3, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4621      	mov	r1, r4
 80065f8:	200d      	movs	r0, #13
 80065fa:	f7ff fbe5 	bl	8005dc8 <SEGGER_SYSVIEW_RecordU32x2>
 80065fe:	e006      	b.n	800660e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4619      	mov	r1, r3
 8006606:	200c      	movs	r0, #12
 8006608:	f7ff fba2 	bl	8005d50 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	bd90      	pop	{r4, r7, pc}
 8006616:	bf00      	nop
 8006618:	20014264 	.word	0x20014264
 800661c:	e0001004 	.word	0xe0001004

08006620 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006626:	f3ef 8311 	mrs	r3, BASEPRI
 800662a:	f04f 0120 	mov.w	r1, #32
 800662e:	f381 8811 	msr	BASEPRI, r1
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	4819      	ldr	r0, [pc, #100]	; (800669c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006636:	f7fe fda4 	bl	8005182 <_PreparePacket>
 800663a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006640:	4b17      	ldr	r3, [pc, #92]	; (80066a0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	e00b      	b.n	800666c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	b2da      	uxtb	r2, r3
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	1c59      	adds	r1, r3, #1
 800665c:	6179      	str	r1, [r7, #20]
 800665e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	09db      	lsrs	r3, r3, #7
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b7f      	cmp	r3, #127	; 0x7f
 8006670:	d8f0      	bhi.n	8006654 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	617a      	str	r2, [r7, #20]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006682:	2202      	movs	r2, #2
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	68b8      	ldr	r0, [r7, #8]
 8006688:	f7fe fe6e 	bl	8005368 <_SendPacket>
  RECORD_END();
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f383 8811 	msr	BASEPRI, r3
}
 8006692:	bf00      	nop
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20014294 	.word	0x20014294
 80066a0:	e000ed04 	.word	0xe000ed04

080066a4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066aa:	f3ef 8311 	mrs	r3, BASEPRI
 80066ae:	f04f 0120 	mov.w	r1, #32
 80066b2:	f381 8811 	msr	BASEPRI, r1
 80066b6:	607b      	str	r3, [r7, #4]
 80066b8:	4807      	ldr	r0, [pc, #28]	; (80066d8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80066ba:	f7fe fd62 	bl	8005182 <_PreparePacket>
 80066be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80066c0:	2203      	movs	r2, #3
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6838      	ldr	r0, [r7, #0]
 80066c6:	f7fe fe4f 	bl	8005368 <_SendPacket>
  RECORD_END();
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f383 8811 	msr	BASEPRI, r3
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20014294 	.word	0x20014294

080066dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066e2:	f3ef 8311 	mrs	r3, BASEPRI
 80066e6:	f04f 0120 	mov.w	r1, #32
 80066ea:	f381 8811 	msr	BASEPRI, r1
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	4807      	ldr	r0, [pc, #28]	; (8006710 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80066f2:	f7fe fd46 	bl	8005182 <_PreparePacket>
 80066f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80066f8:	2212      	movs	r2, #18
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6838      	ldr	r0, [r7, #0]
 80066fe:	f7fe fe33 	bl	8005368 <_SendPacket>
  RECORD_END();
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f383 8811 	msr	BASEPRI, r3
}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20014294 	.word	0x20014294

08006714 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800671a:	f3ef 8311 	mrs	r3, BASEPRI
 800671e:	f04f 0120 	mov.w	r1, #32
 8006722:	f381 8811 	msr	BASEPRI, r1
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	4807      	ldr	r0, [pc, #28]	; (8006748 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800672a:	f7fe fd2a 	bl	8005182 <_PreparePacket>
 800672e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006730:	2211      	movs	r2, #17
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6838      	ldr	r0, [r7, #0]
 8006736:	f7fe fe17 	bl	8005368 <_SendPacket>
  RECORD_END();
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f383 8811 	msr	BASEPRI, r3
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20014294 	.word	0x20014294

0800674c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006754:	f3ef 8311 	mrs	r3, BASEPRI
 8006758:	f04f 0120 	mov.w	r1, #32
 800675c:	f381 8811 	msr	BASEPRI, r1
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	4819      	ldr	r0, [pc, #100]	; (80067c8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006764:	f7fe fd0d 	bl	8005182 <_PreparePacket>
 8006768:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800676e:	4b17      	ldr	r3, [pc, #92]	; (80067cc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	e00b      	b.n	800679a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	1c59      	adds	r1, r3, #1
 800678a:	61f9      	str	r1, [r7, #28]
 800678c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	09db      	lsrs	r3, r3, #7
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b7f      	cmp	r3, #127	; 0x7f
 800679e:	d8f0      	bhi.n	8006782 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	61fa      	str	r2, [r7, #28]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80067b0:	2208      	movs	r2, #8
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	6938      	ldr	r0, [r7, #16]
 80067b6:	f7fe fdd7 	bl	8005368 <_SendPacket>
  RECORD_END();
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f383 8811 	msr	BASEPRI, r3
}
 80067c0:	bf00      	nop
 80067c2:	3720      	adds	r7, #32
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20014294 	.word	0x20014294
 80067cc:	20014264 	.word	0x20014264

080067d0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067d8:	f3ef 8311 	mrs	r3, BASEPRI
 80067dc:	f04f 0120 	mov.w	r1, #32
 80067e0:	f381 8811 	msr	BASEPRI, r1
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	4819      	ldr	r0, [pc, #100]	; (800684c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80067e8:	f7fe fccb 	bl	8005182 <_PreparePacket>
 80067ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067f2:	4b17      	ldr	r3, [pc, #92]	; (8006850 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	e00b      	b.n	800681e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	1c59      	adds	r1, r3, #1
 800680e:	61f9      	str	r1, [r7, #28]
 8006810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	09db      	lsrs	r3, r3, #7
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2b7f      	cmp	r3, #127	; 0x7f
 8006822:	d8f0      	bhi.n	8006806 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	61fa      	str	r2, [r7, #28]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006834:	2204      	movs	r2, #4
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	6938      	ldr	r0, [r7, #16]
 800683a:	f7fe fd95 	bl	8005368 <_SendPacket>
  RECORD_END();
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f383 8811 	msr	BASEPRI, r3
}
 8006844:	bf00      	nop
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20014294 	.word	0x20014294
 8006850:	20014264 	.word	0x20014264

08006854 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800685c:	f3ef 8311 	mrs	r3, BASEPRI
 8006860:	f04f 0120 	mov.w	r1, #32
 8006864:	f381 8811 	msr	BASEPRI, r1
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	4819      	ldr	r0, [pc, #100]	; (80068d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800686c:	f7fe fc89 	bl	8005182 <_PreparePacket>
 8006870:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006876:	4b17      	ldr	r3, [pc, #92]	; (80068d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	e00b      	b.n	80068a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	1c59      	adds	r1, r3, #1
 8006892:	61f9      	str	r1, [r7, #28]
 8006894:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	09db      	lsrs	r3, r3, #7
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	2b7f      	cmp	r3, #127	; 0x7f
 80068a6:	d8f0      	bhi.n	800688a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	61fa      	str	r2, [r7, #28]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80068b8:	2206      	movs	r2, #6
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	6938      	ldr	r0, [r7, #16]
 80068be:	f7fe fd53 	bl	8005368 <_SendPacket>
  RECORD_END();
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f383 8811 	msr	BASEPRI, r3
}
 80068c8:	bf00      	nop
 80068ca:	3720      	adds	r7, #32
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20014294 	.word	0x20014294
 80068d4:	20014264 	.word	0x20014264

080068d8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068e2:	f3ef 8311 	mrs	r3, BASEPRI
 80068e6:	f04f 0120 	mov.w	r1, #32
 80068ea:	f381 8811 	msr	BASEPRI, r1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	4827      	ldr	r0, [pc, #156]	; (8006990 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80068f2:	f7fe fc46 	bl	8005182 <_PreparePacket>
 80068f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068fc:	4b25      	ldr	r3, [pc, #148]	; (8006994 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	623b      	str	r3, [r7, #32]
 800690e:	e00b      	b.n	8006928 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	b2da      	uxtb	r2, r3
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	1c59      	adds	r1, r3, #1
 8006918:	6279      	str	r1, [r7, #36]	; 0x24
 800691a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	09db      	lsrs	r3, r3, #7
 8006926:	623b      	str	r3, [r7, #32]
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	2b7f      	cmp	r3, #127	; 0x7f
 800692c:	d8f0      	bhi.n	8006910 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	627a      	str	r2, [r7, #36]	; 0x24
 8006934:	6a3a      	ldr	r2, [r7, #32]
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	e00b      	b.n	8006960 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	1c59      	adds	r1, r3, #1
 8006950:	61f9      	str	r1, [r7, #28]
 8006952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	09db      	lsrs	r3, r3, #7
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b7f      	cmp	r3, #127	; 0x7f
 8006964:	d8f0      	bhi.n	8006948 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	61fa      	str	r2, [r7, #28]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006976:	2207      	movs	r2, #7
 8006978:	68f9      	ldr	r1, [r7, #12]
 800697a:	6938      	ldr	r0, [r7, #16]
 800697c:	f7fe fcf4 	bl	8005368 <_SendPacket>
  RECORD_END();
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f383 8811 	msr	BASEPRI, r3
}
 8006986:	bf00      	nop
 8006988:	3728      	adds	r7, #40	; 0x28
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20014294 	.word	0x20014294
 8006994:	20014264 	.word	0x20014264

08006998 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80069a0:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	1ad3      	subs	r3, r2, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20014264 	.word	0x20014264

080069b8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08c      	sub	sp, #48	; 0x30
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80069c2:	4b3b      	ldr	r3, [pc, #236]	; (8006ab0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d06d      	beq.n	8006aa6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80069ca:	4b39      	ldr	r3, [pc, #228]	; (8006ab0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80069d0:	2300      	movs	r3, #0
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d4:	e008      	b.n	80069e8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d007      	beq.n	80069f2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	3301      	adds	r3, #1
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d3f2      	bcc.n	80069d6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80069f0:	e000      	b.n	80069f4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80069f2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d055      	beq.n	8006aa6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069fa:	f3ef 8311 	mrs	r3, BASEPRI
 80069fe:	f04f 0120 	mov.w	r1, #32
 8006a02:	f381 8811 	msr	BASEPRI, r1
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	482a      	ldr	r0, [pc, #168]	; (8006ab4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006a0a:	f7fe fbba 	bl	8005182 <_PreparePacket>
 8006a0e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	623b      	str	r3, [r7, #32]
 8006a1c:	e00b      	b.n	8006a36 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	1c59      	adds	r1, r3, #1
 8006a26:	6279      	str	r1, [r7, #36]	; 0x24
 8006a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	09db      	lsrs	r3, r3, #7
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3a:	d8f0      	bhi.n	8006a1e <SEGGER_SYSVIEW_SendModule+0x66>
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	627a      	str	r2, [r7, #36]	; 0x24
 8006a42:	6a3a      	ldr	r2, [r7, #32]
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	e00b      	b.n	8006a70 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	1c59      	adds	r1, r3, #1
 8006a60:	61f9      	str	r1, [r7, #28]
 8006a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	09db      	lsrs	r3, r3, #7
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b7f      	cmp	r3, #127	; 0x7f
 8006a74:	d8f0      	bhi.n	8006a58 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	61fa      	str	r2, [r7, #28]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2280      	movs	r2, #128	; 0x80
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7fe fb2a 	bl	80050e8 <_EncodeStr>
 8006a94:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006a96:	2216      	movs	r2, #22
 8006a98:	68f9      	ldr	r1, [r7, #12]
 8006a9a:	6938      	ldr	r0, [r7, #16]
 8006a9c:	f7fe fc64 	bl	8005368 <_SendPacket>
      RECORD_END();
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	3730      	adds	r7, #48	; 0x30
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	2001428c 	.word	0x2001428c
 8006ab4:	20014294 	.word	0x20014294

08006ab8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00f      	beq.n	8006ae6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f2      	bne.n	8006acc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	2001428c 	.word	0x2001428c

08006af4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006afa:	f3ef 8311 	mrs	r3, BASEPRI
 8006afe:	f04f 0120 	mov.w	r1, #32
 8006b02:	f381 8811 	msr	BASEPRI, r1
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	4817      	ldr	r0, [pc, #92]	; (8006b68 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006b0a:	f7fe fb3a 	bl	8005182 <_PreparePacket>
 8006b0e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	4b14      	ldr	r3, [pc, #80]	; (8006b6c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	e00b      	b.n	8006b38 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	1c59      	adds	r1, r3, #1
 8006b28:	6179      	str	r1, [r7, #20]
 8006b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	09db      	lsrs	r3, r3, #7
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b3c:	d8f0      	bhi.n	8006b20 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	617a      	str	r2, [r7, #20]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006b4e:	221b      	movs	r2, #27
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	68b8      	ldr	r0, [r7, #8]
 8006b54:	f7fe fc08 	bl	8005368 <_SendPacket>
  RECORD_END();
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f383 8811 	msr	BASEPRI, r3
}
 8006b5e:	bf00      	nop
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20014294 	.word	0x20014294
 8006b6c:	20014290 	.word	0x20014290

08006b70 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006b70:	b40f      	push	{r0, r1, r2, r3}
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006b78:	f107 0314 	add.w	r3, r7, #20
 8006b7c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006b7e:	1d3b      	adds	r3, r7, #4
 8006b80:	461a      	mov	r2, r3
 8006b82:	2100      	movs	r1, #0
 8006b84:	6938      	ldr	r0, [r7, #16]
 8006b86:	f7fe fe79 	bl	800587c <_VPrintTarget>
  va_end(ParamList);
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b94:	b004      	add	sp, #16
 8006b96:	4770      	bx	lr

08006b98 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	; 0x28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba4:	f04f 0120 	mov.w	r1, #32
 8006ba8:	f381 8811 	msr	BASEPRI, r1
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	4827      	ldr	r0, [pc, #156]	; (8006c4c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006bb0:	f7fe fae7 	bl	8005182 <_PreparePacket>
 8006bb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bb6:	2280      	movs	r2, #128	; 0x80
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	6938      	ldr	r0, [r7, #16]
 8006bbc:	f7fe fa94 	bl	80050e8 <_EncodeStr>
 8006bc0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	e00b      	b.n	8006be4 <SEGGER_SYSVIEW_Warn+0x4c>
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	1c59      	adds	r1, r3, #1
 8006bd4:	6279      	str	r1, [r7, #36]	; 0x24
 8006bd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	09db      	lsrs	r3, r3, #7
 8006be2:	623b      	str	r3, [r7, #32]
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	2b7f      	cmp	r3, #127	; 0x7f
 8006be8:	d8f0      	bhi.n	8006bcc <SEGGER_SYSVIEW_Warn+0x34>
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	627a      	str	r2, [r7, #36]	; 0x24
 8006bf0:	6a3a      	ldr	r2, [r7, #32]
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	61fb      	str	r3, [r7, #28]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	e00b      	b.n	8006c1c <SEGGER_SYSVIEW_Warn+0x84>
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	1c59      	adds	r1, r3, #1
 8006c0c:	61f9      	str	r1, [r7, #28]
 8006c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	09db      	lsrs	r3, r3, #7
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c20:	d8f0      	bhi.n	8006c04 <SEGGER_SYSVIEW_Warn+0x6c>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	61fa      	str	r2, [r7, #28]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c32:	221a      	movs	r2, #26
 8006c34:	68f9      	ldr	r1, [r7, #12]
 8006c36:	6938      	ldr	r0, [r7, #16]
 8006c38:	f7fe fb96 	bl	8005368 <_SendPacket>
  RECORD_END();
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f383 8811 	msr	BASEPRI, r3
}
 8006c42:	bf00      	nop
 8006c44:	3728      	adds	r7, #40	; 0x28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20014294 	.word	0x20014294

08006c50 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006c54:	4b13      	ldr	r3, [pc, #76]	; (8006ca4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c56:	7e1b      	ldrb	r3, [r3, #24]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4a13      	ldr	r2, [pc, #76]	; (8006ca8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	440b      	add	r3, r1
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	4413      	add	r3, r2
 8006c66:	336c      	adds	r3, #108	; 0x6c
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c6c:	7e1b      	ldrb	r3, [r3, #24]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	490d      	ldr	r1, [pc, #52]	; (8006ca8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006c72:	4603      	mov	r3, r0
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	4403      	add	r3, r0
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3370      	adds	r3, #112	; 0x70
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d00b      	beq.n	8006c9c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c86:	789b      	ldrb	r3, [r3, #2]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d107      	bne.n	8006c9c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006c8c:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006c92:	f7fe fa83 	bl	800519c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006c96:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006c9c:	4b01      	ldr	r3, [pc, #4]	; (8006ca4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20014264 	.word	0x20014264
 8006ca8:	200143fc 	.word	0x200143fc

08006cac <__libc_init_array>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	4d0d      	ldr	r5, [pc, #52]	; (8006ce4 <__libc_init_array+0x38>)
 8006cb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ce8 <__libc_init_array+0x3c>)
 8006cb2:	1b64      	subs	r4, r4, r5
 8006cb4:	10a4      	asrs	r4, r4, #2
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	42a6      	cmp	r6, r4
 8006cba:	d109      	bne.n	8006cd0 <__libc_init_array+0x24>
 8006cbc:	4d0b      	ldr	r5, [pc, #44]	; (8006cec <__libc_init_array+0x40>)
 8006cbe:	4c0c      	ldr	r4, [pc, #48]	; (8006cf0 <__libc_init_array+0x44>)
 8006cc0:	f000 f83c 	bl	8006d3c <_init>
 8006cc4:	1b64      	subs	r4, r4, r5
 8006cc6:	10a4      	asrs	r4, r4, #2
 8006cc8:	2600      	movs	r6, #0
 8006cca:	42a6      	cmp	r6, r4
 8006ccc:	d105      	bne.n	8006cda <__libc_init_array+0x2e>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd4:	4798      	blx	r3
 8006cd6:	3601      	adds	r6, #1
 8006cd8:	e7ee      	b.n	8006cb8 <__libc_init_array+0xc>
 8006cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cde:	4798      	blx	r3
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	e7f2      	b.n	8006cca <__libc_init_array+0x1e>
 8006ce4:	08006ee0 	.word	0x08006ee0
 8006ce8:	08006ee0 	.word	0x08006ee0
 8006cec:	08006ee0 	.word	0x08006ee0
 8006cf0:	08006ee4 	.word	0x08006ee4

08006cf4 <memcmp>:
 8006cf4:	b530      	push	{r4, r5, lr}
 8006cf6:	3901      	subs	r1, #1
 8006cf8:	2400      	movs	r4, #0
 8006cfa:	42a2      	cmp	r2, r4
 8006cfc:	d101      	bne.n	8006d02 <memcmp+0xe>
 8006cfe:	2000      	movs	r0, #0
 8006d00:	e005      	b.n	8006d0e <memcmp+0x1a>
 8006d02:	5d03      	ldrb	r3, [r0, r4]
 8006d04:	3401      	adds	r4, #1
 8006d06:	5d0d      	ldrb	r5, [r1, r4]
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	d0f6      	beq.n	8006cfa <memcmp+0x6>
 8006d0c:	1b58      	subs	r0, r3, r5
 8006d0e:	bd30      	pop	{r4, r5, pc}

08006d10 <memcpy>:
 8006d10:	440a      	add	r2, r1
 8006d12:	4291      	cmp	r1, r2
 8006d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d18:	d100      	bne.n	8006d1c <memcpy+0xc>
 8006d1a:	4770      	bx	lr
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d26:	4291      	cmp	r1, r2
 8006d28:	d1f9      	bne.n	8006d1e <memcpy+0xe>
 8006d2a:	bd10      	pop	{r4, pc}

08006d2c <memset>:
 8006d2c:	4402      	add	r2, r0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d100      	bne.n	8006d36 <memset+0xa>
 8006d34:	4770      	bx	lr
 8006d36:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3a:	e7f9      	b.n	8006d30 <memset+0x4>

08006d3c <_init>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	bf00      	nop
 8006d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d42:	bc08      	pop	{r3}
 8006d44:	469e      	mov	lr, r3
 8006d46:	4770      	bx	lr

08006d48 <_fini>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	bf00      	nop
 8006d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4e:	bc08      	pop	{r3}
 8006d50:	469e      	mov	lr, r3
 8006d52:	4770      	bx	lr
