
007TaskGetSetPrio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f2c  08006f2c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f34  08006f34  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014494  20000018  08006f54  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144ac  08006f54  000244ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a08e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ee  00000000  00000000  0003a0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003ea78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d25  00000000  00000000  0003fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159a7  00000000  00000000  000639b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db790  00000000  00000000  0007935c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154aec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e8  00000000  00000000  00154b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006dbc 	.word	0x08006dbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	08006dbc 	.word	0x08006dbc

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014404 	.word	0x20014404

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b96e 	b.w	80005a8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	4604      	mov	r4, r0
 80002ec:	468c      	mov	ip, r1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8083 	bne.w	80003fa <__udivmoddi4+0x116>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4617      	mov	r7, r2
 80002f8:	d947      	bls.n	800038a <__udivmoddi4+0xa6>
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	b142      	cbz	r2, 8000312 <__udivmoddi4+0x2e>
 8000300:	f1c2 0020 	rsb	r0, r2, #32
 8000304:	fa24 f000 	lsr.w	r0, r4, r0
 8000308:	4091      	lsls	r1, r2
 800030a:	4097      	lsls	r7, r2
 800030c:	ea40 0c01 	orr.w	ip, r0, r1
 8000310:	4094      	lsls	r4, r2
 8000312:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	fbbc f6f8 	udiv	r6, ip, r8
 800031c:	fa1f fe87 	uxth.w	lr, r7
 8000320:	fb08 c116 	mls	r1, r8, r6, ip
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f10e 	mul.w	r1, r6, lr
 800032c:	4299      	cmp	r1, r3
 800032e:	d909      	bls.n	8000344 <__udivmoddi4+0x60>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 8119 	bcs.w	800056c <__udivmoddi4+0x288>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 8116 	bls.w	800056c <__udivmoddi4+0x288>
 8000340:	3e02      	subs	r6, #2
 8000342:	443b      	add	r3, r7
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 fe0e 	mul.w	lr, r0, lr
 8000358:	45a6      	cmp	lr, r4
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x8c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	f080 8105 	bcs.w	8000570 <__udivmoddi4+0x28c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f240 8102 	bls.w	8000570 <__udivmoddi4+0x28c>
 800036c:	3802      	subs	r0, #2
 800036e:	443c      	add	r4, r7
 8000370:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000374:	eba4 040e 	sub.w	r4, r4, lr
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa0>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	b902      	cbnz	r2, 800038e <__udivmoddi4+0xaa>
 800038c:	deff      	udf	#255	; 0xff
 800038e:	fab2 f282 	clz	r2, r2
 8000392:	2a00      	cmp	r2, #0
 8000394:	d150      	bne.n	8000438 <__udivmoddi4+0x154>
 8000396:	1bcb      	subs	r3, r1, r7
 8000398:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	2601      	movs	r6, #1
 80003a2:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a6:	0c21      	lsrs	r1, r4, #16
 80003a8:	fb0e 331c 	mls	r3, lr, ip, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb08 f30c 	mul.w	r3, r8, ip
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0xe4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0xe2>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	f200 80e9 	bhi.w	8000598 <__udivmoddi4+0x2b4>
 80003c6:	4684      	mov	ip, r0
 80003c8:	1ac9      	subs	r1, r1, r3
 80003ca:	b2a3      	uxth	r3, r4
 80003cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d8:	fb08 f800 	mul.w	r8, r8, r0
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x10c>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x10a>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	f200 80d9 	bhi.w	80005a0 <__udivmoddi4+0x2bc>
 80003ee:	4618      	mov	r0, r3
 80003f0:	eba4 0408 	sub.w	r4, r4, r8
 80003f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f8:	e7bf      	b.n	800037a <__udivmoddi4+0x96>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x12e>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80b1 	beq.w	8000566 <__udivmoddi4+0x282>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x1cc>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0x140>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80b8 	bhi.w	8000594 <__udivmoddi4+0x2b0>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0103 	sbc.w	r1, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	468c      	mov	ip, r1
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0a8      	beq.n	8000384 <__udivmoddi4+0xa0>
 8000432:	e9c5 4c00 	strd	r4, ip, [r5]
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0xa0>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f603 	lsr.w	r6, r0, r3
 8000440:	4097      	lsls	r7, r2
 8000442:	fa01 f002 	lsl.w	r0, r1, r2
 8000446:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044a:	40d9      	lsrs	r1, r3
 800044c:	4330      	orrs	r0, r6
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	fbb1 f6fe 	udiv	r6, r1, lr
 8000454:	fa1f f887 	uxth.w	r8, r7
 8000458:	fb0e 1116 	mls	r1, lr, r6, r1
 800045c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000460:	fb06 f108 	mul.w	r1, r6, r8
 8000464:	4299      	cmp	r1, r3
 8000466:	fa04 f402 	lsl.w	r4, r4, r2
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x19c>
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000472:	f080 808d 	bcs.w	8000590 <__udivmoddi4+0x2ac>
 8000476:	4299      	cmp	r1, r3
 8000478:	f240 808a 	bls.w	8000590 <__udivmoddi4+0x2ac>
 800047c:	3e02      	subs	r6, #2
 800047e:	443b      	add	r3, r7
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b281      	uxth	r1, r0
 8000484:	fbb3 f0fe 	udiv	r0, r3, lr
 8000488:	fb0e 3310 	mls	r3, lr, r0, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb00 f308 	mul.w	r3, r0, r8
 8000494:	428b      	cmp	r3, r1
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x1c4>
 8000498:	1879      	adds	r1, r7, r1
 800049a:	f100 3cff 	add.w	ip, r0, #4294967295
 800049e:	d273      	bcs.n	8000588 <__udivmoddi4+0x2a4>
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d971      	bls.n	8000588 <__udivmoddi4+0x2a4>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4439      	add	r1, r7
 80004a8:	1acb      	subs	r3, r1, r3
 80004aa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ae:	e778      	b.n	80003a2 <__udivmoddi4+0xbe>
 80004b0:	f1c6 0c20 	rsb	ip, r6, #32
 80004b4:	fa03 f406 	lsl.w	r4, r3, r6
 80004b8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004bc:	431c      	orrs	r4, r3
 80004be:	fa20 f70c 	lsr.w	r7, r0, ip
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ca:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ce:	431f      	orrs	r7, r3
 80004d0:	0c3b      	lsrs	r3, r7, #16
 80004d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d6:	fa1f f884 	uxth.w	r8, r4
 80004da:	fb0e 1119 	mls	r1, lr, r9, r1
 80004de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e2:	fb09 fa08 	mul.w	sl, r9, r8
 80004e6:	458a      	cmp	sl, r1
 80004e8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ec:	fa00 f306 	lsl.w	r3, r0, r6
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x220>
 80004f2:	1861      	adds	r1, r4, r1
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d248      	bcs.n	800058c <__udivmoddi4+0x2a8>
 80004fa:	458a      	cmp	sl, r1
 80004fc:	d946      	bls.n	800058c <__udivmoddi4+0x2a8>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	4421      	add	r1, r4
 8000504:	eba1 010a 	sub.w	r1, r1, sl
 8000508:	b2bf      	uxth	r7, r7
 800050a:	fbb1 f0fe 	udiv	r0, r1, lr
 800050e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000512:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45b8      	cmp	r8, r7
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x24a>
 800051e:	19e7      	adds	r7, r4, r7
 8000520:	f100 31ff 	add.w	r1, r0, #4294967295
 8000524:	d22e      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000526:	45b8      	cmp	r8, r7
 8000528:	d92c      	bls.n	8000584 <__udivmoddi4+0x2a0>
 800052a:	3802      	subs	r0, #2
 800052c:	4427      	add	r7, r4
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba7 0708 	sub.w	r7, r7, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454f      	cmp	r7, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	4649      	mov	r1, r9
 8000540:	d31a      	bcc.n	8000578 <__udivmoddi4+0x294>
 8000542:	d017      	beq.n	8000574 <__udivmoddi4+0x290>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x27a>
 8000546:	ebb3 020e 	subs.w	r2, r3, lr
 800054a:	eb67 0701 	sbc.w	r7, r7, r1
 800054e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000552:	40f2      	lsrs	r2, r6
 8000554:	ea4c 0202 	orr.w	r2, ip, r2
 8000558:	40f7      	lsrs	r7, r6
 800055a:	e9c5 2700 	strd	r2, r7, [r5]
 800055e:	2600      	movs	r6, #0
 8000560:	4631      	mov	r1, r6
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e70b      	b.n	8000384 <__udivmoddi4+0xa0>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e9      	b.n	8000344 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fd      	b.n	8000370 <__udivmoddi4+0x8c>
 8000574:	4543      	cmp	r3, r8
 8000576:	d2e5      	bcs.n	8000544 <__udivmoddi4+0x260>
 8000578:	ebb8 0e02 	subs.w	lr, r8, r2
 800057c:	eb69 0104 	sbc.w	r1, r9, r4
 8000580:	3801      	subs	r0, #1
 8000582:	e7df      	b.n	8000544 <__udivmoddi4+0x260>
 8000584:	4608      	mov	r0, r1
 8000586:	e7d2      	b.n	800052e <__udivmoddi4+0x24a>
 8000588:	4660      	mov	r0, ip
 800058a:	e78d      	b.n	80004a8 <__udivmoddi4+0x1c4>
 800058c:	4681      	mov	r9, r0
 800058e:	e7b9      	b.n	8000504 <__udivmoddi4+0x220>
 8000590:	4666      	mov	r6, ip
 8000592:	e775      	b.n	8000480 <__udivmoddi4+0x19c>
 8000594:	4630      	mov	r0, r6
 8000596:	e74a      	b.n	800042e <__udivmoddi4+0x14a>
 8000598:	f1ac 0c02 	sub.w	ip, ip, #2
 800059c:	4439      	add	r1, r7
 800059e:	e713      	b.n	80003c8 <__udivmoddi4+0xe4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e724      	b.n	80003f0 <__udivmoddi4+0x10c>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db0b      	blt.n	80005d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 021f 	and.w	r2, r3, #31
 80005c4:	4907      	ldr	r1, [pc, #28]	; (80005e4 <__NVIC_EnableIRQ+0x38>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	095b      	lsrs	r3, r3, #5
 80005cc:	2001      	movs	r0, #1
 80005ce:	fa00 f202 	lsl.w	r2, r0, r2
 80005d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000e100 	.word	0xe000e100

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 faf5 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f85b 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8c7 	bl	8000788 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0); //Set the zeroth bit to one //SEGGER UART
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <main+0xa4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <main+0xa4>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000606:	f004 fa1d 	bl	8004a44 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start(); //Already done in UART

  status = xTaskCreate( LedSlowTask, "SlowTask", 200, NULL , 4, &SlowTaskHandle );
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <main+0xa8>)
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2304      	movs	r3, #4
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	22c8      	movs	r2, #200	; 0xc8
 8000616:	491f      	ldr	r1, [pc, #124]	; (8000694 <main+0xac>)
 8000618:	481f      	ldr	r0, [pc, #124]	; (8000698 <main+0xb0>)
 800061a:	f002 f931 	bl	8002880 <xTaskCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a1e      	ldr	r2, [pc, #120]	; (800069c <main+0xb4>)
 8000622:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <main+0xb4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d00a      	beq.n	8000642 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800062c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000630:	f383 8811 	msr	BASEPRI, r3
 8000634:	f3bf 8f6f 	isb	sy
 8000638:	f3bf 8f4f 	dsb	sy
 800063c:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800063e:	bf00      	nop
 8000640:	e7fe      	b.n	8000640 <main+0x58>
//
//  Next_Task_Handle = SlowTaskHandle;
//
  status = xTaskCreate( LedFastTask, "FastTask", 200, NULL , 1, &FastTaskHandle );
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <main+0xb8>)
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2301      	movs	r3, #1
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	22c8      	movs	r2, #200	; 0xc8
 800064e:	4915      	ldr	r1, [pc, #84]	; (80006a4 <main+0xbc>)
 8000650:	4815      	ldr	r0, [pc, #84]	; (80006a8 <main+0xc0>)
 8000652:	f002 f915 	bl	8002880 <xTaskCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <main+0xb4>)
 800065a:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <main+0xb4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d00a      	beq.n	800067a <main+0x92>
        __asm volatile
 8000664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000668:	f383 8811 	msr	BASEPRI, r3
 800066c:	f3bf 8f6f 	isb	sy
 8000670:	f3bf 8f4f 	dsb	sy
 8000674:	603b      	str	r3, [r7, #0]
    }
 8000676:	bf00      	nop
 8000678:	e7fe      	b.n	8000678 <main+0x90>
  NVIC_EnableIRQ(EXTI15_10_IRQn);      //Enable IRQ and the interrupt occurs btw pin 10 to 15 so that argument
 800067a:	2028      	movs	r0, #40	; 0x28
 800067c:	f7ff ff96 	bl	80005ac <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000680:	b662      	cpsie	i
}
 8000682:	bf00      	nop
  __enable_irq();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000684:	f002 fbd6 	bl	8002e34 <vTaskStartScheduler>
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0xa0>
 800068a:	bf00      	nop
 800068c:	e0001000 	.word	0xe0001000
 8000690:	20014374 	.word	0x20014374
 8000694:	08006dd4 	.word	0x08006dd4
 8000698:	0800096d 	.word	0x0800096d
 800069c:	20014378 	.word	0x20014378
 80006a0:	2001437c 	.word	0x2001437c
 80006a4:	08006de0 	.word	0x08006de0
 80006a8:	0800099d 	.word	0x0800099d

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fb76 	bl	8006dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <SystemClock_Config+0xd4>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a29      	ldr	r2, [pc, #164]	; (8000780 <SystemClock_Config+0xd4>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <SystemClock_Config+0xd8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <SystemClock_Config+0xd8>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemClock_Config+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000720:	2310      	movs	r3, #16
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000724:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072a:	2304      	movs	r3, #4
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f848 	bl	80017d0 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000746:	f000 f951 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fd48 	bl	80011fc <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000772:	f000 f93b 	bl	80009ec <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b43      	ldr	r3, [pc, #268]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a42      	ldr	r2, [pc, #264]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a3b      	ldr	r2, [pc, #236]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a34      	ldr	r2, [pc, #208]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a2d      	ldr	r2, [pc, #180]	; (80008b0 <MX_GPIO_Init+0x128>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_GPIO_Init+0x128>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000814:	4827      	ldr	r0, [pc, #156]	; (80008b4 <MX_GPIO_Init+0x12c>)
 8000816:	f000 fc99 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	4826      	ldr	r0, [pc, #152]	; (80008b8 <MX_GPIO_Init+0x130>)
 8000820:	f000 fc94 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_GPIO_Init+0x134>)
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	481f      	ldr	r0, [pc, #124]	; (80008b8 <MX_GPIO_Init+0x130>)
 800083a:	f000 faf3 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800083e:	230c      	movs	r3, #12
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084e:	2307      	movs	r3, #7
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4816      	ldr	r0, [pc, #88]	; (80008b4 <MX_GPIO_Init+0x12c>)
 800085a:	f000 fae3 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800085e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480f      	ldr	r0, [pc, #60]	; (80008b4 <MX_GPIO_Init+0x12c>)
 8000878:	f000 fad4 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_GPIO_Init+0x130>)
 8000894:	f000 fac6 	bl	8000e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2106      	movs	r1, #6
 800089c:	2028      	movs	r0, #40	; 0x28
 800089e:	f000 fa97 	bl	8000dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a2:	2028      	movs	r0, #40	; 0x28
 80008a4:	f000 fab0 	bl	8000e08 <HAL_NVIC_EnableIRQ>

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40020800 	.word	0x40020800
 80008bc:	10210000 	.word	0x10210000

080008c0 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 80008c4:	f005 ff1a 	bl	80066fc <SEGGER_SYSVIEW_RecordEnterISR>
	userbutton = 0;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <button_interrupt_handler+0x18>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 80008ce:	f005 ff57 	bl	8006780 <SEGGER_SYSVIEW_RecordExitISR>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000000 	.word	0x20000000

080008dc <SwitchPriority>:

void SwitchPriority(void){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t enter_switchpriority = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 80008e6:	f003 fd77 	bl	80043d8 <vPortEnterCritical>
	if(userbutton == 0){
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <SwitchPriority+0x84>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d104      	bne.n	80008fc <SwitchPriority+0x20>
		userbutton = 1;
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <SwitchPriority+0x84>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
		enter_switchpriority = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 80008fc:	f003 fd9c 	bl	8004438 <vPortExitCritical>
	if(enter_switchpriority)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d027      	beq.n	8000956 <SwitchPriority+0x7a>
	{
		t1 = xTaskGetHandle("SlowTask");
 8000906:	4817      	ldr	r0, [pc, #92]	; (8000964 <SwitchPriority+0x88>)
 8000908:	f002 fc94 	bl	8003234 <xTaskGetHandle>
 800090c:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("FastTask");
 800090e:	4816      	ldr	r0, [pc, #88]	; (8000968 <SwitchPriority+0x8c>)
 8000910:	f002 fc90 	bl	8003234 <xTaskGetHandle>
 8000914:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000916:	6938      	ldr	r0, [r7, #16]
 8000918:	f002 f984 	bl	8002c24 <uxTaskPriorityGet>
 800091c:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f002 f980 	bl	8002c24 <uxTaskPriorityGet>
 8000924:	6078      	str	r0, [r7, #4]
		curr = xTaskGetCurrentTaskHandle();
 8000926:	f003 f8ed 	bl	8003b04 <xTaskGetCurrentTaskHandle>
 800092a:	6038      	str	r0, [r7, #0]

		if(curr == t1)
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	429a      	cmp	r2, r3
 8000932:	d108      	bne.n	8000946 <SwitchPriority+0x6a>
		{
			vTaskPrioritySet(t1,p2);
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	6938      	ldr	r0, [r7, #16]
 8000938:	f002 f98e 	bl	8002c58 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f002 f98a 	bl	8002c58 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000944:	e007      	b.n	8000956 <SwitchPriority+0x7a>
			vTaskPrioritySet(t2,p1);
 8000946:	68b9      	ldr	r1, [r7, #8]
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f002 f985 	bl	8002c58 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	6938      	ldr	r0, [r7, #16]
 8000952:	f002 f981 	bl	8002c58 <vTaskPrioritySet>
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000000 	.word	0x20000000
 8000964:	08006dd4 	.word	0x08006dd4
 8000968:	08006de0 	.word	0x08006de0

0800096c <LedSlowTask>:

void LedSlowTask(void *parameter){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("SLOW LED Task");
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <LedSlowTask+0x28>)
 8000976:	f006 f969 	bl	8006c4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //PA5
 800097a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <LedSlowTask+0x2c>)
 8000980:	f000 fbfd 	bl	800117e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000988:	f002 f914 	bl	8002bb4 <vTaskDelay>
		SwitchPriority();
 800098c:	f7ff ffa6 	bl	80008dc <SwitchPriority>
		SEGGER_SYSVIEW_PrintfTarget("SLOW LED Task");
 8000990:	e7f0      	b.n	8000974 <LedSlowTask+0x8>
 8000992:	bf00      	nop
 8000994:	08006dec 	.word	0x08006dec
 8000998:	40020000 	.word	0x40020000

0800099c <LedFastTask>:
	}/*End of Infinite Loop*/
}

void LedFastTask(void *parameter){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("FAST LED Task");
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <LedFastTask+0x24>)
 80009a6:	f006 f951 	bl	8006c4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //PA5
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <LedFastTask+0x28>)
 80009ae:	f000 fbe6 	bl	800117e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(100));
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f002 f8fe 	bl	8002bb4 <vTaskDelay>
		SwitchPriority();
 80009b8:	f7ff ff90 	bl	80008dc <SwitchPriority>
		SEGGER_SYSVIEW_PrintfTarget("FAST LED Task");
 80009bc:	e7f2      	b.n	80009a4 <LedFastTask+0x8>
 80009be:	bf00      	nop
 80009c0:	08006dfc 	.word	0x08006dfc
 80009c4:	40020800 	.word	0x40020800

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009da:	f000 f921 	bl	8000c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40000c00 	.word	0x40000c00

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2032      	movs	r0, #50	; 0x32
 8000a62:	f000 f9b5 	bl	8000dd0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000a66:	2032      	movs	r0, #50	; 0x32
 8000a68:	f000 f9ce 	bl	8000e08 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <HAL_InitTick+0xa4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <HAL_InitTick+0xa4>)
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_InitTick+0xa4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a88:	f107 0210 	add.w	r2, r7, #16
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fcb8 	bl	8001408 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a98:	f000 fca2 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa4:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <HAL_InitTick+0xa8>)
 8000aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aaa:	0c9b      	lsrs	r3, r3, #18
 8000aac:	3b01      	subs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_InitTick+0xac>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <HAL_InitTick+0xb0>)
 8000ab4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_InitTick+0xac>)
 8000ab8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000abc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_InitTick+0xac>)
 8000ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_InitTick+0xac>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_InitTick+0xac>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <HAL_InitTick+0xac>)
 8000ad2:	f001 f8d7 	bl	8001c84 <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d104      	bne.n	8000ae6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000adc:	4806      	ldr	r0, [pc, #24]	; (8000af8 <HAL_InitTick+0xac>)
 8000ade:	f001 f906 	bl	8001cee <HAL_TIM_Base_Start_IT>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3730      	adds	r7, #48	; 0x30
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	431bde83 	.word	0x431bde83
 8000af8:	20014380 	.word	0x20014380
 8000afc:	40000c00 	.word	0x40000c00

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	button_interrupt_handler();
 8000b38:	f7ff fec2 	bl	80008c0 <button_interrupt_handler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b40:	f000 fb38 	bl	80011b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <TIM5_IRQHandler+0x10>)
 8000b4e:	f001 f8f2 	bl	8001d36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20014380 	.word	0x20014380

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <SystemInit+0x28>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <SystemInit+0x28>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SystemInit+0x28>)
 8000b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b76:	609a      	str	r2, [r3, #8]
#endif
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b8e:	e003      	b.n	8000b98 <LoopCopyDataInit>

08000b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b96:	3104      	adds	r1, #4

08000b98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ba0:	d3f6      	bcc.n	8000b90 <CopyDataInit>
  ldr  r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ba4:	e002      	b.n	8000bac <LoopFillZerobss>

08000ba6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ba8:	f842 3b04 	str.w	r3, [r2], #4

08000bac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bb0:	d3f9      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff ffd3 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f006 f8b9 	bl	8006d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fd15 	bl	80005e8 <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bc4:	08006f3c 	.word	0x08006f3c
  ldr  r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bcc:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000bd0:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000bd4:	200144ac 	.word	0x200144ac

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_Init+0x40>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_Init+0x40>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x40>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f8d8 	bl	8000dba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff ff1e 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fef4 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	2000000c 	.word	0x2000000c
 8000c44:	200143c0 	.word	0x200143c0

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200143c0 	.word	0x200143c0

08000c60 <__NVIC_SetPriorityGrouping>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ff4c 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de2:	f7ff ff61 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000de6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	6978      	ldr	r0, [r7, #20]
 8000dee:	f7ff ffb1 	bl	8000d54 <NVIC_EncodePriority>
 8000df2:	4602      	mov	r2, r0
 8000df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff80 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff54 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e165      	b.n	800110c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 8154 	bne.w	8001106 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d00b      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e72:	2b11      	cmp	r3, #17
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0xfc>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b12      	cmp	r3, #18
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80ae 	beq.w	8001106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a5c      	ldr	r2, [pc, #368]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b5a      	ldr	r3, [pc, #360]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a58      	ldr	r2, [pc, #352]	; (8001128 <HAL_GPIO_Init+0x304>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_GPIO_Init+0x308>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d025      	beq.n	800103e <HAL_GPIO_Init+0x21a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_GPIO_Init+0x30c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01f      	beq.n	800103a <HAL_GPIO_Init+0x216>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <HAL_GPIO_Init+0x310>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x212>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_GPIO_Init+0x314>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x20e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4b      	ldr	r2, [pc, #300]	; (800113c <HAL_GPIO_Init+0x318>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x20a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <HAL_GPIO_Init+0x31c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x206>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a49      	ldr	r2, [pc, #292]	; (8001144 <HAL_GPIO_Init+0x320>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x202>
 8001022:	2306      	movs	r3, #6
 8001024:	e00c      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 8001026:	2307      	movs	r3, #7
 8001028:	e00a      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x304>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105e:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001082:	4a31      	ldr	r2, [pc, #196]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_GPIO_Init+0x324>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f ae96 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40021400 	.word	0x40021400
 8001144:	40021800 	.word	0x40021800
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	401a      	ands	r2, r3
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	429a      	cmp	r2, r3
 8001196:	d104      	bne.n	80011a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	041a      	lsls	r2, r3, #16
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f806 	bl	80011e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0cc      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d90c      	bls.n	8001238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121e:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0b8      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001250:	4b59      	ldr	r3, [pc, #356]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a58      	ldr	r2, [pc, #352]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800125a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001274:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	494d      	ldr	r1, [pc, #308]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d044      	beq.n	800131c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d107      	bne.n	80012aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d119      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e07f      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d003      	beq.n	80012ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ba:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e06f      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e067      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f023 0203 	bic.w	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4934      	ldr	r1, [pc, #208]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ec:	f7ff fcac 	bl	8000c48 <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	e00a      	b.n	800130a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	f7ff fca8 	bl	8000c48 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e04f      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 020c 	and.w	r2, r3, #12
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	429a      	cmp	r2, r3
 800131a:	d1eb      	bne.n	80012f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d20c      	bcs.n	8001344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d001      	beq.n	8001344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e032      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4916      	ldr	r1, [pc, #88]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	4313      	orrs	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	490e      	ldr	r1, [pc, #56]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	4313      	orrs	r3, r2
 8001380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001382:	f000 f873 	bl	800146c <HAL_RCC_GetSysClockFreq>
 8001386:	4602      	mov	r2, r0
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	490a      	ldr	r1, [pc, #40]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	5ccb      	ldrb	r3, [r1, r3]
 8001396:	fa22 f303 	lsr.w	r3, r2, r3
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_RCC_ClockConfig+0x1c8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fb52 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023c00 	.word	0x40023c00
 80013b8:	40023800 	.word	0x40023800
 80013bc:	08006ef0 	.word	0x08006ef0
 80013c0:	20000004 	.word	0x20000004
 80013c4:	20000008 	.word	0x20000008

080013c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_RCC_GetHCLKFreq+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013e4:	f7ff fff0 	bl	80013c8 <HAL_RCC_GetHCLKFreq>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	0a9b      	lsrs	r3, r3, #10
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	4903      	ldr	r1, [pc, #12]	; (8001404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013f6:	5ccb      	ldrb	r3, [r1, r3]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	08006f00 	.word	0x08006f00

08001408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	220f      	movs	r2, #15
 8001416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_RCC_GetClockConfig+0x60>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 020f 	and.w	r2, r3, #15
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001470:	b088      	sub	sp, #32
 8001472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001488:	4bce      	ldr	r3, [pc, #824]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b0c      	cmp	r3, #12
 8001492:	f200 818d 	bhi.w	80017b0 <HAL_RCC_GetSysClockFreq+0x344>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <HAL_RCC_GetSysClockFreq+0x30>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014d1 	.word	0x080014d1
 80014a0:	080017b1 	.word	0x080017b1
 80014a4:	080017b1 	.word	0x080017b1
 80014a8:	080017b1 	.word	0x080017b1
 80014ac:	080014d7 	.word	0x080014d7
 80014b0:	080017b1 	.word	0x080017b1
 80014b4:	080017b1 	.word	0x080017b1
 80014b8:	080017b1 	.word	0x080017b1
 80014bc:	080014dd 	.word	0x080014dd
 80014c0:	080017b1 	.word	0x080017b1
 80014c4:	080017b1 	.word	0x080017b1
 80014c8:	080017b1 	.word	0x080017b1
 80014cc:	08001651 	.word	0x08001651
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014d0:	4bbd      	ldr	r3, [pc, #756]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014d2:	61bb      	str	r3, [r7, #24]
       break;
 80014d4:	e16f      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014d6:	4bbd      	ldr	r3, [pc, #756]	; (80017cc <HAL_RCC_GetSysClockFreq+0x360>)
 80014d8:	61bb      	str	r3, [r7, #24]
      break;
 80014da:	e16c      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014dc:	4bb9      	ldr	r3, [pc, #740]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e6:	4bb7      	ldr	r3, [pc, #732]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d053      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f2:	4bb4      	ldr	r3, [pc, #720]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	099b      	lsrs	r3, r3, #6
 80014f8:	461a      	mov	r2, r3
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001502:	f04f 0100 	mov.w	r1, #0
 8001506:	ea02 0400 	and.w	r4, r2, r0
 800150a:	603c      	str	r4, [r7, #0]
 800150c:	400b      	ands	r3, r1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001514:	4620      	mov	r0, r4
 8001516:	4629      	mov	r1, r5
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	014b      	lsls	r3, r1, #5
 8001522:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001526:	0142      	lsls	r2, r0, #5
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	4623      	mov	r3, r4
 800152e:	1ac0      	subs	r0, r0, r3
 8001530:	462b      	mov	r3, r5
 8001532:	eb61 0103 	sbc.w	r1, r1, r3
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	018b      	lsls	r3, r1, #6
 8001540:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001544:	0182      	lsls	r2, r0, #6
 8001546:	1a12      	subs	r2, r2, r0
 8001548:	eb63 0301 	sbc.w	r3, r3, r1
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	f04f 0100 	mov.w	r1, #0
 8001554:	00d9      	lsls	r1, r3, #3
 8001556:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800155a:	00d0      	lsls	r0, r2, #3
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4621      	mov	r1, r4
 8001562:	1852      	adds	r2, r2, r1
 8001564:	4629      	mov	r1, r5
 8001566:	eb43 0101 	adc.w	r1, r3, r1
 800156a:	460b      	mov	r3, r1
 800156c:	f04f 0000 	mov.w	r0, #0
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	0259      	lsls	r1, r3, #9
 8001576:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800157a:	0250      	lsls	r0, r2, #9
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	461a      	mov	r2, r3
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	f7fe fe92 	bl	80002b4 <__aeabi_uldivmod>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4613      	mov	r3, r2
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	e04c      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159a:	4b8a      	ldr	r3, [pc, #552]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	099b      	lsrs	r3, r3, #6
 80015a0:	461a      	mov	r2, r3
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	ea02 0a00 	and.w	sl, r2, r0
 80015b2:	ea03 0b01 	and.w	fp, r3, r1
 80015b6:	4650      	mov	r0, sl
 80015b8:	4659      	mov	r1, fp
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	014b      	lsls	r3, r1, #5
 80015c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015c8:	0142      	lsls	r2, r0, #5
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	ebb0 000a 	subs.w	r0, r0, sl
 80015d2:	eb61 010b 	sbc.w	r1, r1, fp
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	018b      	lsls	r3, r1, #6
 80015e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015e4:	0182      	lsls	r2, r0, #6
 80015e6:	1a12      	subs	r2, r2, r0
 80015e8:	eb63 0301 	sbc.w	r3, r3, r1
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	00d9      	lsls	r1, r3, #3
 80015f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015fa:	00d0      	lsls	r0, r2, #3
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	eb12 020a 	adds.w	r2, r2, sl
 8001604:	eb43 030b 	adc.w	r3, r3, fp
 8001608:	f04f 0000 	mov.w	r0, #0
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	0299      	lsls	r1, r3, #10
 8001612:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001616:	0290      	lsls	r0, r2, #10
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	461a      	mov	r2, r3
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	f7fe fe44 	bl	80002b4 <__aeabi_uldivmod>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4613      	mov	r3, r2
 8001632:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001634:	4b63      	ldr	r3, [pc, #396]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	3301      	adds	r3, #1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	61bb      	str	r3, [r7, #24]
      break;
 800164e:	e0b2      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001658:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800165a:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d04d      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001666:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	099b      	lsrs	r3, r3, #6
 800166c:	461a      	mov	r2, r3
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	ea02 0800 	and.w	r8, r2, r0
 800167e:	ea03 0901 	and.w	r9, r3, r1
 8001682:	4640      	mov	r0, r8
 8001684:	4649      	mov	r1, r9
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	014b      	lsls	r3, r1, #5
 8001690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001694:	0142      	lsls	r2, r0, #5
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	ebb0 0008 	subs.w	r0, r0, r8
 800169e:	eb61 0109 	sbc.w	r1, r1, r9
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	018b      	lsls	r3, r1, #6
 80016ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016b0:	0182      	lsls	r2, r0, #6
 80016b2:	1a12      	subs	r2, r2, r0
 80016b4:	eb63 0301 	sbc.w	r3, r3, r1
 80016b8:	f04f 0000 	mov.w	r0, #0
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	00d9      	lsls	r1, r3, #3
 80016c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016c6:	00d0      	lsls	r0, r2, #3
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	eb12 0208 	adds.w	r2, r2, r8
 80016d0:	eb43 0309 	adc.w	r3, r3, r9
 80016d4:	f04f 0000 	mov.w	r0, #0
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	0259      	lsls	r1, r3, #9
 80016de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016e2:	0250      	lsls	r0, r2, #9
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	461a      	mov	r2, r3
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	f7fe fdde 	bl	80002b4 <__aeabi_uldivmod>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4613      	mov	r3, r2
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	e04a      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	099b      	lsrs	r3, r3, #6
 8001708:	461a      	mov	r2, r3
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001712:	f04f 0100 	mov.w	r1, #0
 8001716:	ea02 0400 	and.w	r4, r2, r0
 800171a:	ea03 0501 	and.w	r5, r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	014b      	lsls	r3, r1, #5
 800172c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001730:	0142      	lsls	r2, r0, #5
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	1b00      	subs	r0, r0, r4
 8001738:	eb61 0105 	sbc.w	r1, r1, r5
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	018b      	lsls	r3, r1, #6
 8001746:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800174a:	0182      	lsls	r2, r0, #6
 800174c:	1a12      	subs	r2, r2, r0
 800174e:	eb63 0301 	sbc.w	r3, r3, r1
 8001752:	f04f 0000 	mov.w	r0, #0
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	00d9      	lsls	r1, r3, #3
 800175c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001760:	00d0      	lsls	r0, r2, #3
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	1912      	adds	r2, r2, r4
 8001768:	eb45 0303 	adc.w	r3, r5, r3
 800176c:	f04f 0000 	mov.w	r0, #0
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	0299      	lsls	r1, r3, #10
 8001776:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800177a:	0290      	lsls	r0, r2, #10
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	461a      	mov	r2, r3
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	f7fe fd92 	bl	80002b4 <__aeabi_uldivmod>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4613      	mov	r3, r2
 8001796:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	0f1b      	lsrs	r3, r3, #28
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	61bb      	str	r3, [r7, #24]
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017b2:	61bb      	str	r3, [r7, #24]
      break;
 80017b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b6:	69bb      	ldr	r3, [r7, #24]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	00f42400 	.word	0x00f42400
 80017cc:	007a1200 	.word	0x007a1200

080017d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 8083 	beq.w	80018f0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017ea:	4b95      	ldr	r3, [pc, #596]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d019      	beq.n	800182a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f6:	4b92      	ldr	r3, [pc, #584]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d106      	bne.n	8001810 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001802:	4b8f      	ldr	r3, [pc, #572]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180e:	d00c      	beq.n	800182a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001810:	4b8b      	ldr	r3, [pc, #556]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d112      	bne.n	8001842 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181c:	4b88      	ldr	r3, [pc, #544]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001828:	d10b      	bne.n	8001842 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182a:	4b85      	ldr	r3, [pc, #532]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d05b      	beq.n	80018ee <HAL_RCC_OscConfig+0x11e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d157      	bne.n	80018ee <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e216      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x8a>
 800184c:	4b7c      	ldr	r3, [pc, #496]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a7b      	ldr	r2, [pc, #492]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e01d      	b.n	8001896 <HAL_RCC_OscConfig+0xc6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001862:	d10c      	bne.n	800187e <HAL_RCC_OscConfig+0xae>
 8001864:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a75      	ldr	r2, [pc, #468]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800186a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b73      	ldr	r3, [pc, #460]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a72      	ldr	r2, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e00b      	b.n	8001896 <HAL_RCC_OscConfig+0xc6>
 800187e:	4b70      	ldr	r3, [pc, #448]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a6f      	ldr	r2, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6c      	ldr	r2, [pc, #432]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d013      	beq.n	80018c6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff f9d3 	bl	8000c48 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a6:	f7ff f9cf 	bl	8000c48 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b64      	cmp	r3, #100	; 0x64
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1db      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b8:	4b61      	ldr	r3, [pc, #388]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0xd6>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff f9bf 	bl	8000c48 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ce:	f7ff f9bb 	bl	8000c48 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	; 0x64
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1c7      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0xfe>
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d06f      	beq.n	80019dc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b00      	cmp	r3, #0
 8001906:	d017      	beq.n	8001938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001908:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001910:	2b08      	cmp	r3, #8
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001914:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001920:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d11c      	bne.n	8001966 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800192c:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d116      	bne.n	8001966 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001938:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x180>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e18f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4938      	ldr	r1, [pc, #224]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001964:	e03a      	b.n	80019dc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d020      	beq.n	80019b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f968 	bl	8000c48 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197c:	f7ff f964 	bl	8000c48 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e170      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4925      	ldr	r1, [pc, #148]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
 80019ae:	e015      	b.n	80019dc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff f947 	bl	8000c48 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff f943 	bl	8000c48 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e14f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d037      	beq.n	8001a58 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d016      	beq.n	8001a1e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff f927 	bl	8000c48 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fe:	f7ff f923 	bl	8000c48 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e12f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x22e>
 8001a1c:	e01c      	b.n	8001a58 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f910 	bl	8000c48 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2a:	e00f      	b.n	8001a4c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f90c 	bl	8000c48 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d908      	bls.n	8001a4c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e118      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	42470000 	.word	0x42470000
 8001a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4c:	4b8a      	ldr	r3, [pc, #552]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e9      	bne.n	8001a2c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8097 	beq.w	8001b94 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6a:	4b83      	ldr	r3, [pc, #524]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10f      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a7e      	ldr	r2, [pc, #504]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a96:	4b79      	ldr	r3, [pc, #484]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aae:	f7ff f8cb 	bl	8000c48 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7ff f8c7 	bl	8000c48 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0d3      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	4b6c      	ldr	r3, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x31a>
 8001adc:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a65      	ldr	r2, [pc, #404]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae8:	e01c      	b.n	8001b24 <HAL_RCC_OscConfig+0x354>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x33c>
 8001af2:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6713      	str	r3, [r2, #112]	; 0x70
 8001afe:	4b5e      	ldr	r3, [pc, #376]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a5d      	ldr	r2, [pc, #372]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0x354>
 8001b0c:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	4a59      	ldr	r2, [pc, #356]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
 8001b18:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a56      	ldr	r2, [pc, #344]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b1e:	f023 0304 	bic.w	r3, r3, #4
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d015      	beq.n	8001b58 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f88c 	bl	8000c48 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f888 	bl	8000c48 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e092      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0ee      	beq.n	8001b34 <HAL_RCC_OscConfig+0x364>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff f876 	bl	8000c48 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff f872 	bl	8000c48 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e07c      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1ee      	bne.n	8001b60 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b88:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4a3a      	ldr	r2, [pc, #232]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d068      	beq.n	8001c6e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d060      	beq.n	8001c6a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d145      	bne.n	8001c3c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f847 	bl	8000c48 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7ff f843 	bl	8000c48 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e04f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	019b      	lsls	r3, r3, #6
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	061b      	lsls	r3, r3, #24
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	071b      	lsls	r3, r3, #28
 8001c08:	491b      	ldr	r1, [pc, #108]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f818 	bl	8000c48 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f814 	bl	8000c48 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e020      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x44c>
 8001c3a:	e018      	b.n	8001c6e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff f801 	bl	8000c48 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe fffd 	bl	8000c48 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e009      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x47a>
 8001c68:	e001      	b.n	8001c6e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	42470060 	.word	0x42470060

08001c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e01d      	b.n	8001cd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f815 	bl	8001cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f000 f968 	bl	8001f98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b06      	cmp	r3, #6
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d122      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d11b      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f06f 0202 	mvn.w	r2, #2
 8001d62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f8ee 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001d7e:	e005      	b.n	8001d8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8e0 	bl	8001f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8f1 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d122      	bne.n	8001de6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d11b      	bne.n	8001de6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0204 	mvn.w	r2, #4
 8001db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8c4 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001dd2:	e005      	b.n	8001de0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8b6 	bl	8001f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8c7 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d122      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11b      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0208 	mvn.w	r2, #8
 8001e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f89a 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001e26:	e005      	b.n	8001e34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f88c 	bl	8001f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f89d 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d122      	bne.n	8001e8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d11b      	bne.n	8001e8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0210 	mvn.w	r2, #16
 8001e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2208      	movs	r2, #8
 8001e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f870 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001e7a:	e005      	b.n	8001e88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f862 	bl	8001f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f873 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10e      	bne.n	8001eba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f06f 0201 	mvn.w	r2, #1
 8001eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe fd87 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d10e      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	2b80      	cmp	r3, #128	; 0x80
 8001ed4:	d107      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f903 	bl	80020ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b40      	cmp	r3, #64	; 0x40
 8001ef2:	d10e      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d107      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f838 	bl	8001f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d10e      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d107      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0220 	mvn.w	r2, #32
 8001f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8cd 	bl	80020d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a40      	ldr	r2, [pc, #256]	; (80020ac <TIM_Base_SetConfig+0x114>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d00f      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3d      	ldr	r2, [pc, #244]	; (80020b0 <TIM_Base_SetConfig+0x118>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00b      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3c      	ldr	r2, [pc, #240]	; (80020b4 <TIM_Base_SetConfig+0x11c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3b      	ldr	r2, [pc, #236]	; (80020b8 <TIM_Base_SetConfig+0x120>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3a      	ldr	r2, [pc, #232]	; (80020bc <TIM_Base_SetConfig+0x124>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d108      	bne.n	8001fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <TIM_Base_SetConfig+0x114>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d027      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <TIM_Base_SetConfig+0x118>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d023      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <TIM_Base_SetConfig+0x11c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <TIM_Base_SetConfig+0x120>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a29      	ldr	r2, [pc, #164]	; (80020bc <TIM_Base_SetConfig+0x124>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d017      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <TIM_Base_SetConfig+0x128>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <TIM_Base_SetConfig+0x12c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00f      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <TIM_Base_SetConfig+0x130>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a25      	ldr	r2, [pc, #148]	; (80020cc <TIM_Base_SetConfig+0x134>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <TIM_Base_SetConfig+0x138>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d003      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a23      	ldr	r2, [pc, #140]	; (80020d4 <TIM_Base_SetConfig+0x13c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d108      	bne.n	800205c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <TIM_Base_SetConfig+0x114>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <TIM_Base_SetConfig+0xf8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <TIM_Base_SetConfig+0x124>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d103      	bne.n	8002098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	615a      	str	r2, [r3, #20]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40000800 	.word	0x40000800
 80020b8:	40000c00 	.word	0x40000c00
 80020bc:	40010400 	.word	0x40010400
 80020c0:	40014000 	.word	0x40014000
 80020c4:	40014400 	.word	0x40014400
 80020c8:	40014800 	.word	0x40014800
 80020cc:	40001800 	.word	0x40001800
 80020d0:	40001c00 	.word	0x40001c00
 80020d4:	40002000 	.word	0x40002000

080020d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f103 0208 	add.w	r2, r3, #8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f103 0208 	add.w	r2, r3, #8
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 0208 	add.w	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d103      	bne.n	800217a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e00c      	b.n	8002194 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3308      	adds	r3, #8
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e002      	b.n	8002188 <vListInsert+0x2e>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	429a      	cmp	r2, r3
 8002192:	d2f6      	bcs.n	8002182 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6892      	ldr	r2, [r2, #8]
 80021e2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6852      	ldr	r2, [r2, #4]
 80021ec:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d103      	bne.n	8002200 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800222a:	2301      	movs	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <xQueueGenericReset+0x2e>
        __asm volatile
 8002238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223c:	f383 8811 	msr	BASEPRI, r3
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	60fb      	str	r3, [r7, #12]
    }
 800224a:	bf00      	nop
 800224c:	e7fe      	b.n	800224c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d05d      	beq.n	8002310 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	d059      	beq.n	8002310 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	2100      	movs	r1, #0
 8002266:	fba3 2302 	umull	r2, r3, r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d000      	beq.n	8002270 <xQueueGenericReset+0x50>
 800226e:	2101      	movs	r1, #1
 8002270:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	d14c      	bne.n	8002310 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002276:	f002 f8af 	bl	80043d8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	6939      	ldr	r1, [r7, #16]
 8002284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	441a      	add	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2200      	movs	r2, #0
 8002294:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	3b01      	subs	r3, #1
 80022a8:	6939      	ldr	r1, [r7, #16]
 80022aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	441a      	add	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	22ff      	movs	r2, #255	; 0xff
 80022ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d114      	bne.n	80022f6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01a      	beq.n	800230a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	3310      	adds	r3, #16
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 fa01 	bl	80036e0 <xTaskRemoveFromEventList>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d012      	beq.n	800230a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <xQueueGenericReset+0x11c>)
 80022e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	e009      	b.n	800230a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	3310      	adds	r3, #16
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff00 	bl	8002100 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	3324      	adds	r3, #36	; 0x24
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fefb 	bl	8002100 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800230a:	f002 f895 	bl	8004438 <vPortExitCritical>
 800230e:	e001      	b.n	8002314 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10a      	bne.n	8002330 <xQueueGenericReset+0x110>
        __asm volatile
 800231a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231e:	f383 8811 	msr	BASEPRI, r3
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	60bb      	str	r3, [r7, #8]
    }
 800232c:	bf00      	nop
 800232e:	e7fe      	b.n	800232e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002330:	697b      	ldr	r3, [r7, #20]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000ed04 	.word	0xe000ed04

08002340 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02e      	beq.n	80023b6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002358:	2100      	movs	r1, #0
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	fba3 2302 	umull	r2, r3, r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d000      	beq.n	8002368 <xQueueGenericCreate+0x28>
 8002366:	2101      	movs	r1, #1
 8002368:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d123      	bne.n	80023b6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002376:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800237a:	d81c      	bhi.n	80023b6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3350      	adds	r3, #80	; 0x50
 800238a:	4618      	mov	r0, r3
 800238c:	f002 f94e 	bl	800462c <pvPortMalloc>
 8002390:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01c      	beq.n	80023d2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3350      	adds	r3, #80	; 0x50
 80023a0:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023a2:	79fa      	ldrb	r2, [r7, #7]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f814 	bl	80023dc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80023b4:	e00d      	b.n	80023d2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <xQueueGenericCreate+0x92>
        __asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	613b      	str	r3, [r7, #16]
    }
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023d2:	69fb      	ldr	r3, [r7, #28]
    }
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e002      	b.n	80023fe <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800240a:	2101      	movs	r1, #1
 800240c:	69b8      	ldr	r0, [r7, #24]
 800240e:	f7ff ff07 	bl	8002220 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	68f9      	ldr	r1, [r7, #12]
 8002420:	2073      	movs	r0, #115	; 0x73
 8002422:	f003 fd99 	bl	8005f58 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b08f      	sub	sp, #60	; 0x3c
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <xQueueReceive+0x30>
        __asm volatile
 800244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	623b      	str	r3, [r7, #32]
    }
 800245c:	bf00      	nop
 800245e:	e7fe      	b.n	800245e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <xQueueReceive+0x3e>
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <xQueueReceive+0x42>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <xQueueReceive+0x44>
 8002472:	2300      	movs	r3, #0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <xQueueReceive+0x5e>
        __asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	61fb      	str	r3, [r7, #28]
    }
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800248e:	f001 fb49 	bl	8003b24 <xTaskGetSchedulerState>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <xQueueReceive+0x6e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <xQueueReceive+0x72>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <xQueueReceive+0x74>
 80024a2:	2300      	movs	r3, #0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <xQueueReceive+0x8e>
        __asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	61bb      	str	r3, [r7, #24]
    }
 80024ba:	bf00      	nop
 80024bc:	e7fe      	b.n	80024bc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024be:	f001 ff8b 	bl	80043d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d02f      	beq.n	800252e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024d2:	f000 f8bd 	bl	8002650 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 facb 	bl	8006a74 <SEGGER_SYSVIEW_ShrinkId>
 80024de:	4604      	mov	r4, r0
 80024e0:	2000      	movs	r0, #0
 80024e2:	f004 fac7 	bl	8006a74 <SEGGER_SYSVIEW_ShrinkId>
 80024e6:	4602      	mov	r2, r0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2101      	movs	r1, #1
 80024ec:	9100      	str	r1, [sp, #0]
 80024ee:	4621      	mov	r1, r4
 80024f0:	205c      	movs	r0, #92	; 0x5c
 80024f2:	f003 fda7 	bl	8006044 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00f      	beq.n	8002526 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	3310      	adds	r3, #16
 800250a:	4618      	mov	r0, r3
 800250c:	f001 f8e8 	bl	80036e0 <xTaskRemoveFromEventList>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002516:	4b4d      	ldr	r3, [pc, #308]	; (800264c <xQueueReceive+0x21c>)
 8002518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002526:	f001 ff87 	bl	8004438 <vPortExitCritical>
                return pdPASS;
 800252a:	2301      	movs	r3, #1
 800252c:	e08a      	b.n	8002644 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d113      	bne.n	800255c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002534:	f001 ff80 	bl	8004438 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	4618      	mov	r0, r3
 800253c:	f004 fa9a 	bl	8006a74 <SEGGER_SYSVIEW_ShrinkId>
 8002540:	4604      	mov	r4, r0
 8002542:	2000      	movs	r0, #0
 8002544:	f004 fa96 	bl	8006a74 <SEGGER_SYSVIEW_ShrinkId>
 8002548:	4602      	mov	r2, r0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2101      	movs	r1, #1
 800254e:	9100      	str	r1, [sp, #0]
 8002550:	4621      	mov	r1, r4
 8002552:	205c      	movs	r0, #92	; 0x5c
 8002554:	f003 fd76 	bl	8006044 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002558:	2300      	movs	r3, #0
 800255a:	e073      	b.n	8002644 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	4618      	mov	r0, r3
 8002568:	f001 f992 	bl	8003890 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800256c:	2301      	movs	r3, #1
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002570:	f001 ff62 	bl	8004438 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002574:	f000 fcc0 	bl	8002ef8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002578:	f001 ff2e 	bl	80043d8 <vPortEnterCritical>
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002582:	b25b      	sxtb	r3, r3
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d103      	bne.n	8002592 <xQueueReceive+0x162>
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002598:	b25b      	sxtb	r3, r3
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d103      	bne.n	80025a8 <xQueueReceive+0x178>
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025a8:	f001 ff46 	bl	8004438 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ac:	1d3a      	adds	r2, r7, #4
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 f981 	bl	80038bc <xTaskCheckForTimeOut>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d124      	bne.n	800260a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025c2:	f000 f8bd 	bl	8002740 <prvIsQueueEmpty>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d018      	beq.n	80025fe <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	3324      	adds	r3, #36	; 0x24
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 f817 	bl	8003608 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025dc:	f000 f85e 	bl	800269c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025e0:	f000 fc98 	bl	8002f14 <xTaskResumeAll>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f47f af69 	bne.w	80024be <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <xQueueReceive+0x21c>)
 80025ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	e75f      	b.n	80024be <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002600:	f000 f84c 	bl	800269c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002604:	f000 fc86 	bl	8002f14 <xTaskResumeAll>
 8002608:	e759      	b.n	80024be <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800260a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800260c:	f000 f846 	bl	800269c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002610:	f000 fc80 	bl	8002f14 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002616:	f000 f893 	bl	8002740 <prvIsQueueEmpty>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	f43f af4e 	beq.w	80024be <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	4618      	mov	r0, r3
 8002626:	f004 fa25 	bl	8006a74 <SEGGER_SYSVIEW_ShrinkId>
 800262a:	4604      	mov	r4, r0
 800262c:	2000      	movs	r0, #0
 800262e:	f004 fa21 	bl	8006a74 <SEGGER_SYSVIEW_ShrinkId>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2101      	movs	r1, #1
 8002638:	9100      	str	r1, [sp, #0]
 800263a:	4621      	mov	r1, r4
 800263c:	205c      	movs	r0, #92	; 0x5c
 800263e:	f003 fd01 	bl	8006044 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002642:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002644:	4618      	mov	r0, r3
 8002646:	3734      	adds	r7, #52	; 0x34
 8002648:	46bd      	mov	sp, r7
 800264a:	bd90      	pop	{r4, r7, pc}
 800264c:	e000ed04 	.word	0xe000ed04

08002650 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d018      	beq.n	8002694 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	441a      	add	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	d303      	bcc.n	8002684 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68d9      	ldr	r1, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	461a      	mov	r2, r3
 800268e:	6838      	ldr	r0, [r7, #0]
 8002690:	f004 fb7e 	bl	8006d90 <memcpy>
    }
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026a4:	f001 fe98 	bl	80043d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026b0:	e011      	b.n	80026d6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d012      	beq.n	80026e0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3324      	adds	r3, #36	; 0x24
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 f80e 	bl	80036e0 <xTaskRemoveFromEventList>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80026ca:	f001 f95d 	bl	8003988 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	dce9      	bgt.n	80026b2 <prvUnlockQueue+0x16>
 80026de:	e000      	b.n	80026e2 <prvUnlockQueue+0x46>
                        break;
 80026e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	22ff      	movs	r2, #255	; 0xff
 80026e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80026ea:	f001 fea5 	bl	8004438 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026ee:	f001 fe73 	bl	80043d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026fa:	e011      	b.n	8002720 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d012      	beq.n	800272a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3310      	adds	r3, #16
 8002708:	4618      	mov	r0, r3
 800270a:	f000 ffe9 	bl	80036e0 <xTaskRemoveFromEventList>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002714:	f001 f938 	bl	8003988 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002718:	7bbb      	ldrb	r3, [r7, #14]
 800271a:	3b01      	subs	r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002724:	2b00      	cmp	r3, #0
 8002726:	dce9      	bgt.n	80026fc <prvUnlockQueue+0x60>
 8002728:	e000      	b.n	800272c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800272a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	22ff      	movs	r2, #255	; 0xff
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002734:	f001 fe80 	bl	8004438 <vPortExitCritical>
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002748:	f001 fe46 	bl	80043d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002754:	2301      	movs	r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e001      	b.n	800275e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800275e:	f001 fe6b 	bl	8004438 <vPortExitCritical>

    return xReturn;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <vQueueAddToRegistry+0x26>
        __asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	60fb      	str	r3, [r7, #12]
    }
 800278e:	bf00      	nop
 8002790:	e7fe      	b.n	8002790 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d024      	beq.n	80027e6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	e01e      	b.n	80027e0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <vQueueAddToRegistry+0xa8>)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d105      	bne.n	80027be <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <vQueueAddToRegistry+0xa8>)
 80027b8:	4413      	add	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
                    break;
 80027bc:	e013      	b.n	80027e6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <vQueueAddToRegistry+0x6e>
 80027c4:	4a13      	ldr	r2, [pc, #76]	; (8002814 <vQueueAddToRegistry+0xa8>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d104      	bne.n	80027da <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <vQueueAddToRegistry+0xa8>)
 80027d6:	4413      	add	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b07      	cmp	r3, #7
 80027e4:	d9dd      	bls.n	80027a2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00f      	beq.n	800280c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 f93a 	bl	8006a74 <SEGGER_SYSVIEW_ShrinkId>
 8002800:	4601      	mov	r1, r0
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	2071      	movs	r0, #113	; 0x71
 8002808:	f003 fb4c 	bl	8005ea4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800280c:	bf00      	nop
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	200143c4 	.word	0x200143c4

08002818 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002828:	f001 fdd6 	bl	80043d8 <vPortEnterCritical>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002832:	b25b      	sxtb	r3, r3
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d103      	bne.n	8002842 <vQueueWaitForMessageRestricted+0x2a>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002848:	b25b      	sxtb	r3, r3
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d103      	bne.n	8002858 <vQueueWaitForMessageRestricted+0x40>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002858:	f001 fdee 	bl	8004438 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	2b00      	cmp	r3, #0
 8002862:	d106      	bne.n	8002872 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3324      	adds	r3, #36	; 0x24
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	4618      	mov	r0, r3
 800286e:	f000 feef 	bl	8003650 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff12 	bl	800269c <prvUnlockQueue>
    }
 8002878:	bf00      	nop
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af04      	add	r7, sp, #16
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4618      	mov	r0, r3
 8002896:	f001 fec9 	bl	800462c <pvPortMalloc>
 800289a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00e      	beq.n	80028c0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028a2:	2058      	movs	r0, #88	; 0x58
 80028a4:	f001 fec2 	bl	800462c <pvPortMalloc>
 80028a8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
 80028b6:	e005      	b.n	80028c4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80028b8:	6978      	ldr	r0, [r7, #20]
 80028ba:	f001 ff97 	bl	80047ec <vPortFree>
 80028be:	e001      	b.n	80028c4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d013      	beq.n	80028f2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028ca:	88fa      	ldrh	r2, [r7, #6]
 80028cc:	2300      	movs	r3, #0
 80028ce:	9303      	str	r3, [sp, #12]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f80e 	bl	8002902 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80028e6:	69f8      	ldr	r0, [r7, #28]
 80028e8:	f000 f8b0 	bl	8002a4c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80028ec:	2301      	movs	r3, #1
 80028ee:	61bb      	str	r3, [r7, #24]
 80028f0:	e002      	b.n	80028f8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028f8:	69bb      	ldr	r3, [r7, #24]
    }
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b088      	sub	sp, #32
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	461a      	mov	r2, r3
 800291a:	21a5      	movs	r1, #165	; 0xa5
 800291c:	f004 fa46 	bl	8006dac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800292a:	3b01      	subs	r3, #1
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f023 0307 	bic.w	r3, r3, #7
 8002938:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	617b      	str	r3, [r7, #20]
    }
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01f      	beq.n	80029a0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	e012      	b.n	800298c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	7819      	ldrb	r1, [r3, #0]
 800296e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	4413      	add	r3, r2
 8002974:	3334      	adds	r3, #52	; 0x34
 8002976:	460a      	mov	r2, r1
 8002978:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b09      	cmp	r3, #9
 8002990:	d9e9      	bls.n	8002966 <prvInitialiseNewTask+0x64>
 8002992:	e000      	b.n	8002996 <prvInitialiseNewTask+0x94>
            {
                break;
 8002994:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800299e:	e003      	b.n	80029a8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d90a      	bls.n	80029c4 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	613b      	str	r3, [r7, #16]
    }
 80029c0:	bf00      	nop
 80029c2:	e7fe      	b.n	80029c2 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d901      	bls.n	80029ce <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029ca:	2304      	movs	r3, #4
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	2200      	movs	r2, #0
 80029de:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	3304      	adds	r3, #4
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fbab 	bl	8002140 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	3318      	adds	r3, #24
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fba6 	bl	8002140 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	f1c3 0205 	rsb	r2, r3, #5
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	3350      	adds	r3, #80	; 0x50
 8002a0e:	2204      	movs	r2, #4
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f004 f9ca 	bl	8006dac <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	3354      	adds	r3, #84	; 0x54
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 f9c3 	bl	8006dac <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	68f9      	ldr	r1, [r7, #12]
 8002a2a:	69b8      	ldr	r0, [r7, #24]
 8002a2c:	f001 fba8 	bl	8004180 <pxPortInitialiseStack>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a42:	bf00      	nop
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a54:	f001 fcc0 	bl	80043d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a58:	4b4f      	ldr	r3, [pc, #316]	; (8002b98 <prvAddNewTaskToReadyList+0x14c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	4a4e      	ldr	r2, [pc, #312]	; (8002b98 <prvAddNewTaskToReadyList+0x14c>)
 8002a60:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a62:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <prvAddNewTaskToReadyList+0x150>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a6a:	4a4c      	ldr	r2, [pc, #304]	; (8002b9c <prvAddNewTaskToReadyList+0x150>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <prvAddNewTaskToReadyList+0x14c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d110      	bne.n	8002a9a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a78:	f000 ffaa 	bl	80039d0 <prvInitialiseTaskLists>
 8002a7c:	e00d      	b.n	8002a9a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a7e:	4b48      	ldr	r3, [pc, #288]	; (8002ba0 <prvAddNewTaskToReadyList+0x154>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a86:	4b45      	ldr	r3, [pc, #276]	; (8002b9c <prvAddNewTaskToReadyList+0x150>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d802      	bhi.n	8002a9a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a94:	4a41      	ldr	r2, [pc, #260]	; (8002b9c <prvAddNewTaskToReadyList+0x150>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a9a:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <prvAddNewTaskToReadyList+0x158>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	4a40      	ldr	r2, [pc, #256]	; (8002ba4 <prvAddNewTaskToReadyList+0x158>)
 8002aa2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002aa4:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <prvAddNewTaskToReadyList+0x158>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d016      	beq.n	8002ae0 <prvAddNewTaskToReadyList+0x94>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 feb7 	bl	8006828 <SEGGER_SYSVIEW_OnTaskCreate>
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	461d      	mov	r5, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461c      	mov	r4, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	1ae3      	subs	r3, r4, r3
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	462b      	mov	r3, r5
 8002adc:	f002 f84c 	bl	8004b78 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 ff24 	bl	8006930 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	2201      	movs	r2, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <prvAddNewTaskToReadyList+0x15c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	4a2c      	ldr	r2, [pc, #176]	; (8002ba8 <prvAddNewTaskToReadyList+0x15c>)
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afe:	492b      	ldr	r1, [pc, #172]	; (8002bac <prvAddNewTaskToReadyList+0x160>)
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	3204      	adds	r2, #4
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1d1a      	adds	r2, r3, #4
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <prvAddNewTaskToReadyList+0x160>)
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	615a      	str	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	4918      	ldr	r1, [pc, #96]	; (8002bac <prvAddNewTaskToReadyList+0x160>)
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	4814      	ldr	r0, [pc, #80]	; (8002bac <prvAddNewTaskToReadyList+0x160>)
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4403      	add	r3, r0
 8002b64:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b66:	f001 fc67 	bl	8004438 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <prvAddNewTaskToReadyList+0x154>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00e      	beq.n	8002b90 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <prvAddNewTaskToReadyList+0x150>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d207      	bcs.n	8002b90 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <prvAddNewTaskToReadyList+0x164>)
 8002b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bdb0      	pop	{r4, r5, r7, pc}
 8002b98:	2000010c 	.word	0x2000010c
 8002b9c:	20000034 	.word	0x20000034
 8002ba0:	20000118 	.word	0x20000118
 8002ba4:	20000128 	.word	0x20000128
 8002ba8:	20000114 	.word	0x20000114
 8002bac:	20000038 	.word	0x20000038
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01b      	beq.n	8002bfe <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <vTaskDelay+0x68>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <vTaskDelay+0x30>
        __asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	60bb      	str	r3, [r7, #8]
    }
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002be4:	f000 f988 	bl	8002ef8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	2023      	movs	r0, #35	; 0x23
 8002bec:	f003 f91e 	bl	8005e2c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 ffb4 	bl	8003b60 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002bf8:	f000 f98c 	bl	8002f14 <xTaskResumeAll>
 8002bfc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <vTaskDelay+0x6c>)
 8002c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000134 	.word	0x20000134
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002c2c:	f001 fbd4 	bl	80043d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <uxTaskPriorityGet+0x18>
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <uxTaskPriorityGet+0x30>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	e000      	b.n	8002c3e <uxTaskPriorityGet+0x1a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002c46:	f001 fbf7 	bl	8004438 <vPortExitCritical>

        return uxReturn;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
    }
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000034 	.word	0x20000034

08002c58 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d90a      	bls.n	8002c82 <vTaskPrioritySet+0x2a>
        __asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	60bb      	str	r3, [r7, #8]
    }
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d901      	bls.n	8002c8c <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002c8c:	f001 fba4 	bl	80043d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <vTaskPrioritySet+0x44>
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <vTaskPrioritySet+0x1cc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	e000      	b.n	8002c9e <vTaskPrioritySet+0x46>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f003 fee6 	bl	8006a74 <SEGGER_SYSVIEW_ShrinkId>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	2028      	movs	r0, #40	; 0x28
 8002cb0:	f003 f8f8 	bl	8005ea4 <SEGGER_SYSVIEW_RecordU32x2>
 8002cb4:	69b8      	ldr	r0, [r7, #24]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	f001 ffbd 	bl	8004c48 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f000 809c 	beq.w	8002e16 <vTaskPrioritySet+0x1be>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d90d      	bls.n	8002d02 <vTaskPrioritySet+0xaa>
                {
                    if( pxTCB != pxCurrentTCB )
 8002ce6:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <vTaskPrioritySet+0x1cc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d00f      	beq.n	8002d10 <vTaskPrioritySet+0xb8>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002cf0:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <vTaskPrioritySet+0x1cc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d309      	bcc.n	8002d10 <vTaskPrioritySet+0xb8>
                        {
                            xYieldRequired = pdTRUE;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	e006      	b.n	8002d10 <vTaskPrioritySet+0xb8>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002d02:	4b48      	ldr	r3, [pc, #288]	; (8002e24 <vTaskPrioritySet+0x1cc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d101      	bne.n	8002d10 <vTaskPrioritySet+0xb8>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d102      	bne.n	8002d28 <vTaskPrioritySet+0xd0>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	db04      	blt.n	8002d40 <vTaskPrioritySet+0xe8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f1c3 0205 	rsb	r2, r3, #5
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6959      	ldr	r1, [r3, #20]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4a36      	ldr	r2, [pc, #216]	; (8002e28 <vTaskPrioritySet+0x1d0>)
 8002d50:	4413      	add	r3, r2
 8002d52:	4299      	cmp	r1, r3
 8002d54:	d154      	bne.n	8002e00 <vTaskPrioritySet+0x1a8>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fa36 	bl	80021cc <uxListRemove>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <vTaskPrioritySet+0x122>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002d66:	2201      	movs	r2, #1
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <vTaskPrioritySet+0x1d4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4013      	ands	r3, r2
 8002d76:	4a2d      	ldr	r2, [pc, #180]	; (8002e2c <vTaskPrioritySet+0x1d4>)
 8002d78:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fdd7 	bl	8006930 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	2201      	movs	r2, #1
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <vTaskPrioritySet+0x1d4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <vTaskPrioritySet+0x1d4>)
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	4923      	ldr	r1, [pc, #140]	; (8002e28 <vTaskPrioritySet+0x1d0>)
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3304      	adds	r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	3204      	adds	r2, #4
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	1d1a      	adds	r2, r3, #4
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <vTaskPrioritySet+0x1d0>)
 8002dd8:	441a      	add	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	615a      	str	r2, [r3, #20]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	4911      	ldr	r1, [pc, #68]	; (8002e28 <vTaskPrioritySet+0x1d0>)
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	1c59      	adds	r1, r3, #1
 8002df2:	480d      	ldr	r0, [pc, #52]	; (8002e28 <vTaskPrioritySet+0x1d0>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4403      	add	r3, r0
 8002dfe:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <vTaskPrioritySet+0x1be>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <vTaskPrioritySet+0x1d8>)
 8002e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002e16:	f001 fb0f 	bl	8004438 <vPortExitCritical>
    }
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000034 	.word	0x20000034
 8002e28:	20000038 	.word	0x20000038
 8002e2c:	20000114 	.word	0x20000114
 8002e30:	e000ed04 	.word	0xe000ed04

08002e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e3a:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <vTaskStartScheduler+0xa4>)
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	2282      	movs	r2, #130	; 0x82
 8002e46:	4925      	ldr	r1, [pc, #148]	; (8002edc <vTaskStartScheduler+0xa8>)
 8002e48:	4825      	ldr	r0, [pc, #148]	; (8002ee0 <vTaskStartScheduler+0xac>)
 8002e4a:	f7ff fd19 	bl	8002880 <xTaskCreate>
 8002e4e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d102      	bne.n	8002e5c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e56:	f000 ff0f 	bl	8003c78 <xTimerCreateTimerTask>
 8002e5a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d124      	bne.n	8002eac <vTaskStartScheduler+0x78>
        __asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	60bb      	str	r3, [r7, #8]
    }
 8002e74:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <vTaskStartScheduler+0xb0>)
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <vTaskStartScheduler+0xb4>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <vTaskStartScheduler+0xb8>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e8a:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <vTaskStartScheduler+0xbc>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <vTaskStartScheduler+0xa4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d102      	bne.n	8002e9c <vTaskStartScheduler+0x68>
 8002e96:	f003 fcab 	bl	80067f0 <SEGGER_SYSVIEW_OnIdle>
 8002e9a:	e004      	b.n	8002ea6 <vTaskStartScheduler+0x72>
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <vTaskStartScheduler+0xbc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 fd03 	bl	80068ac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ea6:	f001 f9f5 	bl	8004294 <xPortStartScheduler>
 8002eaa:	e00e      	b.n	8002eca <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d10a      	bne.n	8002eca <vTaskStartScheduler+0x96>
        __asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	607b      	str	r3, [r7, #4]
    }
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <vTaskStartScheduler+0xc0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000130 	.word	0x20000130
 8002edc:	08006e0c 	.word	0x08006e0c
 8002ee0:	080039a1 	.word	0x080039a1
 8002ee4:	2000012c 	.word	0x2000012c
 8002ee8:	20000118 	.word	0x20000118
 8002eec:	20000110 	.word	0x20000110
 8002ef0:	20000034 	.word	0x20000034
 8002ef4:	20000010 	.word	0x20000010

08002ef8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <vTaskSuspendAll+0x18>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <vTaskSuspendAll+0x18>)
 8002f04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	20000134 	.word	0x20000134

08002f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f22:	4b73      	ldr	r3, [pc, #460]	; (80030f0 <xTaskResumeAll+0x1dc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <xTaskResumeAll+0x2c>
        __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	607b      	str	r3, [r7, #4]
    }
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f40:	f001 fa4a 	bl	80043d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f44:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <xTaskResumeAll+0x1dc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	4a69      	ldr	r2, [pc, #420]	; (80030f0 <xTaskResumeAll+0x1dc>)
 8002f4c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f4e:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <xTaskResumeAll+0x1dc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 80c4 	bne.w	80030e0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f58:	4b66      	ldr	r3, [pc, #408]	; (80030f4 <xTaskResumeAll+0x1e0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80bf 	beq.w	80030e0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f62:	e08e      	b.n	8003082 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f64:	4b64      	ldr	r3, [pc, #400]	; (80030f8 <xTaskResumeAll+0x1e4>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	6a12      	ldr	r2, [r2, #32]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	69d2      	ldr	r2, [r2, #28]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3318      	adds	r3, #24
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d103      	bne.n	8002f9a <xTaskResumeAll+0x86>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1e5a      	subs	r2, r3, #1
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	68d2      	ldr	r2, [r2, #12]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d103      	bne.n	8002fd8 <xTaskResumeAll+0xc4>
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	615a      	str	r2, [r3, #20]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fca0 	bl	8006930 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	4b40      	ldr	r3, [pc, #256]	; (80030fc <xTaskResumeAll+0x1e8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	4a3f      	ldr	r2, [pc, #252]	; (80030fc <xTaskResumeAll+0x1e8>)
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003006:	493e      	ldr	r1, [pc, #248]	; (8003100 <xTaskResumeAll+0x1ec>)
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3304      	adds	r3, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	3204      	adds	r2, #4
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	1d1a      	adds	r2, r3, #4
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4a2e      	ldr	r2, [pc, #184]	; (8003100 <xTaskResumeAll+0x1ec>)
 8003046:	441a      	add	r2, r3
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	615a      	str	r2, [r3, #20]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	492b      	ldr	r1, [pc, #172]	; (8003100 <xTaskResumeAll+0x1ec>)
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	1c59      	adds	r1, r3, #1
 8003060:	4827      	ldr	r0, [pc, #156]	; (8003100 <xTaskResumeAll+0x1ec>)
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4403      	add	r3, r0
 800306c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <xTaskResumeAll+0x1f0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <xTaskResumeAll+0x1f4>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <xTaskResumeAll+0x1e4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f af6c 	bne.w	8002f64 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003092:	f000 fd1b 	bl	8003acc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <xTaskResumeAll+0x1f8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030a2:	f000 f92d 	bl	8003300 <xTaskIncrementTick>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80030ac:	4b16      	ldr	r3, [pc, #88]	; (8003108 <xTaskResumeAll+0x1f4>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f1      	bne.n	80030a2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <xTaskResumeAll+0x1f8>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <xTaskResumeAll+0x1f4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80030cc:	2301      	movs	r3, #1
 80030ce:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <xTaskResumeAll+0x1fc>)
 80030d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80030e0:	f001 f9aa 	bl	8004438 <vPortExitCritical>

    return xAlreadyYielded;
 80030e4:	69bb      	ldr	r3, [r7, #24]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000134 	.word	0x20000134
 80030f4:	2000010c 	.word	0x2000010c
 80030f8:	200000cc 	.word	0x200000cc
 80030fc:	20000114 	.word	0x20000114
 8003100:	20000038 	.word	0x20000038
 8003104:	20000034 	.word	0x20000034
 8003108:	20000120 	.word	0x20000120
 800310c:	2000011c 	.word	0x2000011c
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <xTaskGetTickCount+0x1c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003120:	687b      	ldr	r3, [r7, #4]
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000110 	.word	0x20000110

08003134 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800313a:	f001 fa37 	bl	80045ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003142:	4b04      	ldr	r3, [pc, #16]	; (8003154 <xTaskGetTickCountFromISR+0x20>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003148:	683b      	ldr	r3, [r7, #0]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000110 	.word	0x20000110

08003158 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8003158:	b480      	push	{r7}
 800315a:	b08b      	sub	sp, #44	; 0x2c
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d05b      	beq.n	8003226 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	3308      	adds	r3, #8
 8003184:	429a      	cmp	r2, r3
 8003186:	d104      	bne.n	8003192 <prvSearchForNameWithinSingleList+0x3a>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	3308      	adds	r3, #8
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d104      	bne.n	80031be <prvSearchForNameWithinSingleList+0x66>
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
 80031ce:	e01c      	b.n	800320a <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	4413      	add	r3, r2
 80031d6:	3334      	adds	r3, #52	; 0x34
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	7afa      	ldrb	r2, [r7, #11]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d002      	beq.n	80031f0 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e006      	b.n	80031fe <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 80031fa:	2301      	movs	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	3301      	adds	r3, #1
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2b09      	cmp	r3, #9
 800320e:	d9df      	bls.n	80031d0 <prvSearchForNameWithinSingleList+0x78>
 8003210:	e000      	b.n	8003214 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8003212:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	429a      	cmp	r2, r3
 8003220:	d1bb      	bne.n	800319a <prvSearchForNameWithinSingleList+0x42>
 8003222:	e000      	b.n	8003226 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8003224:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003228:	4618      	mov	r0, r3
 800322a:	372c      	adds	r7, #44	; 0x2c
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 800323c:	2305      	movs	r3, #5
 800323e:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fd f82f 	bl	80002a4 <strlen>
 8003246:	4603      	mov	r3, r0
 8003248:	2b09      	cmp	r3, #9
 800324a:	d90a      	bls.n	8003262 <xTaskGetHandle+0x2e>
        __asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	60fb      	str	r3, [r7, #12]
    }
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8003262:	f7ff fe49 	bl	8002ef8 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	3b01      	subs	r3, #1
 800326a:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <xTaskGetHandle+0xb8>)
 8003278:	4413      	add	r3, r2
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff6b 	bl	8003158 <prvSearchForNameWithinSingleList>
 8003282:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ea      	bne.n	8003266 <xTaskGetHandle+0x32>
 8003290:	e000      	b.n	8003294 <xTaskGetHandle+0x60>
                    break;
 8003292:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <xTaskGetHandle+0xbc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff59 	bl	8003158 <prvSearchForNameWithinSingleList>
 80032a6:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80032ae:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <xTaskGetHandle+0xc0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff4f 	bl	8003158 <prvSearchForNameWithinSingleList>
 80032ba:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	480c      	ldr	r0, [pc, #48]	; (80032f8 <xTaskGetHandle+0xc4>)
 80032c6:	f7ff ff47 	bl	8003158 <prvSearchForNameWithinSingleList>
 80032ca:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4809      	ldr	r0, [pc, #36]	; (80032fc <xTaskGetHandle+0xc8>)
 80032d6:	f7ff ff3f 	bl	8003158 <prvSearchForNameWithinSingleList>
 80032da:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 80032dc:	f7ff fe1a 	bl	8002f14 <xTaskResumeAll>

        return pxTCB;
 80032e0:	693b      	ldr	r3, [r7, #16]
    }
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000038 	.word	0x20000038
 80032f0:	200000c4 	.word	0x200000c4
 80032f4:	200000c8 	.word	0x200000c8
 80032f8:	200000f8 	.word	0x200000f8
 80032fc:	200000e0 	.word	0x200000e0

08003300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800330a:	4b7f      	ldr	r3, [pc, #508]	; (8003508 <xTaskIncrementTick+0x208>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 80f0 	bne.w	80034f4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003314:	4b7d      	ldr	r3, [pc, #500]	; (800350c <xTaskIncrementTick+0x20c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800331c:	4a7b      	ldr	r2, [pc, #492]	; (800350c <xTaskIncrementTick+0x20c>)
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d120      	bne.n	800336a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003328:	4b79      	ldr	r3, [pc, #484]	; (8003510 <xTaskIncrementTick+0x210>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <xTaskIncrementTick+0x48>
        __asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	607b      	str	r3, [r7, #4]
    }
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <xTaskIncrementTick+0x46>
 8003348:	4b71      	ldr	r3, [pc, #452]	; (8003510 <xTaskIncrementTick+0x210>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	4b71      	ldr	r3, [pc, #452]	; (8003514 <xTaskIncrementTick+0x214>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6f      	ldr	r2, [pc, #444]	; (8003510 <xTaskIncrementTick+0x210>)
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4a6f      	ldr	r2, [pc, #444]	; (8003514 <xTaskIncrementTick+0x214>)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b6e      	ldr	r3, [pc, #440]	; (8003518 <xTaskIncrementTick+0x218>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	4a6d      	ldr	r2, [pc, #436]	; (8003518 <xTaskIncrementTick+0x218>)
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	f000 fbb1 	bl	8003acc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800336a:	4b6c      	ldr	r3, [pc, #432]	; (800351c <xTaskIncrementTick+0x21c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a3a      	ldr	r2, [r7, #32]
 8003370:	429a      	cmp	r2, r3
 8003372:	f0c0 80aa 	bcc.w	80034ca <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003376:	4b66      	ldr	r3, [pc, #408]	; (8003510 <xTaskIncrementTick+0x210>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003380:	4b66      	ldr	r3, [pc, #408]	; (800351c <xTaskIncrementTick+0x21c>)
 8003382:	f04f 32ff 	mov.w	r2, #4294967295
 8003386:	601a      	str	r2, [r3, #0]
                    break;
 8003388:	e09f      	b.n	80034ca <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338a:	4b61      	ldr	r3, [pc, #388]	; (8003510 <xTaskIncrementTick+0x210>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d203      	bcs.n	80033aa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033a2:	4a5e      	ldr	r2, [pc, #376]	; (800351c <xTaskIncrementTick+0x21c>)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80033a8:	e08f      	b.n	80034ca <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	68d2      	ldr	r2, [r2, #12]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	6892      	ldr	r2, [r2, #8]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	3304      	adds	r3, #4
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d103      	bne.n	80033d8 <xTaskIncrementTick+0xd8>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2200      	movs	r2, #0
 80033dc:	615a      	str	r2, [r3, #20]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1e5a      	subs	r2, r3, #1
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01e      	beq.n	800342e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	6a12      	ldr	r2, [r2, #32]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	69d2      	ldr	r2, [r2, #28]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	3318      	adds	r3, #24
 8003412:	429a      	cmp	r2, r3
 8003414:	d103      	bne.n	800341e <xTaskIncrementTick+0x11e>
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2200      	movs	r2, #0
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1e5a      	subs	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4618      	mov	r0, r3
 8003432:	f003 fa7d 	bl	8006930 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	2201      	movs	r2, #1
 800343c:	409a      	lsls	r2, r3
 800343e:	4b38      	ldr	r3, [pc, #224]	; (8003520 <xTaskIncrementTick+0x220>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	4a36      	ldr	r2, [pc, #216]	; (8003520 <xTaskIncrementTick+0x220>)
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	4935      	ldr	r1, [pc, #212]	; (8003524 <xTaskIncrementTick+0x224>)
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3304      	adds	r3, #4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	3204      	adds	r2, #4
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	1d1a      	adds	r2, r3, #4
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4a26      	ldr	r2, [pc, #152]	; (8003524 <xTaskIncrementTick+0x224>)
 800348c:	441a      	add	r2, r3
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003496:	4923      	ldr	r1, [pc, #140]	; (8003524 <xTaskIncrementTick+0x224>)
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	1c59      	adds	r1, r3, #1
 80034a6:	481f      	ldr	r0, [pc, #124]	; (8003524 <xTaskIncrementTick+0x224>)
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4403      	add	r3, r0
 80034b2:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <xTaskIncrementTick+0x228>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	429a      	cmp	r2, r3
 80034c0:	f4ff af59 	bcc.w	8003376 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034c8:	e755      	b.n	8003376 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034ca:	4b17      	ldr	r3, [pc, #92]	; (8003528 <xTaskIncrementTick+0x228>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	4914      	ldr	r1, [pc, #80]	; (8003524 <xTaskIncrementTick+0x224>)
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d901      	bls.n	80034e6 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <xTaskIncrementTick+0x22c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
 80034f2:	e004      	b.n	80034fe <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <xTaskIncrementTick+0x230>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3301      	adds	r3, #1
 80034fa:	4a0d      	ldr	r2, [pc, #52]	; (8003530 <xTaskIncrementTick+0x230>)
 80034fc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000134 	.word	0x20000134
 800350c:	20000110 	.word	0x20000110
 8003510:	200000c4 	.word	0x200000c4
 8003514:	200000c8 	.word	0x200000c8
 8003518:	20000124 	.word	0x20000124
 800351c:	2000012c 	.word	0x2000012c
 8003520:	20000114 	.word	0x20000114
 8003524:	20000038 	.word	0x20000038
 8003528:	20000034 	.word	0x20000034
 800352c:	20000120 	.word	0x20000120
 8003530:	2000011c 	.word	0x2000011c

08003534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800353a:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <vTaskSwitchContext+0xbc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003542:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <vTaskSwitchContext+0xc0>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003548:	e04d      	b.n	80035e6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <vTaskSwitchContext+0xc0>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003550:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <vTaskSwitchContext+0xc4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800355e:	7afb      	ldrb	r3, [r7, #11]
 8003560:	f1c3 031f 	rsb	r3, r3, #31
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	4925      	ldr	r1, [pc, #148]	; (80035fc <vTaskSwitchContext+0xc8>)
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <vTaskSwitchContext+0x5c>
        __asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	607b      	str	r3, [r7, #4]
    }
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <vTaskSwitchContext+0x5a>
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <vTaskSwitchContext+0xc8>)
 800359c:	4413      	add	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3308      	adds	r3, #8
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d104      	bne.n	80035c0 <vTaskSwitchContext+0x8c>
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <vTaskSwitchContext+0xcc>)
 80035c8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <vTaskSwitchContext+0xcc>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <vTaskSwitchContext+0xd0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d102      	bne.n	80035dc <vTaskSwitchContext+0xa8>
 80035d6:	f003 f90b 	bl	80067f0 <SEGGER_SYSVIEW_OnIdle>
}
 80035da:	e004      	b.n	80035e6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <vTaskSwitchContext+0xcc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f003 f963 	bl	80068ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000134 	.word	0x20000134
 80035f4:	20000120 	.word	0x20000120
 80035f8:	20000114 	.word	0x20000114
 80035fc:	20000038 	.word	0x20000038
 8003600:	20000034 	.word	0x20000034
 8003604:	20000130 	.word	0x20000130

08003608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	60fb      	str	r3, [r7, #12]
    }
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <vTaskPlaceOnEventList+0x44>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3318      	adds	r3, #24
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fe fd8f 	bl	800215a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800363c:	2101      	movs	r1, #1
 800363e:	6838      	ldr	r0, [r7, #0]
 8003640:	f000 fa8e 	bl	8003b60 <prvAddCurrentTaskToDelayedList>
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000034 	.word	0x20000034

08003650 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	613b      	str	r3, [r7, #16]
    }
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	4b17      	ldr	r3, [pc, #92]	; (80036dc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	61da      	str	r2, [r3, #28]
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	621a      	str	r2, [r3, #32]
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	3218      	adds	r2, #24
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <vTaskPlaceOnEventListRestricted+0x8c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f103 0218 	add.w	r2, r3, #24
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <vTaskPlaceOnEventListRestricted+0x8c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295
 80036c4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80036c6:	2024      	movs	r0, #36	; 0x24
 80036c8:	f002 fb92 	bl	8005df0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	68b8      	ldr	r0, [r7, #8]
 80036d0:	f000 fa46 	bl	8003b60 <prvAddCurrentTaskToDelayedList>
    }
 80036d4:	bf00      	nop
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000034 	.word	0x20000034

080036e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	60fb      	str	r3, [r7, #12]
    }
 8003708:	bf00      	nop
 800370a:	e7fe      	b.n	800370a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	6a3a      	ldr	r2, [r7, #32]
 8003718:	6a12      	ldr	r2, [r2, #32]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	69d2      	ldr	r2, [r2, #28]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	3318      	adds	r3, #24
 800372e:	429a      	cmp	r2, r3
 8003730:	d103      	bne.n	800373a <xTaskRemoveFromEventList+0x5a>
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	2200      	movs	r2, #0
 800373e:	629a      	str	r2, [r3, #40]	; 0x28
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	1e5a      	subs	r2, r3, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800374a:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <xTaskRemoveFromEventList+0x198>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d162      	bne.n	8003818 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	68d2      	ldr	r2, [r2, #12]
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	6a3a      	ldr	r2, [r7, #32]
 8003768:	6892      	ldr	r2, [r2, #8]
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	3304      	adds	r3, #4
 8003774:	429a      	cmp	r2, r3
 8003776:	d103      	bne.n	8003780 <xTaskRemoveFromEventList+0xa0>
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1e5a      	subs	r2, r3, #1
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 f8cc 	bl	8006930 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	4b36      	ldr	r3, [pc, #216]	; (800387c <xTaskRemoveFromEventList+0x19c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	4a35      	ldr	r2, [pc, #212]	; (800387c <xTaskRemoveFromEventList+0x19c>)
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	4934      	ldr	r1, [pc, #208]	; (8003880 <xTaskRemoveFromEventList+0x1a0>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	3304      	adds	r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	6a3a      	ldr	r2, [r7, #32]
 80037d4:	3204      	adds	r2, #4
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	1d1a      	adds	r2, r3, #4
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4a24      	ldr	r2, [pc, #144]	; (8003880 <xTaskRemoveFromEventList+0x1a0>)
 80037ee:	441a      	add	r2, r3
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	615a      	str	r2, [r3, #20]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	4921      	ldr	r1, [pc, #132]	; (8003880 <xTaskRemoveFromEventList+0x1a0>)
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	1c59      	adds	r1, r3, #1
 8003808:	481d      	ldr	r0, [pc, #116]	; (8003880 <xTaskRemoveFromEventList+0x1a0>)
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4403      	add	r3, r0
 8003814:	6019      	str	r1, [r3, #0]
 8003816:	e01b      	b.n	8003850 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <xTaskRemoveFromEventList+0x1a4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	61da      	str	r2, [r3, #28]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	621a      	str	r2, [r3, #32]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	3218      	adds	r2, #24
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	f103 0218 	add.w	r2, r3, #24
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	4a10      	ldr	r2, [pc, #64]	; (8003884 <xTaskRemoveFromEventList+0x1a4>)
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <xTaskRemoveFromEventList+0x1a4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3301      	adds	r3, #1
 800384c:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <xTaskRemoveFromEventList+0x1a4>)
 800384e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <xTaskRemoveFromEventList+0x1a8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	429a      	cmp	r2, r3
 800385c:	d905      	bls.n	800386a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800385e:	2301      	movs	r3, #1
 8003860:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <xTaskRemoveFromEventList+0x1ac>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e001      	b.n	800386e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003870:	4618      	mov	r0, r3
 8003872:	3728      	adds	r7, #40	; 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000134 	.word	0x20000134
 800387c:	20000114 	.word	0x20000114
 8003880:	20000038 	.word	0x20000038
 8003884:	200000cc 	.word	0x200000cc
 8003888:	20000034 	.word	0x20000034
 800388c:	20000120 	.word	0x20000120

08003890 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <vTaskInternalSetTimeOutState+0x24>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <vTaskInternalSetTimeOutState+0x28>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20000124 	.word	0x20000124
 80038b8:	20000110 	.word	0x20000110

080038bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	613b      	str	r3, [r7, #16]
    }
 80038de:	bf00      	nop
 80038e0:	e7fe      	b.n	80038e0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	60fb      	str	r3, [r7, #12]
    }
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80038fe:	f000 fd6b 	bl	80043d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <xTaskCheckForTimeOut+0xc4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d102      	bne.n	8003922 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	e026      	b.n	8003970 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <xTaskCheckForTimeOut+0xc8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d00a      	beq.n	8003944 <xTaskCheckForTimeOut+0x88>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	429a      	cmp	r2, r3
 8003936:	d305      	bcc.n	8003944 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003938:	2301      	movs	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e015      	b.n	8003970 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	429a      	cmp	r2, r3
 800394c:	d20b      	bcs.n	8003966 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	1ad2      	subs	r2, r2, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ff98 	bl	8003890 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	e004      	b.n	8003970 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800396c:	2301      	movs	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003970:	f000 fd62 	bl	8004438 <vPortExitCritical>

    return xReturn;
 8003974:	69fb      	ldr	r3, [r7, #28]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000110 	.word	0x20000110
 8003984:	20000124 	.word	0x20000124

08003988 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <vTaskMissedYield+0x14>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	20000120 	.word	0x20000120

080039a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039a8:	f000 f852 	bl	8003a50 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <prvIdleTask+0x28>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d9f9      	bls.n	80039a8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <prvIdleTask+0x2c>)
 80039b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039c4:	e7f0      	b.n	80039a8 <prvIdleTask+0x8>
 80039c6:	bf00      	nop
 80039c8:	20000038 	.word	0x20000038
 80039cc:	e000ed04 	.word	0xe000ed04

080039d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	e00c      	b.n	80039f6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <prvInitialiseTaskLists+0x60>)
 80039e8:	4413      	add	r3, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe fb88 	bl	8002100 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3301      	adds	r3, #1
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d9ef      	bls.n	80039dc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80039fc:	480d      	ldr	r0, [pc, #52]	; (8003a34 <prvInitialiseTaskLists+0x64>)
 80039fe:	f7fe fb7f 	bl	8002100 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a02:	480d      	ldr	r0, [pc, #52]	; (8003a38 <prvInitialiseTaskLists+0x68>)
 8003a04:	f7fe fb7c 	bl	8002100 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a08:	480c      	ldr	r0, [pc, #48]	; (8003a3c <prvInitialiseTaskLists+0x6c>)
 8003a0a:	f7fe fb79 	bl	8002100 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a0e:	480c      	ldr	r0, [pc, #48]	; (8003a40 <prvInitialiseTaskLists+0x70>)
 8003a10:	f7fe fb76 	bl	8002100 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a14:	480b      	ldr	r0, [pc, #44]	; (8003a44 <prvInitialiseTaskLists+0x74>)
 8003a16:	f7fe fb73 	bl	8002100 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <prvInitialiseTaskLists+0x78>)
 8003a1c:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <prvInitialiseTaskLists+0x64>)
 8003a1e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvInitialiseTaskLists+0x7c>)
 8003a22:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <prvInitialiseTaskLists+0x68>)
 8003a24:	601a      	str	r2, [r3, #0]
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000038 	.word	0x20000038
 8003a34:	2000009c 	.word	0x2000009c
 8003a38:	200000b0 	.word	0x200000b0
 8003a3c:	200000cc 	.word	0x200000cc
 8003a40:	200000e0 	.word	0x200000e0
 8003a44:	200000f8 	.word	0x200000f8
 8003a48:	200000c4 	.word	0x200000c4
 8003a4c:	200000c8 	.word	0x200000c8

08003a50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a56:	e019      	b.n	8003a8c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a58:	f000 fcbe 	bl	80043d8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <prvCheckTasksWaitingTermination+0x50>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe fbaf 	bl	80021cc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <prvCheckTasksWaitingTermination+0x54>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	4a0b      	ldr	r2, [pc, #44]	; (8003aa4 <prvCheckTasksWaitingTermination+0x54>)
 8003a76:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <prvCheckTasksWaitingTermination+0x58>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <prvCheckTasksWaitingTermination+0x58>)
 8003a80:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003a82:	f000 fcd9 	bl	8004438 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f810 	bl	8003aac <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <prvCheckTasksWaitingTermination+0x58>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e1      	bne.n	8003a58 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200000e0 	.word	0x200000e0
 8003aa4:	2000010c 	.word	0x2000010c
 8003aa8:	200000f4 	.word	0x200000f4

08003aac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fe97 	bl	80047ec <vPortFree>
                vPortFree( pxTCB );
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fe94 	bl	80047ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <prvResetNextTaskUnblockTime+0x30>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <prvResetNextTaskUnblockTime+0x34>)
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003ae2:	e005      	b.n	8003af0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <prvResetNextTaskUnblockTime+0x30>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <prvResetNextTaskUnblockTime+0x34>)
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	200000c4 	.word	0x200000c4
 8003b00:	2000012c 	.word	0x2000012c

08003b04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <xTaskGetCurrentTaskHandle+0x1c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003b10:	687b      	ldr	r3, [r7, #4]
    }
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000034 	.word	0x20000034

08003b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <xTaskGetSchedulerState+0x34>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b32:	2301      	movs	r3, #1
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	e008      	b.n	8003b4a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <xTaskGetSchedulerState+0x38>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b40:	2302      	movs	r3, #2
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	e001      	b.n	8003b4a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b4a:	687b      	ldr	r3, [r7, #4]
    }
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	20000118 	.word	0x20000118
 8003b5c:	20000134 	.word	0x20000134

08003b60 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b6a:	4b3c      	ldr	r3, [pc, #240]	; (8003c5c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe fb28 	bl	80021cc <uxListRemove>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b82:	4b37      	ldr	r3, [pc, #220]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	2201      	movs	r2, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <prvAddCurrentTaskToDelayedList+0x104>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4013      	ands	r3, r2
 8003b96:	4a33      	ldr	r2, [pc, #204]	; (8003c64 <prvAddCurrentTaskToDelayedList+0x104>)
 8003b98:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d124      	bne.n	8003bec <prvAddCurrentTaskToDelayedList+0x8c>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d021      	beq.n	8003bec <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <prvAddCurrentTaskToDelayedList+0x108>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	609a      	str	r2, [r3, #8]
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	6892      	ldr	r2, [r2, #8]
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	3204      	adds	r2, #4
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	1d1a      	adds	r2, r3, #4
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a23      	ldr	r2, [pc, #140]	; (8003c68 <prvAddCurrentTaskToDelayedList+0x108>)
 8003bdc:	615a      	str	r2, [r3, #20]
 8003bde:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <prvAddCurrentTaskToDelayedList+0x108>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <prvAddCurrentTaskToDelayedList+0x108>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003bea:	e032      	b.n	8003c52 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d20f      	bcs.n	8003c24 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c04:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2104      	movs	r1, #4
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f002 fed2 	bl	80069b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7fe fa9c 	bl	800215a <vListInsert>
}
 8003c22:	e016      	b.n	8003c52 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2104      	movs	r1, #4
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f002 fec2 	bl	80069b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <prvAddCurrentTaskToDelayedList+0x110>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <prvAddCurrentTaskToDelayedList+0x100>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	f7fe fa8c 	bl	800215a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c42:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <prvAddCurrentTaskToDelayedList+0x114>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d202      	bcs.n	8003c52 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c4c:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <prvAddCurrentTaskToDelayedList+0x114>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6013      	str	r3, [r2, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000110 	.word	0x20000110
 8003c60:	20000034 	.word	0x20000034
 8003c64:	20000114 	.word	0x20000114
 8003c68:	200000f8 	.word	0x200000f8
 8003c6c:	200000c8 	.word	0x200000c8
 8003c70:	200000c4 	.word	0x200000c4
 8003c74:	2000012c 	.word	0x2000012c

08003c78 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c82:	f000 fa47 	bl	8004114 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <xTimerCreateTimerTask+0x54>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <xTimerCreateTimerTask+0x58>)
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	2302      	movs	r3, #2
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c9c:	490d      	ldr	r1, [pc, #52]	; (8003cd4 <xTimerCreateTimerTask+0x5c>)
 8003c9e:	480e      	ldr	r0, [pc, #56]	; (8003cd8 <xTimerCreateTimerTask+0x60>)
 8003ca0:	f7fe fdee 	bl	8002880 <xTaskCreate>
 8003ca4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	603b      	str	r3, [r7, #0]
    }
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003cc2:	687b      	ldr	r3, [r7, #4]
    }
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000168 	.word	0x20000168
 8003cd0:	2000016c 	.word	0x2000016c
 8003cd4:	08006e14 	.word	0x08006e14
 8003cd8:	08003d81 	.word	0x08003d81

08003cdc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ce8:	e008      	b.n	8003cfc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	18d1      	adds	r1, r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f8dd 	bl	8003ec8 <prvInsertTimerInActiveList>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ea      	bne.n	8003cea <prvReloadTimer+0xe>
        }
    }
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d2a:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <prvProcessExpiredTimer+0x5c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe fa47 	bl	80021cc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7ff ffc3 	bl	8003cdc <prvReloadTimer>
 8003d56:	e008      	b.n	8003d6a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	4798      	blx	r3
    }
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000160 	.word	0x20000160

08003d80 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d88:	f107 0308 	add.w	r3, r7, #8
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f857 	bl	8003e40 <prvGetNextExpireTime>
 8003d92:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4619      	mov	r1, r3
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f803 	bl	8003da4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d9e:	f000 f8d5 	bl	8003f4c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003da2:	e7f1      	b.n	8003d88 <prvTimerTask+0x8>

08003da4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003dae:	f7ff f8a3 	bl	8002ef8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003db2:	f107 0308 	add.w	r3, r7, #8
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f866 	bl	8003e88 <prvSampleTimeNow>
 8003dbc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d130      	bne.n	8003e26 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <prvProcessTimerOrBlockTask+0x3c>
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d806      	bhi.n	8003de0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dd2:	f7ff f89f 	bl	8002f14 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ffa1 	bl	8003d20 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003dde:	e024      	b.n	8003e2a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <prvProcessTimerOrBlockTask+0x90>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <prvProcessTimerOrBlockTask+0x50>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <prvProcessTimerOrBlockTask+0x52>
 8003df4:	2300      	movs	r3, #0
 8003df6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <prvProcessTimerOrBlockTask+0x94>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	4619      	mov	r1, r3
 8003e06:	f7fe fd07 	bl	8002818 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e0a:	f7ff f883 	bl	8002f14 <xTaskResumeAll>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <prvProcessTimerOrBlockTask+0x98>)
 8003e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	f3bf 8f6f 	isb	sy
    }
 8003e24:	e001      	b.n	8003e2a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e26:	f7ff f875 	bl	8002f14 <xTaskResumeAll>
    }
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000164 	.word	0x20000164
 8003e38:	20000168 	.word	0x20000168
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <prvGetNextExpireTime+0x44>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <prvGetNextExpireTime+0x16>
 8003e52:	2201      	movs	r2, #1
 8003e54:	e000      	b.n	8003e58 <prvGetNextExpireTime+0x18>
 8003e56:	2200      	movs	r2, #0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <prvGetNextExpireTime+0x44>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e001      	b.n	8003e74 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e74:	68fb      	ldr	r3, [r7, #12]
    }
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000160 	.word	0x20000160

08003e88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e90:	f7ff f940 	bl	8003114 <xTaskGetTickCount>
 8003e94:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <prvSampleTimeNow+0x3c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d205      	bcs.n	8003eac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ea0:	f000 f912 	bl	80040c8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e002      	b.n	8003eb2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <prvSampleTimeNow+0x3c>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
    }
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000170 	.word	0x20000170

08003ec8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d812      	bhi.n	8003f14 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d302      	bcc.n	8003f02 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003efc:	2301      	movs	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e01b      	b.n	8003f3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <prvInsertTimerInActiveList+0x7c>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	f7fe f924 	bl	800215a <vListInsert>
 8003f12:	e012      	b.n	8003f3a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d206      	bcs.n	8003f2a <prvInsertTimerInActiveList+0x62>
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d302      	bcc.n	8003f2a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e007      	b.n	8003f3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <prvInsertTimerInActiveList+0x80>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7fe f910 	bl	800215a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f3a:	697b      	ldr	r3, [r7, #20]
    }
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000164 	.word	0x20000164
 8003f48:	20000160 	.word	0x20000160

08003f4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f52:	e0a6      	b.n	80040a2 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f2c0 80a2 	blt.w	80040a0 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe f92d 	bl	80021cc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f72:	1d3b      	adds	r3, r7, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff87 	bl	8003e88 <prvSampleTimeNow>
 8003f7a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	f200 808e 	bhi.w	80040a2 <prvProcessReceivedCommands+0x156>
 8003f86:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <prvProcessReceivedCommands+0x40>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fb1 	.word	0x08003fb1
 8003f94:	08004019 	.word	0x08004019
 8003f98:	0800402d 	.word	0x0800402d
 8003f9c:	08004077 	.word	0x08004077
 8003fa0:	08003fb1 	.word	0x08003fb1
 8003fa4:	08003fb1 	.word	0x08003fb1
 8003fa8:	08004019 	.word	0x08004019
 8003fac:	0800402d 	.word	0x0800402d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	18d1      	adds	r1, r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	69f8      	ldr	r0, [r7, #28]
 8003fd0:	f7ff ff7a 	bl	8003ec8 <prvInsertTimerInActiveList>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d063      	beq.n	80040a2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	4413      	add	r3, r2
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	69f8      	ldr	r0, [r7, #28]
 8003ff6:	f7ff fe71 	bl	8003cdc <prvReloadTimer>
 8003ffa:	e008      	b.n	800400e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	b2da      	uxtb	r2, r3
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	69f8      	ldr	r0, [r7, #28]
 8004014:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004016:	e044      	b.n	80040a2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	b2da      	uxtb	r2, r3
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800402a:	e03a      	b.n	80040a2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	b2da      	uxtb	r2, r3
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	617b      	str	r3, [r7, #20]
    }
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	18d1      	adds	r1, r2, r3
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	69f8      	ldr	r0, [r7, #28]
 8004070:	f7ff ff2a 	bl	8003ec8 <prvInsertTimerInActiveList>
                        break;
 8004074:	e015      	b.n	80040a2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d103      	bne.n	800408c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004084:	69f8      	ldr	r0, [r7, #28]
 8004086:	f000 fbb1 	bl	80047ec <vPortFree>
 800408a:	e00a      	b.n	80040a2 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	b2da      	uxtb	r2, r3
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800409e:	e000      	b.n	80040a2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040a0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040a2:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <prvProcessReceivedCommands+0x178>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f107 0108 	add.w	r1, r7, #8
 80040aa:	2200      	movs	r2, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe f9bf 	bl	8002430 <xQueueReceive>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f af4d 	bne.w	8003f54 <prvProcessReceivedCommands+0x8>
        }
    }
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000168 	.word	0x20000168

080040c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ce:	e009      	b.n	80040e4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <prvSwitchTimerLists+0x44>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80040da:	f04f 31ff 	mov.w	r1, #4294967295
 80040de:	6838      	ldr	r0, [r7, #0]
 80040e0:	f7ff fe1e 	bl	8003d20 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <prvSwitchTimerLists+0x44>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <prvSwitchTimerLists+0x44>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <prvSwitchTimerLists+0x48>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <prvSwitchTimerLists+0x44>)
 80040fa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <prvSwitchTimerLists+0x48>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
    }
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000160 	.word	0x20000160
 8004110:	20000164 	.word	0x20000164

08004114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004118:	f000 f95e 	bl	80043d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800411c:	4b12      	ldr	r3, [pc, #72]	; (8004168 <prvCheckForValidListAndQueue+0x54>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11d      	bne.n	8004160 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004124:	4811      	ldr	r0, [pc, #68]	; (800416c <prvCheckForValidListAndQueue+0x58>)
 8004126:	f7fd ffeb 	bl	8002100 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800412a:	4811      	ldr	r0, [pc, #68]	; (8004170 <prvCheckForValidListAndQueue+0x5c>)
 800412c:	f7fd ffe8 	bl	8002100 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <prvCheckForValidListAndQueue+0x60>)
 8004132:	4a0e      	ldr	r2, [pc, #56]	; (800416c <prvCheckForValidListAndQueue+0x58>)
 8004134:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <prvCheckForValidListAndQueue+0x64>)
 8004138:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <prvCheckForValidListAndQueue+0x5c>)
 800413a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800413c:	2200      	movs	r2, #0
 800413e:	210c      	movs	r1, #12
 8004140:	200a      	movs	r0, #10
 8004142:	f7fe f8fd 	bl	8002340 <xQueueGenericCreate>
 8004146:	4603      	mov	r3, r0
 8004148:	4a07      	ldr	r2, [pc, #28]	; (8004168 <prvCheckForValidListAndQueue+0x54>)
 800414a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <prvCheckForValidListAndQueue+0x54>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <prvCheckForValidListAndQueue+0x54>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4908      	ldr	r1, [pc, #32]	; (800417c <prvCheckForValidListAndQueue+0x68>)
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fb06 	bl	800276c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004160:	f000 f96a 	bl	8004438 <vPortExitCritical>
    }
 8004164:	bf00      	nop
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000168 	.word	0x20000168
 800416c:	20000138 	.word	0x20000138
 8004170:	2000014c 	.word	0x2000014c
 8004174:	20000160 	.word	0x20000160
 8004178:	20000164 	.word	0x20000164
 800417c:	08006e1c 	.word	0x08006e1c

08004180 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3b04      	subs	r3, #4
 8004190:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004198:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3b04      	subs	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f023 0201 	bic.w	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3b04      	subs	r3, #4
 80041ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041b0:	4a0c      	ldr	r2, [pc, #48]	; (80041e4 <pxPortInitialiseStack+0x64>)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3b14      	subs	r3, #20
 80041ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3b04      	subs	r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f06f 0202 	mvn.w	r2, #2
 80041ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3b20      	subs	r3, #32
 80041d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	080041e9 	.word	0x080041e9

080041e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <prvTaskExitError+0x54>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d00a      	beq.n	8004212 <prvTaskExitError+0x2a>
        __asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60fb      	str	r3, [r7, #12]
    }
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <prvTaskExitError+0x28>
        __asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	60bb      	str	r3, [r7, #8]
    }
 8004224:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004226:	bf00      	nop
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0fc      	beq.n	8004228 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	20000014 	.word	0x20000014

08004240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <pxCurrentTCBConst2>)
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	6808      	ldr	r0, [r1, #0]
 8004246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424a:	f380 8809 	msr	PSP, r0
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	4770      	bx	lr
 800425c:	f3af 8000 	nop.w

08004260 <pxCurrentTCBConst2>:
 8004260:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop

08004268 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004268:	4808      	ldr	r0, [pc, #32]	; (800428c <prvPortStartFirstTask+0x24>)
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	6800      	ldr	r0, [r0, #0]
 800426e:	f380 8808 	msr	MSP, r0
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8814 	msr	CONTROL, r0
 800427a:	b662      	cpsie	i
 800427c:	b661      	cpsie	f
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	df00      	svc	0
 8004288:	bf00      	nop
 800428a:	0000      	.short	0x0000
 800428c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop

08004294 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800429a:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <xPortStartScheduler+0x120>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a46      	ldr	r2, [pc, #280]	; (80043b8 <xPortStartScheduler+0x124>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10a      	bne.n	80042ba <xPortStartScheduler+0x26>
        __asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	613b      	str	r3, [r7, #16]
    }
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <xPortStartScheduler+0x120>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a3f      	ldr	r2, [pc, #252]	; (80043bc <xPortStartScheduler+0x128>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10a      	bne.n	80042da <xPortStartScheduler+0x46>
        __asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	60fb      	str	r3, [r7, #12]
    }
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042da:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <xPortStartScheduler+0x12c>)
 80042dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	22ff      	movs	r2, #255	; 0xff
 80042ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <xPortStartScheduler+0x130>)
 8004300:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <xPortStartScheduler+0x134>)
 8004304:	2207      	movs	r2, #7
 8004306:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004308:	e009      	b.n	800431e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800430a:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <xPortStartScheduler+0x134>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3b01      	subs	r3, #1
 8004310:	4a2d      	ldr	r2, [pc, #180]	; (80043c8 <xPortStartScheduler+0x134>)
 8004312:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d0ef      	beq.n	800430a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800432a:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <xPortStartScheduler+0x134>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1c3 0307 	rsb	r3, r3, #7
 8004332:	2b04      	cmp	r3, #4
 8004334:	d00a      	beq.n	800434c <xPortStartScheduler+0xb8>
        __asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	60bb      	str	r3, [r7, #8]
    }
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800434c:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <xPortStartScheduler+0x134>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <xPortStartScheduler+0x134>)
 8004354:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <xPortStartScheduler+0x134>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800435e:	4a1a      	ldr	r2, [pc, #104]	; (80043c8 <xPortStartScheduler+0x134>)
 8004360:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <xPortStartScheduler+0x138>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <xPortStartScheduler+0x138>)
 8004370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004374:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <xPortStartScheduler+0x138>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a14      	ldr	r2, [pc, #80]	; (80043cc <xPortStartScheduler+0x138>)
 800437c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004380:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004382:	f000 f8e3 	bl	800454c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004386:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <xPortStartScheduler+0x13c>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800438c:	f000 f902 	bl	8004594 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <xPortStartScheduler+0x140>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <xPortStartScheduler+0x140>)
 8004396:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800439a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800439c:	f7ff ff64 	bl	8004268 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043a0:	f7ff f8c8 	bl	8003534 <vTaskSwitchContext>
    prvTaskExitError();
 80043a4:	f7ff ff20 	bl	80041e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	e000ed00 	.word	0xe000ed00
 80043b8:	410fc271 	.word	0x410fc271
 80043bc:	410fc270 	.word	0x410fc270
 80043c0:	e000e400 	.word	0xe000e400
 80043c4:	20000174 	.word	0x20000174
 80043c8:	20000178 	.word	0x20000178
 80043cc:	e000ed20 	.word	0xe000ed20
 80043d0:	20000014 	.word	0x20000014
 80043d4:	e000ef34 	.word	0xe000ef34

080043d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
        __asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	607b      	str	r3, [r7, #4]
    }
 80043f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <vPortEnterCritical+0x58>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <vPortEnterCritical+0x58>)
 80043fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <vPortEnterCritical+0x58>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10f      	bne.n	8004424 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <vPortEnterCritical+0x5c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <vPortEnterCritical+0x4c>
        __asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	603b      	str	r3, [r7, #0]
    }
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <vPortEnterCritical+0x4a>
    }
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000014 	.word	0x20000014
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <vPortExitCritical+0x50>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <vPortExitCritical+0x24>
        __asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	607b      	str	r3, [r7, #4]
    }
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <vPortExitCritical+0x50>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3b01      	subs	r3, #1
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <vPortExitCritical+0x50>)
 8004464:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <vPortExitCritical+0x50>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <vPortExitCritical+0x42>
 800446e:	2300      	movs	r3, #0
 8004470:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004478:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000014 	.word	0x20000014
 800448c:	00000000 	.word	0x00000000

08004490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004490:	f3ef 8009 	mrs	r0, PSP
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <pxCurrentTCBConst>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	f01e 0f10 	tst.w	lr, #16
 80044a0:	bf08      	it	eq
 80044a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044aa:	6010      	str	r0, [r2, #0]
 80044ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044b4:	f380 8811 	msr	BASEPRI, r0
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f7ff f838 	bl	8003534 <vTaskSwitchContext>
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	f380 8811 	msr	BASEPRI, r0
 80044cc:	bc09      	pop	{r0, r3}
 80044ce:	6819      	ldr	r1, [r3, #0]
 80044d0:	6808      	ldr	r0, [r1, #0]
 80044d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d6:	f01e 0f10 	tst.w	lr, #16
 80044da:	bf08      	it	eq
 80044dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044e0:	f380 8809 	msr	PSP, r0
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w

080044f0 <pxCurrentTCBConst>:
 80044f0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
    }
 8004510:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004512:	f002 f8f3 	bl	80066fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004516:	f7fe fef3 	bl	8003300 <xTaskIncrementTick>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d006      	beq.n	800452e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004520:	f002 f94a 	bl	80067b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004524:	4b08      	ldr	r3, [pc, #32]	; (8004548 <SysTick_Handler+0x50>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e001      	b.n	8004532 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800452e:	f002 f927 	bl	8006780 <SEGGER_SYSVIEW_RecordExitISR>
 8004532:	2300      	movs	r3, #0
 8004534:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f383 8811 	msr	BASEPRI, r3
    }
 800453c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <vPortSetupTimerInterrupt+0x34>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <vPortSetupTimerInterrupt+0x38>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <vPortSetupTimerInterrupt+0x3c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <vPortSetupTimerInterrupt+0x40>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <vPortSetupTimerInterrupt+0x44>)
 800456a:	3b01      	subs	r3, #1
 800456c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <vPortSetupTimerInterrupt+0x34>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	e000e010 	.word	0xe000e010
 8004584:	e000e018 	.word	0xe000e018
 8004588:	20000004 	.word	0x20000004
 800458c:	10624dd3 	.word	0x10624dd3
 8004590:	e000e014 	.word	0xe000e014

08004594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045a4 <vPortEnableVFP+0x10>
 8004598:	6801      	ldr	r1, [r0, #0]
 800459a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800459e:	6001      	str	r1, [r0, #0]
 80045a0:	4770      	bx	lr
 80045a2:	0000      	.short	0x0000
 80045a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop

080045ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045b2:	f3ef 8305 	mrs	r3, IPSR
 80045b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b0f      	cmp	r3, #15
 80045bc:	d914      	bls.n	80045e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045be:	4a17      	ldr	r2, [pc, #92]	; (800461c <vPortValidateInterruptPriority+0x70>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <vPortValidateInterruptPriority+0x74>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	7afa      	ldrb	r2, [r7, #11]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d20a      	bcs.n	80045e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	607b      	str	r3, [r7, #4]
    }
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <vPortValidateInterruptPriority+0x78>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <vPortValidateInterruptPriority+0x7c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d90a      	bls.n	800460e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	603b      	str	r3, [r7, #0]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <vPortValidateInterruptPriority+0x60>
    }
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000e3f0 	.word	0xe000e3f0
 8004620:	20000174 	.word	0x20000174
 8004624:	e000ed0c 	.word	0xe000ed0c
 8004628:	20000178 	.word	0x20000178

0800462c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004638:	f7fe fc5e 	bl	8002ef8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800463c:	4b65      	ldr	r3, [pc, #404]	; (80047d4 <pvPortMalloc+0x1a8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004644:	f000 f934 	bl	80048b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004648:	4b63      	ldr	r3, [pc, #396]	; (80047d8 <pvPortMalloc+0x1ac>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	f040 80a7 	bne.w	80047a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02d      	beq.n	80046b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800465c:	2208      	movs	r2, #8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d227      	bcs.n	80046b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004668:	2208      	movs	r2, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	2b00      	cmp	r3, #0
 8004678:	d021      	beq.n	80046be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f023 0307 	bic.w	r3, r3, #7
 8004680:	3308      	adds	r3, #8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d214      	bcs.n	80046b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f023 0307 	bic.w	r3, r3, #7
 800468e:	3308      	adds	r3, #8
 8004690:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <pvPortMalloc+0x92>
        __asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	617b      	str	r3, [r7, #20]
    }
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046b6:	e002      	b.n	80046be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	607b      	str	r3, [r7, #4]
 80046bc:	e000      	b.n	80046c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d06e      	beq.n	80047a4 <pvPortMalloc+0x178>
 80046c6:	4b45      	ldr	r3, [pc, #276]	; (80047dc <pvPortMalloc+0x1b0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d869      	bhi.n	80047a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046d0:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <pvPortMalloc+0x1b4>)
 80046d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80046d4:	4b42      	ldr	r3, [pc, #264]	; (80047e0 <pvPortMalloc+0x1b4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046da:	e004      	b.n	80046e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d903      	bls.n	80046f8 <pvPortMalloc+0xcc>
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f1      	bne.n	80046dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046f8:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <pvPortMalloc+0x1a8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fe:	429a      	cmp	r2, r3
 8004700:	d050      	beq.n	80047a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2208      	movs	r2, #8
 8004708:	4413      	add	r3, r2
 800470a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	2308      	movs	r3, #8
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	429a      	cmp	r2, r3
 8004722:	d91f      	bls.n	8004764 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <pvPortMalloc+0x120>
        __asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	613b      	str	r3, [r7, #16]
    }
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800475e:	69b8      	ldr	r0, [r7, #24]
 8004760:	f000 f908 	bl	8004974 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <pvPortMalloc+0x1b0>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <pvPortMalloc+0x1b0>)
 8004770:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004772:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <pvPortMalloc+0x1b0>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <pvPortMalloc+0x1b8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d203      	bcs.n	8004786 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800477e:	4b17      	ldr	r3, [pc, #92]	; (80047dc <pvPortMalloc+0x1b0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <pvPortMalloc+0x1b8>)
 8004784:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <pvPortMalloc+0x1ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	431a      	orrs	r2, r3
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800479a:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <pvPortMalloc+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3301      	adds	r3, #1
 80047a0:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <pvPortMalloc+0x1bc>)
 80047a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047a4:	f7fe fbb6 	bl	8002f14 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <pvPortMalloc+0x19c>
        __asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60fb      	str	r3, [r7, #12]
    }
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80047c8:	69fb      	ldr	r3, [r7, #28]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3728      	adds	r7, #40	; 0x28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20012d84 	.word	0x20012d84
 80047d8:	20012d98 	.word	0x20012d98
 80047dc:	20012d88 	.word	0x20012d88
 80047e0:	20012d7c 	.word	0x20012d7c
 80047e4:	20012d8c 	.word	0x20012d8c
 80047e8:	20012d90 	.word	0x20012d90

080047ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04d      	beq.n	800489a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047fe:	2308      	movs	r3, #8
 8004800:	425b      	negs	r3, r3
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4413      	add	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <vPortFree+0xb8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <vPortFree+0x44>
        __asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	60fb      	str	r3, [r7, #12]
    }
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <vPortFree+0x62>
        __asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60bb      	str	r3, [r7, #8]
    }
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <vPortFree+0xb8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4013      	ands	r3, r2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01e      	beq.n	800489a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d11a      	bne.n	800489a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <vPortFree+0xb8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	43db      	mvns	r3, r3
 800486e:	401a      	ands	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004874:	f7fe fb40 	bl	8002ef8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <vPortFree+0xbc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4413      	add	r3, r2
 8004882:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <vPortFree+0xbc>)
 8004884:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004886:	6938      	ldr	r0, [r7, #16]
 8004888:	f000 f874 	bl	8004974 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <vPortFree+0xc0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	4a06      	ldr	r2, [pc, #24]	; (80048ac <vPortFree+0xc0>)
 8004894:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004896:	f7fe fb3d 	bl	8002f14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800489a:	bf00      	nop
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20012d98 	.word	0x20012d98
 80048a8:	20012d88 	.word	0x20012d88
 80048ac:	20012d94 	.word	0x20012d94

080048b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80048ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80048bc:	4b27      	ldr	r3, [pc, #156]	; (800495c <prvHeapInit+0xac>)
 80048be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3307      	adds	r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0307 	bic.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	4a1f      	ldr	r2, [pc, #124]	; (800495c <prvHeapInit+0xac>)
 80048e0:	4413      	add	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048e8:	4a1d      	ldr	r2, [pc, #116]	; (8004960 <prvHeapInit+0xb0>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80048ee:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <prvHeapInit+0xb0>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4413      	add	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80048fc:	2208      	movs	r2, #8
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a15      	ldr	r2, [pc, #84]	; (8004964 <prvHeapInit+0xb4>)
 8004910:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <prvHeapInit+0xb4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2200      	movs	r2, #0
 8004918:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <prvHeapInit+0xb4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	1ad2      	subs	r2, r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <prvHeapInit+0xb4>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <prvHeapInit+0xb8>)
 800493e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4a09      	ldr	r2, [pc, #36]	; (800496c <prvHeapInit+0xbc>)
 8004946:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <prvHeapInit+0xc0>)
 800494a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	2000017c 	.word	0x2000017c
 8004960:	20012d7c 	.word	0x20012d7c
 8004964:	20012d84 	.word	0x20012d84
 8004968:	20012d8c 	.word	0x20012d8c
 800496c:	20012d88 	.word	0x20012d88
 8004970:	20012d98 	.word	0x20012d98

08004974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800497c:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <prvInsertBlockIntoFreeList+0xac>)
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e002      	b.n	8004988 <prvInsertBlockIntoFreeList+0x14>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	429a      	cmp	r2, r3
 8004990:	d8f7      	bhi.n	8004982 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4413      	add	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d108      	bne.n	80049b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	441a      	add	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	441a      	add	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d118      	bne.n	80049fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <prvInsertBlockIntoFreeList+0xb0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d00d      	beq.n	80049f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	e008      	b.n	8004a04 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <prvInsertBlockIntoFreeList+0xb0>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e003      	b.n	8004a04 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d002      	beq.n	8004a12 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20012d7c 	.word	0x20012d7c
 8004a24:	20012d84 	.word	0x20012d84

08004a28 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a2c:	4803      	ldr	r0, [pc, #12]	; (8004a3c <_cbSendSystemDesc+0x14>)
 8004a2e:	f001 fe0f 	bl	8006650 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a32:	4803      	ldr	r0, [pc, #12]	; (8004a40 <_cbSendSystemDesc+0x18>)
 8004a34:	f001 fe0c 	bl	8006650 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a38:	bf00      	nop
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08006e24 	.word	0x08006e24
 8004a40:	08006e68 	.word	0x08006e68

08004a44 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a4e:	6819      	ldr	r1, [r3, #0]
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a52:	4a06      	ldr	r2, [pc, #24]	; (8004a6c <SEGGER_SYSVIEW_Conf+0x28>)
 8004a54:	f001 f978 	bl	8005d48 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a5c:	f001 f9b8 	bl	8005dd0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a60:	bf00      	nop
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000004 	.word	0x20000004
 8004a68:	08004a29 	.word	0x08004a29
 8004a6c:	08006f08 	.word	0x08006f08

08004a70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	e033      	b.n	8004ae4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a7c:	491e      	ldr	r1, [pc, #120]	; (8004af8 <_cbSendTaskList+0x88>)
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	491a      	ldr	r1, [pc, #104]	; (8004af8 <_cbSendTaskList+0x88>)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	6819      	ldr	r1, [r3, #0]
 8004a9e:	4c16      	ldr	r4, [pc, #88]	; (8004af8 <_cbSendTaskList+0x88>)
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4423      	add	r3, r4
 8004aac:	3308      	adds	r3, #8
 8004aae:	681c      	ldr	r4, [r3, #0]
 8004ab0:	4d11      	ldr	r5, [pc, #68]	; (8004af8 <_cbSendTaskList+0x88>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	442b      	add	r3, r5
 8004abe:	330c      	adds	r3, #12
 8004ac0:	681d      	ldr	r5, [r3, #0]
 8004ac2:	4e0d      	ldr	r6, [pc, #52]	; (8004af8 <_cbSendTaskList+0x88>)
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4433      	add	r3, r6
 8004ad0:	3310      	adds	r3, #16
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	4622      	mov	r2, r4
 8004ada:	f000 f925 	bl	8004d28 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <_cbSendTaskList+0x8c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d3c6      	bcc.n	8004a7c <_cbSendTaskList+0xc>
  }
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af8:	20012d9c 	.word	0x20012d9c
 8004afc:	20012e3c 	.word	0x20012e3c

08004b00 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b00:	b5b0      	push	{r4, r5, r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b06:	f7fe fb15 	bl	8003134 <xTaskGetTickCountFromISR>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	f04f 0400 	mov.w	r4, #0
 8004b22:	f04f 0500 	mov.w	r5, #0
 8004b26:	015d      	lsls	r5, r3, #5
 8004b28:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004b2c:	0154      	lsls	r4, r2, #5
 8004b2e:	4622      	mov	r2, r4
 8004b30:	462b      	mov	r3, r5
 8004b32:	1a12      	subs	r2, r2, r0
 8004b34:	eb63 0301 	sbc.w	r3, r3, r1
 8004b38:	f04f 0400 	mov.w	r4, #0
 8004b3c:	f04f 0500 	mov.w	r5, #0
 8004b40:	009d      	lsls	r5, r3, #2
 8004b42:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004b46:	0094      	lsls	r4, r2, #2
 8004b48:	4622      	mov	r2, r4
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	1812      	adds	r2, r2, r0
 8004b4e:	eb41 0303 	adc.w	r3, r1, r3
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f04f 0100 	mov.w	r1, #0
 8004b5a:	00d9      	lsls	r1, r3, #3
 8004b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b60:	00d0      	lsls	r0, r2, #3
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bdb0      	pop	{r4, r5, r7, pc}

08004b78 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b86:	2205      	movs	r2, #5
 8004b88:	492b      	ldr	r1, [pc, #172]	; (8004c38 <SYSVIEW_AddTask+0xc0>)
 8004b8a:	68b8      	ldr	r0, [r7, #8]
 8004b8c:	f002 f8f2 	bl	8006d74 <memcmp>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d04b      	beq.n	8004c2e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b96:	4b29      	ldr	r3, [pc, #164]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b07      	cmp	r3, #7
 8004b9c:	d903      	bls.n	8004ba6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b9e:	4828      	ldr	r0, [pc, #160]	; (8004c40 <SYSVIEW_AddTask+0xc8>)
 8004ba0:	f002 f868 	bl	8006c74 <SEGGER_SYSVIEW_Warn>
    return;
 8004ba4:	e044      	b.n	8004c30 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ba6:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4926      	ldr	r1, [pc, #152]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4921      	ldr	r1, [pc, #132]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	3304      	adds	r3, #4
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	491b      	ldr	r1, [pc, #108]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	3308      	adds	r3, #8
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4916      	ldr	r1, [pc, #88]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4910      	ldr	r1, [pc, #64]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3310      	adds	r3, #16
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c12:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3301      	adds	r3, #1
 8004c18:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004c1a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f87e 	bl	8004d28 <SYSVIEW_SendTaskInfo>
 8004c2c:	e000      	b.n	8004c30 <SYSVIEW_AddTask+0xb8>
    return;
 8004c2e:	bf00      	nop

}
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	08006e78 	.word	0x08006e78
 8004c3c:	20012e3c 	.word	0x20012e3c
 8004c40:	08006e80 	.word	0x08006e80
 8004c44:	20012d9c 	.word	0x20012d9c

08004c48 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c56:	2205      	movs	r2, #5
 8004c58:	4930      	ldr	r1, [pc, #192]	; (8004d1c <SYSVIEW_UpdateTask+0xd4>)
 8004c5a:	68b8      	ldr	r0, [r7, #8]
 8004c5c:	f002 f88a 	bl	8006d74 <memcmp>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d056      	beq.n	8004d14 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e00d      	b.n	8004c88 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004c6c:	492c      	ldr	r1, [pc, #176]	; (8004d20 <SYSVIEW_UpdateTask+0xd8>)
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d008      	beq.n	8004c94 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	3301      	adds	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <SYSVIEW_UpdateTask+0xdc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d3ec      	bcc.n	8004c6c <SYSVIEW_UpdateTask+0x24>
 8004c92:	e000      	b.n	8004c96 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004c94:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004c96:	4b23      	ldr	r3, [pc, #140]	; (8004d24 <SYSVIEW_UpdateTask+0xdc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d230      	bcs.n	8004d02 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004ca0:	491f      	ldr	r1, [pc, #124]	; (8004d20 <SYSVIEW_UpdateTask+0xd8>)
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	3304      	adds	r3, #4
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004cb4:	491a      	ldr	r1, [pc, #104]	; (8004d20 <SYSVIEW_UpdateTask+0xd8>)
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004cc8:	4915      	ldr	r1, [pc, #84]	; (8004d20 <SYSVIEW_UpdateTask+0xd8>)
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004cdc:	4910      	ldr	r1, [pc, #64]	; (8004d20 <SYSVIEW_UpdateTask+0xd8>)
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	3310      	adds	r3, #16
 8004cec:	6a3a      	ldr	r2, [r7, #32]
 8004cee:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f814 	bl	8004d28 <SYSVIEW_SendTaskInfo>
 8004d00:	e009      	b.n	8004d16 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff ff33 	bl	8004b78 <SYSVIEW_AddTask>
 8004d12:	e000      	b.n	8004d16 <SYSVIEW_UpdateTask+0xce>
    return;
 8004d14:	bf00      	nop
  }
}
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	08006e78 	.word	0x08006e78
 8004d20:	20012d9c 	.word	0x20012d9c
 8004d24:	20012e3c 	.word	0x20012e3c

08004d28 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	; 0x28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	2214      	movs	r2, #20
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f002 f834 	bl	8006dac <memset>
  TaskInfo.TaskID     = TaskID;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fb7f 	bl	8006460 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d62:	bf00      	nop
 8004d64:	3728      	adds	r7, #40	; 0x28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004d72:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <USART2_IRQHandler+0x80>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d011      	beq.n	8004da6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <USART2_IRQHandler+0x84>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 030b 	and.w	r3, r3, #11
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d108      	bne.n	8004da6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004d94:	4b17      	ldr	r3, [pc, #92]	; (8004df4 <USART2_IRQHandler+0x88>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004d9c:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <USART2_IRQHandler+0x88>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	79fa      	ldrb	r2, [r7, #7]
 8004da2:	4610      	mov	r0, r2
 8004da4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01a      	beq.n	8004de6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <USART2_IRQHandler+0x8c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d015      	beq.n	8004de4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <USART2_IRQHandler+0x8c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	1dfa      	adds	r2, r7, #7
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	4798      	blx	r3
 8004dc2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <USART2_IRQHandler+0x90>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a0b      	ldr	r2, [pc, #44]	; (8004dfc <USART2_IRQHandler+0x90>)
 8004dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e006      	b.n	8004de6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <USART2_IRQHandler+0x80>)
 8004dda:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004ddc:	79fa      	ldrb	r2, [r7, #7]
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <USART2_IRQHandler+0x84>)
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e000      	b.n	8004de6 <USART2_IRQHandler+0x7a>
      return;
 8004de4:	bf00      	nop
    }
  }
}
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40004400 	.word	0x40004400
 8004df0:	40004404 	.word	0x40004404
 8004df4:	20012e40 	.word	0x20012e40
 8004df8:	20012e44 	.word	0x20012e44
 8004dfc:	4000440c 	.word	0x4000440c

08004e00 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0e:	6013      	str	r3, [r2, #0]
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	4000440c 	.word	0x4000440c

08004e20 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <_DoInit+0x98>)
 8004e28:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2203      	movs	r2, #3
 8004e34:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a20      	ldr	r2, [pc, #128]	; (8004ebc <_DoInit+0x9c>)
 8004e3a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a20      	ldr	r2, [pc, #128]	; (8004ec0 <_DoInit+0xa0>)
 8004e40:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e48:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <_DoInit+0x9c>)
 8004e60:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <_DoInit+0xa4>)
 8004e66:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3307      	adds	r3, #7
 8004e84:	4a10      	ldr	r2, [pc, #64]	; (8004ec8 <_DoInit+0xa8>)
 8004e86:	6810      	ldr	r0, [r2, #0]
 8004e88:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e8a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <_DoInit+0xac>)
 8004e92:	6810      	ldr	r0, [r2, #0]
 8004e94:	6018      	str	r0, [r3, #0]
 8004e96:	8891      	ldrh	r1, [r2, #4]
 8004e98:	7992      	ldrb	r2, [r2, #6]
 8004e9a:	8099      	strh	r1, [r3, #4]
 8004e9c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e9e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ea8:	f3bf 8f5f 	dmb	sy
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	20014404 	.word	0x20014404
 8004ebc:	08006ed0 	.word	0x08006ed0
 8004ec0:	20012e48 	.word	0x20012e48
 8004ec4:	20013248 	.word	0x20013248
 8004ec8:	08006edc 	.word	0x08006edc
 8004ecc:	08006ee0 	.word	0x08006ee0

08004ed0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004edc:	4b3e      	ldr	r3, [pc, #248]	; (8004fd8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <SEGGER_RTT_ReadNoLock+0x1e>
 8004eea:	f7ff ff99 	bl	8004e20 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	3360      	adds	r3, #96	; 0x60
 8004efa:	4a37      	ldr	r2, [pc, #220]	; (8004fd8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004efc:	4413      	add	r3, r2
 8004efe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f10:	2300      	movs	r3, #0
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d92b      	bls.n	8004f74 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	bf28      	it	cs
 8004f2e:	4613      	movcs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	4413      	add	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	6939      	ldr	r1, [r7, #16]
 8004f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f42:	f001 ff25 	bl	8006d90 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	4413      	add	r3, r2
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d101      	bne.n	8004f74 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f70:	2300      	movs	r3, #0
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4293      	cmp	r3, r2
 8004f82:	bf28      	it	cs
 8004f84:	4613      	movcs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d019      	beq.n	8004fc2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	4413      	add	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	6939      	ldr	r1, [r7, #16]
 8004f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f9e:	f001 fef7 	bl	8006d90 <memcpy>
    NumBytesRead += NumBytesRem;
 8004fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4413      	add	r3, r2
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fcc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3730      	adds	r7, #48	; 0x30
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20014404 	.word	0x20014404

08004fdc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004fea:	4b3d      	ldr	r3, [pc, #244]	; (80050e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <SEGGER_RTT_AllocUpBuffer+0x20>
 8004ff8:	f7ff ff12 	bl	8004e20 <_DoInit>
  SEGGER_RTT_LOCK();
 8004ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8005000:	f04f 0120 	mov.w	r1, #32
 8005004:	f381 8811 	msr	BASEPRI, r1
 8005008:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800500a:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800500c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005012:	6939      	ldr	r1, [r7, #16]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	4613      	mov	r3, r2
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	4413      	add	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	440b      	add	r3, r1
 8005022:	3304      	adds	r3, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d008      	beq.n	800503c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3301      	adds	r3, #1
 800502e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	429a      	cmp	r2, r3
 8005038:	dbeb      	blt.n	8005012 <SEGGER_RTT_AllocUpBuffer+0x36>
 800503a:	e000      	b.n	800503e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800503c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	429a      	cmp	r2, r3
 8005046:	da3f      	bge.n	80050c8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005048:	6939      	ldr	r1, [r7, #16]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	4613      	mov	r3, r2
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	4413      	add	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	440b      	add	r3, r1
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800505c:	6939      	ldr	r1, [r7, #16]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	3304      	adds	r3, #4
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005072:	6939      	ldr	r1, [r7, #16]
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	4613      	mov	r3, r2
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	4413      	add	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	440b      	add	r3, r1
 8005080:	3320      	adds	r3, #32
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005086:	6939      	ldr	r1, [r7, #16]
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	4613      	mov	r3, r2
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	4413      	add	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	440b      	add	r3, r1
 8005094:	3328      	adds	r3, #40	; 0x28
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800509a:	6939      	ldr	r1, [r7, #16]
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	440b      	add	r3, r1
 80050a8:	3324      	adds	r3, #36	; 0x24
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80050ae:	6939      	ldr	r1, [r7, #16]
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	4613      	mov	r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4413      	add	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	440b      	add	r3, r1
 80050bc:	332c      	adds	r3, #44	; 0x2c
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050c2:	f3bf 8f5f 	dmb	sy
 80050c6:	e002      	b.n	80050ce <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295
 80050cc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80050d4:	69fb      	ldr	r3, [r7, #28]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20014404 	.word	0x20014404

080050e4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050f2:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005100:	f7ff fe8e 	bl	8004e20 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005104:	4b2e      	ldr	r3, [pc, #184]	; (80051c0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005106:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	461a      	mov	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4293      	cmp	r3, r2
 8005112:	d24d      	bcs.n	80051b0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005114:	f3ef 8311 	mrs	r3, BASEPRI
 8005118:	f04f 0120 	mov.w	r1, #32
 800511c:	f381 8811 	msr	BASEPRI, r1
 8005120:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d031      	beq.n	800518c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005128:	6979      	ldr	r1, [r7, #20]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	440b      	add	r3, r1
 8005136:	3360      	adds	r3, #96	; 0x60
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800513c:	6979      	ldr	r1, [r7, #20]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4613      	mov	r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4413      	add	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	440b      	add	r3, r1
 800514a:	3364      	adds	r3, #100	; 0x64
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005150:	6979      	ldr	r1, [r7, #20]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	4413      	add	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	440b      	add	r3, r1
 800515e:	3368      	adds	r3, #104	; 0x68
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005164:	6979      	ldr	r1, [r7, #20]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4613      	mov	r3, r2
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	4413      	add	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	440b      	add	r3, r1
 8005172:	3370      	adds	r3, #112	; 0x70
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4613      	mov	r3, r2
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	4413      	add	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	440b      	add	r3, r1
 8005186:	336c      	adds	r3, #108	; 0x6c
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800518c:	6979      	ldr	r1, [r7, #20]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4613      	mov	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	440b      	add	r3, r1
 800519a:	3374      	adds	r3, #116	; 0x74
 800519c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051a0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	e002      	b.n	80051b6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80051b0:	f04f 33ff 	mov.w	r3, #4294967295
 80051b4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80051b6:	69fb      	ldr	r3, [r7, #28]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20014404 	.word	0x20014404

080051c4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80051d4:	e002      	b.n	80051dc <_EncodeStr+0x18>
    Len++;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	3301      	adds	r3, #1
 80051da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f6      	bne.n	80051d6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d901      	bls.n	80051f4 <_EncodeStr+0x30>
    Len = Limit;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2bfe      	cmp	r3, #254	; 0xfe
 80051f8:	d806      	bhi.n	8005208 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	60fa      	str	r2, [r7, #12]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e011      	b.n	800522c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	60fa      	str	r2, [r7, #12]
 800520e:	22ff      	movs	r2, #255	; 0xff
 8005210:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	60fa      	str	r2, [r7, #12]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	0a19      	lsrs	r1, r3, #8
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	60fa      	str	r2, [r7, #12]
 8005228:	b2ca      	uxtb	r2, r1
 800522a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005230:	e00a      	b.n	8005248 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	1c53      	adds	r3, r2, #1
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1c59      	adds	r1, r3, #1
 800523c:	60f9      	str	r1, [r7, #12]
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	701a      	strb	r2, [r3, #0]
    n++;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3301      	adds	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	429a      	cmp	r2, r3
 800524e:	d3f0      	bcc.n	8005232 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	4618      	mov	r0, r3
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3304      	adds	r3, #4
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800527e:	4b36      	ldr	r3, [pc, #216]	; (8005358 <_HandleIncomingPacket+0xe0>)
 8005280:	7e1b      	ldrb	r3, [r3, #24]
 8005282:	4618      	mov	r0, r3
 8005284:	1cfb      	adds	r3, r7, #3
 8005286:	2201      	movs	r2, #1
 8005288:	4619      	mov	r1, r3
 800528a:	f7ff fe21 	bl	8004ed0 <SEGGER_RTT_ReadNoLock>
 800528e:	4603      	mov	r3, r0
 8005290:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	dd54      	ble.n	8005342 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	d032      	beq.n	8005304 <_HandleIncomingPacket+0x8c>
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	dc42      	bgt.n	8005328 <_HandleIncomingPacket+0xb0>
 80052a2:	2b07      	cmp	r3, #7
 80052a4:	dc16      	bgt.n	80052d4 <_HandleIncomingPacket+0x5c>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dd3e      	ble.n	8005328 <_HandleIncomingPacket+0xb0>
 80052aa:	3b01      	subs	r3, #1
 80052ac:	2b06      	cmp	r3, #6
 80052ae:	d83b      	bhi.n	8005328 <_HandleIncomingPacket+0xb0>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <_HandleIncomingPacket+0x40>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052db 	.word	0x080052db
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052e7 	.word	0x080052e7
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f3 	.word	0x080052f3
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	2b7f      	cmp	r3, #127	; 0x7f
 80052d6:	d036      	beq.n	8005346 <_HandleIncomingPacket+0xce>
 80052d8:	e026      	b.n	8005328 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80052da:	f000 ff45 	bl	8006168 <SEGGER_SYSVIEW_Start>
      break;
 80052de:	e037      	b.n	8005350 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80052e0:	f000 fffe 	bl	80062e0 <SEGGER_SYSVIEW_Stop>
      break;
 80052e4:	e034      	b.n	8005350 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80052e6:	f001 f9d7 	bl	8006698 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80052ea:	e031      	b.n	8005350 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80052ec:	f001 f99c 	bl	8006628 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80052f0:	e02e      	b.n	8005350 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80052f2:	f001 f81b 	bl	800632c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80052f6:	e02b      	b.n	8005350 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80052f8:	f001 fc6a 	bl	8006bd0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80052fc:	e028      	b.n	8005350 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80052fe:	f001 fc49 	bl	8006b94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005302:	e025      	b.n	8005350 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005304:	4b14      	ldr	r3, [pc, #80]	; (8005358 <_HandleIncomingPacket+0xe0>)
 8005306:	7e1b      	ldrb	r3, [r3, #24]
 8005308:	4618      	mov	r0, r3
 800530a:	1cfb      	adds	r3, r7, #3
 800530c:	2201      	movs	r2, #1
 800530e:	4619      	mov	r1, r3
 8005310:	f7ff fdde 	bl	8004ed0 <SEGGER_RTT_ReadNoLock>
 8005314:	4603      	mov	r3, r0
 8005316:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	dd15      	ble.n	800534a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	4618      	mov	r0, r3
 8005322:	f001 fbb7 	bl	8006a94 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005326:	e010      	b.n	800534a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	b25b      	sxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	da0e      	bge.n	800534e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <_HandleIncomingPacket+0xe0>)
 8005332:	7e1b      	ldrb	r3, [r3, #24]
 8005334:	4618      	mov	r0, r3
 8005336:	1cfb      	adds	r3, r7, #3
 8005338:	2201      	movs	r2, #1
 800533a:	4619      	mov	r1, r3
 800533c:	f7ff fdc8 	bl	8004ed0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005340:	e005      	b.n	800534e <_HandleIncomingPacket+0xd6>
    }
  }
 8005342:	bf00      	nop
 8005344:	e004      	b.n	8005350 <_HandleIncomingPacket+0xd8>
      break;
 8005346:	bf00      	nop
 8005348:	e002      	b.n	8005350 <_HandleIncomingPacket+0xd8>
      break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <_HandleIncomingPacket+0xd8>
      break;
 800534e:	bf00      	nop
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20014260 	.word	0x20014260

0800535c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	; 0x30
 8005360:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005362:	2301      	movs	r3, #1
 8005364:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	3301      	adds	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005370:	4b32      	ldr	r3, [pc, #200]	; (800543c <_TrySendOverflowPacket+0xe0>)
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
 8005376:	e00b      	b.n	8005390 <_TrySendOverflowPacket+0x34>
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	b2da      	uxtb	r2, r3
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	1c59      	adds	r1, r3, #1
 8005380:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	09db      	lsrs	r3, r3, #7
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2b7f      	cmp	r3, #127	; 0x7f
 8005394:	d8f0      	bhi.n	8005378 <_TrySendOverflowPacket+0x1c>
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800539c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80053a6:	4b26      	ldr	r3, [pc, #152]	; (8005440 <_TrySendOverflowPacket+0xe4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80053ac:	4b23      	ldr	r3, [pc, #140]	; (800543c <_TrySendOverflowPacket+0xe0>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	e00b      	b.n	80053d8 <_TrySendOverflowPacket+0x7c>
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	1c59      	adds	r1, r3, #1
 80053c8:	6279      	str	r1, [r7, #36]	; 0x24
 80053ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	09db      	lsrs	r3, r3, #7
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	2b7f      	cmp	r3, #127	; 0x7f
 80053dc:	d8f0      	bhi.n	80053c0 <_TrySendOverflowPacket+0x64>
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	627a      	str	r2, [r7, #36]	; 0x24
 80053e4:	6a3a      	ldr	r2, [r7, #32]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80053ee:	4b13      	ldr	r3, [pc, #76]	; (800543c <_TrySendOverflowPacket+0xe0>)
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	4618      	mov	r0, r3
 80053f4:	1d3b      	adds	r3, r7, #4
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	f7fa ff06 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005404:	4603      	mov	r3, r0
 8005406:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005408:	f7ff fcfa 	bl	8004e00 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005412:	4a0a      	ldr	r2, [pc, #40]	; (800543c <_TrySendOverflowPacket+0xe0>)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <_TrySendOverflowPacket+0xe0>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	3b01      	subs	r3, #1
 800541e:	b2da      	uxtb	r2, r3
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <_TrySendOverflowPacket+0xe0>)
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	e004      	b.n	8005430 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005426:	4b05      	ldr	r3, [pc, #20]	; (800543c <_TrySendOverflowPacket+0xe0>)
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	3301      	adds	r3, #1
 800542c:	4a03      	ldr	r2, [pc, #12]	; (800543c <_TrySendOverflowPacket+0xe0>)
 800542e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005430:	693b      	ldr	r3, [r7, #16]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3730      	adds	r7, #48	; 0x30
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20014260 	.word	0x20014260
 8005440:	e0001004 	.word	0xe0001004

08005444 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005450:	4b6d      	ldr	r3, [pc, #436]	; (8005608 <_SendPacket+0x1c4>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d010      	beq.n	800547a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005458:	4b6b      	ldr	r3, [pc, #428]	; (8005608 <_SendPacket+0x1c4>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80a5 	beq.w	80055ac <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005462:	4b69      	ldr	r3, [pc, #420]	; (8005608 <_SendPacket+0x1c4>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d109      	bne.n	800547e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800546a:	f7ff ff77 	bl	800535c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800546e:	4b66      	ldr	r3, [pc, #408]	; (8005608 <_SendPacket+0x1c4>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b01      	cmp	r3, #1
 8005474:	f040 809c 	bne.w	80055b0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005478:	e001      	b.n	800547e <_SendPacket+0x3a>
    goto Send;
 800547a:	bf00      	nop
 800547c:	e000      	b.n	8005480 <_SendPacket+0x3c>
Send:
 800547e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b1f      	cmp	r3, #31
 8005484:	d809      	bhi.n	800549a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005486:	4b60      	ldr	r3, [pc, #384]	; (8005608 <_SendPacket+0x1c4>)
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	f040 808d 	bne.w	80055b4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b17      	cmp	r3, #23
 800549e:	d807      	bhi.n	80054b0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e03d      	b.n	800552c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	2b7f      	cmp	r3, #127	; 0x7f
 80054bc:	d912      	bls.n	80054e4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	09da      	lsrs	r2, r3, #7
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	3a01      	subs	r2, #1
 80054d6:	60fa      	str	r2, [r7, #12]
 80054d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e006      	b.n	80054f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b7f      	cmp	r3, #127	; 0x7f
 80054f6:	d912      	bls.n	800551e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	09da      	lsrs	r2, r3, #7
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3b01      	subs	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	3a01      	subs	r2, #1
 8005510:	60fa      	str	r2, [r7, #12]
 8005512:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005516:	b2da      	uxtb	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	e006      	b.n	800552c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3b01      	subs	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800552c:	4b37      	ldr	r3, [pc, #220]	; (800560c <_SendPacket+0x1c8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005532:	4b35      	ldr	r3, [pc, #212]	; (8005608 <_SendPacket+0x1c4>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	e00b      	b.n	800555e <_SendPacket+0x11a>
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1c59      	adds	r1, r3, #1
 800554e:	6279      	str	r1, [r7, #36]	; 0x24
 8005550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	09db      	lsrs	r3, r3, #7
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	2b7f      	cmp	r3, #127	; 0x7f
 8005562:	d8f0      	bhi.n	8005546 <_SendPacket+0x102>
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	627a      	str	r2, [r7, #36]	; 0x24
 800556a:	6a3a      	ldr	r2, [r7, #32]
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005574:	4b24      	ldr	r3, [pc, #144]	; (8005608 <_SendPacket+0x1c4>)
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	4618      	mov	r0, r3
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	461a      	mov	r2, r3
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	f7fa fe44 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005588:	4603      	mov	r3, r0
 800558a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800558c:	f7ff fc38 	bl	8004e00 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005596:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <_SendPacket+0x1c4>)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	60d3      	str	r3, [r2, #12]
 800559c:	e00b      	b.n	80055b6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <_SendPacket+0x1c4>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	4b18      	ldr	r3, [pc, #96]	; (8005608 <_SendPacket+0x1c4>)
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e004      	b.n	80055b6 <_SendPacket+0x172>
    goto SendDone;
 80055ac:	bf00      	nop
 80055ae:	e002      	b.n	80055b6 <_SendPacket+0x172>
      goto SendDone;
 80055b0:	bf00      	nop
 80055b2:	e000      	b.n	80055b6 <_SendPacket+0x172>
      goto SendDone;
 80055b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <_SendPacket+0x1c4>)
 80055b8:	7e1b      	ldrb	r3, [r3, #24]
 80055ba:	4619      	mov	r1, r3
 80055bc:	4a14      	ldr	r2, [pc, #80]	; (8005610 <_SendPacket+0x1cc>)
 80055be:	460b      	mov	r3, r1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	440b      	add	r3, r1
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4413      	add	r3, r2
 80055c8:	336c      	adds	r3, #108	; 0x6c
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <_SendPacket+0x1c4>)
 80055ce:	7e1b      	ldrb	r3, [r3, #24]
 80055d0:	4618      	mov	r0, r3
 80055d2:	490f      	ldr	r1, [pc, #60]	; (8005610 <_SendPacket+0x1cc>)
 80055d4:	4603      	mov	r3, r0
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	4403      	add	r3, r0
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	440b      	add	r3, r1
 80055de:	3370      	adds	r3, #112	; 0x70
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d00b      	beq.n	80055fe <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <_SendPacket+0x1c4>)
 80055e8:	789b      	ldrb	r3, [r3, #2]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d107      	bne.n	80055fe <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <_SendPacket+0x1c4>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80055f4:	f7ff fe40 	bl	8005278 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <_SendPacket+0x1c4>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80055fe:	bf00      	nop
 8005600:	3728      	adds	r7, #40	; 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20014260 	.word	0x20014260
 800560c:	e0001004 	.word	0xe0001004
 8005610:	20014404 	.word	0x20014404

08005614 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b08a      	sub	sp, #40	; 0x28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	3301      	adds	r3, #1
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d80a      	bhi.n	8005644 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	1c59      	adds	r1, r3, #1
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6051      	str	r1, [r2, #4]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b80      	cmp	r3, #128	; 0x80
 800564a:	d15a      	bne.n	8005702 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	623b      	str	r3, [r7, #32]
 800566c:	e00b      	b.n	8005686 <_StoreChar+0x72>
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	1c59      	adds	r1, r3, #1
 8005676:	6279      	str	r1, [r7, #36]	; 0x24
 8005678:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	09db      	lsrs	r3, r3, #7
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	2b7f      	cmp	r3, #127	; 0x7f
 800568a:	d8f0      	bhi.n	800566e <_StoreChar+0x5a>
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	627a      	str	r2, [r7, #36]	; 0x24
 8005692:	6a3a      	ldr	r2, [r7, #32]
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	e00b      	b.n	80056be <_StoreChar+0xaa>
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	1c59      	adds	r1, r3, #1
 80056ae:	61f9      	str	r1, [r7, #28]
 80056b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	09db      	lsrs	r3, r3, #7
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b7f      	cmp	r3, #127	; 0x7f
 80056c2:	d8f0      	bhi.n	80056a6 <_StoreChar+0x92>
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	61fa      	str	r2, [r7, #28]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	221a      	movs	r2, #26
 80056da:	6939      	ldr	r1, [r7, #16]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff feb1 	bl	8005444 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fdb9 	bl	800525e <_PreparePacket>
 80056ec:	4602      	mov	r2, r0
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	611a      	str	r2, [r3, #16]
  }
}
 8005702:	bf00      	nop
 8005704:	3728      	adds	r7, #40	; 0x28
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	; 0x28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800571e:	2301      	movs	r3, #1
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005722:	2301      	movs	r3, #1
 8005724:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005726:	e007      	b.n	8005738 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005728:	6a3a      	ldr	r2, [r7, #32]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	623b      	str	r3, [r7, #32]
    Width++;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3301      	adds	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005738:	6a3a      	ldr	r2, [r7, #32]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d2f3      	bcs.n	8005728 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	429a      	cmp	r2, r3
 8005746:	d901      	bls.n	800574c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800574c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d11f      	bne.n	8005796 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01c      	beq.n	8005796 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <_PrintUnsigned+0x66>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <_PrintUnsigned+0x66>
        c = '0';
 800576c:	2330      	movs	r3, #48	; 0x30
 800576e:	76fb      	strb	r3, [r7, #27]
 8005770:	e001      	b.n	8005776 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005772:	2320      	movs	r3, #32
 8005774:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005776:	e007      	b.n	8005788 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	3b01      	subs	r3, #1
 800577c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800577e:	7efb      	ldrb	r3, [r7, #27]
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff ff46 	bl	8005614 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <_PrintUnsigned+0x8a>
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	429a      	cmp	r2, r3
 8005794:	d3f0      	bcc.n	8005778 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d903      	bls.n	80057a4 <_PrintUnsigned+0x98>
      NumDigits--;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	3b01      	subs	r3, #1
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	e009      	b.n	80057b8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d200      	bcs.n	80057b8 <_PrintUnsigned+0xac>
        break;
 80057b6:	e005      	b.n	80057c4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	fb02 f303 	mul.w	r3, r2, r3
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80057c2:	e7e8      	b.n	8005796 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <_PrintUnsigned+0x128>)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	4619      	mov	r1, r3
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff ff14 	bl	8005614 <_StoreChar>
    Digit /= Base;
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e3      	bne.n	80057c4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d011      	beq.n	800582a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00e      	beq.n	800582a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800580c:	e006      	b.n	800581c <_PrintUnsigned+0x110>
        FieldWidth--;
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	3b01      	subs	r3, #1
 8005812:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005814:	2120      	movs	r1, #32
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff fefc 	bl	8005614 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <_PrintUnsigned+0x11e>
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	429a      	cmp	r2, r3
 8005828:	d3f1      	bcc.n	800580e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800582a:	bf00      	nop
 800582c:	3728      	adds	r7, #40	; 0x28
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	08006f1c 	.word	0x08006f1c

08005838 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	bfb8      	it	lt
 800584c:	425b      	neglt	r3, r3
 800584e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005850:	2301      	movs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005854:	e007      	b.n	8005866 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	fb92 f3f3 	sdiv	r3, r2, r3
 800585e:	613b      	str	r3, [r7, #16]
    Width++;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	3301      	adds	r3, #1
 8005864:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	429a      	cmp	r2, r3
 800586c:	daf3      	bge.n	8005856 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	429a      	cmp	r2, r3
 8005874:	d901      	bls.n	800587a <_PrintInt+0x42>
    Width = NumDigits;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <_PrintInt+0x5e>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	db04      	blt.n	8005890 <_PrintInt+0x58>
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <_PrintInt+0x5e>
    FieldWidth--;
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	3b01      	subs	r3, #1
 8005894:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <_PrintInt+0x6e>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <_PrintInt+0x9c>
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d111      	bne.n	80058d4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00e      	beq.n	80058d4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058b6:	e006      	b.n	80058c6 <_PrintInt+0x8e>
        FieldWidth--;
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80058be:	2120      	movs	r1, #32
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f7ff fea7 	bl	8005614 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <_PrintInt+0x9c>
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3f1      	bcc.n	80058b8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	da07      	bge.n	80058ea <_PrintInt+0xb2>
    v = -v;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	425b      	negs	r3, r3
 80058de:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80058e0:	212d      	movs	r1, #45	; 0x2d
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fe96 	bl	8005614 <_StoreChar>
 80058e8:	e008      	b.n	80058fc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80058f4:	212b      	movs	r1, #43	; 0x2b
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff fe8c 	bl	8005614 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d019      	beq.n	800593a <_PrintInt+0x102>
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d114      	bne.n	800593a <_PrintInt+0x102>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d111      	bne.n	800593a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800591c:	e006      	b.n	800592c <_PrintInt+0xf4>
        FieldWidth--;
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	3b01      	subs	r3, #1
 8005922:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005924:	2130      	movs	r1, #48	; 0x30
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff fe74 	bl	8005614 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <_PrintInt+0x102>
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	429a      	cmp	r2, r3
 8005938:	d3f1      	bcc.n	800591e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f7ff fedf 	bl	800570c <_PrintUnsigned>
}
 800594e:	bf00      	nop
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b098      	sub	sp, #96	; 0x60
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005964:	f3ef 8311 	mrs	r3, BASEPRI
 8005968:	f04f 0120 	mov.w	r1, #32
 800596c:	f381 8811 	msr	BASEPRI, r1
 8005970:	633b      	str	r3, [r7, #48]	; 0x30
 8005972:	48b7      	ldr	r0, [pc, #732]	; (8005c50 <_VPrintTarget+0x2f8>)
 8005974:	f7ff fc73 	bl	800525e <_PreparePacket>
 8005978:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800597a:	4bb5      	ldr	r3, [pc, #724]	; (8005c50 <_VPrintTarget+0x2f8>)
 800597c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800597e:	2300      	movs	r3, #0
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	3301      	adds	r3, #1
 800598a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800599e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 8183 	beq.w	8005cae <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80059a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ac:	2b25      	cmp	r3, #37	; 0x25
 80059ae:	f040 8170 	bne.w	8005c92 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80059b2:	2300      	movs	r3, #0
 80059b4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80059c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059c6:	3b23      	subs	r3, #35	; 0x23
 80059c8:	2b0d      	cmp	r3, #13
 80059ca:	d83f      	bhi.n	8005a4c <_VPrintTarget+0xf4>
 80059cc:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <_VPrintTarget+0x7c>)
 80059ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d2:	bf00      	nop
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	08005a4d 	.word	0x08005a4d
 80059dc:	08005a4d 	.word	0x08005a4d
 80059e0:	08005a4d 	.word	0x08005a4d
 80059e4:	08005a4d 	.word	0x08005a4d
 80059e8:	08005a4d 	.word	0x08005a4d
 80059ec:	08005a4d 	.word	0x08005a4d
 80059f0:	08005a4d 	.word	0x08005a4d
 80059f4:	08005a2d 	.word	0x08005a2d
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a4d 	.word	0x08005a4d
 8005a04:	08005a4d 	.word	0x08005a4d
 8005a08:	08005a1d 	.word	0x08005a1d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e01a      	b.n	8005a52 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1e:	f043 0302 	orr.w	r3, r3, #2
 8005a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e012      	b.n	8005a52 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2e:	f043 0304 	orr.w	r3, r3, #4
 8005a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e00a      	b.n	8005a52 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3e:	f043 0308 	orr.w	r3, r3, #8
 8005a42:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e002      	b.n	8005a52 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a50:	bf00      	nop
        }
      } while (v);
 8005a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1b0      	bne.n	80059ba <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005a64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a68:	2b2f      	cmp	r3, #47	; 0x2f
 8005a6a:	d912      	bls.n	8005a92 <_VPrintTarget+0x13a>
 8005a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a70:	2b39      	cmp	r3, #57	; 0x39
 8005a72:	d80e      	bhi.n	8005a92 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	461a      	mov	r2, r3
 8005a86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3b30      	subs	r3, #48	; 0x30
 8005a8e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005a90:	e7e4      	b.n	8005a5c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005a92:	2300      	movs	r3, #0
 8005a94:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa4:	d11d      	bne.n	8005ae2 <_VPrintTarget+0x18a>
        sFormat++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ab8:	2b2f      	cmp	r3, #47	; 0x2f
 8005aba:	d912      	bls.n	8005ae2 <_VPrintTarget+0x18a>
 8005abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ac0:	2b39      	cmp	r3, #57	; 0x39
 8005ac2:	d80e      	bhi.n	8005ae2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ada:	4413      	add	r3, r2
 8005adc:	3b30      	subs	r3, #48	; 0x30
 8005ade:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005ae0:	e7e4      	b.n	8005aac <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005aea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aee:	2b6c      	cmp	r3, #108	; 0x6c
 8005af0:	d003      	beq.n	8005afa <_VPrintTarget+0x1a2>
 8005af2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005af6:	2b68      	cmp	r3, #104	; 0x68
 8005af8:	d107      	bne.n	8005b0a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005b08:	e7ef      	b.n	8005aea <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005b0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b0e:	2b25      	cmp	r3, #37	; 0x25
 8005b10:	f000 80b3 	beq.w	8005c7a <_VPrintTarget+0x322>
 8005b14:	2b25      	cmp	r3, #37	; 0x25
 8005b16:	f2c0 80b7 	blt.w	8005c88 <_VPrintTarget+0x330>
 8005b1a:	2b78      	cmp	r3, #120	; 0x78
 8005b1c:	f300 80b4 	bgt.w	8005c88 <_VPrintTarget+0x330>
 8005b20:	2b58      	cmp	r3, #88	; 0x58
 8005b22:	f2c0 80b1 	blt.w	8005c88 <_VPrintTarget+0x330>
 8005b26:	3b58      	subs	r3, #88	; 0x58
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	f200 80ad 	bhi.w	8005c88 <_VPrintTarget+0x330>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <_VPrintTarget+0x1dc>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005c2b 	.word	0x08005c2b
 8005b38:	08005c89 	.word	0x08005c89
 8005b3c:	08005c89 	.word	0x08005c89
 8005b40:	08005c89 	.word	0x08005c89
 8005b44:	08005c89 	.word	0x08005c89
 8005b48:	08005c89 	.word	0x08005c89
 8005b4c:	08005c89 	.word	0x08005c89
 8005b50:	08005c89 	.word	0x08005c89
 8005b54:	08005c89 	.word	0x08005c89
 8005b58:	08005c89 	.word	0x08005c89
 8005b5c:	08005c89 	.word	0x08005c89
 8005b60:	08005bb9 	.word	0x08005bb9
 8005b64:	08005bdf 	.word	0x08005bdf
 8005b68:	08005c89 	.word	0x08005c89
 8005b6c:	08005c89 	.word	0x08005c89
 8005b70:	08005c89 	.word	0x08005c89
 8005b74:	08005c89 	.word	0x08005c89
 8005b78:	08005c89 	.word	0x08005c89
 8005b7c:	08005c89 	.word	0x08005c89
 8005b80:	08005c89 	.word	0x08005c89
 8005b84:	08005c89 	.word	0x08005c89
 8005b88:	08005c89 	.word	0x08005c89
 8005b8c:	08005c89 	.word	0x08005c89
 8005b90:	08005c89 	.word	0x08005c89
 8005b94:	08005c55 	.word	0x08005c55
 8005b98:	08005c89 	.word	0x08005c89
 8005b9c:	08005c89 	.word	0x08005c89
 8005ba0:	08005c89 	.word	0x08005c89
 8005ba4:	08005c89 	.word	0x08005c89
 8005ba8:	08005c05 	.word	0x08005c05
 8005bac:	08005c89 	.word	0x08005c89
 8005bb0:	08005c89 	.word	0x08005c89
 8005bb4:	08005c2b 	.word	0x08005c2b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	1d19      	adds	r1, r3, #4
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6011      	str	r1, [r2, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005bcc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005bd0:	f107 0314 	add.w	r3, r7, #20
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff fd1c 	bl	8005614 <_StoreChar>
        break;
 8005bdc:	e055      	b.n	8005c8a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	1d19      	adds	r1, r3, #4
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6011      	str	r1, [r2, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005bec:	f107 0014 	add.w	r0, r7, #20
 8005bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfa:	220a      	movs	r2, #10
 8005bfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bfe:	f7ff fe1b 	bl	8005838 <_PrintInt>
        break;
 8005c02:	e042      	b.n	8005c8a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	1d19      	adds	r1, r3, #4
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c14:	f107 0014 	add.w	r0, r7, #20
 8005c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c22:	220a      	movs	r2, #10
 8005c24:	f7ff fd72 	bl	800570c <_PrintUnsigned>
        break;
 8005c28:	e02f      	b.n	8005c8a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	1d19      	adds	r1, r3, #4
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6011      	str	r1, [r2, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005c38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c3a:	f107 0014 	add.w	r0, r7, #20
 8005c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c48:	2210      	movs	r2, #16
 8005c4a:	f7ff fd5f 	bl	800570c <_PrintUnsigned>
        break;
 8005c4e:	e01c      	b.n	8005c8a <_VPrintTarget+0x332>
 8005c50:	20014290 	.word	0x20014290
      case 'p':
        v = va_arg(*pParamList, int);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	1d19      	adds	r1, r3, #4
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6011      	str	r1, [r2, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005c62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c64:	f107 0014 	add.w	r0, r7, #20
 8005c68:	2300      	movs	r3, #0
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	2308      	movs	r3, #8
 8005c72:	2210      	movs	r2, #16
 8005c74:	f7ff fd4a 	bl	800570c <_PrintUnsigned>
        break;
 8005c78:	e007      	b.n	8005c8a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005c7a:	f107 0314 	add.w	r3, r7, #20
 8005c7e:	2125      	movs	r1, #37	; 0x25
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fcc7 	bl	8005614 <_StoreChar>
        break;
 8005c86:	e000      	b.n	8005c8a <_VPrintTarget+0x332>
      default:
        break;
 8005c88:	bf00      	nop
      }
      sFormat++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e007      	b.n	8005ca2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005c92:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005c96:	f107 0314 	add.w	r3, r7, #20
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fcb9 	bl	8005614 <_StoreChar>
    }
  } while (*sFormat);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f47f ae72 	bne.w	8005990 <_VPrintTarget+0x38>
 8005cac:	e000      	b.n	8005cb0 <_VPrintTarget+0x358>
      break;
 8005cae:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d041      	beq.n	8005d3a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc6:	e00b      	b.n	8005ce0 <_VPrintTarget+0x388>
 8005cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cce:	1c59      	adds	r1, r3, #1
 8005cd0:	6439      	str	r1, [r7, #64]	; 0x40
 8005cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cdc:	09db      	lsrs	r3, r3, #7
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce4:	d8f0      	bhi.n	8005cc8 <_VPrintTarget+0x370>
 8005ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	643a      	str	r2, [r7, #64]	; 0x40
 8005cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfe:	e00b      	b.n	8005d18 <_VPrintTarget+0x3c0>
 8005d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	1c59      	adds	r1, r3, #1
 8005d08:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	09db      	lsrs	r3, r3, #7
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
 8005d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d1c:	d8f0      	bhi.n	8005d00 <_VPrintTarget+0x3a8>
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	69b9      	ldr	r1, [r7, #24]
 8005d32:	221a      	movs	r2, #26
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff fb85 	bl	8005444 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005d40:	bf00      	nop
 8005d42:	3758      	adds	r7, #88	; 0x58
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005d56:	2300      	movs	r3, #0
 8005d58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d5c:	4917      	ldr	r1, [pc, #92]	; (8005dbc <SEGGER_SYSVIEW_Init+0x74>)
 8005d5e:	4818      	ldr	r0, [pc, #96]	; (8005dc0 <SEGGER_SYSVIEW_Init+0x78>)
 8005d60:	f7ff f93c 	bl	8004fdc <SEGGER_RTT_AllocUpBuffer>
 8005d64:	4603      	mov	r3, r0
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d6a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005d6c:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d6e:	785a      	ldrb	r2, [r3, #1]
 8005d70:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d72:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005d74:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d76:	7e1b      	ldrb	r3, [r3, #24]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	2308      	movs	r3, #8
 8005d80:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <SEGGER_SYSVIEW_Init+0x80>)
 8005d82:	490f      	ldr	r1, [pc, #60]	; (8005dc0 <SEGGER_SYSVIEW_Init+0x78>)
 8005d84:	f7ff f9ae 	bl	80050e4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005d88:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <SEGGER_SYSVIEW_Init+0x84>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d94:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005d96:	4a0b      	ldr	r2, [pc, #44]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005d9c:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005da2:	4a08      	ldr	r2, [pc, #32]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005da8:	4a06      	ldr	r2, [pc, #24]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20013258 	.word	0x20013258
 8005dc0:	08006ee8 	.word	0x08006ee8
 8005dc4:	20014260 	.word	0x20014260
 8005dc8:	20014258 	.word	0x20014258
 8005dcc:	e0001004 	.word	0xe0001004

08005dd0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005dd8:	4a04      	ldr	r2, [pc, #16]	; (8005dec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6113      	str	r3, [r2, #16]
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20014260 	.word	0x20014260

08005df0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005df8:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfc:	f04f 0120 	mov.w	r1, #32
 8005e00:	f381 8811 	msr	BASEPRI, r1
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	4808      	ldr	r0, [pc, #32]	; (8005e28 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005e08:	f7ff fa29 	bl	800525e <_PreparePacket>
 8005e0c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	68b8      	ldr	r0, [r7, #8]
 8005e14:	f7ff fb16 	bl	8005444 <_SendPacket>
  RECORD_END();
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f383 8811 	msr	BASEPRI, r3
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20014290 	.word	0x20014290

08005e2c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e36:	f3ef 8311 	mrs	r3, BASEPRI
 8005e3a:	f04f 0120 	mov.w	r1, #32
 8005e3e:	f381 8811 	msr	BASEPRI, r1
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	4816      	ldr	r0, [pc, #88]	; (8005ea0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005e46:	f7ff fa0a 	bl	800525e <_PreparePacket>
 8005e4a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	e00b      	b.n	8005e72 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	1c59      	adds	r1, r3, #1
 8005e62:	61f9      	str	r1, [r7, #28]
 8005e64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	09db      	lsrs	r3, r3, #7
 8005e70:	61bb      	str	r3, [r7, #24]
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b7f      	cmp	r3, #127	; 0x7f
 8005e76:	d8f0      	bhi.n	8005e5a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	61fa      	str	r2, [r7, #28]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	6938      	ldr	r0, [r7, #16]
 8005e8e:	f7ff fad9 	bl	8005444 <_SendPacket>
  RECORD_END();
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f383 8811 	msr	BASEPRI, r3
}
 8005e98:	bf00      	nop
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20014290 	.word	0x20014290

08005ea4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08c      	sub	sp, #48	; 0x30
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb4:	f04f 0120 	mov.w	r1, #32
 8005eb8:	f381 8811 	msr	BASEPRI, r1
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	4825      	ldr	r0, [pc, #148]	; (8005f54 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005ec0:	f7ff f9cd 	bl	800525e <_PreparePacket>
 8005ec4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed2:	e00b      	b.n	8005eec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	09db      	lsrs	r3, r3, #7
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef0:	d8f0      	bhi.n	8005ed4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	623b      	str	r3, [r7, #32]
 8005f0a:	e00b      	b.n	8005f24 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	6279      	str	r1, [r7, #36]	; 0x24
 8005f16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	09db      	lsrs	r3, r3, #7
 8005f22:	623b      	str	r3, [r7, #32]
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b7f      	cmp	r3, #127	; 0x7f
 8005f28:	d8f0      	bhi.n	8005f0c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	6979      	ldr	r1, [r7, #20]
 8005f3e:	69b8      	ldr	r0, [r7, #24]
 8005f40:	f7ff fa80 	bl	8005444 <_SendPacket>
  RECORD_END();
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f383 8811 	msr	BASEPRI, r3
}
 8005f4a:	bf00      	nop
 8005f4c:	3730      	adds	r7, #48	; 0x30
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20014290 	.word	0x20014290

08005f58 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08e      	sub	sp, #56	; 0x38
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f66:	f3ef 8311 	mrs	r3, BASEPRI
 8005f6a:	f04f 0120 	mov.w	r1, #32
 8005f6e:	f381 8811 	msr	BASEPRI, r1
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	4832      	ldr	r0, [pc, #200]	; (8006040 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005f76:	f7ff f972 	bl	800525e <_PreparePacket>
 8005f7a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	633b      	str	r3, [r7, #48]	; 0x30
 8005f88:	e00b      	b.n	8005fa2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f90:	1c59      	adds	r1, r3, #1
 8005f92:	6379      	str	r1, [r7, #52]	; 0x34
 8005f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	09db      	lsrs	r3, r3, #7
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa6:	d8f0      	bhi.n	8005f8a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	637a      	str	r2, [r7, #52]	; 0x34
 8005fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc0:	e00b      	b.n	8005fda <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	1c59      	adds	r1, r3, #1
 8005fca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	09db      	lsrs	r3, r3, #7
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8005fde:	d8f0      	bhi.n	8005fc2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	623b      	str	r3, [r7, #32]
 8005ff8:	e00b      	b.n	8006012 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	1c59      	adds	r1, r3, #1
 8006002:	6279      	str	r1, [r7, #36]	; 0x24
 8006004:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	09db      	lsrs	r3, r3, #7
 8006010:	623b      	str	r3, [r7, #32]
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	2b7f      	cmp	r3, #127	; 0x7f
 8006016:	d8f0      	bhi.n	8005ffa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	627a      	str	r2, [r7, #36]	; 0x24
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	6979      	ldr	r1, [r7, #20]
 800602c:	69b8      	ldr	r0, [r7, #24]
 800602e:	f7ff fa09 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f383 8811 	msr	BASEPRI, r3
}
 8006038:	bf00      	nop
 800603a:	3738      	adds	r7, #56	; 0x38
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	20014290 	.word	0x20014290

08006044 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b090      	sub	sp, #64	; 0x40
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006052:	f3ef 8311 	mrs	r3, BASEPRI
 8006056:	f04f 0120 	mov.w	r1, #32
 800605a:	f381 8811 	msr	BASEPRI, r1
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	4840      	ldr	r0, [pc, #256]	; (8006164 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006062:	f7ff f8fc 	bl	800525e <_PreparePacket>
 8006066:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	63bb      	str	r3, [r7, #56]	; 0x38
 8006074:	e00b      	b.n	800608e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	b2da      	uxtb	r2, r3
 800607a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607c:	1c59      	adds	r1, r3, #1
 800607e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	09db      	lsrs	r3, r3, #7
 800608c:	63bb      	str	r3, [r7, #56]	; 0x38
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	2b7f      	cmp	r3, #127	; 0x7f
 8006092:	d8f0      	bhi.n	8006076 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	63fa      	str	r2, [r7, #60]	; 0x3c
 800609a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	637b      	str	r3, [r7, #52]	; 0x34
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	633b      	str	r3, [r7, #48]	; 0x30
 80060ac:	e00b      	b.n	80060c6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	1c59      	adds	r1, r3, #1
 80060b6:	6379      	str	r1, [r7, #52]	; 0x34
 80060b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	09db      	lsrs	r3, r3, #7
 80060c4:	633b      	str	r3, [r7, #48]	; 0x30
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	2b7f      	cmp	r3, #127	; 0x7f
 80060ca:	d8f0      	bhi.n	80060ae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80060cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	637a      	str	r2, [r7, #52]	; 0x34
 80060d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e4:	e00b      	b.n	80060fe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	1c59      	adds	r1, r3, #1
 80060ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	09db      	lsrs	r3, r3, #7
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	2b7f      	cmp	r3, #127	; 0x7f
 8006102:	d8f0      	bhi.n	80060e6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	62fa      	str	r2, [r7, #44]	; 0x2c
 800610a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
 8006118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	e00b      	b.n	8006136 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	1c59      	adds	r1, r3, #1
 8006126:	6279      	str	r1, [r7, #36]	; 0x24
 8006128:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	09db      	lsrs	r3, r3, #7
 8006134:	623b      	str	r3, [r7, #32]
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	2b7f      	cmp	r3, #127	; 0x7f
 800613a:	d8f0      	bhi.n	800611e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	627a      	str	r2, [r7, #36]	; 0x24
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	6979      	ldr	r1, [r7, #20]
 8006150:	69b8      	ldr	r0, [r7, #24]
 8006152:	f7ff f977 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	f383 8811 	msr	BASEPRI, r3
}
 800615c:	bf00      	nop
 800615e:	3740      	adds	r7, #64	; 0x40
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20014290 	.word	0x20014290

08006168 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b08c      	sub	sp, #48	; 0x30
 800616c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800616e:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006174:	f3ef 8311 	mrs	r3, BASEPRI
 8006178:	f04f 0120 	mov.w	r1, #32
 800617c:	f381 8811 	msr	BASEPRI, r1
 8006180:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006182:	4b54      	ldr	r3, [pc, #336]	; (80062d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	220a      	movs	r2, #10
 8006188:	4953      	ldr	r1, [pc, #332]	; (80062d8 <SEGGER_SYSVIEW_Start+0x170>)
 800618a:	4618      	mov	r0, r3
 800618c:	f7fa f840 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006196:	f7fe fe33 	bl	8004e00 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800619a:	200a      	movs	r0, #10
 800619c:	f7ff fe28 	bl	8005df0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061a0:	f3ef 8311 	mrs	r3, BASEPRI
 80061a4:	f04f 0120 	mov.w	r1, #32
 80061a8:	f381 8811 	msr	BASEPRI, r1
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	484b      	ldr	r0, [pc, #300]	; (80062dc <SEGGER_SYSVIEW_Start+0x174>)
 80061b0:	f7ff f855 	bl	800525e <_PreparePacket>
 80061b4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061be:	4b45      	ldr	r3, [pc, #276]	; (80062d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c4:	e00b      	b.n	80061de <SEGGER_SYSVIEW_Start+0x76>
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	1c59      	adds	r1, r3, #1
 80061ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	09db      	lsrs	r3, r3, #7
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	2b7f      	cmp	r3, #127	; 0x7f
 80061e2:	d8f0      	bhi.n	80061c6 <SEGGER_SYSVIEW_Start+0x5e>
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
 80061f8:	4b36      	ldr	r3, [pc, #216]	; (80062d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	e00b      	b.n	8006218 <SEGGER_SYSVIEW_Start+0xb0>
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	1c59      	adds	r1, r3, #1
 8006208:	6279      	str	r1, [r7, #36]	; 0x24
 800620a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	09db      	lsrs	r3, r3, #7
 8006216:	623b      	str	r3, [r7, #32]
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	2b7f      	cmp	r3, #127	; 0x7f
 800621c:	d8f0      	bhi.n	8006200 <SEGGER_SYSVIEW_Start+0x98>
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	627a      	str	r2, [r7, #36]	; 0x24
 8006224:	6a3a      	ldr	r2, [r7, #32]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	e00b      	b.n	8006252 <SEGGER_SYSVIEW_Start+0xea>
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	b2da      	uxtb	r2, r3
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	1c59      	adds	r1, r3, #1
 8006242:	61f9      	str	r1, [r7, #28]
 8006244:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	09db      	lsrs	r3, r3, #7
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	2b7f      	cmp	r3, #127	; 0x7f
 8006256:	d8f0      	bhi.n	800623a <SEGGER_SYSVIEW_Start+0xd2>
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	61fa      	str	r2, [r7, #28]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	e00b      	b.n	800628a <SEGGER_SYSVIEW_Start+0x122>
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	b2da      	uxtb	r2, r3
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	1c59      	adds	r1, r3, #1
 800627a:	6179      	str	r1, [r7, #20]
 800627c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	09db      	lsrs	r3, r3, #7
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b7f      	cmp	r3, #127	; 0x7f
 800628e:	d8f0      	bhi.n	8006272 <SEGGER_SYSVIEW_Start+0x10a>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	617a      	str	r2, [r7, #20]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80062a0:	2218      	movs	r2, #24
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff f8cd 	bl	8005444 <_SendPacket>
      RECORD_END();
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80062be:	f000 f9eb 	bl	8006698 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80062c2:	f000 f9b1 	bl	8006628 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80062c6:	f000 fc83 	bl	8006bd0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80062ca:	bf00      	nop
 80062cc:	3730      	adds	r7, #48	; 0x30
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20014260 	.word	0x20014260
 80062d8:	08006f10 	.word	0x08006f10
 80062dc:	20014290 	.word	0x20014290

080062e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062e6:	f3ef 8311 	mrs	r3, BASEPRI
 80062ea:	f04f 0120 	mov.w	r1, #32
 80062ee:	f381 8811 	msr	BASEPRI, r1
 80062f2:	607b      	str	r3, [r7, #4]
 80062f4:	480b      	ldr	r0, [pc, #44]	; (8006324 <SEGGER_SYSVIEW_Stop+0x44>)
 80062f6:	f7fe ffb2 	bl	800525e <_PreparePacket>
 80062fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <SEGGER_SYSVIEW_Stop+0x48>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006304:	220b      	movs	r2, #11
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6838      	ldr	r0, [r7, #0]
 800630a:	f7ff f89b 	bl	8005444 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800630e:	4b06      	ldr	r3, [pc, #24]	; (8006328 <SEGGER_SYSVIEW_Stop+0x48>)
 8006310:	2200      	movs	r2, #0
 8006312:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f383 8811 	msr	BASEPRI, r3
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20014290 	.word	0x20014290
 8006328:	20014260 	.word	0x20014260

0800632c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b08c      	sub	sp, #48	; 0x30
 8006330:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006332:	f3ef 8311 	mrs	r3, BASEPRI
 8006336:	f04f 0120 	mov.w	r1, #32
 800633a:	f381 8811 	msr	BASEPRI, r1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	4845      	ldr	r0, [pc, #276]	; (8006458 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006342:	f7fe ff8c 	bl	800525e <_PreparePacket>
 8006346:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006350:	4b42      	ldr	r3, [pc, #264]	; (800645c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	62bb      	str	r3, [r7, #40]	; 0x28
 8006356:	e00b      	b.n	8006370 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	b2da      	uxtb	r2, r3
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	09db      	lsrs	r3, r3, #7
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	2b7f      	cmp	r3, #127	; 0x7f
 8006374:	d8f0      	bhi.n	8006358 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800637c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
 800638a:	4b34      	ldr	r3, [pc, #208]	; (800645c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	623b      	str	r3, [r7, #32]
 8006390:	e00b      	b.n	80063aa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	b2da      	uxtb	r2, r3
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	1c59      	adds	r1, r3, #1
 800639a:	6279      	str	r1, [r7, #36]	; 0x24
 800639c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	09db      	lsrs	r3, r3, #7
 80063a8:	623b      	str	r3, [r7, #32]
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	2b7f      	cmp	r3, #127	; 0x7f
 80063ae:	d8f0      	bhi.n	8006392 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	627a      	str	r2, [r7, #36]	; 0x24
 80063b6:	6a3a      	ldr	r2, [r7, #32]
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	4b25      	ldr	r3, [pc, #148]	; (800645c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	e00b      	b.n	80063e4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	61f9      	str	r1, [r7, #28]
 80063d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	09db      	lsrs	r3, r3, #7
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b7f      	cmp	r3, #127	; 0x7f
 80063e8:	d8f0      	bhi.n	80063cc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	61fa      	str	r2, [r7, #28]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	2300      	movs	r3, #0
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	e00b      	b.n	800641c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	b2da      	uxtb	r2, r3
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	1c59      	adds	r1, r3, #1
 800640c:	6179      	str	r1, [r7, #20]
 800640e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	09db      	lsrs	r3, r3, #7
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b7f      	cmp	r3, #127	; 0x7f
 8006420:	d8f0      	bhi.n	8006404 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	617a      	str	r2, [r7, #20]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006432:	2218      	movs	r2, #24
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	68b8      	ldr	r0, [r7, #8]
 8006438:	f7ff f804 	bl	8005444 <_SendPacket>
  RECORD_END();
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006442:	4b06      	ldr	r3, [pc, #24]	; (800645c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800644a:	4b04      	ldr	r3, [pc, #16]	; (800645c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	4798      	blx	r3
  }
}
 8006450:	bf00      	nop
 8006452:	3730      	adds	r7, #48	; 0x30
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20014290 	.word	0x20014290
 800645c:	20014260 	.word	0x20014260

08006460 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b092      	sub	sp, #72	; 0x48
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006468:	f3ef 8311 	mrs	r3, BASEPRI
 800646c:	f04f 0120 	mov.w	r1, #32
 8006470:	f381 8811 	msr	BASEPRI, r1
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	486a      	ldr	r0, [pc, #424]	; (8006620 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006478:	f7fe fef1 	bl	800525e <_PreparePacket>
 800647c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	647b      	str	r3, [r7, #68]	; 0x44
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b66      	ldr	r3, [pc, #408]	; (8006624 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	643b      	str	r3, [r7, #64]	; 0x40
 8006492:	e00b      	b.n	80064ac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006496:	b2da      	uxtb	r2, r3
 8006498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649a:	1c59      	adds	r1, r3, #1
 800649c:	6479      	str	r1, [r7, #68]	; 0x44
 800649e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a8:	09db      	lsrs	r3, r3, #7
 80064aa:	643b      	str	r3, [r7, #64]	; 0x40
 80064ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ae:	2b7f      	cmp	r3, #127	; 0x7f
 80064b0:	d8f0      	bhi.n	8006494 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80064b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	647a      	str	r2, [r7, #68]	; 0x44
 80064b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80064cc:	e00b      	b.n	80064e6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d4:	1c59      	adds	r1, r3, #1
 80064d6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80064d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	09db      	lsrs	r3, r3, #7
 80064e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	2b7f      	cmp	r3, #127	; 0x7f
 80064ea:	d8f0      	bhi.n	80064ce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80064ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	4619      	mov	r1, r3
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7fe fe5d 	bl	80051c4 <_EncodeStr>
 800650a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800650c:	2209      	movs	r2, #9
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	6938      	ldr	r0, [r7, #16]
 8006512:	f7fe ff97 	bl	8005444 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b40      	ldr	r3, [pc, #256]	; (8006624 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	633b      	str	r3, [r7, #48]	; 0x30
 800652a:	e00b      	b.n	8006544 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	b2da      	uxtb	r2, r3
 8006530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006532:	1c59      	adds	r1, r3, #1
 8006534:	6379      	str	r1, [r7, #52]	; 0x34
 8006536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	09db      	lsrs	r3, r3, #7
 8006542:	633b      	str	r3, [r7, #48]	; 0x30
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2b7f      	cmp	r3, #127	; 0x7f
 8006548:	d8f0      	bhi.n	800652c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	637a      	str	r2, [r7, #52]	; 0x34
 8006550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006558:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
 8006564:	e00b      	b.n	800657e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	09db      	lsrs	r3, r3, #7
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	2b7f      	cmp	r3, #127	; 0x7f
 8006582:	d8f0      	bhi.n	8006566 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800658a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	e00b      	b.n	80065b8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	1c59      	adds	r1, r3, #1
 80065a8:	6279      	str	r1, [r7, #36]	; 0x24
 80065aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	09db      	lsrs	r3, r3, #7
 80065b6:	623b      	str	r3, [r7, #32]
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	2b7f      	cmp	r3, #127	; 0x7f
 80065bc:	d8f0      	bhi.n	80065a0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	627a      	str	r2, [r7, #36]	; 0x24
 80065c4:	6a3a      	ldr	r2, [r7, #32]
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	e00b      	b.n	80065f0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	61f9      	str	r1, [r7, #28]
 80065e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	09db      	lsrs	r3, r3, #7
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b7f      	cmp	r3, #127	; 0x7f
 80065f4:	d8f0      	bhi.n	80065d8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	61fa      	str	r2, [r7, #28]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006606:	2215      	movs	r2, #21
 8006608:	68f9      	ldr	r1, [r7, #12]
 800660a:	6938      	ldr	r0, [r7, #16]
 800660c:	f7fe ff1a 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f383 8811 	msr	BASEPRI, r3
}
 8006616:	bf00      	nop
 8006618:	3748      	adds	r7, #72	; 0x48
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20014290 	.word	0x20014290
 8006624:	20014260 	.word	0x20014260

08006628 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800662c:	4b07      	ldr	r3, [pc, #28]	; (800664c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800663e:	4b03      	ldr	r3, [pc, #12]	; (800664c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4798      	blx	r3
  }
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20014260 	.word	0x20014260

08006650 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006658:	f3ef 8311 	mrs	r3, BASEPRI
 800665c:	f04f 0120 	mov.w	r1, #32
 8006660:	f381 8811 	msr	BASEPRI, r1
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	480b      	ldr	r0, [pc, #44]	; (8006694 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006668:	f7fe fdf9 	bl	800525e <_PreparePacket>
 800666c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800666e:	2280      	movs	r2, #128	; 0x80
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	6938      	ldr	r0, [r7, #16]
 8006674:	f7fe fda6 	bl	80051c4 <_EncodeStr>
 8006678:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800667a:	220e      	movs	r2, #14
 800667c:	68f9      	ldr	r1, [r7, #12]
 800667e:	6938      	ldr	r0, [r7, #16]
 8006680:	f7fe fee0 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f383 8811 	msr	BASEPRI, r3
}
 800668a:	bf00      	nop
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20014290 	.word	0x20014290

08006698 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006698:	b590      	push	{r4, r7, lr}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800669e:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d01a      	beq.n	80066dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80066a6:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d015      	beq.n	80066dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80066b0:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4798      	blx	r3
 80066b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80066bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80066be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	f04f 0300 	mov.w	r3, #0
 80066ca:	000a      	movs	r2, r1
 80066cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80066ce:	4613      	mov	r3, r2
 80066d0:	461a      	mov	r2, r3
 80066d2:	4621      	mov	r1, r4
 80066d4:	200d      	movs	r0, #13
 80066d6:	f7ff fbe5 	bl	8005ea4 <SEGGER_SYSVIEW_RecordU32x2>
 80066da:	e006      	b.n	80066ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4619      	mov	r1, r3
 80066e2:	200c      	movs	r0, #12
 80066e4:	f7ff fba2 	bl	8005e2c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80066e8:	bf00      	nop
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd90      	pop	{r4, r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20014260 	.word	0x20014260
 80066f8:	e0001004 	.word	0xe0001004

080066fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006702:	f3ef 8311 	mrs	r3, BASEPRI
 8006706:	f04f 0120 	mov.w	r1, #32
 800670a:	f381 8811 	msr	BASEPRI, r1
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	4819      	ldr	r0, [pc, #100]	; (8006778 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006712:	f7fe fda4 	bl	800525e <_PreparePacket>
 8006716:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800671c:	4b17      	ldr	r3, [pc, #92]	; (800677c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006724:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	e00b      	b.n	8006748 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	6179      	str	r1, [r7, #20]
 800673a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	09db      	lsrs	r3, r3, #7
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b7f      	cmp	r3, #127	; 0x7f
 800674c:	d8f0      	bhi.n	8006730 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	617a      	str	r2, [r7, #20]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800675e:	2202      	movs	r2, #2
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	68b8      	ldr	r0, [r7, #8]
 8006764:	f7fe fe6e 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f383 8811 	msr	BASEPRI, r3
}
 800676e:	bf00      	nop
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20014290 	.word	0x20014290
 800677c:	e000ed04 	.word	0xe000ed04

08006780 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006786:	f3ef 8311 	mrs	r3, BASEPRI
 800678a:	f04f 0120 	mov.w	r1, #32
 800678e:	f381 8811 	msr	BASEPRI, r1
 8006792:	607b      	str	r3, [r7, #4]
 8006794:	4807      	ldr	r0, [pc, #28]	; (80067b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006796:	f7fe fd62 	bl	800525e <_PreparePacket>
 800679a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800679c:	2203      	movs	r2, #3
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6838      	ldr	r0, [r7, #0]
 80067a2:	f7fe fe4f 	bl	8005444 <_SendPacket>
  RECORD_END();
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f383 8811 	msr	BASEPRI, r3
}
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20014290 	.word	0x20014290

080067b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067be:	f3ef 8311 	mrs	r3, BASEPRI
 80067c2:	f04f 0120 	mov.w	r1, #32
 80067c6:	f381 8811 	msr	BASEPRI, r1
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	4807      	ldr	r0, [pc, #28]	; (80067ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80067ce:	f7fe fd46 	bl	800525e <_PreparePacket>
 80067d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80067d4:	2212      	movs	r2, #18
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6838      	ldr	r0, [r7, #0]
 80067da:	f7fe fe33 	bl	8005444 <_SendPacket>
  RECORD_END();
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f383 8811 	msr	BASEPRI, r3
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20014290 	.word	0x20014290

080067f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067f6:	f3ef 8311 	mrs	r3, BASEPRI
 80067fa:	f04f 0120 	mov.w	r1, #32
 80067fe:	f381 8811 	msr	BASEPRI, r1
 8006802:	607b      	str	r3, [r7, #4]
 8006804:	4807      	ldr	r0, [pc, #28]	; (8006824 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006806:	f7fe fd2a 	bl	800525e <_PreparePacket>
 800680a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800680c:	2211      	movs	r2, #17
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6838      	ldr	r0, [r7, #0]
 8006812:	f7fe fe17 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f383 8811 	msr	BASEPRI, r3
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	20014290 	.word	0x20014290

08006828 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006830:	f3ef 8311 	mrs	r3, BASEPRI
 8006834:	f04f 0120 	mov.w	r1, #32
 8006838:	f381 8811 	msr	BASEPRI, r1
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	4819      	ldr	r0, [pc, #100]	; (80068a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006840:	f7fe fd0d 	bl	800525e <_PreparePacket>
 8006844:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800684a:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	e00b      	b.n	8006876 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	1c59      	adds	r1, r3, #1
 8006866:	61f9      	str	r1, [r7, #28]
 8006868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	09db      	lsrs	r3, r3, #7
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b7f      	cmp	r3, #127	; 0x7f
 800687a:	d8f0      	bhi.n	800685e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	61fa      	str	r2, [r7, #28]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800688c:	2208      	movs	r2, #8
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	6938      	ldr	r0, [r7, #16]
 8006892:	f7fe fdd7 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f383 8811 	msr	BASEPRI, r3
}
 800689c:	bf00      	nop
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20014290 	.word	0x20014290
 80068a8:	20014260 	.word	0x20014260

080068ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068b4:	f3ef 8311 	mrs	r3, BASEPRI
 80068b8:	f04f 0120 	mov.w	r1, #32
 80068bc:	f381 8811 	msr	BASEPRI, r1
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	4819      	ldr	r0, [pc, #100]	; (8006928 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80068c4:	f7fe fccb 	bl	800525e <_PreparePacket>
 80068c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068ce:	4b17      	ldr	r3, [pc, #92]	; (800692c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	61bb      	str	r3, [r7, #24]
 80068e0:	e00b      	b.n	80068fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	1c59      	adds	r1, r3, #1
 80068ea:	61f9      	str	r1, [r7, #28]
 80068ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	09db      	lsrs	r3, r3, #7
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b7f      	cmp	r3, #127	; 0x7f
 80068fe:	d8f0      	bhi.n	80068e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	61fa      	str	r2, [r7, #28]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006910:	2204      	movs	r2, #4
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	6938      	ldr	r0, [r7, #16]
 8006916:	f7fe fd95 	bl	8005444 <_SendPacket>
  RECORD_END();
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f383 8811 	msr	BASEPRI, r3
}
 8006920:	bf00      	nop
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20014290 	.word	0x20014290
 800692c:	20014260 	.word	0x20014260

08006930 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006938:	f3ef 8311 	mrs	r3, BASEPRI
 800693c:	f04f 0120 	mov.w	r1, #32
 8006940:	f381 8811 	msr	BASEPRI, r1
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	4819      	ldr	r0, [pc, #100]	; (80069ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006948:	f7fe fc89 	bl	800525e <_PreparePacket>
 800694c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006952:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	61fb      	str	r3, [r7, #28]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	e00b      	b.n	800697e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	b2da      	uxtb	r2, r3
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	1c59      	adds	r1, r3, #1
 800696e:	61f9      	str	r1, [r7, #28]
 8006970:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	09db      	lsrs	r3, r3, #7
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b7f      	cmp	r3, #127	; 0x7f
 8006982:	d8f0      	bhi.n	8006966 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	61fa      	str	r2, [r7, #28]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006994:	2206      	movs	r2, #6
 8006996:	68f9      	ldr	r1, [r7, #12]
 8006998:	6938      	ldr	r0, [r7, #16]
 800699a:	f7fe fd53 	bl	8005444 <_SendPacket>
  RECORD_END();
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f383 8811 	msr	BASEPRI, r3
}
 80069a4:	bf00      	nop
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20014290 	.word	0x20014290
 80069b0:	20014260 	.word	0x20014260

080069b4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	; 0x28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069be:	f3ef 8311 	mrs	r3, BASEPRI
 80069c2:	f04f 0120 	mov.w	r1, #32
 80069c6:	f381 8811 	msr	BASEPRI, r1
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	4827      	ldr	r0, [pc, #156]	; (8006a6c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80069ce:	f7fe fc46 	bl	800525e <_PreparePacket>
 80069d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069d8:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	623b      	str	r3, [r7, #32]
 80069ea:	e00b      	b.n	8006a04 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	1c59      	adds	r1, r3, #1
 80069f4:	6279      	str	r1, [r7, #36]	; 0x24
 80069f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	09db      	lsrs	r3, r3, #7
 8006a02:	623b      	str	r3, [r7, #32]
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	2b7f      	cmp	r3, #127	; 0x7f
 8006a08:	d8f0      	bhi.n	80069ec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	61fb      	str	r3, [r7, #28]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	e00b      	b.n	8006a3c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	1c59      	adds	r1, r3, #1
 8006a2c:	61f9      	str	r1, [r7, #28]
 8006a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	09db      	lsrs	r3, r3, #7
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a40:	d8f0      	bhi.n	8006a24 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	61fa      	str	r2, [r7, #28]
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006a52:	2207      	movs	r2, #7
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	6938      	ldr	r0, [r7, #16]
 8006a58:	f7fe fcf4 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f383 8811 	msr	BASEPRI, r3
}
 8006a62:	bf00      	nop
 8006a64:	3728      	adds	r7, #40	; 0x28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20014290 	.word	0x20014290
 8006a70:	20014260 	.word	0x20014260

08006a74 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006a7c:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	1ad3      	subs	r3, r2, r3
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	20014260 	.word	0x20014260

08006a94 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08c      	sub	sp, #48	; 0x30
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006a9e:	4b3b      	ldr	r3, [pc, #236]	; (8006b8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d06d      	beq.n	8006b82 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006aa6:	4b39      	ldr	r3, [pc, #228]	; (8006b8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006aac:	2300      	movs	r3, #0
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab0:	e008      	b.n	8006ac4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d3f2      	bcc.n	8006ab2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006acc:	e000      	b.n	8006ad0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ace:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d055      	beq.n	8006b82 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8006ada:	f04f 0120 	mov.w	r1, #32
 8006ade:	f381 8811 	msr	BASEPRI, r1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	482a      	ldr	r0, [pc, #168]	; (8006b90 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006ae6:	f7fe fbba 	bl	800525e <_PreparePacket>
 8006aea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	623b      	str	r3, [r7, #32]
 8006af8:	e00b      	b.n	8006b12 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	1c59      	adds	r1, r3, #1
 8006b02:	6279      	str	r1, [r7, #36]	; 0x24
 8006b04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	09db      	lsrs	r3, r3, #7
 8006b10:	623b      	str	r3, [r7, #32]
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	2b7f      	cmp	r3, #127	; 0x7f
 8006b16:	d8f0      	bhi.n	8006afa <SEGGER_SYSVIEW_SendModule+0x66>
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	627a      	str	r2, [r7, #36]	; 0x24
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	61fb      	str	r3, [r7, #28]
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	e00b      	b.n	8006b4c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	1c59      	adds	r1, r3, #1
 8006b3c:	61f9      	str	r1, [r7, #28]
 8006b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	09db      	lsrs	r3, r3, #7
 8006b4a:	61bb      	str	r3, [r7, #24]
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b50:	d8f0      	bhi.n	8006b34 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	61fa      	str	r2, [r7, #28]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2280      	movs	r2, #128	; 0x80
 8006b68:	4619      	mov	r1, r3
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f7fe fb2a 	bl	80051c4 <_EncodeStr>
 8006b70:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b72:	2216      	movs	r2, #22
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	6938      	ldr	r0, [r7, #16]
 8006b78:	f7fe fc64 	bl	8005444 <_SendPacket>
      RECORD_END();
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006b82:	bf00      	nop
 8006b84:	3730      	adds	r7, #48	; 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20014288 	.word	0x20014288
 8006b90:	20014290 	.word	0x20014290

08006b94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00f      	beq.n	8006bc2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f2      	bne.n	8006ba8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20014288 	.word	0x20014288

08006bd0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bda:	f04f 0120 	mov.w	r1, #32
 8006bde:	f381 8811 	msr	BASEPRI, r1
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	4817      	ldr	r0, [pc, #92]	; (8006c44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006be6:	f7fe fb3a 	bl	800525e <_PreparePacket>
 8006bea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	613b      	str	r3, [r7, #16]
 8006bfa:	e00b      	b.n	8006c14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	1c59      	adds	r1, r3, #1
 8006c04:	6179      	str	r1, [r7, #20]
 8006c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	09db      	lsrs	r3, r3, #7
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b7f      	cmp	r3, #127	; 0x7f
 8006c18:	d8f0      	bhi.n	8006bfc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	617a      	str	r2, [r7, #20]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006c2a:	221b      	movs	r2, #27
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	68b8      	ldr	r0, [r7, #8]
 8006c30:	f7fe fc08 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f383 8811 	msr	BASEPRI, r3
}
 8006c3a:	bf00      	nop
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20014290 	.word	0x20014290
 8006c48:	2001428c 	.word	0x2001428c

08006c4c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006c4c:	b40f      	push	{r0, r1, r2, r3}
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006c54:	f107 0314 	add.w	r3, r7, #20
 8006c58:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006c5a:	1d3b      	adds	r3, r7, #4
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2100      	movs	r1, #0
 8006c60:	6938      	ldr	r0, [r7, #16]
 8006c62:	f7fe fe79 	bl	8005958 <_VPrintTarget>
  va_end(ParamList);
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c70:	b004      	add	sp, #16
 8006c72:	4770      	bx	lr

08006c74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c80:	f04f 0120 	mov.w	r1, #32
 8006c84:	f381 8811 	msr	BASEPRI, r1
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	4827      	ldr	r0, [pc, #156]	; (8006d28 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006c8c:	f7fe fae7 	bl	800525e <_PreparePacket>
 8006c90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c92:	2280      	movs	r2, #128	; 0x80
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	6938      	ldr	r0, [r7, #16]
 8006c98:	f7fe fa94 	bl	80051c4 <_EncodeStr>
 8006c9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	623b      	str	r3, [r7, #32]
 8006ca6:	e00b      	b.n	8006cc0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	1c59      	adds	r1, r3, #1
 8006cb0:	6279      	str	r1, [r7, #36]	; 0x24
 8006cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	09db      	lsrs	r3, r3, #7
 8006cbe:	623b      	str	r3, [r7, #32]
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc4:	d8f0      	bhi.n	8006ca8 <SEGGER_SYSVIEW_Warn+0x34>
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	627a      	str	r2, [r7, #36]	; 0x24
 8006ccc:	6a3a      	ldr	r2, [r7, #32]
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	e00b      	b.n	8006cf8 <SEGGER_SYSVIEW_Warn+0x84>
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	1c59      	adds	r1, r3, #1
 8006ce8:	61f9      	str	r1, [r7, #28]
 8006cea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	09db      	lsrs	r3, r3, #7
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfc:	d8f0      	bhi.n	8006ce0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	61fa      	str	r2, [r7, #28]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006d0e:	221a      	movs	r2, #26
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	6938      	ldr	r0, [r7, #16]
 8006d14:	f7fe fb96 	bl	8005444 <_SendPacket>
  RECORD_END();
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f383 8811 	msr	BASEPRI, r3
}
 8006d1e:	bf00      	nop
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20014290 	.word	0x20014290

08006d2c <__libc_init_array>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4d0d      	ldr	r5, [pc, #52]	; (8006d64 <__libc_init_array+0x38>)
 8006d30:	4c0d      	ldr	r4, [pc, #52]	; (8006d68 <__libc_init_array+0x3c>)
 8006d32:	1b64      	subs	r4, r4, r5
 8006d34:	10a4      	asrs	r4, r4, #2
 8006d36:	2600      	movs	r6, #0
 8006d38:	42a6      	cmp	r6, r4
 8006d3a:	d109      	bne.n	8006d50 <__libc_init_array+0x24>
 8006d3c:	4d0b      	ldr	r5, [pc, #44]	; (8006d6c <__libc_init_array+0x40>)
 8006d3e:	4c0c      	ldr	r4, [pc, #48]	; (8006d70 <__libc_init_array+0x44>)
 8006d40:	f000 f83c 	bl	8006dbc <_init>
 8006d44:	1b64      	subs	r4, r4, r5
 8006d46:	10a4      	asrs	r4, r4, #2
 8006d48:	2600      	movs	r6, #0
 8006d4a:	42a6      	cmp	r6, r4
 8006d4c:	d105      	bne.n	8006d5a <__libc_init_array+0x2e>
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
 8006d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d54:	4798      	blx	r3
 8006d56:	3601      	adds	r6, #1
 8006d58:	e7ee      	b.n	8006d38 <__libc_init_array+0xc>
 8006d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5e:	4798      	blx	r3
 8006d60:	3601      	adds	r6, #1
 8006d62:	e7f2      	b.n	8006d4a <__libc_init_array+0x1e>
 8006d64:	08006f34 	.word	0x08006f34
 8006d68:	08006f34 	.word	0x08006f34
 8006d6c:	08006f34 	.word	0x08006f34
 8006d70:	08006f38 	.word	0x08006f38

08006d74 <memcmp>:
 8006d74:	b530      	push	{r4, r5, lr}
 8006d76:	3901      	subs	r1, #1
 8006d78:	2400      	movs	r4, #0
 8006d7a:	42a2      	cmp	r2, r4
 8006d7c:	d101      	bne.n	8006d82 <memcmp+0xe>
 8006d7e:	2000      	movs	r0, #0
 8006d80:	e005      	b.n	8006d8e <memcmp+0x1a>
 8006d82:	5d03      	ldrb	r3, [r0, r4]
 8006d84:	3401      	adds	r4, #1
 8006d86:	5d0d      	ldrb	r5, [r1, r4]
 8006d88:	42ab      	cmp	r3, r5
 8006d8a:	d0f6      	beq.n	8006d7a <memcmp+0x6>
 8006d8c:	1b58      	subs	r0, r3, r5
 8006d8e:	bd30      	pop	{r4, r5, pc}

08006d90 <memcpy>:
 8006d90:	440a      	add	r2, r1
 8006d92:	4291      	cmp	r1, r2
 8006d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d98:	d100      	bne.n	8006d9c <memcpy+0xc>
 8006d9a:	4770      	bx	lr
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006da6:	4291      	cmp	r1, r2
 8006da8:	d1f9      	bne.n	8006d9e <memcpy+0xe>
 8006daa:	bd10      	pop	{r4, pc}

08006dac <memset>:
 8006dac:	4402      	add	r2, r0
 8006dae:	4603      	mov	r3, r0
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d100      	bne.n	8006db6 <memset+0xa>
 8006db4:	4770      	bx	lr
 8006db6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dba:	e7f9      	b.n	8006db0 <memset+0x4>

08006dbc <_init>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_fini>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr
