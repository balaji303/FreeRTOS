
008IdleTaskPwrSave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007068  08007068  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007070  08007070  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014488  2000001c  08007094  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144a4  08007094  000244a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192ed  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032ea  00000000  00000000  00039339  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003c628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  0003da68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e24  00000000  00000000  0003ed00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001159d  00000000  00000000  00062b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db65b  00000000  00000000  000740c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f71c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f0  00000000  00000000  0014f798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ecc 	.word	0x08006ecc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08006ecc 	.word	0x08006ecc

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200143fc 	.word	0x200143fc

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b972 	b.w	80005a0 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	4688      	mov	r8, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4615      	mov	r5, r2
 80002e6:	d967      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0720 	rsb	r7, r2, #32
 80002f2:	fa01 f302 	lsl.w	r3, r1, r2
 80002f6:	fa20 f707 	lsr.w	r7, r0, r7
 80002fa:	4095      	lsls	r5, r2
 80002fc:	ea47 0803 	orr.w	r8, r7, r3
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbb8 f7fe 	udiv	r7, r8, lr
 800030c:	fa1f fc85 	uxth.w	ip, r5
 8000310:	fb0e 8817 	mls	r8, lr, r7, r8
 8000314:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000318:	fb07 f10c 	mul.w	r1, r7, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f107 30ff 	add.w	r0, r7, #4294967295
 8000326:	f080 811b 	bcs.w	8000560 <__udivmoddi4+0x28c>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8118 	bls.w	8000560 <__udivmoddi4+0x28c>
 8000330:	3f02      	subs	r7, #2
 8000332:	442b      	add	r3, r5
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0fe 	udiv	r0, r3, lr
 800033c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fc0c 	mul.w	ip, r0, ip
 8000348:	45a4      	cmp	ip, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x290>
 8000356:	45a4      	cmp	ip, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x290>
 800035c:	3802      	subs	r0, #2
 800035e:	442c      	add	r4, r5
 8000360:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	2700      	movs	r7, #0
 800036a:	b11e      	cbz	r6, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c6 4300 	strd	r4, r3, [r6]
 8000374:	4639      	mov	r1, r7
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xbe>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80eb 	beq.w	800055a <__udivmoddi4+0x286>
 8000384:	2700      	movs	r7, #0
 8000386:	e9c6 0100 	strd	r0, r1, [r6]
 800038a:	4638      	mov	r0, r7
 800038c:	4639      	mov	r1, r7
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f783 	clz	r7, r3
 8000396:	2f00      	cmp	r7, #0
 8000398:	d147      	bne.n	800042a <__udivmoddi4+0x156>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd0>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80fa 	bhi.w	8000598 <__udivmoddi4+0x2c4>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	4698      	mov	r8, r3
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa0>
 80003b2:	e9c6 4800 	strd	r4, r8, [r6]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa0>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xe8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 808f 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c6:	1b49      	subs	r1, r1, r5
 80003c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003cc:	fa1f f885 	uxth.w	r8, r5
 80003d0:	2701      	movs	r7, #1
 80003d2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e0:	fb08 f10c 	mul.w	r1, r8, ip
 80003e4:	4299      	cmp	r1, r3
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e8:	18eb      	adds	r3, r5, r3
 80003ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	f200 80cd 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003f6:	4684      	mov	ip, r0
 80003f8:	1a59      	subs	r1, r3, r1
 80003fa:	b2a3      	uxth	r3, r4
 80003fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000400:	fb0e 1410 	mls	r4, lr, r0, r1
 8000404:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000408:	fb08 f800 	mul.w	r8, r8, r0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0x14c>
 8000410:	192c      	adds	r4, r5, r4
 8000412:	f100 33ff 	add.w	r3, r0, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x14a>
 8000418:	45a0      	cmp	r8, r4
 800041a:	f200 80b6 	bhi.w	800058a <__udivmoddi4+0x2b6>
 800041e:	4618      	mov	r0, r3
 8000420:	eba4 0408 	sub.w	r4, r4, r8
 8000424:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000428:	e79f      	b.n	800036a <__udivmoddi4+0x96>
 800042a:	f1c7 0c20 	rsb	ip, r7, #32
 800042e:	40bb      	lsls	r3, r7
 8000430:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000434:	ea4e 0e03 	orr.w	lr, lr, r3
 8000438:	fa01 f407 	lsl.w	r4, r1, r7
 800043c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000440:	fa21 f30c 	lsr.w	r3, r1, ip
 8000444:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000448:	4325      	orrs	r5, r4
 800044a:	fbb3 f9f8 	udiv	r9, r3, r8
 800044e:	0c2c      	lsrs	r4, r5, #16
 8000450:	fb08 3319 	mls	r3, r8, r9, r3
 8000454:	fa1f fa8e 	uxth.w	sl, lr
 8000458:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800045c:	fb09 f40a 	mul.w	r4, r9, sl
 8000460:	429c      	cmp	r4, r3
 8000462:	fa02 f207 	lsl.w	r2, r2, r7
 8000466:	fa00 f107 	lsl.w	r1, r0, r7
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1e 0303 	adds.w	r3, lr, r3
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	f080 8087 	bcs.w	8000586 <__udivmoddi4+0x2b2>
 8000478:	429c      	cmp	r4, r3
 800047a:	f240 8084 	bls.w	8000586 <__udivmoddi4+0x2b2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	4473      	add	r3, lr
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	b2ad      	uxth	r5, r5
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000494:	fb00 fa0a 	mul.w	sl, r0, sl
 8000498:	45a2      	cmp	sl, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1e 0404 	adds.w	r4, lr, r4
 80004a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a4:	d26b      	bcs.n	800057e <__udivmoddi4+0x2aa>
 80004a6:	45a2      	cmp	sl, r4
 80004a8:	d969      	bls.n	800057e <__udivmoddi4+0x2aa>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4474      	add	r4, lr
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	eba4 040a 	sub.w	r4, r4, sl
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c2      	mov	sl, r8
 80004be:	464b      	mov	r3, r9
 80004c0:	d354      	bcc.n	800056c <__udivmoddi4+0x298>
 80004c2:	d051      	beq.n	8000568 <__udivmoddi4+0x294>
 80004c4:	2e00      	cmp	r6, #0
 80004c6:	d069      	beq.n	800059c <__udivmoddi4+0x2c8>
 80004c8:	ebb1 050a 	subs.w	r5, r1, sl
 80004cc:	eb64 0403 	sbc.w	r4, r4, r3
 80004d0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d4:	40fd      	lsrs	r5, r7
 80004d6:	40fc      	lsrs	r4, r7
 80004d8:	ea4c 0505 	orr.w	r5, ip, r5
 80004dc:	e9c6 5400 	strd	r5, r4, [r6]
 80004e0:	2700      	movs	r7, #0
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ec:	4095      	lsls	r5, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	fa21 f303 	lsr.w	r3, r1, r3
 80004f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004fa:	4338      	orrs	r0, r7
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000502:	fa1f f885 	uxth.w	r8, r5
 8000506:	fb0e 3317 	mls	r3, lr, r7, r3
 800050a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050e:	fb07 f308 	mul.w	r3, r7, r8
 8000512:	428b      	cmp	r3, r1
 8000514:	fa04 f402 	lsl.w	r4, r4, r2
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x256>
 800051a:	1869      	adds	r1, r5, r1
 800051c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000520:	d22f      	bcs.n	8000582 <__udivmoddi4+0x2ae>
 8000522:	428b      	cmp	r3, r1
 8000524:	d92d      	bls.n	8000582 <__udivmoddi4+0x2ae>
 8000526:	3f02      	subs	r7, #2
 8000528:	4429      	add	r1, r5
 800052a:	1acb      	subs	r3, r1, r3
 800052c:	b281      	uxth	r1, r0
 800052e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000532:	fb0e 3310 	mls	r3, lr, r0, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb00 f308 	mul.w	r3, r0, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x27e>
 8000542:	1869      	adds	r1, r5, r1
 8000544:	f100 3cff 	add.w	ip, r0, #4294967295
 8000548:	d217      	bcs.n	800057a <__udivmoddi4+0x2a6>
 800054a:	428b      	cmp	r3, r1
 800054c:	d915      	bls.n	800057a <__udivmoddi4+0x2a6>
 800054e:	3802      	subs	r0, #2
 8000550:	4429      	add	r1, r5
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000558:	e73b      	b.n	80003d2 <__udivmoddi4+0xfe>
 800055a:	4637      	mov	r7, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e709      	b.n	8000374 <__udivmoddi4+0xa0>
 8000560:	4607      	mov	r7, r0
 8000562:	e6e7      	b.n	8000334 <__udivmoddi4+0x60>
 8000564:	4618      	mov	r0, r3
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x8c>
 8000568:	4541      	cmp	r1, r8
 800056a:	d2ab      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 800056c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000570:	eb69 020e 	sbc.w	r2, r9, lr
 8000574:	3801      	subs	r0, #1
 8000576:	4613      	mov	r3, r2
 8000578:	e7a4      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057a:	4660      	mov	r0, ip
 800057c:	e7e9      	b.n	8000552 <__udivmoddi4+0x27e>
 800057e:	4618      	mov	r0, r3
 8000580:	e795      	b.n	80004ae <__udivmoddi4+0x1da>
 8000582:	4667      	mov	r7, ip
 8000584:	e7d1      	b.n	800052a <__udivmoddi4+0x256>
 8000586:	4681      	mov	r9, r0
 8000588:	e77c      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058a:	3802      	subs	r0, #2
 800058c:	442c      	add	r4, r5
 800058e:	e747      	b.n	8000420 <__udivmoddi4+0x14c>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	442b      	add	r3, r5
 8000596:	e72f      	b.n	80003f8 <__udivmoddi4+0x124>
 8000598:	4638      	mov	r0, r7
 800059a:	e708      	b.n	80003ae <__udivmoddi4+0xda>
 800059c:	4637      	mov	r7, r6
 800059e:	e6e9      	b.n	8000374 <__udivmoddi4+0xa0>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 facf 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f86b 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f8d5 	bl	8000760 <MX_GPIO_Init>

  //To Start the Sysview recording we have to Call these
  SEGGER_UART_init(250000);//UART
 80005b6:	482c      	ldr	r0, [pc, #176]	; (8000668 <main+0xc4>)
 80005b8:	f004 fa30 	bl	8004a1c <SEGGER_UART_init>

  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0); //Set the zeroth bit to one //SEGGER UART
 80005bc:	4b2b      	ldr	r3, [pc, #172]	; (800066c <main+0xc8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a2a      	ldr	r2, [pc, #168]	; (800066c <main+0xc8>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c8:	f004 f85a 	bl	8004680 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start(); //Already done in UART

  status = xTaskCreate( LedGreenTask, "Led_Green_Task", 200, NULL , 2, &GreenTaskHandle );
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2302      	movs	r3, #2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	22c8      	movs	r2, #200	; 0xc8
 80005da:	4925      	ldr	r1, [pc, #148]	; (8000670 <main+0xcc>)
 80005dc:	4825      	ldr	r0, [pc, #148]	; (8000674 <main+0xd0>)
 80005de:	f002 f8f7 	bl	80027d0 <xTaskCreate>
 80005e2:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d009      	beq.n	80005fe <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ee:	f383 8811 	msr	BASEPRI, r3
 80005f2:	f3bf 8f6f 	isb	sy
 80005f6:	f3bf 8f4f 	dsb	sy
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	e7fe      	b.n	80005fc <main+0x58>
  status = xTaskCreate( LedRedTask, "Led_Red_Task", 200, NULL , 2, &RedTaskHandle );
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2302      	movs	r3, #2
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2300      	movs	r3, #0
 800060a:	22c8      	movs	r2, #200	; 0xc8
 800060c:	491a      	ldr	r1, [pc, #104]	; (8000678 <main+0xd4>)
 800060e:	481b      	ldr	r0, [pc, #108]	; (800067c <main+0xd8>)
 8000610:	f002 f8de 	bl	80027d0 <xTaskCreate>
 8000614:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d009      	beq.n	8000630 <main+0x8c>
 800061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000620:	f383 8811 	msr	BASEPRI, r3
 8000624:	f3bf 8f6f 	isb	sy
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e7fe      	b.n	800062e <main+0x8a>
  status = xTaskCreate( LedYellowTask, "Led_Yellow_Task", 200, NULL , 2, &YellowTaskHandle );
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4910      	ldr	r1, [pc, #64]	; (8000680 <main+0xdc>)
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <main+0xe0>)
 8000640:	f002 f8c6 	bl	80027d0 <xTaskCreate>
 8000644:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d009      	beq.n	8000660 <main+0xbc>
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	e7fe      	b.n	800065e <main+0xba>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000660:	f002 fb04 	bl	8002c6c <vTaskStartScheduler>
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0xc0>
 8000666:	bf00      	nop
 8000668:	0003d090 	.word	0x0003d090
 800066c:	e0001000 	.word	0xe0001000
 8000670:	08006ee4 	.word	0x08006ee4
 8000674:	080008b5 	.word	0x080008b5
 8000678:	08006ef4 	.word	0x08006ef4
 800067c:	080008e1 	.word	0x080008e1
 8000680:	08006f04 	.word	0x08006f04
 8000684:	08000915 	.word	0x08000915

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2234      	movs	r2, #52	; 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fc10 	bl	8006ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemClock_Config+0xd0>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <SystemClock_Config+0xd4>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006fc:	23a8      	movs	r3, #168	; 0xa8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fff9 	bl	8001708 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800071c:	f000 f928 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fd0a 	bl	8001158 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074a:	f000 f911 	bl	8000970 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b49      	ldr	r3, [pc, #292]	; (80008a0 <MX_GPIO_Init+0x140>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a48      	ldr	r2, [pc, #288]	; (80008a0 <MX_GPIO_Init+0x140>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b46      	ldr	r3, [pc, #280]	; (80008a0 <MX_GPIO_Init+0x140>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <MX_GPIO_Init+0x140>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a41      	ldr	r2, [pc, #260]	; (80008a0 <MX_GPIO_Init+0x140>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <MX_GPIO_Init+0x140>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <MX_GPIO_Init+0x140>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a3a      	ldr	r2, [pc, #232]	; (80008a0 <MX_GPIO_Init+0x140>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x140>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <MX_GPIO_Init+0x140>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <MX_GPIO_Init+0x140>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <MX_GPIO_Init+0x140>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7108 	mov.w	r1, #544	; 0x220
 80007ec:	482d      	ldr	r0, [pc, #180]	; (80008a4 <MX_GPIO_Init+0x144>)
 80007ee:	f000 fc63 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	482c      	ldr	r0, [pc, #176]	; (80008a8 <MX_GPIO_Init+0x148>)
 80007f8:	f000 fc5e 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	482a      	ldr	r0, [pc, #168]	; (80008ac <MX_GPIO_Init+0x14c>)
 8000802:	f000 fc59 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_GPIO_Init+0x150>)
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4823      	ldr	r0, [pc, #140]	; (80008a8 <MX_GPIO_Init+0x148>)
 800081c:	f000 faba 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000820:	230c      	movs	r3, #12
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000830:	2307      	movs	r3, #7
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_GPIO_Init+0x144>)
 800083c:	f000 faaa 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000840:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MX_GPIO_Init+0x144>)
 800085a:	f000 fa9b 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_GPIO_Init+0x148>)
 8000876:	f000 fa8d 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_GPIO_Init+0x14c>)
 8000892:	f000 fa7f 	bl	8000d94 <HAL_GPIO_Init>

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020400 	.word	0x40020400
 80008b0:	10210000 	.word	0x10210000

080008b4 <LedGreenTask>:

/* USER CODE BEGIN 4 */
void LedGreenTask(void *parameter){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //D8 or PA9
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <LedGreenTask+0x24>)
 80008c2:	f000 fc12 	bl	80010ea <HAL_GPIO_TogglePin>
		vTaskDelay(1000/portTICK_PERIOD_MS);
 80008c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ca:	f002 f997 	bl	8002bfc <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("GREEN LED Task");
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <LedGreenTask+0x28>)
 80008d0:	f006 fa18 	bl	8006d04 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //D8 or PA9
 80008d4:	e7f2      	b.n	80008bc <LedGreenTask+0x8>
 80008d6:	bf00      	nop
 80008d8:	40020000 	.word	0x40020000
 80008dc:	08006f14 	.word	0x08006f14

080008e0 <LedRedTask>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void LedRedTask(void *parameter){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80008e8:	f002 fb2c 	bl	8002f44 <xTaskGetTickCount>
 80008ec:	4603      	mov	r3, r0
 80008ee:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //D10 or PB6
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <LedRedTask+0x2c>)
 80008f4:	f000 fbf9 	bl	80010ea <HAL_GPIO_TogglePin>
//		vTaskDelay(250);
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(250));
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	21fa      	movs	r1, #250	; 0xfa
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 f8fe 	bl	8002b00 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("RED LED Task");
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <LedRedTask+0x30>)
 8000906:	f006 f9fd 	bl	8006d04 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //D10 or PB6
 800090a:	e7f1      	b.n	80008f0 <LedRedTask+0x10>
 800090c:	40020400 	.word	0x40020400
 8000910:	08006f24 	.word	0x08006f24

08000914 <LedYellowTask>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void LedYellowTask(void *parameter){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <LedYellowTask+0x20>)
 8000920:	f000 fbe3 	bl	80010ea <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000928:	f002 f968 	bl	8002bfc <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("YELLOW LED Task");
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <LedYellowTask+0x24>)
 800092e:	f006 f9e9 	bl	8006d04 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000932:	e7f3      	b.n	800091c <LedYellowTask+0x8>
 8000934:	40020800 	.word	0x40020800
 8000938:	08006f34 	.word	0x08006f34

0800093c <vApplicationIdleHook>:
//		taskYIELD(); //USED WHEN configUSE_PREEMPTION is zero
	}/*End of Infinite Loop*/
}

void vApplicationIdleHook()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8000940:	2101      	movs	r1, #1
 8000942:	2000      	movs	r0, #0
 8000944:	f000 fbec 	bl	8001120 <HAL_PWR_EnterSLEEPMode>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 f917 	bl	8000b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40000c00 	.word	0x40000c00

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	2032      	movs	r0, #50	; 0x32
 80009e6:	f000 f9ab 	bl	8000d40 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 80009ea:	2032      	movs	r0, #50	; 0x32
 80009ec:	f000 f9c4 	bl	8000d78 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <HAL_InitTick+0xa4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <HAL_InitTick+0xa4>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_InitTick+0xa4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f003 0308 	and.w	r3, r3, #8
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0c:	f107 0210 	add.w	r2, r7, #16
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fca4 	bl	8001364 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a1c:	f000 fc8e 	bl	800133c <HAL_RCC_GetPCLK1Freq>
 8000a20:	4603      	mov	r3, r0
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <HAL_InitTick+0xa8>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	0c9b      	lsrs	r3, r3, #18
 8000a30:	3b01      	subs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_InitTick+0xac>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <HAL_InitTick+0xb0>)
 8000a38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_InitTick+0xac>)
 8000a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a40:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_InitTick+0xac>)
 8000a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a46:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_InitTick+0xac>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_InitTick+0xac>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <HAL_InitTick+0xac>)
 8000a56:	f001 f8b1 	bl	8001bbc <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d104      	bne.n	8000a6a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <HAL_InitTick+0xac>)
 8000a62:	f001 f8e0 	bl	8001c26 <HAL_TIM_Base_Start_IT>
 8000a66:	4603      	mov	r3, r0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3730      	adds	r7, #48	; 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	20014378 	.word	0x20014378
 8000a80:	40000c00 	.word	0x40000c00

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <TIM5_IRQHandler+0x10>)
 8000abe:	f001 f8d6 	bl	8001c6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20014378 	.word	0x20014378

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <SystemInit+0x28>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <SystemInit+0x28>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SystemInit+0x28>)
 8000ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
  ldr  r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b18:	f842 3b04 	str.w	r3, [r2], #4

08000b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b22:	f7ff ffd3 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f006 f98b 	bl	8006e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fd3b 	bl	80005a4 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b34:	08007078 	.word	0x08007078
  ldr  r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b3c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000b40:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000b44:	200144a4 	.word	0x200144a4

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f8d8 	bl	8000d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ff28 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fefe 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	200143b8 	.word	0x200143b8

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200143b8 	.word	0x200143b8

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff4c 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d52:	f7ff ff61 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	6978      	ldr	r0, [r7, #20]
 8000d5e:	f7ff ffb1 	bl	8000cc4 <NVIC_EncodePriority>
 8000d62:	4602      	mov	r2, r0
 8000d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff80 	bl	8000c70 <__NVIC_SetPriority>
}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff54 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	e165      	b.n	800107c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	f040 8154 	bne.w	8001076 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d00b      	beq.n	8000dee <HAL_GPIO_Init+0x5a>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d007      	beq.n	8000dee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de2:	2b11      	cmp	r3, #17
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b12      	cmp	r3, #18
 8000dec:	d130      	bne.n	8000e50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f003 0201 	and.w	r2, r3, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0xfc>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b12      	cmp	r3, #18
 8000e8e:	d123      	bne.n	8000ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	08da      	lsrs	r2, r3, #3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3208      	adds	r2, #8
 8000e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	69b9      	ldr	r1, [r7, #24]
 8000ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0203 	and.w	r2, r3, #3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 80ae 	beq.w	8001076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b5c      	ldr	r3, [pc, #368]	; (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a5b      	ldr	r2, [pc, #364]	; (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f36:	4a57      	ldr	r2, [pc, #348]	; (8001094 <HAL_GPIO_Init+0x300>)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_GPIO_Init+0x304>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d025      	beq.n	8000fae <HAL_GPIO_Init+0x21a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4d      	ldr	r2, [pc, #308]	; (800109c <HAL_GPIO_Init+0x308>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x216>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <HAL_GPIO_Init+0x310>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x20e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_GPIO_Init+0x314>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x20a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <HAL_GPIO_Init+0x318>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x206>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <HAL_GPIO_Init+0x31c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x202>
 8000f92:	2306      	movs	r3, #6
 8000f94:	e00c      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00a      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	e008      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc0:	4934      	ldr	r1, [pc, #208]	; (8001094 <HAL_GPIO_Init+0x300>)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff2:	4a30      	ldr	r2, [pc, #192]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101c:	4a25      	ldr	r2, [pc, #148]	; (80010b4 <HAL_GPIO_Init+0x320>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_GPIO_Init+0x320>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	f67f ae96 	bls.w	8000db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001084:	bf00      	nop
 8001086:	3724      	adds	r7, #36	; 0x24
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40023800 	.word	0x40023800
 8001094:	40013800 	.word	0x40013800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40021400 	.word	0x40021400
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	401a      	ands	r2, r3
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	429a      	cmp	r2, r3
 8001102:	d104      	bne.n	800110e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	041a      	lsls	r2, r3, #16
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800110c:	e002      	b.n	8001114 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_PWR_EnterSLEEPMode+0x34>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001132:	f023 0304 	bic.w	r3, r3, #4
 8001136:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800113e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001140:	e002      	b.n	8001148 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001142:	bf40      	sev
    __WFE();
 8001144:	bf20      	wfe
    __WFE();
 8001146:	bf20      	wfe
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0cc      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800116c:	4b68      	ldr	r3, [pc, #416]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d90c      	bls.n	8001194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	4b65      	ldr	r3, [pc, #404]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001182:	4b63      	ldr	r3, [pc, #396]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0b8      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4a58      	ldr	r2, [pc, #352]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c4:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4a52      	ldr	r2, [pc, #328]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d0:	4b50      	ldr	r3, [pc, #320]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	494d      	ldr	r1, [pc, #308]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d044      	beq.n	8001278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d119      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e07f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d003      	beq.n	8001216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001212:	2b03      	cmp	r3, #3
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e06f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e067      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001236:	4b37      	ldr	r3, [pc, #220]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f023 0203 	bic.w	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4934      	ldr	r1, [pc, #208]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001248:	f7ff fcb6 	bl	8000bb8 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	e00a      	b.n	8001266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f7ff fcb2 	bl	8000bb8 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	; 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e04f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 020c 	and.w	r2, r3, #12
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	429a      	cmp	r2, r3
 8001276:	d1eb      	bne.n	8001250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d20c      	bcs.n	80012a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e032      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d008      	beq.n	80012be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4916      	ldr	r1, [pc, #88]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	490e      	ldr	r1, [pc, #56]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012de:	f000 f873 	bl	80013c8 <HAL_RCC_GetSysClockFreq>
 80012e2:	4601      	mov	r1, r0
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	fa21 f303 	lsr.w	r3, r1, r3
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_RCC_ClockConfig+0x1c8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fb66 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00
 8001314:	40023800 	.word	0x40023800
 8001318:	08007028 	.word	0x08007028
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_RCC_GetHCLKFreq+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000000 	.word	0x20000000

0800133c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001340:	f7ff fff0 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 8001344:	4601      	mov	r1, r0
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	0a9b      	lsrs	r3, r3, #10
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	4a03      	ldr	r2, [pc, #12]	; (8001360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	08007038 	.word	0x08007038

08001364 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	220f      	movs	r2, #15
 8001372:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 0203 	and.w	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_RCC_GetClockConfig+0x5c>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_RCC_GetClockConfig+0x5c>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_RCC_GetClockConfig+0x60>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 020f 	and.w	r2, r3, #15
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013e2:	4bc6      	ldr	r3, [pc, #792]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	f200 817e 	bhi.w	80016ec <HAL_RCC_GetSysClockFreq+0x324>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <HAL_RCC_GetSysClockFreq+0x30>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	0800142d 	.word	0x0800142d
 80013fc:	080016ed 	.word	0x080016ed
 8001400:	080016ed 	.word	0x080016ed
 8001404:	080016ed 	.word	0x080016ed
 8001408:	08001433 	.word	0x08001433
 800140c:	080016ed 	.word	0x080016ed
 8001410:	080016ed 	.word	0x080016ed
 8001414:	080016ed 	.word	0x080016ed
 8001418:	08001439 	.word	0x08001439
 800141c:	080016ed 	.word	0x080016ed
 8001420:	080016ed 	.word	0x080016ed
 8001424:	080016ed 	.word	0x080016ed
 8001428:	08001595 	.word	0x08001595
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800142c:	4bb4      	ldr	r3, [pc, #720]	; (8001700 <HAL_RCC_GetSysClockFreq+0x338>)
 800142e:	613b      	str	r3, [r7, #16]
       break;
 8001430:	e15f      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001432:	4bb4      	ldr	r3, [pc, #720]	; (8001704 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001434:	613b      	str	r3, [r7, #16]
      break;
 8001436:	e15c      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001438:	4bb0      	ldr	r3, [pc, #704]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001440:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001442:	4bae      	ldr	r3, [pc, #696]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d04a      	beq.n	80014e4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800144e:	4bab      	ldr	r3, [pc, #684]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	099b      	lsrs	r3, r3, #6
 8001454:	f04f 0400 	mov.w	r4, #0
 8001458:	f240 11ff 	movw	r1, #511	; 0x1ff
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	ea03 0501 	and.w	r5, r3, r1
 8001464:	ea04 0602 	and.w	r6, r4, r2
 8001468:	4629      	mov	r1, r5
 800146a:	4632      	mov	r2, r6
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	f04f 0400 	mov.w	r4, #0
 8001474:	0154      	lsls	r4, r2, #5
 8001476:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800147a:	014b      	lsls	r3, r1, #5
 800147c:	4619      	mov	r1, r3
 800147e:	4622      	mov	r2, r4
 8001480:	1b49      	subs	r1, r1, r5
 8001482:	eb62 0206 	sbc.w	r2, r2, r6
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	f04f 0400 	mov.w	r4, #0
 800148e:	0194      	lsls	r4, r2, #6
 8001490:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001494:	018b      	lsls	r3, r1, #6
 8001496:	1a5b      	subs	r3, r3, r1
 8001498:	eb64 0402 	sbc.w	r4, r4, r2
 800149c:	f04f 0100 	mov.w	r1, #0
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	00e2      	lsls	r2, r4, #3
 80014a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014aa:	00d9      	lsls	r1, r3, #3
 80014ac:	460b      	mov	r3, r1
 80014ae:	4614      	mov	r4, r2
 80014b0:	195b      	adds	r3, r3, r5
 80014b2:	eb44 0406 	adc.w	r4, r4, r6
 80014b6:	f04f 0100 	mov.w	r1, #0
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	0262      	lsls	r2, r4, #9
 80014c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014c4:	0259      	lsls	r1, r3, #9
 80014c6:	460b      	mov	r3, r1
 80014c8:	4614      	mov	r4, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	4621      	mov	r1, r4
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f04f 0400 	mov.w	r4, #0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4623      	mov	r3, r4
 80014d8:	f7fe fee4 	bl	80002a4 <__aeabi_uldivmod>
 80014dc:	4603      	mov	r3, r0
 80014de:	460c      	mov	r4, r1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e049      	b.n	8001578 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e4:	4b85      	ldr	r3, [pc, #532]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	f04f 0400 	mov.w	r4, #0
 80014ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	ea03 0501 	and.w	r5, r3, r1
 80014fa:	ea04 0602 	and.w	r6, r4, r2
 80014fe:	4629      	mov	r1, r5
 8001500:	4632      	mov	r2, r6
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	f04f 0400 	mov.w	r4, #0
 800150a:	0154      	lsls	r4, r2, #5
 800150c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001510:	014b      	lsls	r3, r1, #5
 8001512:	4619      	mov	r1, r3
 8001514:	4622      	mov	r2, r4
 8001516:	1b49      	subs	r1, r1, r5
 8001518:	eb62 0206 	sbc.w	r2, r2, r6
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	f04f 0400 	mov.w	r4, #0
 8001524:	0194      	lsls	r4, r2, #6
 8001526:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800152a:	018b      	lsls	r3, r1, #6
 800152c:	1a5b      	subs	r3, r3, r1
 800152e:	eb64 0402 	sbc.w	r4, r4, r2
 8001532:	f04f 0100 	mov.w	r1, #0
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	00e2      	lsls	r2, r4, #3
 800153c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001540:	00d9      	lsls	r1, r3, #3
 8001542:	460b      	mov	r3, r1
 8001544:	4614      	mov	r4, r2
 8001546:	195b      	adds	r3, r3, r5
 8001548:	eb44 0406 	adc.w	r4, r4, r6
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	02a2      	lsls	r2, r4, #10
 8001556:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800155a:	0299      	lsls	r1, r3, #10
 800155c:	460b      	mov	r3, r1
 800155e:	4614      	mov	r4, r2
 8001560:	4618      	mov	r0, r3
 8001562:	4621      	mov	r1, r4
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f04f 0400 	mov.w	r4, #0
 800156a:	461a      	mov	r2, r3
 800156c:	4623      	mov	r3, r4
 800156e:	f7fe fe99 	bl	80002a4 <__aeabi_uldivmod>
 8001572:	4603      	mov	r3, r0
 8001574:	460c      	mov	r4, r1
 8001576:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001578:	4b60      	ldr	r3, [pc, #384]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	3301      	adds	r3, #1
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	613b      	str	r3, [r7, #16]
      break;
 8001592:	e0ae      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001594:	4b59      	ldr	r3, [pc, #356]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800159c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800159e:	4b57      	ldr	r3, [pc, #348]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d04a      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015aa:	4b54      	ldr	r3, [pc, #336]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	099b      	lsrs	r3, r3, #6
 80015b0:	f04f 0400 	mov.w	r4, #0
 80015b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	ea03 0501 	and.w	r5, r3, r1
 80015c0:	ea04 0602 	and.w	r6, r4, r2
 80015c4:	4629      	mov	r1, r5
 80015c6:	4632      	mov	r2, r6
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	f04f 0400 	mov.w	r4, #0
 80015d0:	0154      	lsls	r4, r2, #5
 80015d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015d6:	014b      	lsls	r3, r1, #5
 80015d8:	4619      	mov	r1, r3
 80015da:	4622      	mov	r2, r4
 80015dc:	1b49      	subs	r1, r1, r5
 80015de:	eb62 0206 	sbc.w	r2, r2, r6
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	f04f 0400 	mov.w	r4, #0
 80015ea:	0194      	lsls	r4, r2, #6
 80015ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015f0:	018b      	lsls	r3, r1, #6
 80015f2:	1a5b      	subs	r3, r3, r1
 80015f4:	eb64 0402 	sbc.w	r4, r4, r2
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	00e2      	lsls	r2, r4, #3
 8001602:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001606:	00d9      	lsls	r1, r3, #3
 8001608:	460b      	mov	r3, r1
 800160a:	4614      	mov	r4, r2
 800160c:	195b      	adds	r3, r3, r5
 800160e:	eb44 0406 	adc.w	r4, r4, r6
 8001612:	f04f 0100 	mov.w	r1, #0
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	0262      	lsls	r2, r4, #9
 800161c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001620:	0259      	lsls	r1, r3, #9
 8001622:	460b      	mov	r3, r1
 8001624:	4614      	mov	r4, r2
 8001626:	4618      	mov	r0, r3
 8001628:	4621      	mov	r1, r4
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f04f 0400 	mov.w	r4, #0
 8001630:	461a      	mov	r2, r3
 8001632:	4623      	mov	r3, r4
 8001634:	f7fe fe36 	bl	80002a4 <__aeabi_uldivmod>
 8001638:	4603      	mov	r3, r0
 800163a:	460c      	mov	r4, r1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e049      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	f04f 0400 	mov.w	r4, #0
 800164a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	ea03 0501 	and.w	r5, r3, r1
 8001656:	ea04 0602 	and.w	r6, r4, r2
 800165a:	4629      	mov	r1, r5
 800165c:	4632      	mov	r2, r6
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	f04f 0400 	mov.w	r4, #0
 8001666:	0154      	lsls	r4, r2, #5
 8001668:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800166c:	014b      	lsls	r3, r1, #5
 800166e:	4619      	mov	r1, r3
 8001670:	4622      	mov	r2, r4
 8001672:	1b49      	subs	r1, r1, r5
 8001674:	eb62 0206 	sbc.w	r2, r2, r6
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	0194      	lsls	r4, r2, #6
 8001682:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001686:	018b      	lsls	r3, r1, #6
 8001688:	1a5b      	subs	r3, r3, r1
 800168a:	eb64 0402 	sbc.w	r4, r4, r2
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	00e2      	lsls	r2, r4, #3
 8001698:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800169c:	00d9      	lsls	r1, r3, #3
 800169e:	460b      	mov	r3, r1
 80016a0:	4614      	mov	r4, r2
 80016a2:	195b      	adds	r3, r3, r5
 80016a4:	eb44 0406 	adc.w	r4, r4, r6
 80016a8:	f04f 0100 	mov.w	r1, #0
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	02a2      	lsls	r2, r4, #10
 80016b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016b6:	0299      	lsls	r1, r3, #10
 80016b8:	460b      	mov	r3, r1
 80016ba:	4614      	mov	r4, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	4621      	mov	r1, r4
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f04f 0400 	mov.w	r4, #0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4623      	mov	r3, r4
 80016ca:	f7fe fdeb 	bl	80002a4 <__aeabi_uldivmod>
 80016ce:	4603      	mov	r3, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_GetSysClockFreq+0x334>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	0f1b      	lsrs	r3, r3, #28
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	613b      	str	r3, [r7, #16]
      break;
 80016ea:	e002      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_RCC_GetSysClockFreq+0x338>)
 80016ee:	613b      	str	r3, [r7, #16]
      break;
 80016f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016f2:	693b      	ldr	r3, [r7, #16]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	00f42400 	.word	0x00f42400
 8001704:	007a1200 	.word	0x007a1200

08001708 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8083 	beq.w	8001828 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001722:	4b95      	ldr	r3, [pc, #596]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d019      	beq.n	8001762 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800172e:	4b92      	ldr	r3, [pc, #584]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d106      	bne.n	8001748 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800173a:	4b8f      	ldr	r3, [pc, #572]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001746:	d00c      	beq.n	8001762 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001748:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d112      	bne.n	800177a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001754:	4b88      	ldr	r3, [pc, #544]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001760:	d10b      	bne.n	800177a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001762:	4b85      	ldr	r3, [pc, #532]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d05b      	beq.n	8001826 <HAL_RCC_OscConfig+0x11e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d157      	bne.n	8001826 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e216      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x8a>
 8001784:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a7b      	ldr	r2, [pc, #492]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e01d      	b.n	80017ce <HAL_RCC_OscConfig+0xc6>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179a:	d10c      	bne.n	80017b6 <HAL_RCC_OscConfig+0xae>
 800179c:	4b76      	ldr	r3, [pc, #472]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a75      	ldr	r2, [pc, #468]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80017a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b73      	ldr	r3, [pc, #460]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a72      	ldr	r2, [pc, #456]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0xc6>
 80017b6:	4b70      	ldr	r3, [pc, #448]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6f      	ldr	r2, [pc, #444]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80017bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6c      	ldr	r2, [pc, #432]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80017c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d013      	beq.n	80017fe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff f9ef 	bl	8000bb8 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017de:	f7ff f9eb 	bl	8000bb8 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b64      	cmp	r3, #100	; 0x64
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1db      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f0:	4b61      	ldr	r3, [pc, #388]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0xd6>
 80017fc:	e014      	b.n	8001828 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7ff f9db 	bl	8000bb8 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001806:	f7ff f9d7 	bl	8000bb8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	; 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1c7      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0xfe>
 8001824:	e000      	b.n	8001828 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001826:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d06f      	beq.n	8001914 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	d017      	beq.n	8001870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001840:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001848:	2b08      	cmp	r3, #8
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800184c:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00b      	beq.n	8001870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001858:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d11c      	bne.n	800189e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001864:	4b44      	ldr	r3, [pc, #272]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d116      	bne.n	800189e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001870:	4b41      	ldr	r3, [pc, #260]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x180>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e18f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4938      	ldr	r1, [pc, #224]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189c:	e03a      	b.n	8001914 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d020      	beq.n	80018e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a6:	4b35      	ldr	r3, [pc, #212]	; (800197c <HAL_RCC_OscConfig+0x274>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff f984 	bl	8000bb8 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff f980 	bl	8000bb8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e170      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4925      	ldr	r1, [pc, #148]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
 80018e6:	e015      	b.n	8001914 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_OscConfig+0x274>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7ff f963 	bl	8000bb8 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff f95f 	bl	8000bb8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e14f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d037      	beq.n	8001990 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d016      	beq.n	8001956 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_RCC_OscConfig+0x278>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff f943 	bl	8000bb8 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff f93f 	bl	8000bb8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e12f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800194a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x22e>
 8001954:	e01c      	b.n	8001990 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_RCC_OscConfig+0x278>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff f92c 	bl	8000bb8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001962:	e00f      	b.n	8001984 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff f928 	bl	8000bb8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d908      	bls.n	8001984 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e118      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	42470000 	.word	0x42470000
 8001980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	4b8a      	ldr	r3, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e9      	bne.n	8001964 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8097 	beq.w	8001acc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a2:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10f      	bne.n	80019ce <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b7f      	ldr	r3, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a7e      	ldr	r2, [pc, #504]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b7c      	ldr	r3, [pc, #496]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <HAL_RCC_OscConfig+0x4ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019da:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a75      	ldr	r2, [pc, #468]	; (8001bb4 <HAL_RCC_OscConfig+0x4ac>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e6:	f7ff f8e7 	bl	8000bb8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ee:	f7ff f8e3 	bl	8000bb8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0d3      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x31a>
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a65      	ldr	r2, [pc, #404]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	e01c      	b.n	8001a5c <HAL_RCC_OscConfig+0x354>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x33c>
 8001a2a:	4b61      	ldr	r3, [pc, #388]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	4a60      	ldr	r2, [pc, #384]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6713      	str	r3, [r2, #112]	; 0x70
 8001a36:	4b5e      	ldr	r3, [pc, #376]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a5d      	ldr	r2, [pc, #372]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0x354>
 8001a44:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a59      	ldr	r2, [pc, #356]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a56:	f023 0304 	bic.w	r3, r3, #4
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d015      	beq.n	8001a90 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f8a8 	bl	8000bb8 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f8a4 	bl	8000bb8 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e092      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0ee      	beq.n	8001a6c <HAL_RCC_OscConfig+0x364>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f892 	bl	8000bb8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff f88e 	bl	8000bb8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e07c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aae:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1ee      	bne.n	8001a98 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	4a3a      	ldr	r2, [pc, #232]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d068      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d060      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d145      	bne.n	8001b74 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x4b0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff f863 	bl	8000bb8 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff f85f 	bl	8000bb8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e04f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	019b      	lsls	r3, r3, #6
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	071b      	lsls	r3, r3, #28
 8001b40:	491b      	ldr	r1, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_RCC_OscConfig+0x4b0>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f834 	bl	8000bb8 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f830 	bl	8000bb8 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e020      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x44c>
 8001b72:	e018      	b.n	8001ba6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_RCC_OscConfig+0x4b0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f81d 	bl	8000bb8 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff f819 	bl	8000bb8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e009      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_RCC_OscConfig+0x4a8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x47a>
 8001ba0:	e001      	b.n	8001ba6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	42470060 	.word	0x42470060

08001bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e01d      	b.n	8001c0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f815 	bl	8001c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 f968 	bl	8001ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b06      	cmp	r3, #6
 8001c4e:	d007      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d122      	bne.n	8001cca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d11b      	bne.n	8001cca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f06f 0202 	mvn.w	r2, #2
 8001c9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f8ee 	bl	8001e92 <HAL_TIM_IC_CaptureCallback>
 8001cb6:	e005      	b.n	8001cc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8e0 	bl	8001e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8f1 	bl	8001ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d122      	bne.n	8001d1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d11b      	bne.n	8001d1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f06f 0204 	mvn.w	r2, #4
 8001cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8c4 	bl	8001e92 <HAL_TIM_IC_CaptureCallback>
 8001d0a:	e005      	b.n	8001d18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8b6 	bl	8001e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8c7 	bl	8001ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d122      	bne.n	8001d72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11b      	bne.n	8001d72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 0208 	mvn.w	r2, #8
 8001d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2204      	movs	r2, #4
 8001d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f89a 	bl	8001e92 <HAL_TIM_IC_CaptureCallback>
 8001d5e:	e005      	b.n	8001d6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f88c 	bl	8001e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f89d 	bl	8001ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b10      	cmp	r3, #16
 8001d7e:	d122      	bne.n	8001dc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d11b      	bne.n	8001dc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f06f 0210 	mvn.w	r2, #16
 8001d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f870 	bl	8001e92 <HAL_TIM_IC_CaptureCallback>
 8001db2:	e005      	b.n	8001dc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f862 	bl	8001e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f873 	bl	8001ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10e      	bne.n	8001df2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d107      	bne.n	8001df2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f06f 0201 	mvn.w	r2, #1
 8001dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe fdad 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d10e      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b80      	cmp	r3, #128	; 0x80
 8001e0c:	d107      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f903 	bl	8002024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	2b40      	cmp	r3, #64	; 0x40
 8001e2a:	d10e      	bne.n	8001e4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d107      	bne.n	8001e4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f838 	bl	8001eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d10e      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d107      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f06f 0220 	mvn.w	r2, #32
 8001e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f8cd 	bl	8002010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a40      	ldr	r2, [pc, #256]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eee:	d00f      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <TIM_Base_SetConfig+0x118>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00b      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3c      	ldr	r2, [pc, #240]	; (8001fec <TIM_Base_SetConfig+0x11c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3b      	ldr	r2, [pc, #236]	; (8001ff0 <TIM_Base_SetConfig+0x120>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d003      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3a      	ldr	r2, [pc, #232]	; (8001ff4 <TIM_Base_SetConfig+0x124>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d108      	bne.n	8001f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d02b      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f30:	d027      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <TIM_Base_SetConfig+0x118>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d023      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <TIM_Base_SetConfig+0x11c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <TIM_Base_SetConfig+0x120>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01b      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <TIM_Base_SetConfig+0x124>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d017      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <TIM_Base_SetConfig+0x128>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <TIM_Base_SetConfig+0x12c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00f      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <TIM_Base_SetConfig+0x130>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00b      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <TIM_Base_SetConfig+0x134>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d007      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <TIM_Base_SetConfig+0x138>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d003      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a23      	ldr	r2, [pc, #140]	; (800200c <TIM_Base_SetConfig+0x13c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <TIM_Base_SetConfig+0xf8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <TIM_Base_SetConfig+0x124>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d103      	bne.n	8001fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	615a      	str	r2, [r3, #20]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	40000c00 	.word	0x40000c00
 8001ff4:	40010400 	.word	0x40010400
 8001ff8:	40014000 	.word	0x40014000
 8001ffc:	40014400 	.word	0x40014400
 8002000:	40014800 	.word	0x40014800
 8002004:	40001800 	.word	0x40001800
 8002008:	40001c00 	.word	0x40001c00
 800200c:	40002000 	.word	0x40002000

08002010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0208 	add.w	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f103 0208 	add.w	r2, r3, #8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f103 0208 	add.w	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d103      	bne.n	80020b2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e00c      	b.n	80020cc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3308      	adds	r3, #8
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e002      	b.n	80020c0 <vListInsert+0x2e>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d2f6      	bcs.n	80020ba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	601a      	str	r2, [r3, #0]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6892      	ldr	r2, [r2, #8]
 800211a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6852      	ldr	r2, [r2, #4]
 8002124:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	d103      	bne.n	8002138 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	1e5a      	subs	r2, r3, #1
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002162:	2301      	movs	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <xQueueGenericReset+0x2c>
 8002170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e7fe      	b.n	8002182 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d063      	beq.n	8002252 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d05f      	beq.n	8002252 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	2000      	movs	r0, #0
 800219c:	fba2 1203 	umull	r1, r2, r2, r3
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	f04f 0400 	mov.w	r4, #0
 80021a8:	0013      	movs	r3, r2
 80021aa:	2400      	movs	r4, #0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d000      	beq.n	80021b2 <xQueueGenericReset+0x5a>
 80021b0:	2001      	movs	r0, #1
 80021b2:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d14c      	bne.n	8002252 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 80021b8:	f001 ff3a 	bl	8004030 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	6939      	ldr	r1, [r7, #16]
 80021c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	441a      	add	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2200      	movs	r2, #0
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	3b01      	subs	r3, #1
 80021ea:	6939      	ldr	r1, [r7, #16]
 80021ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	441a      	add	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	22ff      	movs	r2, #255	; 0xff
 80021fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	22ff      	movs	r2, #255	; 0xff
 8002204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d114      	bne.n	8002238 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01a      	beq.n	800224c <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3310      	adds	r3, #16
 800221a:	4618      	mov	r0, r3
 800221c:	f001 f8a2 	bl	8003364 <xTaskRemoveFromEventList>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d012      	beq.n	800224c <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <xQueueGenericReset+0x124>)
 8002228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	e009      	b.n	800224c <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	3310      	adds	r3, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fefb 	bl	8002038 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	3324      	adds	r3, #36	; 0x24
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fef6 	bl	8002038 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800224c:	f001 ff1e 	bl	800408c <vPortExitCritical>
 8002250:	e001      	b.n	8002256 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <xQueueGenericReset+0x118>
 800225c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002260:	f383 8811 	msr	BASEPRI, r3
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	e7fe      	b.n	800226e <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002270:	697b      	ldr	r3, [r7, #20]
}
 8002272:	4618      	mov	r0, r3
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd90      	pop	{r4, r7, pc}
 800227a:	bf00      	nop
 800227c:	e000ed04 	.word	0xe000ed04

08002280 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b08b      	sub	sp, #44	; 0x2c
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d034      	beq.n	8002302 <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002298:	2000      	movs	r0, #0
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	fba2 1203 	umull	r1, r2, r2, r3
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	f04f 0400 	mov.w	r4, #0
 80022aa:	0013      	movs	r3, r2
 80022ac:	2400      	movs	r4, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d000      	beq.n	80022b4 <xQueueGenericCreate+0x34>
 80022b2:	2001      	movs	r0, #1
 80022b4:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d123      	bne.n	8002302 <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022c2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022c6:	d81c      	bhi.n	8002302 <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	3350      	adds	r3, #80	; 0x50
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 ffcc 	bl	8004274 <pvPortMalloc>
 80022dc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3350      	adds	r3, #80	; 0x50
 80022ec:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022ee:	79fa      	ldrb	r2, [r7, #7]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f813 	bl	8002326 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002300:	e00c      	b.n	800231c <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <xQueueGenericCreate+0x9c>
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e7fe      	b.n	800231a <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800231c:	69fb      	ldr	r3, [r7, #28]
    }
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}

08002326 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e002      	b.n	8002348 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002354:	2101      	movs	r1, #1
 8002356:	69b8      	ldr	r0, [r7, #24]
 8002358:	f7ff fefe 	bl	8002158 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	2073      	movs	r0, #115	; 0x73
 800236c:	f003 fe52 	bl	8006014 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b08f      	sub	sp, #60	; 0x3c
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <xQueueReceive+0x2e>
 8002392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	e7fe      	b.n	80023a4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <xQueueReceive+0x3c>
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <xQueueReceive+0x40>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <xQueueReceive+0x42>
 80023b8:	2300      	movs	r3, #0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <xQueueReceive+0x5a>
 80023be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c2:	f383 8811 	msr	BASEPRI, r3
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e7fe      	b.n	80023d0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023d2:	f001 f9d7 	bl	8003784 <xTaskGetSchedulerState>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <xQueueReceive+0x6a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <xQueueReceive+0x6e>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <xQueueReceive+0x70>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <xQueueReceive+0x88>
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e7fe      	b.n	80023fe <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002400:	f001 fe16 	bl	8004030 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d031      	beq.n	8002474 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002414:	f000 f8c4 	bl	80025a0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	4618      	mov	r0, r3
 800241c:	f004 fb86 	bl	8006b2c <SEGGER_SYSVIEW_ShrinkId>
 8002420:	4604      	mov	r4, r0
 8002422:	2000      	movs	r0, #0
 8002424:	f004 fb82 	bl	8006b2c <SEGGER_SYSVIEW_ShrinkId>
 8002428:	4601      	mov	r1, r0
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	2301      	movs	r3, #1
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	460a      	mov	r2, r1
 8002434:	4621      	mov	r1, r4
 8002436:	205c      	movs	r0, #92	; 0x5c
 8002438:	f003 fe62 	bl	8006100 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	1e5a      	subs	r2, r3, #1
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00f      	beq.n	800246c <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	3310      	adds	r3, #16
 8002450:	4618      	mov	r0, r3
 8002452:	f000 ff87 	bl	8003364 <xTaskRemoveFromEventList>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800245c:	4b4f      	ldr	r3, [pc, #316]	; (800259c <xQueueReceive+0x224>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800246c:	f001 fe0e 	bl	800408c <vPortExitCritical>
                return pdPASS;
 8002470:	2301      	movs	r3, #1
 8002472:	e08e      	b.n	8002592 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d115      	bne.n	80024a6 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800247a:	f001 fe07 	bl	800408c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	4618      	mov	r0, r3
 8002482:	f004 fb53 	bl	8006b2c <SEGGER_SYSVIEW_ShrinkId>
 8002486:	4604      	mov	r4, r0
 8002488:	2000      	movs	r0, #0
 800248a:	f004 fb4f 	bl	8006b2c <SEGGER_SYSVIEW_ShrinkId>
 800248e:	4601      	mov	r1, r0
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	2301      	movs	r3, #1
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4613      	mov	r3, r2
 8002498:	460a      	mov	r2, r1
 800249a:	4621      	mov	r1, r4
 800249c:	205c      	movs	r0, #92	; 0x5c
 800249e:	f003 fe2f 	bl	8006100 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e075      	b.n	8002592 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d106      	bne.n	80024ba <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 f82f 	bl	8003514 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024b6:	2301      	movs	r3, #1
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024ba:	f001 fde7 	bl	800408c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024be:	f000 fc35 	bl	8002d2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024c2:	f001 fdb5 	bl	8004030 <vPortEnterCritical>
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d103      	bne.n	80024dc <xQueueReceive+0x164>
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d103      	bne.n	80024f2 <xQueueReceive+0x17a>
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024f2:	f001 fdcb 	bl	800408c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024f6:	1d3a      	adds	r2, r7, #4
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 f81e 	bl	8003540 <xTaskCheckForTimeOut>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d124      	bne.n	8002554 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800250a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800250c:	f000 f8c0 	bl	8002690 <prvIsQueueEmpty>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d018      	beq.n	8002548 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	3324      	adds	r3, #36	; 0x24
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f000 feb4 	bl	800328c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002526:	f000 f861 	bl	80025ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800252a:	f000 fc0d 	bl	8002d48 <xTaskResumeAll>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	f47f af65 	bne.w	8002400 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <xQueueReceive+0x224>)
 8002538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	e75b      	b.n	8002400 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800254a:	f000 f84f 	bl	80025ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800254e:	f000 fbfb 	bl	8002d48 <xTaskResumeAll>
 8002552:	e755      	b.n	8002400 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002556:	f000 f849 	bl	80025ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800255a:	f000 fbf5 	bl	8002d48 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800255e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002560:	f000 f896 	bl	8002690 <prvIsQueueEmpty>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	f43f af4a 	beq.w	8002400 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	4618      	mov	r0, r3
 8002570:	f004 fadc 	bl	8006b2c <SEGGER_SYSVIEW_ShrinkId>
 8002574:	4604      	mov	r4, r0
 8002576:	2000      	movs	r0, #0
 8002578:	f004 fad8 	bl	8006b2c <SEGGER_SYSVIEW_ShrinkId>
 800257c:	4601      	mov	r1, r0
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	2301      	movs	r3, #1
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	460a      	mov	r2, r1
 8002588:	4621      	mov	r1, r4
 800258a:	205c      	movs	r0, #92	; 0x5c
 800258c:	f003 fdb8 	bl	8006100 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002590:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002592:	4618      	mov	r0, r3
 8002594:	3734      	adds	r7, #52	; 0x34
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	bf00      	nop
 800259c:	e000ed04 	.word	0xe000ed04

080025a0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d018      	beq.n	80025e4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	441a      	add	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d303      	bcc.n	80025d4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68d9      	ldr	r1, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	461a      	mov	r2, r3
 80025de:	6838      	ldr	r0, [r7, #0]
 80025e0:	f004 fc61 	bl	8006ea6 <memcpy>
    }
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025f4:	f001 fd1c 	bl	8004030 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025fe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002600:	e011      	b.n	8002626 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3324      	adds	r3, #36	; 0x24
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fea8 	bl	8003364 <xTaskRemoveFromEventList>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800261a:	f000 fff5 	bl	8003608 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	3b01      	subs	r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	dce9      	bgt.n	8002602 <prvUnlockQueue+0x16>
 800262e:	e000      	b.n	8002632 <prvUnlockQueue+0x46>
                        break;
 8002630:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800263a:	f001 fd27 	bl	800408c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800263e:	f001 fcf7 	bl	8004030 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002648:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800264a:	e011      	b.n	8002670 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3310      	adds	r3, #16
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fe83 	bl	8003364 <xTaskRemoveFromEventList>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002664:	f000 ffd0 	bl	8003608 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002668:	7bbb      	ldrb	r3, [r7, #14]
 800266a:	3b01      	subs	r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002674:	2b00      	cmp	r3, #0
 8002676:	dce9      	bgt.n	800264c <prvUnlockQueue+0x60>
 8002678:	e000      	b.n	800267c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800267a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	22ff      	movs	r2, #255	; 0xff
 8002680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002684:	f001 fd02 	bl	800408c <vPortExitCritical>
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002698:	f001 fcca 	bl	8004030 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e001      	b.n	80026ae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026ae:	f001 fced 	bl	800408c <vPortExitCritical>

    return xReturn;
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <vQueueAddToRegistry+0x24>
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	e7fe      	b.n	80026de <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d024      	beq.n	8002734 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e01e      	b.n	800272e <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <vQueueAddToRegistry+0xa8>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d105      	bne.n	800270c <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4a17      	ldr	r2, [pc, #92]	; (8002764 <vQueueAddToRegistry+0xa8>)
 8002706:	4413      	add	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
                    break;
 800270a:	e013      	b.n	8002734 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <vQueueAddToRegistry+0x6c>
 8002712:	4a14      	ldr	r2, [pc, #80]	; (8002764 <vQueueAddToRegistry+0xa8>)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4a10      	ldr	r2, [pc, #64]	; (8002764 <vQueueAddToRegistry+0xa8>)
 8002724:	4413      	add	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3301      	adds	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b07      	cmp	r3, #7
 8002732:	d9dd      	bls.n	80026f0 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00f      	beq.n	800275a <vQueueAddToRegistry+0x9e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4618      	mov	r0, r3
 800274a:	f004 f9ef 	bl	8006b2c <SEGGER_SYSVIEW_ShrinkId>
 800274e:	4601      	mov	r1, r0
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	2071      	movs	r0, #113	; 0x71
 8002756:	f003 fc03 	bl	8005f60 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200143bc 	.word	0x200143bc

08002768 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002778:	f001 fc5a 	bl	8004030 <vPortEnterCritical>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002782:	b25b      	sxtb	r3, r3
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d103      	bne.n	8002792 <vQueueWaitForMessageRestricted+0x2a>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002798:	b25b      	sxtb	r3, r3
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	d103      	bne.n	80027a8 <vQueueWaitForMessageRestricted+0x40>
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027a8:	f001 fc70 	bl	800408c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3324      	adds	r3, #36	; 0x24
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fd89 	bl	80032d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff12 	bl	80025ec <prvUnlockQueue>
    }
 80027c8:	bf00      	nop
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af04      	add	r7, sp, #16
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 fd45 	bl	8004274 <pvPortMalloc>
 80027ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027f2:	2058      	movs	r0, #88	; 0x58
 80027f4:	f001 fd3e 	bl	8004274 <pvPortMalloc>
 80027f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
 8002806:	e005      	b.n	8002814 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002808:	6978      	ldr	r0, [r7, #20]
 800280a:	f001 fe0f 	bl	800442c <vPortFree>
 800280e:	e001      	b.n	8002814 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d013      	beq.n	8002842 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	2300      	movs	r3, #0
 800281e:	9303      	str	r3, [sp, #12]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	9302      	str	r3, [sp, #8]
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f80e 	bl	8002852 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002836:	69f8      	ldr	r0, [r7, #28]
 8002838:	f000 f8ae 	bl	8002998 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800283c:	2301      	movs	r3, #1
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e002      	b.n	8002848 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002848:	69bb      	ldr	r3, [r7, #24]
    }
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b088      	sub	sp, #32
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	461a      	mov	r2, r3
 800286a:	21a5      	movs	r1, #165	; 0xa5
 800286c:	f004 fb26 	bl	8006ebc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800287a:	3b01      	subs	r3, #1
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f023 0307 	bic.w	r3, r3, #7
 8002888:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <prvInitialiseNewTask+0x56>
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	e7fe      	b.n	80028a6 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01f      	beq.n	80028ee <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	e012      	b.n	80028da <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	4413      	add	r3, r2
 80028ba:	7819      	ldrb	r1, [r3, #0]
 80028bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	3334      	adds	r3, #52	; 0x34
 80028c4:	460a      	mov	r2, r1
 80028c6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	3301      	adds	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2b09      	cmp	r3, #9
 80028de:	d9e9      	bls.n	80028b4 <prvInitialiseNewTask+0x62>
 80028e0:	e000      	b.n	80028e4 <prvInitialiseNewTask+0x92>
            {
                break;
 80028e2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028ec:	e003      	b.n	80028f6 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d909      	bls.n	8002910 <prvInitialiseNewTask+0xbe>
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	e7fe      	b.n	800290e <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	2b04      	cmp	r3, #4
 8002914:	d901      	bls.n	800291a <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002916:	2304      	movs	r3, #4
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002924:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	2200      	movs	r2, #0
 800292a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	3304      	adds	r3, #4
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fba1 	bl	8002078 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	3318      	adds	r3, #24
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fb9c 	bl	8002078 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002944:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	f1c3 0205 	rsb	r2, r3, #5
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	3350      	adds	r3, #80	; 0x50
 800295a:	2204      	movs	r2, #4
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f004 faac 	bl	8006ebc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	3354      	adds	r3, #84	; 0x54
 8002968:	2201      	movs	r2, #1
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f004 faa5 	bl	8006ebc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	69b8      	ldr	r0, [r7, #24]
 8002978:	f001 fa2e 	bl	8003dd8 <pxPortInitialiseStack>
 800297c:	4602      	mov	r2, r0
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800298e:	bf00      	nop
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af02      	add	r7, sp, #8
 800299e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029a0:	f001 fb46 	bl	8004030 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029a4:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <prvAddNewTaskToReadyList+0x14c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	4a4e      	ldr	r2, [pc, #312]	; (8002ae4 <prvAddNewTaskToReadyList+0x14c>)
 80029ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029ae:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029b6:	4a4c      	ldr	r2, [pc, #304]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029bc:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <prvAddNewTaskToReadyList+0x14c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d110      	bne.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029c4:	f000 fe46 	bl	8003654 <prvInitialiseTaskLists>
 80029c8:	e00d      	b.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029ca:	4b48      	ldr	r3, [pc, #288]	; (8002aec <prvAddNewTaskToReadyList+0x154>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029d2:	4b45      	ldr	r3, [pc, #276]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d802      	bhi.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029e0:	4a41      	ldr	r2, [pc, #260]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029e6:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <prvAddNewTaskToReadyList+0x158>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	4a40      	ldr	r2, [pc, #256]	; (8002af0 <prvAddNewTaskToReadyList+0x158>)
 80029ee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <prvAddNewTaskToReadyList+0x158>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <prvAddNewTaskToReadyList+0x94>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 ff6d 	bl	80068e0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	461d      	mov	r5, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	1ae3      	subs	r3, r4, r3
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	462b      	mov	r3, r5
 8002a28:	f001 fec4 	bl	80047b4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 ffda 	bl	80069e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	2201      	movs	r2, #1
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <prvAddNewTaskToReadyList+0x15c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <prvAddNewTaskToReadyList+0x15c>)
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4a:	492b      	ldr	r1, [pc, #172]	; (8002af8 <prvAddNewTaskToReadyList+0x160>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3304      	adds	r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	3204      	adds	r2, #4
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1d1a      	adds	r2, r3, #4
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <prvAddNewTaskToReadyList+0x160>)
 8002a8a:	441a      	add	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	615a      	str	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a94:	4918      	ldr	r1, [pc, #96]	; (8002af8 <prvAddNewTaskToReadyList+0x160>)
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	4814      	ldr	r0, [pc, #80]	; (8002af8 <prvAddNewTaskToReadyList+0x160>)
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4403      	add	r3, r0
 8002ab0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ab2:	f001 faeb 	bl	800408c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <prvAddNewTaskToReadyList+0x154>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d207      	bcs.n	8002adc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <prvAddNewTaskToReadyList+0x164>)
 8002ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae4:	20000110 	.word	0x20000110
 8002ae8:	20000038 	.word	0x20000038
 8002aec:	2000011c 	.word	0x2000011c
 8002af0:	2000012c 	.word	0x2000012c
 8002af4:	20000118 	.word	0x20000118
 8002af8:	2000003c 	.word	0x2000003c
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <xTaskDelayUntil+0x28>
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e7fe      	b.n	8002b26 <xTaskDelayUntil+0x26>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <xTaskDelayUntil+0x42>
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	e7fe      	b.n	8002b40 <xTaskDelayUntil+0x40>
        configASSERT( uxSchedulerSuspended == 0 );
 8002b42:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <xTaskDelayUntil+0xf0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <xTaskDelayUntil+0x5e>
 8002b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e7fe      	b.n	8002b5c <xTaskDelayUntil+0x5c>

        vTaskSuspendAll();
 8002b5e:	f000 f8e5 	bl	8002d2c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <xTaskDelayUntil+0xf4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d20b      	bcs.n	8002b94 <xTaskDelayUntil+0x94>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d211      	bcs.n	8002baa <xTaskDelayUntil+0xaa>
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d90d      	bls.n	8002baa <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
 8002b92:	e00a      	b.n	8002baa <xTaskDelayUntil+0xaa>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d303      	bcc.n	8002ba6 <xTaskDelayUntil+0xa6>
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d901      	bls.n	8002baa <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002bb6:	2024      	movs	r0, #36	; 0x24
 8002bb8:	f003 f978 	bl	8005eac <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fdfb 	bl	80037c0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002bca:	f000 f8bd 	bl	8002d48 <xTaskResumeAll>
 8002bce:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <xTaskDelayUntil+0xf8>)
 8002bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000138 	.word	0x20000138
 8002bf4:	20000114 	.word	0x20000114
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01a      	beq.n	8002c44 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <vTaskDelay+0x68>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <vTaskDelay+0x2e>
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	e7fe      	b.n	8002c28 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8002c2a:	f000 f87f 	bl	8002d2c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	2023      	movs	r0, #35	; 0x23
 8002c32:	f003 f959 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c36:	2100      	movs	r1, #0
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fdc1 	bl	80037c0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002c3e:	f000 f883 	bl	8002d48 <xTaskResumeAll>
 8002c42:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d107      	bne.n	8002c5a <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <vTaskDelay+0x6c>)
 8002c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000138 	.word	0x20000138
 8002c68:	e000ed04 	.word	0xe000ed04

08002c6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <vTaskStartScheduler+0xa0>)
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	2300      	movs	r3, #0
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2282      	movs	r2, #130	; 0x82
 8002c7e:	4924      	ldr	r1, [pc, #144]	; (8002d10 <vTaskStartScheduler+0xa4>)
 8002c80:	4824      	ldr	r0, [pc, #144]	; (8002d14 <vTaskStartScheduler+0xa8>)
 8002c82:	f7ff fda5 	bl	80027d0 <xTaskCreate>
 8002c86:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d102      	bne.n	8002c94 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002c8e:	f000 fe23 	bl	80038d8 <xTimerCreateTimerTask>
 8002c92:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d123      	bne.n	8002ce2 <vTaskStartScheduler+0x76>
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <vTaskStartScheduler+0xac>)
 8002cae:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <vTaskStartScheduler+0xb0>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <vTaskStartScheduler+0xb4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <vTaskStartScheduler+0xb8>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <vTaskStartScheduler+0xa0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d102      	bne.n	8002cd2 <vTaskStartScheduler+0x66>
 8002ccc:	f003 fdec 	bl	80068a8 <SEGGER_SYSVIEW_OnIdle>
 8002cd0:	e004      	b.n	8002cdc <vTaskStartScheduler+0x70>
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <vTaskStartScheduler+0xb8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fe44 	bl	8006964 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002cdc:	f001 f90a 	bl	8003ef4 <xPortStartScheduler>
 8002ce0:	e00d      	b.n	8002cfe <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d109      	bne.n	8002cfe <vTaskStartScheduler+0x92>
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	e7fe      	b.n	8002cfc <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <vTaskStartScheduler+0xbc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000134 	.word	0x20000134
 8002d10:	08006f44 	.word	0x08006f44
 8002d14:	08003621 	.word	0x08003621
 8002d18:	20000130 	.word	0x20000130
 8002d1c:	2000011c 	.word	0x2000011c
 8002d20:	20000114 	.word	0x20000114
 8002d24:	20000038 	.word	0x20000038
 8002d28:	2000000c 	.word	0x2000000c

08002d2c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d38:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	20000138 	.word	0x20000138

08002d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <xTaskResumeAll+0x1d8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <xTaskResumeAll+0x2a>
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	e7fe      	b.n	8002d70 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d72:	f001 f95d 	bl	8004030 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d76:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <xTaskResumeAll+0x1d8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	4a68      	ldr	r2, [pc, #416]	; (8002f20 <xTaskResumeAll+0x1d8>)
 8002d7e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d80:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <xTaskResumeAll+0x1d8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 80c4 	bne.w	8002f12 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d8a:	4b66      	ldr	r3, [pc, #408]	; (8002f24 <xTaskResumeAll+0x1dc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80bf 	beq.w	8002f12 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d94:	e08e      	b.n	8002eb4 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d96:	4b64      	ldr	r3, [pc, #400]	; (8002f28 <xTaskResumeAll+0x1e0>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	6a12      	ldr	r2, [r2, #32]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	69d2      	ldr	r2, [r2, #28]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3318      	adds	r3, #24
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d103      	bne.n	8002dcc <xTaskResumeAll+0x84>
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	1e5a      	subs	r2, r3, #1
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	68d2      	ldr	r2, [r2, #12]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d103      	bne.n	8002e0a <xTaskResumeAll+0xc2>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	615a      	str	r2, [r3, #20]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1e5a      	subs	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fde3 	bl	80069e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	2201      	movs	r2, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	4b40      	ldr	r3, [pc, #256]	; (8002f2c <xTaskResumeAll+0x1e4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <xTaskResumeAll+0x1e4>)
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	493d      	ldr	r1, [pc, #244]	; (8002f30 <xTaskResumeAll+0x1e8>)
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3304      	adds	r3, #4
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	60da      	str	r2, [r3, #12]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	3204      	adds	r2, #4
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	1d1a      	adds	r2, r3, #4
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4a2e      	ldr	r2, [pc, #184]	; (8002f30 <xTaskResumeAll+0x1e8>)
 8002e78:	441a      	add	r2, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	615a      	str	r2, [r3, #20]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	492b      	ldr	r1, [pc, #172]	; (8002f30 <xTaskResumeAll+0x1e8>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1c59      	adds	r1, r3, #1
 8002e92:	4827      	ldr	r0, [pc, #156]	; (8002f30 <xTaskResumeAll+0x1e8>)
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4403      	add	r3, r0
 8002e9e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <xTaskResumeAll+0x1ec>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <xTaskResumeAll+0x1f0>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <xTaskResumeAll+0x1e0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f47f af6c 	bne.w	8002d96 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ec4:	f000 fc42 	bl	800374c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <xTaskResumeAll+0x1f4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ed4:	f000 f858 	bl	8002f88 <xTaskIncrementTick>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <xTaskResumeAll+0x1f0>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f1      	bne.n	8002ed4 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <xTaskResumeAll+0x1f4>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <xTaskResumeAll+0x1f0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002efe:	2301      	movs	r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <xTaskResumeAll+0x1f8>)
 8002f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f12:	f001 f8bb 	bl	800408c <vPortExitCritical>

    return xAlreadyYielded;
 8002f16:	69bb      	ldr	r3, [r7, #24]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000138 	.word	0x20000138
 8002f24:	20000110 	.word	0x20000110
 8002f28:	200000d0 	.word	0x200000d0
 8002f2c:	20000118 	.word	0x20000118
 8002f30:	2000003c 	.word	0x2000003c
 8002f34:	20000038 	.word	0x20000038
 8002f38:	20000124 	.word	0x20000124
 8002f3c:	20000120 	.word	0x20000120
 8002f40:	e000ed04 	.word	0xe000ed04

08002f44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <xTaskGetTickCount+0x1c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f50:	687b      	ldr	r3, [r7, #4]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000114 	.word	0x20000114

08002f64 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f6a:	f001 f945 	bl	80041f8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <xTaskGetTickCountFromISR+0x20>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f78:	683b      	ldr	r3, [r7, #0]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000114 	.word	0x20000114

08002f88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f92:	4b7f      	ldr	r3, [pc, #508]	; (8003190 <xTaskIncrementTick+0x208>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 80ef 	bne.w	800317a <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f9c:	4b7d      	ldr	r3, [pc, #500]	; (8003194 <xTaskIncrementTick+0x20c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002fa4:	4a7b      	ldr	r2, [pc, #492]	; (8003194 <xTaskIncrementTick+0x20c>)
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d11f      	bne.n	8002ff0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002fb0:	4b79      	ldr	r3, [pc, #484]	; (8003198 <xTaskIncrementTick+0x210>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <xTaskIncrementTick+0x46>
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	e7fe      	b.n	8002fcc <xTaskIncrementTick+0x44>
 8002fce:	4b72      	ldr	r3, [pc, #456]	; (8003198 <xTaskIncrementTick+0x210>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	4b71      	ldr	r3, [pc, #452]	; (800319c <xTaskIncrementTick+0x214>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a6f      	ldr	r2, [pc, #444]	; (8003198 <xTaskIncrementTick+0x210>)
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4a6f      	ldr	r2, [pc, #444]	; (800319c <xTaskIncrementTick+0x214>)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b6f      	ldr	r3, [pc, #444]	; (80031a0 <xTaskIncrementTick+0x218>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4a6d      	ldr	r2, [pc, #436]	; (80031a0 <xTaskIncrementTick+0x218>)
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	f000 fbae 	bl	800374c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ff0:	4b6c      	ldr	r3, [pc, #432]	; (80031a4 <xTaskIncrementTick+0x21c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a3a      	ldr	r2, [r7, #32]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	f0c0 80aa 	bcc.w	8003150 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ffc:	4b66      	ldr	r3, [pc, #408]	; (8003198 <xTaskIncrementTick+0x210>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d104      	bne.n	8003010 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003006:	4b67      	ldr	r3, [pc, #412]	; (80031a4 <xTaskIncrementTick+0x21c>)
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	601a      	str	r2, [r3, #0]
                    break;
 800300e:	e09f      	b.n	8003150 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <xTaskIncrementTick+0x210>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	429a      	cmp	r2, r3
 8003026:	d203      	bcs.n	8003030 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003028:	4a5e      	ldr	r2, [pc, #376]	; (80031a4 <xTaskIncrementTick+0x21c>)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800302e:	e08f      	b.n	8003150 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	6892      	ldr	r2, [r2, #8]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	3304      	adds	r3, #4
 8003052:	429a      	cmp	r2, r3
 8003054:	d103      	bne.n	800305e <xTaskIncrementTick+0xd6>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1e5a      	subs	r2, r3, #1
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01e      	beq.n	80030b4 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	6a12      	ldr	r2, [r2, #32]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	69d2      	ldr	r2, [r2, #28]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	3318      	adds	r3, #24
 8003098:	429a      	cmp	r2, r3
 800309a:	d103      	bne.n	80030a4 <xTaskIncrementTick+0x11c>
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2200      	movs	r2, #0
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	1e5a      	subs	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fc96 	bl	80069e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	2201      	movs	r2, #1
 80030c2:	409a      	lsls	r2, r3
 80030c4:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <xTaskIncrementTick+0x220>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	4a37      	ldr	r2, [pc, #220]	; (80031a8 <xTaskIncrementTick+0x220>)
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d2:	4936      	ldr	r1, [pc, #216]	; (80031ac <xTaskIncrementTick+0x224>)
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3304      	adds	r3, #4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	3204      	adds	r2, #4
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	1d1a      	adds	r2, r3, #4
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4a26      	ldr	r2, [pc, #152]	; (80031ac <xTaskIncrementTick+0x224>)
 8003112:	441a      	add	r2, r3
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	615a      	str	r2, [r3, #20]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	4923      	ldr	r1, [pc, #140]	; (80031ac <xTaskIncrementTick+0x224>)
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	1c59      	adds	r1, r3, #1
 800312c:	481f      	ldr	r0, [pc, #124]	; (80031ac <xTaskIncrementTick+0x224>)
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4403      	add	r3, r0
 8003138:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <xTaskIncrementTick+0x228>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	429a      	cmp	r2, r3
 8003146:	f4ff af59 	bcc.w	8002ffc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800314a:	2301      	movs	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800314e:	e755      	b.n	8002ffc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <xTaskIncrementTick+0x228>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	4915      	ldr	r1, [pc, #84]	; (80031ac <xTaskIncrementTick+0x224>)
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d901      	bls.n	800316c <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8003168:	2301      	movs	r3, #1
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <xTaskIncrementTick+0x22c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8003174:	2301      	movs	r3, #1
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	e004      	b.n	8003184 <xTaskIncrementTick+0x1fc>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800317a:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <xTaskIncrementTick+0x230>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <xTaskIncrementTick+0x230>)
 8003182:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003186:	4618      	mov	r0, r3
 8003188:	3728      	adds	r7, #40	; 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000138 	.word	0x20000138
 8003194:	20000114 	.word	0x20000114
 8003198:	200000c8 	.word	0x200000c8
 800319c:	200000cc 	.word	0x200000cc
 80031a0:	20000128 	.word	0x20000128
 80031a4:	20000130 	.word	0x20000130
 80031a8:	20000118 	.word	0x20000118
 80031ac:	2000003c 	.word	0x2000003c
 80031b0:	20000038 	.word	0x20000038
 80031b4:	20000124 	.word	0x20000124
 80031b8:	20000120 	.word	0x20000120

080031bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031c2:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <vTaskSwitchContext+0xb8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031ca:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <vTaskSwitchContext+0xbc>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80031d0:	e04c      	b.n	800326c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80031d2:	4b29      	ldr	r3, [pc, #164]	; (8003278 <vTaskSwitchContext+0xbc>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031d8:	4b28      	ldr	r3, [pc, #160]	; (800327c <vTaskSwitchContext+0xc0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031e6:	7afb      	ldrb	r3, [r7, #11]
 80031e8:	f1c3 031f 	rsb	r3, r3, #31
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	4924      	ldr	r1, [pc, #144]	; (8003280 <vTaskSwitchContext+0xc4>)
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <vTaskSwitchContext+0x5a>
        __asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	e7fe      	b.n	8003214 <vTaskSwitchContext+0x58>
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4a17      	ldr	r2, [pc, #92]	; (8003280 <vTaskSwitchContext+0xc4>)
 8003222:	4413      	add	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	3308      	adds	r3, #8
 8003238:	429a      	cmp	r2, r3
 800323a:	d104      	bne.n	8003246 <vTaskSwitchContext+0x8a>
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <vTaskSwitchContext+0xc8>)
 800324e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <vTaskSwitchContext+0xc8>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <vTaskSwitchContext+0xcc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d102      	bne.n	8003262 <vTaskSwitchContext+0xa6>
 800325c:	f003 fb24 	bl	80068a8 <SEGGER_SYSVIEW_OnIdle>
}
 8003260:	e004      	b.n	800326c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <vTaskSwitchContext+0xc8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fb7c 	bl	8006964 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800326c:	bf00      	nop
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000138 	.word	0x20000138
 8003278:	20000124 	.word	0x20000124
 800327c:	20000118 	.word	0x20000118
 8003280:	2000003c 	.word	0x2000003c
 8003284:	20000038 	.word	0x20000038
 8003288:	20000134 	.word	0x20000134

0800328c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <vTaskPlaceOnEventList+0x24>
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e7fe      	b.n	80032ae <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <vTaskPlaceOnEventList+0x44>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3318      	adds	r3, #24
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fe feea 	bl	8002092 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032be:	2101      	movs	r1, #1
 80032c0:	6838      	ldr	r0, [r7, #0]
 80032c2:	f000 fa7d 	bl	80037c0 <prvAddCurrentTaskToDelayedList>
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000038 	.word	0x20000038

080032d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <vTaskPlaceOnEventListRestricted+0x26>
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	e7fe      	b.n	80032f8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	61da      	str	r2, [r3, #28]
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <vTaskPlaceOnEventListRestricted+0x8c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	6892      	ldr	r2, [r2, #8]
 8003310:	621a      	str	r2, [r3, #32]
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	3218      	adds	r2, #24
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f103 0218 	add.w	r2, r3, #24
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <vTaskPlaceOnEventListRestricted+0x8c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003348:	2024      	movs	r0, #36	; 0x24
 800334a:	f002 fdaf 	bl	8005eac <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	68b8      	ldr	r0, [r7, #8]
 8003352:	f000 fa35 	bl	80037c0 <prvAddCurrentTaskToDelayedList>
    }
 8003356:	bf00      	nop
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000038 	.word	0x20000038

08003364 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <xTaskRemoveFromEventList+0x2a>
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e7fe      	b.n	800338c <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	6a12      	ldr	r2, [r2, #32]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	6a3a      	ldr	r2, [r7, #32]
 80033a4:	69d2      	ldr	r2, [r2, #28]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	3318      	adds	r3, #24
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d103      	bne.n	80033bc <xTaskRemoveFromEventList+0x58>
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2200      	movs	r2, #0
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033cc:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <xTaskRemoveFromEventList+0x198>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d162      	bne.n	800349a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	6a3a      	ldr	r2, [r7, #32]
 80033e0:	68d2      	ldr	r2, [r2, #12]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	6892      	ldr	r2, [r2, #8]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	3304      	adds	r3, #4
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d103      	bne.n	8003402 <xTaskRemoveFromEventList+0x9e>
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	1e5a      	subs	r2, r3, #1
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	4618      	mov	r0, r3
 8003416:	f003 fae7 	bl	80069e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	2201      	movs	r2, #1
 8003420:	409a      	lsls	r2, r3
 8003422:	4b37      	ldr	r3, [pc, #220]	; (8003500 <xTaskRemoveFromEventList+0x19c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	4a35      	ldr	r2, [pc, #212]	; (8003500 <xTaskRemoveFromEventList+0x19c>)
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	4934      	ldr	r1, [pc, #208]	; (8003504 <xTaskRemoveFromEventList+0x1a0>)
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	3304      	adds	r3, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	3204      	adds	r2, #4
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	1d1a      	adds	r2, r3, #4
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4a25      	ldr	r2, [pc, #148]	; (8003504 <xTaskRemoveFromEventList+0x1a0>)
 8003470:	441a      	add	r2, r3
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	615a      	str	r2, [r3, #20]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347a:	4922      	ldr	r1, [pc, #136]	; (8003504 <xTaskRemoveFromEventList+0x1a0>)
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c59      	adds	r1, r3, #1
 800348a:	481e      	ldr	r0, [pc, #120]	; (8003504 <xTaskRemoveFromEventList+0x1a0>)
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4403      	add	r3, r0
 8003496:	6019      	str	r1, [r3, #0]
 8003498:	e01b      	b.n	80034d2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <xTaskRemoveFromEventList+0x1a4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	61da      	str	r2, [r3, #28]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	621a      	str	r2, [r3, #32]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	6a3a      	ldr	r2, [r7, #32]
 80034b4:	3218      	adds	r2, #24
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f103 0218 	add.w	r2, r3, #24
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	4a10      	ldr	r2, [pc, #64]	; (8003508 <xTaskRemoveFromEventList+0x1a4>)
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <xTaskRemoveFromEventList+0x1a4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <xTaskRemoveFromEventList+0x1a4>)
 80034d0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <xTaskRemoveFromEventList+0x1a8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	429a      	cmp	r2, r3
 80034de:	d905      	bls.n	80034ec <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80034e0:	2301      	movs	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <xTaskRemoveFromEventList+0x1ac>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e001      	b.n	80034f0 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000138 	.word	0x20000138
 8003500:	20000118 	.word	0x20000118
 8003504:	2000003c 	.word	0x2000003c
 8003508:	200000d0 	.word	0x200000d0
 800350c:	20000038 	.word	0x20000038
 8003510:	20000124 	.word	0x20000124

08003514 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <vTaskInternalSetTimeOutState+0x24>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <vTaskInternalSetTimeOutState+0x28>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	605a      	str	r2, [r3, #4]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	20000128 	.word	0x20000128
 800353c:	20000114 	.word	0x20000114

08003540 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <xTaskCheckForTimeOut+0x24>
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e7fe      	b.n	8003562 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <xTaskCheckForTimeOut+0x3e>
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e7fe      	b.n	800357c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800357e:	f000 fd57 	bl	8004030 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <xTaskCheckForTimeOut+0xc0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d102      	bne.n	80035a2 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	e026      	b.n	80035f0 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b17      	ldr	r3, [pc, #92]	; (8003604 <xTaskCheckForTimeOut+0xc4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d00a      	beq.n	80035c4 <xTaskCheckForTimeOut+0x84>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d305      	bcc.n	80035c4 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e015      	b.n	80035f0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d20b      	bcs.n	80035e6 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	1ad2      	subs	r2, r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ff9a 	bl	8003514 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e004      	b.n	80035f0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80035f0:	f000 fd4c 	bl	800408c <vPortExitCritical>

    return xReturn;
 80035f4:	69fb      	ldr	r3, [r7, #28]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000114 	.word	0x20000114
 8003604:	20000128 	.word	0x20000128

08003608 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <vTaskMissedYield+0x14>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000124 	.word	0x20000124

08003620 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003628:	f000 f854 	bl	80036d4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <prvIdleTask+0x2c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d907      	bls.n	8003644 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <prvIdleTask+0x30>)
 8003636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8003644:	f7fd f97a 	bl	800093c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003648:	e7ee      	b.n	8003628 <prvIdleTask+0x8>
 800364a:	bf00      	nop
 800364c:	2000003c 	.word	0x2000003c
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	e00c      	b.n	800367a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <prvInitialiseTaskLists+0x60>)
 800366c:	4413      	add	r3, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe fce2 	bl	8002038 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3301      	adds	r3, #1
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d9ef      	bls.n	8003660 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <prvInitialiseTaskLists+0x64>)
 8003682:	f7fe fcd9 	bl	8002038 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003686:	480d      	ldr	r0, [pc, #52]	; (80036bc <prvInitialiseTaskLists+0x68>)
 8003688:	f7fe fcd6 	bl	8002038 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800368c:	480c      	ldr	r0, [pc, #48]	; (80036c0 <prvInitialiseTaskLists+0x6c>)
 800368e:	f7fe fcd3 	bl	8002038 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003692:	480c      	ldr	r0, [pc, #48]	; (80036c4 <prvInitialiseTaskLists+0x70>)
 8003694:	f7fe fcd0 	bl	8002038 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <prvInitialiseTaskLists+0x74>)
 800369a:	f7fe fccd 	bl	8002038 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <prvInitialiseTaskLists+0x78>)
 80036a0:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <prvInitialiseTaskLists+0x64>)
 80036a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <prvInitialiseTaskLists+0x7c>)
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <prvInitialiseTaskLists+0x68>)
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	2000003c 	.word	0x2000003c
 80036b8:	200000a0 	.word	0x200000a0
 80036bc:	200000b4 	.word	0x200000b4
 80036c0:	200000d0 	.word	0x200000d0
 80036c4:	200000e4 	.word	0x200000e4
 80036c8:	200000fc 	.word	0x200000fc
 80036cc:	200000c8 	.word	0x200000c8
 80036d0:	200000cc 	.word	0x200000cc

080036d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036da:	e019      	b.n	8003710 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80036dc:	f000 fca8 	bl	8004030 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <prvCheckTasksWaitingTermination+0x4c>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe fd09 	bl	8002104 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <prvCheckTasksWaitingTermination+0x50>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <prvCheckTasksWaitingTermination+0x50>)
 80036fa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <prvCheckTasksWaitingTermination+0x54>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3b01      	subs	r3, #1
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <prvCheckTasksWaitingTermination+0x54>)
 8003704:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003706:	f000 fcc1 	bl	800408c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f80e 	bl	800372c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <prvCheckTasksWaitingTermination+0x54>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e1      	bne.n	80036dc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200000e4 	.word	0x200000e4
 8003724:	20000110 	.word	0x20000110
 8003728:	200000f8 	.word	0x200000f8

0800372c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fe77 	bl	800442c <vPortFree>
                vPortFree( pxTCB );
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fe74 	bl	800442c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <prvResetNextTaskUnblockTime+0x30>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d104      	bne.n	8003764 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <prvResetNextTaskUnblockTime+0x34>)
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003762:	e005      	b.n	8003770 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <prvResetNextTaskUnblockTime+0x30>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <prvResetNextTaskUnblockTime+0x34>)
 800376e:	6013      	str	r3, [r2, #0]
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	200000c8 	.word	0x200000c8
 8003780:	20000130 	.word	0x20000130

08003784 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <xTaskGetSchedulerState+0x34>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003792:	2301      	movs	r3, #1
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	e008      	b.n	80037aa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <xTaskGetSchedulerState+0x38>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037a0:	2302      	movs	r3, #2
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	e001      	b.n	80037aa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037a6:	2300      	movs	r3, #0
 80037a8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037aa:	687b      	ldr	r3, [r7, #4]
    }
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	2000011c 	.word	0x2000011c
 80037bc:	20000138 	.word	0x20000138

080037c0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80037ca:	4b3c      	ldr	r3, [pc, #240]	; (80038bc <prvAddCurrentTaskToDelayedList+0xfc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037d0:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fc94 	bl	8002104 <uxListRemove>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	2201      	movs	r2, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43da      	mvns	r2, r3
 80037f0:	4b34      	ldr	r3, [pc, #208]	; (80038c4 <prvAddCurrentTaskToDelayedList+0x104>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4013      	ands	r3, r2
 80037f6:	4a33      	ldr	r2, [pc, #204]	; (80038c4 <prvAddCurrentTaskToDelayedList+0x104>)
 80037f8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d124      	bne.n	800384c <prvAddCurrentTaskToDelayedList+0x8c>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d021      	beq.n	800384c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003808:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <prvAddCurrentTaskToDelayedList+0x108>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	4b2c      	ldr	r3, [pc, #176]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	6892      	ldr	r2, [r2, #8]
 800381e:	60da      	str	r2, [r3, #12]
 8003820:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	3204      	adds	r2, #4
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	1d1a      	adds	r2, r3, #4
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	609a      	str	r2, [r3, #8]
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <prvAddCurrentTaskToDelayedList+0x108>)
 800383c:	615a      	str	r2, [r3, #20]
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800384a:	e032      	b.n	80038b2 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003854:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	d20f      	bcs.n	8003884 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2104      	movs	r1, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f003 f8fe 	bl	8006a6c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <prvAddCurrentTaskToDelayedList+0x10c>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f7fe fc08 	bl	8002092 <vListInsert>
}
 8003882:	e016      	b.n	80038b2 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003884:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2104      	movs	r1, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f003 f8ee 	bl	8006a6c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <prvAddCurrentTaskToDelayedList+0x110>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3304      	adds	r3, #4
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f7fe fbf8 	bl	8002092 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <prvAddCurrentTaskToDelayedList+0x114>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d202      	bcs.n	80038b2 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 80038ac:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <prvAddCurrentTaskToDelayedList+0x114>)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6013      	str	r3, [r2, #0]
}
 80038b2:	bf00      	nop
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000114 	.word	0x20000114
 80038c0:	20000038 	.word	0x20000038
 80038c4:	20000118 	.word	0x20000118
 80038c8:	200000fc 	.word	0x200000fc
 80038cc:	200000cc 	.word	0x200000cc
 80038d0:	200000c8 	.word	0x200000c8
 80038d4:	20000130 	.word	0x20000130

080038d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80038e2:	f000 fa43 	bl	8003d6c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <xTimerCreateTimerTask+0x54>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <xTimerCreateTimerTask+0x58>)
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	2302      	movs	r3, #2
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2300      	movs	r3, #0
 80038f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038fc:	490d      	ldr	r1, [pc, #52]	; (8003934 <xTimerCreateTimerTask+0x5c>)
 80038fe:	480e      	ldr	r0, [pc, #56]	; (8003938 <xTimerCreateTimerTask+0x60>)
 8003900:	f7fe ff66 	bl	80027d0 <xTaskCreate>
 8003904:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <xTimerCreateTimerTask+0x48>
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	e7fe      	b.n	800391e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003920:	687b      	ldr	r3, [r7, #4]
    }
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	2000016c 	.word	0x2000016c
 8003930:	20000170 	.word	0x20000170
 8003934:	08006f4c 	.word	0x08006f4c
 8003938:	080039dd 	.word	0x080039dd

0800393c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003948:	e008      	b.n	800395c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4413      	add	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	18d1      	adds	r1, r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f8db 	bl	8003b24 <prvInsertTimerInActiveList>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ea      	bne.n	800394a <prvReloadTimer+0xe>
        }
    }
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <prvProcessExpiredTimer+0x5c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3304      	adds	r3, #4
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fbb5 	bl	8002104 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff ffc5 	bl	800393c <prvReloadTimer>
 80039b2:	e008      	b.n	80039c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	4798      	blx	r3
    }
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000164 	.word	0x20000164

080039dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039e4:	f107 0308 	add.w	r3, r7, #8
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f857 	bl	8003a9c <prvGetNextExpireTime>
 80039ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4619      	mov	r1, r3
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f803 	bl	8003a00 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80039fa:	f000 f8d5 	bl	8003ba8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039fe:	e7f1      	b.n	80039e4 <prvTimerTask+0x8>

08003a00 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003a0a:	f7ff f98f 	bl	8002d2c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f866 	bl	8003ae4 <prvSampleTimeNow>
 8003a18:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d130      	bne.n	8003a82 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <prvProcessTimerOrBlockTask+0x3c>
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d806      	bhi.n	8003a3c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a2e:	f7ff f98b 	bl	8002d48 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ffa1 	bl	800397c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a3a:	e024      	b.n	8003a86 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a42:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <prvProcessTimerOrBlockTask+0x90>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <prvProcessTimerOrBlockTask+0x50>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <prvProcessTimerOrBlockTask+0x52>
 8003a50:	2300      	movs	r3, #0
 8003a52:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <prvProcessTimerOrBlockTask+0x94>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	4619      	mov	r1, r3
 8003a62:	f7fe fe81 	bl	8002768 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a66:	f7ff f96f 	bl	8002d48 <xTaskResumeAll>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <prvProcessTimerOrBlockTask+0x98>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
    }
 8003a80:	e001      	b.n	8003a86 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a82:	f7ff f961 	bl	8002d48 <xTaskResumeAll>
    }
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000168 	.word	0x20000168
 8003a94:	2000016c 	.word	0x2000016c
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <prvGetNextExpireTime+0x44>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <prvGetNextExpireTime+0x16>
 8003aae:	2201      	movs	r2, #1
 8003ab0:	e000      	b.n	8003ab4 <prvGetNextExpireTime+0x18>
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <prvGetNextExpireTime+0x44>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e001      	b.n	8003ad0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000164 	.word	0x20000164

08003ae4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003aec:	f7ff fa2a 	bl	8002f44 <xTaskGetTickCount>
 8003af0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <prvSampleTimeNow+0x3c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d205      	bcs.n	8003b08 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003afc:	f000 f910 	bl	8003d20 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e002      	b.n	8003b0e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <prvSampleTimeNow+0x3c>)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003b14:	68fb      	ldr	r3, [r7, #12]
    }
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000174 	.word	0x20000174

08003b24 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d812      	bhi.n	8003b70 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	1ad2      	subs	r2, r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d302      	bcc.n	8003b5e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e01b      	b.n	8003b96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <prvInsertTimerInActiveList+0x7c>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f7fe fa92 	bl	8002092 <vListInsert>
 8003b6e:	e012      	b.n	8003b96 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d206      	bcs.n	8003b86 <prvInsertTimerInActiveList+0x62>
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e007      	b.n	8003b96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <prvInsertTimerInActiveList+0x80>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4610      	mov	r0, r2
 8003b92:	f7fe fa7e 	bl	8002092 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b96:	697b      	ldr	r3, [r7, #20]
    }
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000168 	.word	0x20000168
 8003ba4:	20000164 	.word	0x20000164

08003ba8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bae:	e0a5      	b.n	8003cfc <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f2c0 80a1 	blt.w	8003cfa <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe fa9b 	bl	8002104 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff87 	bl	8003ae4 <prvSampleTimeNow>
 8003bd6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	f200 808d 	bhi.w	8003cfc <prvProcessReceivedCommands+0x154>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <prvProcessReceivedCommands+0x40>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c0d 	.word	0x08003c0d
 8003bec:	08003c0d 	.word	0x08003c0d
 8003bf0:	08003c75 	.word	0x08003c75
 8003bf4:	08003c89 	.word	0x08003c89
 8003bf8:	08003cd1 	.word	0x08003cd1
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c0d 	.word	0x08003c0d
 8003c04:	08003c75 	.word	0x08003c75
 8003c08:	08003c89 	.word	0x08003c89
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	18d1      	adds	r1, r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	69f8      	ldr	r0, [r7, #28]
 8003c2c:	f7ff ff7a 	bl	8003b24 <prvInsertTimerInActiveList>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d062      	beq.n	8003cfc <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d009      	beq.n	8003c58 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	69f8      	ldr	r0, [r7, #28]
 8003c52:	f7ff fe73 	bl	800393c <prvReloadTimer>
 8003c56:	e008      	b.n	8003c6a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	69f8      	ldr	r0, [r7, #28]
 8003c70:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003c72:	e043      	b.n	8003cfc <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003c86:	e039      	b.n	8003cfc <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <prvProcessReceivedCommands+0x114>
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	e7fe      	b.n	8003cba <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	18d1      	adds	r1, r2, r3
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	69f8      	ldr	r0, [r7, #28]
 8003cca:	f7ff ff2b 	bl	8003b24 <prvInsertTimerInActiveList>
                        break;
 8003cce:	e015      	b.n	8003cfc <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 8003cde:	69f8      	ldr	r0, [r7, #28]
 8003ce0:	f000 fba4 	bl	800442c <vPortFree>
 8003ce4:	e00a      	b.n	8003cfc <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003cf8:	e000      	b.n	8003cfc <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003cfa:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <prvProcessReceivedCommands+0x174>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f107 0108 	add.w	r1, r7, #8
 8003d04:	2200      	movs	r2, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fb36 	bl	8002378 <xQueueReceive>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f47f af4e 	bne.w	8003bb0 <prvProcessReceivedCommands+0x8>
        }
    }
 8003d14:	bf00      	nop
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	2000016c 	.word	0x2000016c

08003d20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d26:	e009      	b.n	8003d3c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d28:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <prvSwitchTimerLists+0x44>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003d32:	f04f 31ff 	mov.w	r1, #4294967295
 8003d36:	6838      	ldr	r0, [r7, #0]
 8003d38:	f7ff fe20 	bl	800397c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <prvSwitchTimerLists+0x44>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <prvSwitchTimerLists+0x44>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <prvSwitchTimerLists+0x48>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <prvSwitchTimerLists+0x44>)
 8003d52:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <prvSwitchTimerLists+0x48>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6013      	str	r3, [r2, #0]
    }
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000164 	.word	0x20000164
 8003d68:	20000168 	.word	0x20000168

08003d6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d70:	f000 f95e 	bl	8004030 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <prvCheckForValidListAndQueue+0x54>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11d      	bne.n	8003db8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d7c:	4811      	ldr	r0, [pc, #68]	; (8003dc4 <prvCheckForValidListAndQueue+0x58>)
 8003d7e:	f7fe f95b 	bl	8002038 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d82:	4811      	ldr	r0, [pc, #68]	; (8003dc8 <prvCheckForValidListAndQueue+0x5c>)
 8003d84:	f7fe f958 	bl	8002038 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <prvCheckForValidListAndQueue+0x60>)
 8003d8a:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <prvCheckForValidListAndQueue+0x58>)
 8003d8c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <prvCheckForValidListAndQueue+0x64>)
 8003d90:	4a0d      	ldr	r2, [pc, #52]	; (8003dc8 <prvCheckForValidListAndQueue+0x5c>)
 8003d92:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d94:	2200      	movs	r2, #0
 8003d96:	210c      	movs	r1, #12
 8003d98:	200a      	movs	r0, #10
 8003d9a:	f7fe fa71 	bl	8002280 <xQueueGenericCreate>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <prvCheckForValidListAndQueue+0x54>)
 8003da2:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <prvCheckForValidListAndQueue+0x54>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <prvCheckForValidListAndQueue+0x54>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <prvCheckForValidListAndQueue+0x68>)
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fc82 	bl	80026bc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003db8:	f000 f968 	bl	800408c <vPortExitCritical>
    }
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	2000016c 	.word	0x2000016c
 8003dc4:	2000013c 	.word	0x2000013c
 8003dc8:	20000150 	.word	0x20000150
 8003dcc:	20000164 	.word	0x20000164
 8003dd0:	20000168 	.word	0x20000168
 8003dd4:	08006f54 	.word	0x08006f54

08003dd8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b04      	subs	r3, #4
 8003de8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003df0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3b04      	subs	r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3b04      	subs	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003e08:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <pxPortInitialiseStack+0x64>)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3b14      	subs	r3, #20
 8003e12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b04      	subs	r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f06f 0202 	mvn.w	r2, #2
 8003e26:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3b20      	subs	r3, #32
 8003e2c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	08003e41 	.word	0x08003e41

08003e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <prvTaskExitError+0x50>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d009      	beq.n	8003e68 <prvTaskExitError+0x28>
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e7fe      	b.n	8003e66 <prvTaskExitError+0x26>
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e7a:	bf00      	nop
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0fc      	beq.n	8003e7c <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e82:	bf00      	nop
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000010 	.word	0x20000010
	...

08003ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <pxCurrentTCBConst2>)
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	6808      	ldr	r0, [r1, #0]
 8003ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eaa:	f380 8809 	msr	PSP, r0
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f380 8811 	msr	BASEPRI, r0
 8003eba:	4770      	bx	lr
 8003ebc:	f3af 8000 	nop.w

08003ec0 <pxCurrentTCBConst2>:
 8003ec0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop

08003ec8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ec8:	4808      	ldr	r0, [pc, #32]	; (8003eec <prvPortStartFirstTask+0x24>)
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	6800      	ldr	r0, [r0, #0]
 8003ece:	f380 8808 	msr	MSP, r0
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f380 8814 	msr	CONTROL, r0
 8003eda:	b662      	cpsie	i
 8003edc:	b661      	cpsie	f
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	df00      	svc	0
 8003ee8:	bf00      	nop
 8003eea:	0000      	.short	0x0000
 8003eec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop

08003ef4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003efa:	4b44      	ldr	r3, [pc, #272]	; (800400c <xPortStartScheduler+0x118>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a44      	ldr	r2, [pc, #272]	; (8004010 <xPortStartScheduler+0x11c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d109      	bne.n	8003f18 <xPortStartScheduler+0x24>
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e7fe      	b.n	8003f16 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f18:	4b3c      	ldr	r3, [pc, #240]	; (800400c <xPortStartScheduler+0x118>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a3d      	ldr	r2, [pc, #244]	; (8004014 <xPortStartScheduler+0x120>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d109      	bne.n	8003f36 <xPortStartScheduler+0x42>
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e7fe      	b.n	8003f34 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f36:	4b38      	ldr	r3, [pc, #224]	; (8004018 <xPortStartScheduler+0x124>)
 8003f38:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <xPortStartScheduler+0x128>)
 8003f5c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f5e:	4b30      	ldr	r3, [pc, #192]	; (8004020 <xPortStartScheduler+0x12c>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f64:	e009      	b.n	8003f7a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <xPortStartScheduler+0x12c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <xPortStartScheduler+0x12c>)
 8003f6e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d0ef      	beq.n	8003f66 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f86:	4b26      	ldr	r3, [pc, #152]	; (8004020 <xPortStartScheduler+0x12c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d009      	beq.n	8003fa6 <xPortStartScheduler+0xb2>
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	e7fe      	b.n	8003fa4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <xPortStartScheduler+0x12c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <xPortStartScheduler+0x12c>)
 8003fae:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <xPortStartScheduler+0x12c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <xPortStartScheduler+0x12c>)
 8003fba:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003fc4:	4b17      	ldr	r3, [pc, #92]	; (8004024 <xPortStartScheduler+0x130>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a16      	ldr	r2, [pc, #88]	; (8004024 <xPortStartScheduler+0x130>)
 8003fca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fce:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003fd0:	4b14      	ldr	r3, [pc, #80]	; (8004024 <xPortStartScheduler+0x130>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a13      	ldr	r2, [pc, #76]	; (8004024 <xPortStartScheduler+0x130>)
 8003fd6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fda:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003fdc:	f000 f8dc 	bl	8004198 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <xPortStartScheduler+0x134>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003fe6:	f000 f8fb 	bl	80041e0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <xPortStartScheduler+0x138>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a0f      	ldr	r2, [pc, #60]	; (800402c <xPortStartScheduler+0x138>)
 8003ff0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ff4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ff6:	f7ff ff67 	bl	8003ec8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ffa:	f7ff f8df 	bl	80031bc <vTaskSwitchContext>
    prvTaskExitError();
 8003ffe:	f7ff ff1f 	bl	8003e40 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	e000ed00 	.word	0xe000ed00
 8004010:	410fc271 	.word	0x410fc271
 8004014:	410fc270 	.word	0x410fc270
 8004018:	e000e400 	.word	0xe000e400
 800401c:	20000178 	.word	0x20000178
 8004020:	2000017c 	.word	0x2000017c
 8004024:	e000ed20 	.word	0xe000ed20
 8004028:	20000010 	.word	0x20000010
 800402c:	e000ef34 	.word	0xe000ef34

08004030 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <vPortEnterCritical+0x54>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3301      	adds	r3, #1
 800404e:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <vPortEnterCritical+0x54>)
 8004050:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004052:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <vPortEnterCritical+0x54>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d10e      	bne.n	8004078 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <vPortEnterCritical+0x58>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <vPortEnterCritical+0x48>
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	e7fe      	b.n	8004076 <vPortEnterCritical+0x46>
    }
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000010 	.word	0x20000010
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004092:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <vPortExitCritical+0x4c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <vPortExitCritical+0x22>
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	e7fe      	b.n	80040ac <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <vPortExitCritical+0x4c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <vPortExitCritical+0x4c>)
 80040b6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <vPortExitCritical+0x4c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <vPortExitCritical+0x3e>
 80040c0:	2300      	movs	r3, #0
 80040c2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000010 	.word	0x20000010
 80040dc:	00000000 	.word	0x00000000

080040e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80040e0:	f3ef 8009 	mrs	r0, PSP
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <pxCurrentTCBConst>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	f01e 0f10 	tst.w	lr, #16
 80040f0:	bf08      	it	eq
 80040f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fa:	6010      	str	r0, [r2, #0]
 80040fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004104:	f380 8811 	msr	BASEPRI, r0
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f7ff f854 	bl	80031bc <vTaskSwitchContext>
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f380 8811 	msr	BASEPRI, r0
 800411c:	bc09      	pop	{r0, r3}
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	6808      	ldr	r0, [r1, #0]
 8004122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004126:	f01e 0f10 	tst.w	lr, #16
 800412a:	bf08      	it	eq
 800412c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004130:	f380 8809 	msr	PSP, r0
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	f3af 8000 	nop.w

08004140 <pxCurrentTCBConst>:
 8004140:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
        __asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004160:	f002 fb28 	bl	80067b4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004164:	f7fe ff10 	bl	8002f88 <xTaskIncrementTick>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800416e:	f002 fb7f 	bl	8006870 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <SysTick_Handler+0x4c>)
 8004174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e001      	b.n	8004180 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800417c:	f002 fb5c 	bl	8006838 <SEGGER_SYSVIEW_RecordExitISR>
 8004180:	2300      	movs	r3, #0
 8004182:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <vPortSetupTimerInterrupt+0x34>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <vPortSetupTimerInterrupt+0x38>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <vPortSetupTimerInterrupt+0x3c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <vPortSetupTimerInterrupt+0x40>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	099b      	lsrs	r3, r3, #6
 80041b4:	4a09      	ldr	r2, [pc, #36]	; (80041dc <vPortSetupTimerInterrupt+0x44>)
 80041b6:	3b01      	subs	r3, #1
 80041b8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <vPortSetupTimerInterrupt+0x34>)
 80041bc:	2207      	movs	r2, #7
 80041be:	601a      	str	r2, [r3, #0]
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000e010 	.word	0xe000e010
 80041d0:	e000e018 	.word	0xe000e018
 80041d4:	20000000 	.word	0x20000000
 80041d8:	10624dd3 	.word	0x10624dd3
 80041dc:	e000e014 	.word	0xe000e014

080041e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80041e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041f0 <vPortEnableVFP+0x10>
 80041e4:	6801      	ldr	r1, [r0, #0]
 80041e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041ea:	6001      	str	r1, [r0, #0]
 80041ec:	4770      	bx	lr
 80041ee:	0000      	.short	0x0000
 80041f0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80041fe:	f3ef 8305 	mrs	r3, IPSR
 8004202:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	d913      	bls.n	8004232 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800420a:	4a16      	ldr	r2, [pc, #88]	; (8004264 <vPortValidateInterruptPriority+0x6c>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <vPortValidateInterruptPriority+0x70>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	7afa      	ldrb	r2, [r7, #11]
 800421a:	429a      	cmp	r2, r3
 800421c:	d209      	bcs.n	8004232 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	e7fe      	b.n	8004230 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <vPortValidateInterruptPriority+0x74>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800423a:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <vPortValidateInterruptPriority+0x78>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d909      	bls.n	8004256 <vPortValidateInterruptPriority+0x5e>
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	e7fe      	b.n	8004254 <vPortValidateInterruptPriority+0x5c>
    }
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	e000e3f0 	.word	0xe000e3f0
 8004268:	20000178 	.word	0x20000178
 800426c:	e000ed0c 	.word	0xe000ed0c
 8004270:	2000017c 	.word	0x2000017c

08004274 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004280:	f7fe fd54 	bl	8002d2c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004284:	4b63      	ldr	r3, [pc, #396]	; (8004414 <pvPortMalloc+0x1a0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800428c:	f000 f92e 	bl	80044ec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <pvPortMalloc+0x1a4>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	f040 80a5 	bne.w	80043e8 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d02c      	beq.n	80042fe <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80042a4:	2208      	movs	r2, #8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d226      	bcs.n	80042fe <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 80042b0:	2208      	movs	r2, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d020      	beq.n	8004304 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f023 0307 	bic.w	r3, r3, #7
 80042c8:	3308      	adds	r3, #8
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d213      	bcs.n	80042f8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	3308      	adds	r3, #8
 80042d8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00f      	beq.n	8004304 <pvPortMalloc+0x90>
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e7fe      	b.n	80042f6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042fc:	e002      	b.n	8004304 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	e000      	b.n	8004306 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004304:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d06d      	beq.n	80043e8 <pvPortMalloc+0x174>
 800430c:	4b43      	ldr	r3, [pc, #268]	; (800441c <pvPortMalloc+0x1a8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d868      	bhi.n	80043e8 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004316:	4b42      	ldr	r3, [pc, #264]	; (8004420 <pvPortMalloc+0x1ac>)
 8004318:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800431a:	4b41      	ldr	r3, [pc, #260]	; (8004420 <pvPortMalloc+0x1ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004320:	e004      	b.n	800432c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d903      	bls.n	800433e <pvPortMalloc+0xca>
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f1      	bne.n	8004322 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800433e:	4b35      	ldr	r3, [pc, #212]	; (8004414 <pvPortMalloc+0x1a0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	429a      	cmp	r2, r3
 8004346:	d04f      	beq.n	80043e8 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2208      	movs	r2, #8
 800434e:	4413      	add	r3, r2
 8004350:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	1ad2      	subs	r2, r2, r3
 8004362:	2308      	movs	r3, #8
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	429a      	cmp	r2, r3
 8004368:	d91e      	bls.n	80043a8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <pvPortMalloc+0x11c>
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	e7fe      	b.n	800438e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1ad2      	subs	r2, r2, r3
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043a2:	69b8      	ldr	r0, [r7, #24]
 80043a4:	f000 f904 	bl	80045b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <pvPortMalloc+0x1a8>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	4a1a      	ldr	r2, [pc, #104]	; (800441c <pvPortMalloc+0x1a8>)
 80043b4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043b6:	4b19      	ldr	r3, [pc, #100]	; (800441c <pvPortMalloc+0x1a8>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <pvPortMalloc+0x1b0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d203      	bcs.n	80043ca <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <pvPortMalloc+0x1a8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a17      	ldr	r2, [pc, #92]	; (8004424 <pvPortMalloc+0x1b0>)
 80043c8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <pvPortMalloc+0x1a4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <pvPortMalloc+0x1b4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3301      	adds	r3, #1
 80043e4:	4a10      	ldr	r2, [pc, #64]	; (8004428 <pvPortMalloc+0x1b4>)
 80043e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80043e8:	f7fe fcae 	bl	8002d48 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <pvPortMalloc+0x196>
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e7fe      	b.n	8004408 <pvPortMalloc+0x194>
    return pvReturn;
 800440a:	69fb      	ldr	r3, [r7, #28]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3728      	adds	r7, #40	; 0x28
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20012d88 	.word	0x20012d88
 8004418:	20012d9c 	.word	0x20012d9c
 800441c:	20012d8c 	.word	0x20012d8c
 8004420:	20012d80 	.word	0x20012d80
 8004424:	20012d90 	.word	0x20012d90
 8004428:	20012d94 	.word	0x20012d94

0800442c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04b      	beq.n	80044d6 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800443e:	2308      	movs	r3, #8
 8004440:	425b      	negs	r3, r3
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4413      	add	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <vPortFree+0xb4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <vPortFree+0x42>
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e7fe      	b.n	800446c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <vPortFree+0x5e>
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	e7fe      	b.n	8004488 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <vPortFree+0xb4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01e      	beq.n	80044d6 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11a      	bne.n	80044d6 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <vPortFree+0xb4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	401a      	ands	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80044b0:	f7fe fc3c 	bl	8002d2c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <vPortFree+0xb8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4413      	add	r3, r2
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <vPortFree+0xb8>)
 80044c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044c2:	6938      	ldr	r0, [r7, #16]
 80044c4:	f000 f874 	bl	80045b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <vPortFree+0xbc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <vPortFree+0xbc>)
 80044d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80044d2:	f7fe fc39 	bl	8002d48 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80044d6:	bf00      	nop
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20012d9c 	.word	0x20012d9c
 80044e4:	20012d8c 	.word	0x20012d8c
 80044e8:	20012d98 	.word	0x20012d98

080044ec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044f2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80044f6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80044f8:	4b27      	ldr	r3, [pc, #156]	; (8004598 <prvHeapInit+0xac>)
 80044fa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00c      	beq.n	8004520 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3307      	adds	r3, #7
 800450a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0307 	bic.w	r3, r3, #7
 8004512:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <prvHeapInit+0xac>)
 800451c:	4413      	add	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <prvHeapInit+0xb0>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800452a:	4b1c      	ldr	r3, [pc, #112]	; (800459c <prvHeapInit+0xb0>)
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004538:	2208      	movs	r2, #8
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0307 	bic.w	r3, r3, #7
 8004546:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <prvHeapInit+0xb4>)
 800454c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800454e:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <prvHeapInit+0xb4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <prvHeapInit+0xb4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	1ad2      	subs	r2, r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <prvHeapInit+0xb4>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <prvHeapInit+0xb8>)
 800457a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <prvHeapInit+0xbc>)
 8004582:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <prvHeapInit+0xc0>)
 8004586:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800458a:	601a      	str	r2, [r3, #0]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000180 	.word	0x20000180
 800459c:	20012d80 	.word	0x20012d80
 80045a0:	20012d88 	.word	0x20012d88
 80045a4:	20012d90 	.word	0x20012d90
 80045a8:	20012d8c 	.word	0x20012d8c
 80045ac:	20012d9c 	.word	0x20012d9c

080045b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045b8:	4b28      	ldr	r3, [pc, #160]	; (800465c <prvInsertBlockIntoFreeList+0xac>)
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e002      	b.n	80045c4 <prvInsertBlockIntoFreeList+0x14>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d8f7      	bhi.n	80045be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d108      	bne.n	80045f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	441a      	add	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	441a      	add	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d118      	bne.n	8004638 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <prvInsertBlockIntoFreeList+0xb0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d00d      	beq.n	800462e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e008      	b.n	8004640 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800462e:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <prvInsertBlockIntoFreeList+0xb0>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e003      	b.n	8004640 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d002      	beq.n	800464e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20012d80 	.word	0x20012d80
 8004660:	20012d88 	.word	0x20012d88

08004664 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004668:	4803      	ldr	r0, [pc, #12]	; (8004678 <_cbSendSystemDesc+0x14>)
 800466a:	f002 f84f 	bl	800670c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800466e:	4803      	ldr	r0, [pc, #12]	; (800467c <_cbSendSystemDesc+0x18>)
 8004670:	f002 f84c 	bl	800670c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004674:	bf00      	nop
 8004676:	bd80      	pop	{r7, pc}
 8004678:	08006f5c 	.word	0x08006f5c
 800467c:	08006fa0 	.word	0x08006fa0

08004680 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <SEGGER_SYSVIEW_Conf+0x20>)
 800468a:	6819      	ldr	r1, [r3, #0]
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <SEGGER_SYSVIEW_Conf+0x24>)
 800468e:	4a06      	ldr	r2, [pc, #24]	; (80046a8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004690:	f001 fbb8 	bl	8005e04 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004694:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004698:	f001 fbf8 	bl	8005e8c <SEGGER_SYSVIEW_SetRAMBase>
}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000000 	.word	0x20000000
 80046a4:	08004665 	.word	0x08004665
 80046a8:	08007040 	.word	0x08007040

080046ac <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	e034      	b.n	8004722 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80046b8:	491e      	ldr	r1, [pc, #120]	; (8004734 <_cbSendTaskList+0x88>)
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	491a      	ldr	r1, [pc, #104]	; (8004734 <_cbSendTaskList+0x88>)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	3304      	adds	r3, #4
 80046d8:	681c      	ldr	r4, [r3, #0]
 80046da:	4916      	ldr	r1, [pc, #88]	; (8004734 <_cbSendTaskList+0x88>)
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	3308      	adds	r3, #8
 80046ea:	681d      	ldr	r5, [r3, #0]
 80046ec:	4911      	ldr	r1, [pc, #68]	; (8004734 <_cbSendTaskList+0x88>)
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	330c      	adds	r3, #12
 80046fc:	681e      	ldr	r6, [r3, #0]
 80046fe:	490d      	ldr	r1, [pc, #52]	; (8004734 <_cbSendTaskList+0x88>)
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	3310      	adds	r3, #16
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	4633      	mov	r3, r6
 8004714:	462a      	mov	r2, r5
 8004716:	4621      	mov	r1, r4
 8004718:	f000 f8b4 	bl	8004884 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3301      	adds	r3, #1
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <_cbSendTaskList+0x8c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	d3c5      	bcc.n	80046b8 <_cbSendTaskList+0xc>
  }
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004734:	20012da0 	.word	0x20012da0
 8004738:	20012e40 	.word	0x20012e40

0800473c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800473c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004742:	f7fe fc0f 	bl	8002f64 <xTaskGetTickCountFromISR>
 8004746:	4603      	mov	r3, r0
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004750:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004754:	462b      	mov	r3, r5
 8004756:	4634      	mov	r4, r6
 8004758:	f04f 0100 	mov.w	r1, #0
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	0162      	lsls	r2, r4, #5
 8004762:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004766:	0159      	lsls	r1, r3, #5
 8004768:	460b      	mov	r3, r1
 800476a:	4614      	mov	r4, r2
 800476c:	1b5b      	subs	r3, r3, r5
 800476e:	eb64 0406 	sbc.w	r4, r4, r6
 8004772:	f04f 0100 	mov.w	r1, #0
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	00a2      	lsls	r2, r4, #2
 800477c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004780:	0099      	lsls	r1, r3, #2
 8004782:	460b      	mov	r3, r1
 8004784:	4614      	mov	r4, r2
 8004786:	195b      	adds	r3, r3, r5
 8004788:	eb44 0406 	adc.w	r4, r4, r6
 800478c:	f04f 0100 	mov.w	r1, #0
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	00e2      	lsls	r2, r4, #3
 8004796:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800479a:	00d9      	lsls	r1, r3, #3
 800479c:	460b      	mov	r3, r1
 800479e:	4614      	mov	r4, r2
 80047a0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80047a4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	4621      	mov	r1, r4
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047b4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80047c2:	2205      	movs	r2, #5
 80047c4:	492b      	ldr	r1, [pc, #172]	; (8004874 <SYSVIEW_AddTask+0xc0>)
 80047c6:	68b8      	ldr	r0, [r7, #8]
 80047c8:	f002 fb5e 	bl	8006e88 <memcmp>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04b      	beq.n	800486a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80047d2:	4b29      	ldr	r3, [pc, #164]	; (8004878 <SYSVIEW_AddTask+0xc4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b07      	cmp	r3, #7
 80047d8:	d903      	bls.n	80047e2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80047da:	4828      	ldr	r0, [pc, #160]	; (800487c <SYSVIEW_AddTask+0xc8>)
 80047dc:	f002 faa6 	bl	8006d2c <SEGGER_SYSVIEW_Warn>
    return;
 80047e0:	e044      	b.n	800486c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80047e2:	4b25      	ldr	r3, [pc, #148]	; (8004878 <SYSVIEW_AddTask+0xc4>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4926      	ldr	r1, [pc, #152]	; (8004880 <SYSVIEW_AddTask+0xcc>)
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <SYSVIEW_AddTask+0xc4>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4921      	ldr	r1, [pc, #132]	; (8004880 <SYSVIEW_AddTask+0xcc>)
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	3304      	adds	r3, #4
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <SYSVIEW_AddTask+0xc4>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	491b      	ldr	r1, [pc, #108]	; (8004880 <SYSVIEW_AddTask+0xcc>)
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	3308      	adds	r3, #8
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <SYSVIEW_AddTask+0xc4>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4916      	ldr	r1, [pc, #88]	; (8004880 <SYSVIEW_AddTask+0xcc>)
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	330c      	adds	r3, #12
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <SYSVIEW_AddTask+0xc4>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4910      	ldr	r1, [pc, #64]	; (8004880 <SYSVIEW_AddTask+0xcc>)
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3310      	adds	r3, #16
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800484e:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <SYSVIEW_AddTask+0xc4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	4a08      	ldr	r2, [pc, #32]	; (8004878 <SYSVIEW_AddTask+0xc4>)
 8004856:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f80e 	bl	8004884 <SYSVIEW_SendTaskInfo>
 8004868:	e000      	b.n	800486c <SYSVIEW_AddTask+0xb8>
    return;
 800486a:	bf00      	nop

}
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	08006fb0 	.word	0x08006fb0
 8004878:	20012e40 	.word	0x20012e40
 800487c:	08006fb8 	.word	0x08006fb8
 8004880:	20012da0 	.word	0x20012da0

08004884 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004892:	f107 0314 	add.w	r3, r7, #20
 8004896:	2214      	movs	r2, #20
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f002 fb0e 	bl	8006ebc <memset>
  TaskInfo.TaskID     = TaskID;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80048b4:	f107 0314 	add.w	r3, r7, #20
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fe2f 	bl	800651c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80048be:	bf00      	nop
 80048c0:	3728      	adds	r7, #40	; 0x28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <__NVIC_EnableIRQ>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	db0b      	blt.n	80048f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	f003 021f 	and.w	r2, r3, #31
 80048e0:	4907      	ldr	r1, [pc, #28]	; (8004900 <__NVIC_EnableIRQ+0x38>)
 80048e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2001      	movs	r0, #1
 80048ea:	fa00 f202 	lsl.w	r2, r0, r2
 80048ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	e000e100 	.word	0xe000e100

08004904 <__NVIC_SetPriority>:
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	6039      	str	r1, [r7, #0]
 800490e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004914:	2b00      	cmp	r3, #0
 8004916:	db0a      	blt.n	800492e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	b2da      	uxtb	r2, r3
 800491c:	490c      	ldr	r1, [pc, #48]	; (8004950 <__NVIC_SetPriority+0x4c>)
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	0112      	lsls	r2, r2, #4
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	440b      	add	r3, r1
 8004928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800492c:	e00a      	b.n	8004944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4908      	ldr	r1, [pc, #32]	; (8004954 <__NVIC_SetPriority+0x50>)
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	3b04      	subs	r3, #4
 800493c:	0112      	lsls	r2, r2, #4
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	440b      	add	r3, r1
 8004942:	761a      	strb	r2, [r3, #24]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	e000e100 	.word	0xe000e100
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800495e:	f002 fa41 	bl	8006de4 <SEGGER_SYSVIEW_IsStarted>
 8004962:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800496a:	f001 fc5b 	bl	8006224 <SEGGER_SYSVIEW_Start>
  }
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <_cbOnUARTRx+0x3c>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d806      	bhi.n	8004998 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800498a:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <_cbOnUARTRx+0x3c>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	b2da      	uxtb	r2, r3
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <_cbOnUARTRx+0x3c>)
 8004994:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004996:	e009      	b.n	80049ac <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004998:	f7ff ffde 	bl	8004958 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <_cbOnUARTRx+0x3c>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4618      	mov	r0, r3
 80049a2:	1dfb      	adds	r3, r7, #7
 80049a4:	2201      	movs	r2, #1
 80049a6:	4619      	mov	r1, r3
 80049a8:	f000 fb98 	bl	80050dc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80049ac:	bf00      	nop
}
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000014 	.word	0x20000014

080049b8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80049c0:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <_cbOnUARTTx+0x5c>)
 80049c2:	785b      	ldrb	r3, [r3, #1]
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d80f      	bhi.n	80049e8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80049c8:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <_cbOnUARTTx+0x5c>)
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	461a      	mov	r2, r3
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <_cbOnUARTTx+0x60>)
 80049d0:	5c9a      	ldrb	r2, [r3, r2]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <_cbOnUARTTx+0x5c>)
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	3301      	adds	r3, #1
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <_cbOnUARTTx+0x5c>)
 80049e0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80049e2:	2301      	movs	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80049e6:	e00f      	b.n	8004a08 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <_cbOnUARTTx+0x5c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fa19 	bl	8004e28 <SEGGER_RTT_ReadUpBufferNoLock>
 80049f6:	4603      	mov	r3, r0
 80049f8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da02      	bge.n	8004a06 <_cbOnUARTTx+0x4e>
    r = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	e000      	b.n	8004a08 <_cbOnUARTTx+0x50>
  }
Done:
 8004a06:	bf00      	nop
  return r;
 8004a08:	68fb      	ldr	r3, [r7, #12]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000014 	.word	0x20000014
 8004a18:	08007048 	.word	0x08007048

08004a1c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004a24:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <SEGGER_UART_init+0x1c>)
 8004a26:	4905      	ldr	r1, [pc, #20]	; (8004a3c <SEGGER_UART_init+0x20>)
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f863 	bl	8004af4 <HIF_UART_Init>
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	08004979 	.word	0x08004979
 8004a3c:	080049b9 	.word	0x080049b9

08004a40 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004a46:	4b1e      	ldr	r3, [pc, #120]	; (8004ac0 <USART2_IRQHandler+0x80>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d011      	beq.n	8004a7a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004a56:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <USART2_IRQHandler+0x84>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 030b 	and.w	r3, r3, #11
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d108      	bne.n	8004a7a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004a68:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <USART2_IRQHandler+0x88>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004a70:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <USART2_IRQHandler+0x88>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	79fa      	ldrb	r2, [r7, #7]
 8004a76:	4610      	mov	r0, r2
 8004a78:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01a      	beq.n	8004aba <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <USART2_IRQHandler+0x8c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <USART2_IRQHandler+0x8c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	1dfa      	adds	r2, r7, #7
 8004a92:	4610      	mov	r0, r2
 8004a94:	4798      	blx	r3
 8004a96:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <USART2_IRQHandler+0x90>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <USART2_IRQHandler+0x90>)
 8004aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e006      	b.n	8004aba <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004aac:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <USART2_IRQHandler+0x80>)
 8004aae:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004ab0:	79fa      	ldrb	r2, [r7, #7]
 8004ab2:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <USART2_IRQHandler+0x84>)
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e000      	b.n	8004aba <USART2_IRQHandler+0x7a>
      return;
 8004ab8:	bf00      	nop
    }
  }
}
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40004400 	.word	0x40004400
 8004ac4:	40004404 	.word	0x40004404
 8004ac8:	20012e44 	.word	0x20012e44
 8004acc:	20012e48 	.word	0x20012e48
 8004ad0:	4000440c 	.word	0x4000440c

08004ad4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a04      	ldr	r2, [pc, #16]	; (8004af0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae2:	6013      	str	r3, [r2, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	4000440c 	.word	0x4000440c

08004af4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004b00:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HIF_UART_Init+0xc8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a2d      	ldr	r2, [pc, #180]	; (8004bbc <HIF_UART_Init+0xc8>)
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <HIF_UART_Init+0xcc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <HIF_UART_Init+0xcc>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004b18:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <HIF_UART_Init+0xd0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b24:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004b2c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004b2e:	4a25      	ldr	r2, [pc, #148]	; (8004bc4 <HIF_UART_Init+0xd0>)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004b34:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HIF_UART_Init+0xd4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b40:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004b48:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004b4a:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <HIF_UART_Init+0xd4>)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004b50:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <HIF_UART_Init+0xd8>)
 8004b52:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004b56:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <HIF_UART_Init+0xdc>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <HIF_UART_Init+0xe0>)
 8004b60:	2280      	movs	r2, #128	; 0x80
 8004b62:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <HIF_UART_Init+0xe4>)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b82:	d302      	bcc.n	8004b8a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004b84:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004b88:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	4a11      	ldr	r2, [pc, #68]	; (8004bdc <HIF_UART_Init+0xe8>)
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004b9a:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <HIF_UART_Init+0xec>)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004ba0:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <HIF_UART_Init+0xf0>)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004ba6:	2106      	movs	r1, #6
 8004ba8:	2026      	movs	r0, #38	; 0x26
 8004baa:	f7ff feab 	bl	8004904 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004bae:	2026      	movs	r0, #38	; 0x26
 8004bb0:	f7ff fe8a 	bl	80048c8 <__NVIC_EnableIRQ>
}
 8004bb4:	bf00      	nop
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40023840 	.word	0x40023840
 8004bc0:	40023830 	.word	0x40023830
 8004bc4:	40020020 	.word	0x40020020
 8004bc8:	40020000 	.word	0x40020000
 8004bcc:	4000440c 	.word	0x4000440c
 8004bd0:	40004410 	.word	0x40004410
 8004bd4:	40004414 	.word	0x40004414
 8004bd8:	0501bd00 	.word	0x0501bd00
 8004bdc:	40004408 	.word	0x40004408
 8004be0:	20012e44 	.word	0x20012e44
 8004be4:	20012e48 	.word	0x20012e48

08004be8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004bee:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <_DoInit+0x98>)
 8004bf0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <_DoInit+0x9c>)
 8004c02:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <_DoInit+0xa0>)
 8004c08:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c10:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <_DoInit+0x9c>)
 8004c28:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <_DoInit+0xa4>)
 8004c2e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2210      	movs	r2, #16
 8004c34:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3307      	adds	r3, #7
 8004c4c:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <_DoInit+0xa8>)
 8004c4e:	6810      	ldr	r0, [r2, #0]
 8004c50:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c52:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a0e      	ldr	r2, [pc, #56]	; (8004c94 <_DoInit+0xac>)
 8004c5a:	6810      	ldr	r0, [r2, #0]
 8004c5c:	6018      	str	r0, [r3, #0]
 8004c5e:	8891      	ldrh	r1, [r2, #4]
 8004c60:	7992      	ldrb	r2, [r2, #6]
 8004c62:	8099      	strh	r1, [r3, #4]
 8004c64:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c66:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c70:	f3bf 8f5f 	dmb	sy
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	200143fc 	.word	0x200143fc
 8004c84:	08007008 	.word	0x08007008
 8004c88:	20012e4c 	.word	0x20012e4c
 8004c8c:	2001324c 	.word	0x2001324c
 8004c90:	08007014 	.word	0x08007014
 8004c94:	08007018 	.word	0x08007018

08004c98 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08a      	sub	sp, #40	; 0x28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d905      	bls.n	8004cc8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc6:	e007      	b.n	8004cd8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	1acb      	subs	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	bf28      	it	cs
 8004ce6:	4613      	movcs	r3, r2
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	bf28      	it	cs
 8004cf2:	4613      	movcs	r3, r2
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	6978      	ldr	r0, [r7, #20]
 8004d06:	f002 f8ce 	bl	8006ea6 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d0a:	6a3a      	ldr	r2, [r7, #32]
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	4413      	add	r3, r2
 8004d10:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	4413      	add	r3, r2
 8004d18:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	4413      	add	r3, r2
 8004d28:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d101      	bne.n	8004d38 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d38:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1b2      	bne.n	8004cae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004d48:	6a3b      	ldr	r3, [r7, #32]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3728      	adds	r7, #40	; 0x28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b088      	sub	sp, #32
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d911      	bls.n	8004d9a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	6938      	ldr	r0, [r7, #16]
 8004d86:	f002 f88e 	bl	8006ea6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d8a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	441a      	add	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004d98:	e01f      	b.n	8004dda <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	6938      	ldr	r0, [r7, #16]
 8004dae:	f002 f87a 	bl	8006ea6 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6938      	ldr	r0, [r7, #16]
 8004dcc:	f002 f86b 	bl	8006ea6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dd0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	60da      	str	r2, [r3, #12]
}
 8004dda:	bf00      	nop
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004de2:	b480      	push	{r7}
 8004de4:	b087      	sub	sp, #28
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d808      	bhi.n	8004e10 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad2      	subs	r2, r2, r3
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	e004      	b.n	8004e1a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e1a:	697b      	ldr	r3, [r7, #20]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08c      	sub	sp, #48	; 0x30
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004e34:	4b3e      	ldr	r3, [pc, #248]	; (8004f30 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004e42:	f7ff fed1 	bl	8004be8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4413      	add	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4a37      	ldr	r2, [pc, #220]	; (8004f30 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004e54:	4413      	add	r3, r2
 8004e56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d92b      	bls.n	8004ecc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bf28      	it	cs
 8004e86:	4613      	movcs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	4413      	add	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	6939      	ldr	r1, [r7, #16]
 8004e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e9a:	f002 f804 	bl	8006ea6 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	4413      	add	r3, r2
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4413      	add	r3, r2
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d101      	bne.n	8004ecc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	bf28      	it	cs
 8004edc:	4613      	movcs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d019      	beq.n	8004f1a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	4413      	add	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	6939      	ldr	r1, [r7, #16]
 8004ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ef6:	f001 ffd6 	bl	8006ea6 <memcpy>
    NumBytesRead += NumBytesRem;
 8004efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4413      	add	r3, r2
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4413      	add	r3, r2
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f24:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3730      	adds	r7, #48	; 0x30
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	200143fc 	.word	0x200143fc

08004f34 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	; 0x30
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f40:	4b3e      	ldr	r3, [pc, #248]	; (800503c <SEGGER_RTT_ReadNoLock+0x108>)
 8004f42:	623b      	str	r3, [r7, #32]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <SEGGER_RTT_ReadNoLock+0x1e>
 8004f4e:	f7ff fe4b 	bl	8004be8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4613      	mov	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	3360      	adds	r3, #96	; 0x60
 8004f5e:	4a37      	ldr	r2, [pc, #220]	; (800503c <SEGGER_RTT_ReadNoLock+0x108>)
 8004f60:	4413      	add	r3, r2
 8004f62:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d92b      	bls.n	8004fd8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	bf28      	it	cs
 8004f92:	4613      	movcs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	4413      	add	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	6939      	ldr	r1, [r7, #16]
 8004fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fa6:	f001 ff7e 	bl	8006ea6 <memcpy>
    NumBytesRead += NumBytesRem;
 8004faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4413      	add	r3, r2
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d101      	bne.n	8004fd8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	bf28      	it	cs
 8004fe8:	4613      	movcs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d019      	beq.n	8005026 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	4413      	add	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	6939      	ldr	r1, [r7, #16]
 8005000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005002:	f001 ff50 	bl	8006ea6 <memcpy>
    NumBytesRead += NumBytesRem;
 8005006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800500e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800501e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4413      	add	r3, r2
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005030:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005034:	4618      	mov	r0, r3
 8005036:	3730      	adds	r7, #48	; 0x30
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	200143fc 	.word	0x200143fc

08005040 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4613      	mov	r3, r2
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	4413      	add	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	3360      	adds	r3, #96	; 0x60
 800505c:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <SEGGER_RTT_WriteDownBufferNoLock+0x98>)
 800505e:	4413      	add	r3, r2
 8005060:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d017      	beq.n	800509a <SEGGER_RTT_WriteDownBufferNoLock+0x5a>
 800506a:	2b01      	cmp	r3, #1
 800506c:	d302      	bcc.n	8005074 <SEGGER_RTT_WriteDownBufferNoLock+0x34>
 800506e:	2b02      	cmp	r3, #2
 8005070:	d023      	beq.n	80050ba <SEGGER_RTT_WriteDownBufferNoLock+0x7a>
 8005072:	e029      	b.n	80050c8 <SEGGER_RTT_WriteDownBufferNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005074:	6978      	ldr	r0, [r7, #20]
 8005076:	f7ff feb4 	bl	8004de2 <_GetAvailWriteSpace>
 800507a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d202      	bcs.n	800508a <SEGGER_RTT_WriteDownBufferNoLock+0x4a>
      Status = 0u;
 8005084:	2300      	movs	r3, #0
 8005086:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005088:	e021      	b.n	80050ce <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
      Status = NumBytes;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	69b9      	ldr	r1, [r7, #24]
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f7ff fe5d 	bl	8004d52 <_WriteNoCheck>
    break;
 8005098:	e019      	b.n	80050ce <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f7ff fea1 	bl	8004de2 <_GetAvailWriteSpace>
 80050a0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4293      	cmp	r3, r2
 80050a8:	bf28      	it	cs
 80050aa:	4613      	movcs	r3, r2
 80050ac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	6978      	ldr	r0, [r7, #20]
 80050b4:	f7ff fe4d 	bl	8004d52 <_WriteNoCheck>
    break;
 80050b8:	e009      	b.n	80050ce <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	69b9      	ldr	r1, [r7, #24]
 80050be:	6978      	ldr	r0, [r7, #20]
 80050c0:	f7ff fdea 	bl	8004c98 <_WriteBlocking>
 80050c4:	61f8      	str	r0, [r7, #28]
    break;
 80050c6:	e002      	b.n	80050ce <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  default:
    Status = 0u;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61fb      	str	r3, [r7, #28]
    break;
 80050cc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80050ce:	69fb      	ldr	r3, [r7, #28]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	200143fc 	.word	0x200143fc

080050dc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80050e8:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <SEGGER_RTT_WriteDownBuffer+0x1e>
 80050f6:	f7ff fd77 	bl	8004be8 <_DoInit>
  SEGGER_RTT_LOCK();
 80050fa:	f3ef 8311 	mrs	r3, BASEPRI
 80050fe:	f04f 0120 	mov.w	r1, #32
 8005102:	f381 8811 	msr	BASEPRI, r1
 8005106:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff ff97 	bl	8005040 <SEGGER_RTT_WriteDownBufferNoLock>
 8005112:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800511a:	697b      	ldr	r3, [r7, #20]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	200143fc 	.word	0x200143fc

08005128 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005136:	4b3d      	ldr	r3, [pc, #244]	; (800522c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005144:	f7ff fd50 	bl	8004be8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005148:	f3ef 8311 	mrs	r3, BASEPRI
 800514c:	f04f 0120 	mov.w	r1, #32
 8005150:	f381 8811 	msr	BASEPRI, r1
 8005154:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005156:	4b35      	ldr	r3, [pc, #212]	; (800522c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005158:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800515e:	6939      	ldr	r1, [r7, #16]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	4613      	mov	r3, r2
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4413      	add	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	440b      	add	r3, r1
 800516e:	3304      	adds	r3, #4
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	3301      	adds	r3, #1
 800517a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	429a      	cmp	r2, r3
 8005184:	dbeb      	blt.n	800515e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005186:	e000      	b.n	800518a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005188:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	429a      	cmp	r2, r3
 8005192:	da3f      	bge.n	8005214 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005194:	6939      	ldr	r1, [r7, #16]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	440b      	add	r3, r1
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80051a8:	6939      	ldr	r1, [r7, #16]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	4613      	mov	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	440b      	add	r3, r1
 80051b8:	3304      	adds	r3, #4
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80051be:	6939      	ldr	r1, [r7, #16]
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	4613      	mov	r3, r2
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	3320      	adds	r3, #32
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80051d2:	6939      	ldr	r1, [r7, #16]
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	4613      	mov	r3, r2
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4413      	add	r3, r2
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	440b      	add	r3, r1
 80051e0:	3328      	adds	r3, #40	; 0x28
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051e6:	6939      	ldr	r1, [r7, #16]
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	440b      	add	r3, r1
 80051f4:	3324      	adds	r3, #36	; 0x24
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80051fa:	6939      	ldr	r1, [r7, #16]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	4613      	mov	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4413      	add	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	440b      	add	r3, r1
 8005208:	332c      	adds	r3, #44	; 0x2c
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800520e:	f3bf 8f5f 	dmb	sy
 8005212:	e002      	b.n	800521a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
 8005218:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005220:	69fb      	ldr	r3, [r7, #28]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	200143fc 	.word	0x200143fc

08005230 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800523e:	4b33      	ldr	r3, [pc, #204]	; (800530c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800524c:	f7ff fccc 	bl	8004be8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005250:	4b2e      	ldr	r3, [pc, #184]	; (800530c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005252:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	461a      	mov	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4293      	cmp	r3, r2
 800525e:	d24d      	bcs.n	80052fc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005260:	f3ef 8311 	mrs	r3, BASEPRI
 8005264:	f04f 0120 	mov.w	r1, #32
 8005268:	f381 8811 	msr	BASEPRI, r1
 800526c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d031      	beq.n	80052d8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005274:	6979      	ldr	r1, [r7, #20]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4613      	mov	r3, r2
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	4413      	add	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	440b      	add	r3, r1
 8005282:	3360      	adds	r3, #96	; 0x60
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005288:	6979      	ldr	r1, [r7, #20]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	4413      	add	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	440b      	add	r3, r1
 8005296:	3364      	adds	r3, #100	; 0x64
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800529c:	6979      	ldr	r1, [r7, #20]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4613      	mov	r3, r2
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	4413      	add	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	440b      	add	r3, r1
 80052aa:	3368      	adds	r3, #104	; 0x68
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4613      	mov	r3, r2
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	4413      	add	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	440b      	add	r3, r1
 80052be:	3370      	adds	r3, #112	; 0x70
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80052c4:	6979      	ldr	r1, [r7, #20]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4613      	mov	r3, r2
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	4413      	add	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	440b      	add	r3, r1
 80052d2:	336c      	adds	r3, #108	; 0x6c
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80052d8:	6979      	ldr	r1, [r7, #20]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4613      	mov	r3, r2
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	4413      	add	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	440b      	add	r3, r1
 80052e6:	3374      	adds	r3, #116	; 0x74
 80052e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ea:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052ec:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	e002      	b.n	8005302 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80052fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005300:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005302:	69fb      	ldr	r3, [r7, #28]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	200143fc 	.word	0x200143fc

08005310 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005320:	e002      	b.n	8005328 <_EncodeStr+0x18>
    Len++;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3301      	adds	r3, #1
 8005326:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f6      	bne.n	8005322 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d901      	bls.n	8005340 <_EncodeStr+0x30>
    Len = Limit;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2bfe      	cmp	r3, #254	; 0xfe
 8005344:	d806      	bhi.n	8005354 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	60fa      	str	r2, [r7, #12]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e011      	b.n	8005378 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	60fa      	str	r2, [r7, #12]
 800535a:	22ff      	movs	r2, #255	; 0xff
 800535c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	60fa      	str	r2, [r7, #12]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	0a19      	lsrs	r1, r3, #8
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	60fa      	str	r2, [r7, #12]
 8005374:	b2ca      	uxtb	r2, r1
 8005376:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800537c:	e00a      	b.n	8005394 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	1c53      	adds	r3, r2, #1
 8005382:	60bb      	str	r3, [r7, #8]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1c59      	adds	r1, r3, #1
 8005388:	60f9      	str	r1, [r7, #12]
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	701a      	strb	r2, [r3, #0]
    n++;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	3301      	adds	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	429a      	cmp	r2, r3
 800539a:	d3f0      	bcc.n	800537e <_EncodeStr+0x6e>
  }
  return pPayload;
 800539c:	68fb      	ldr	r3, [r7, #12]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053ca:	4b33      	ldr	r3, [pc, #204]	; (8005498 <_HandleIncomingPacket+0xd4>)
 80053cc:	7e1b      	ldrb	r3, [r3, #24]
 80053ce:	4618      	mov	r0, r3
 80053d0:	1cfb      	adds	r3, r7, #3
 80053d2:	2201      	movs	r2, #1
 80053d4:	4619      	mov	r1, r3
 80053d6:	f7ff fdad 	bl	8004f34 <SEGGER_RTT_ReadNoLock>
 80053da:	4603      	mov	r3, r0
 80053dc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	dd4d      	ble.n	8005480 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d022      	beq.n	8005430 <_HandleIncomingPacket+0x6c>
 80053ea:	2b05      	cmp	r3, #5
 80053ec:	dc0b      	bgt.n	8005406 <_HandleIncomingPacket+0x42>
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d015      	beq.n	800541e <_HandleIncomingPacket+0x5a>
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	dc02      	bgt.n	80053fc <_HandleIncomingPacket+0x38>
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d00e      	beq.n	8005418 <_HandleIncomingPacket+0x54>
 80053fa:	e034      	b.n	8005466 <_HandleIncomingPacket+0xa2>
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d011      	beq.n	8005424 <_HandleIncomingPacket+0x60>
 8005400:	2b04      	cmp	r3, #4
 8005402:	d012      	beq.n	800542a <_HandleIncomingPacket+0x66>
 8005404:	e02f      	b.n	8005466 <_HandleIncomingPacket+0xa2>
 8005406:	2b07      	cmp	r3, #7
 8005408:	d018      	beq.n	800543c <_HandleIncomingPacket+0x78>
 800540a:	2b07      	cmp	r3, #7
 800540c:	db13      	blt.n	8005436 <_HandleIncomingPacket+0x72>
 800540e:	2b7f      	cmp	r3, #127	; 0x7f
 8005410:	d038      	beq.n	8005484 <_HandleIncomingPacket+0xc0>
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d015      	beq.n	8005442 <_HandleIncomingPacket+0x7e>
 8005416:	e026      	b.n	8005466 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005418:	f000 ff04 	bl	8006224 <SEGGER_SYSVIEW_Start>
      break;
 800541c:	e037      	b.n	800548e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800541e:	f000 ffbd 	bl	800639c <SEGGER_SYSVIEW_Stop>
      break;
 8005422:	e034      	b.n	800548e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005424:	f001 f996 	bl	8006754 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005428:	e031      	b.n	800548e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800542a:	f001 f95b 	bl	80066e4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800542e:	e02e      	b.n	800548e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005430:	f000 ffda 	bl	80063e8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005434:	e02b      	b.n	800548e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005436:	f001 fc27 	bl	8006c88 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800543a:	e028      	b.n	800548e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800543c:	f001 fc06 	bl	8006c4c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005440:	e025      	b.n	800548e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <_HandleIncomingPacket+0xd4>)
 8005444:	7e1b      	ldrb	r3, [r3, #24]
 8005446:	4618      	mov	r0, r3
 8005448:	1cfb      	adds	r3, r7, #3
 800544a:	2201      	movs	r2, #1
 800544c:	4619      	mov	r1, r3
 800544e:	f7ff fd71 	bl	8004f34 <SEGGER_RTT_ReadNoLock>
 8005452:	4603      	mov	r3, r0
 8005454:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dd15      	ble.n	8005488 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	4618      	mov	r0, r3
 8005460:	f001 fb74 	bl	8006b4c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005464:	e010      	b.n	8005488 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	b25b      	sxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	da0e      	bge.n	800548c <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <_HandleIncomingPacket+0xd4>)
 8005470:	7e1b      	ldrb	r3, [r3, #24]
 8005472:	4618      	mov	r0, r3
 8005474:	1cfb      	adds	r3, r7, #3
 8005476:	2201      	movs	r2, #1
 8005478:	4619      	mov	r1, r3
 800547a:	f7ff fd5b 	bl	8004f34 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800547e:	e005      	b.n	800548c <_HandleIncomingPacket+0xc8>
    }
  }
 8005480:	bf00      	nop
 8005482:	e004      	b.n	800548e <_HandleIncomingPacket+0xca>
      break;
 8005484:	bf00      	nop
 8005486:	e002      	b.n	800548e <_HandleIncomingPacket+0xca>
      break;
 8005488:	bf00      	nop
 800548a:	e000      	b.n	800548e <_HandleIncomingPacket+0xca>
      break;
 800548c:	bf00      	nop
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20014264 	.word	0x20014264

0800549c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	; 0x30
 80054a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054a2:	2301      	movs	r3, #1
 80054a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	3301      	adds	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b0:	4b32      	ldr	r3, [pc, #200]	; (800557c <_TrySendOverflowPacket+0xe0>)
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b6:	e00b      	b.n	80054d0 <_TrySendOverflowPacket+0x34>
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	09db      	lsrs	r3, r3, #7
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	2b7f      	cmp	r3, #127	; 0x7f
 80054d4:	d8f0      	bhi.n	80054b8 <_TrySendOverflowPacket+0x1c>
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054e6:	4b26      	ldr	r3, [pc, #152]	; (8005580 <_TrySendOverflowPacket+0xe4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054ec:	4b23      	ldr	r3, [pc, #140]	; (800557c <_TrySendOverflowPacket+0xe0>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	623b      	str	r3, [r7, #32]
 80054fe:	e00b      	b.n	8005518 <_TrySendOverflowPacket+0x7c>
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	1c59      	adds	r1, r3, #1
 8005508:	6279      	str	r1, [r7, #36]	; 0x24
 800550a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	09db      	lsrs	r3, r3, #7
 8005516:	623b      	str	r3, [r7, #32]
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b7f      	cmp	r3, #127	; 0x7f
 800551c:	d8f0      	bhi.n	8005500 <_TrySendOverflowPacket+0x64>
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	627a      	str	r2, [r7, #36]	; 0x24
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <_TrySendOverflowPacket+0xe0>)
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	4618      	mov	r0, r3
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	461a      	mov	r2, r3
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	4619      	mov	r1, r3
 8005540:	f7fa fe66 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005544:	4603      	mov	r3, r0
 8005546:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005548:	f7ff fac4 	bl	8004ad4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <_TrySendOverflowPacket+0xe0>)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <_TrySendOverflowPacket+0xe0>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <_TrySendOverflowPacket+0xe0>)
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e004      	b.n	8005570 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <_TrySendOverflowPacket+0xe0>)
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	3301      	adds	r3, #1
 800556c:	4a03      	ldr	r2, [pc, #12]	; (800557c <_TrySendOverflowPacket+0xe0>)
 800556e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005570:	693b      	ldr	r3, [r7, #16]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3730      	adds	r7, #48	; 0x30
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20014264 	.word	0x20014264
 8005580:	e0001004 	.word	0xe0001004

08005584 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005590:	4b6d      	ldr	r3, [pc, #436]	; (8005748 <_SendPacket+0x1c4>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d010      	beq.n	80055ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005598:	4b6b      	ldr	r3, [pc, #428]	; (8005748 <_SendPacket+0x1c4>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80a5 	beq.w	80056ec <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055a2:	4b69      	ldr	r3, [pc, #420]	; (8005748 <_SendPacket+0x1c4>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d109      	bne.n	80055be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055aa:	f7ff ff77 	bl	800549c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055ae:	4b66      	ldr	r3, [pc, #408]	; (8005748 <_SendPacket+0x1c4>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	f040 809c 	bne.w	80056f0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80055b8:	e001      	b.n	80055be <_SendPacket+0x3a>
    goto Send;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <_SendPacket+0x3c>
Send:
 80055be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b1f      	cmp	r3, #31
 80055c4:	d809      	bhi.n	80055da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055c6:	4b60      	ldr	r3, [pc, #384]	; (8005748 <_SendPacket+0x1c4>)
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f040 808d 	bne.w	80056f4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b17      	cmp	r3, #23
 80055de:	d807      	bhi.n	80055f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e03d      	b.n	800566c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	2b7f      	cmp	r3, #127	; 0x7f
 80055fc:	d912      	bls.n	8005624 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	09da      	lsrs	r2, r3, #7
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3b01      	subs	r3, #1
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	3a01      	subs	r2, #1
 8005616:	60fa      	str	r2, [r7, #12]
 8005618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	e006      	b.n	8005632 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3b01      	subs	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b7f      	cmp	r3, #127	; 0x7f
 8005636:	d912      	bls.n	800565e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	09da      	lsrs	r2, r3, #7
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3b01      	subs	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	3a01      	subs	r2, #1
 8005650:	60fa      	str	r2, [r7, #12]
 8005652:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005656:	b2da      	uxtb	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e006      	b.n	800566c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3b01      	subs	r3, #1
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800566c:	4b37      	ldr	r3, [pc, #220]	; (800574c <_SendPacket+0x1c8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005672:	4b35      	ldr	r3, [pc, #212]	; (8005748 <_SendPacket+0x1c4>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	623b      	str	r3, [r7, #32]
 8005684:	e00b      	b.n	800569e <_SendPacket+0x11a>
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	6279      	str	r1, [r7, #36]	; 0x24
 8005690:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	09db      	lsrs	r3, r3, #7
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	2b7f      	cmp	r3, #127	; 0x7f
 80056a2:	d8f0      	bhi.n	8005686 <_SendPacket+0x102>
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	627a      	str	r2, [r7, #36]	; 0x24
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80056b4:	4b24      	ldr	r3, [pc, #144]	; (8005748 <_SendPacket+0x1c4>)
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	4618      	mov	r0, r3
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	f7fa fda4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056c8:	4603      	mov	r3, r0
 80056ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80056cc:	f7ff fa02 	bl	8004ad4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80056d6:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <_SendPacket+0x1c4>)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	60d3      	str	r3, [r2, #12]
 80056dc:	e00b      	b.n	80056f6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80056de:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <_SendPacket+0x1c4>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	3301      	adds	r3, #1
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <_SendPacket+0x1c4>)
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e004      	b.n	80056f6 <_SendPacket+0x172>
    goto SendDone;
 80056ec:	bf00      	nop
 80056ee:	e002      	b.n	80056f6 <_SendPacket+0x172>
      goto SendDone;
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <_SendPacket+0x172>
      goto SendDone;
 80056f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <_SendPacket+0x1c4>)
 80056f8:	7e1b      	ldrb	r3, [r3, #24]
 80056fa:	4619      	mov	r1, r3
 80056fc:	4a14      	ldr	r2, [pc, #80]	; (8005750 <_SendPacket+0x1cc>)
 80056fe:	460b      	mov	r3, r1
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	440b      	add	r3, r1
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	336c      	adds	r3, #108	; 0x6c
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <_SendPacket+0x1c4>)
 800570e:	7e1b      	ldrb	r3, [r3, #24]
 8005710:	4618      	mov	r0, r3
 8005712:	490f      	ldr	r1, [pc, #60]	; (8005750 <_SendPacket+0x1cc>)
 8005714:	4603      	mov	r3, r0
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	4403      	add	r3, r0
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	440b      	add	r3, r1
 800571e:	3370      	adds	r3, #112	; 0x70
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d00b      	beq.n	800573e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <_SendPacket+0x1c4>)
 8005728:	789b      	ldrb	r3, [r3, #2]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <_SendPacket+0x1c4>)
 8005730:	2201      	movs	r2, #1
 8005732:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005734:	f7ff fe46 	bl	80053c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005738:	4b03      	ldr	r3, [pc, #12]	; (8005748 <_SendPacket+0x1c4>)
 800573a:	2200      	movs	r2, #0
 800573c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800573e:	bf00      	nop
 8005740:	3728      	adds	r7, #40	; 0x28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20014264 	.word	0x20014264
 800574c:	e0001004 	.word	0xe0001004
 8005750:	200143fc 	.word	0x200143fc

08005754 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	3301      	adds	r3, #1
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d80a      	bhi.n	8005784 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	1c59      	adds	r1, r3, #1
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6051      	str	r1, [r2, #4]
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b80      	cmp	r3, #128	; 0x80
 800578a:	d15a      	bne.n	8005842 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	623b      	str	r3, [r7, #32]
 80057ac:	e00b      	b.n	80057c6 <_StoreChar+0x72>
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	1c59      	adds	r1, r3, #1
 80057b6:	6279      	str	r1, [r7, #36]	; 0x24
 80057b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	09db      	lsrs	r3, r3, #7
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	2b7f      	cmp	r3, #127	; 0x7f
 80057ca:	d8f0      	bhi.n	80057ae <_StoreChar+0x5a>
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	627a      	str	r2, [r7, #36]	; 0x24
 80057d2:	6a3a      	ldr	r2, [r7, #32]
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	61fb      	str	r3, [r7, #28]
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e00b      	b.n	80057fe <_StoreChar+0xaa>
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	61f9      	str	r1, [r7, #28]
 80057f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	09db      	lsrs	r3, r3, #7
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b7f      	cmp	r3, #127	; 0x7f
 8005802:	d8f0      	bhi.n	80057e6 <_StoreChar+0x92>
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	61fa      	str	r2, [r7, #28]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	221a      	movs	r2, #26
 800581a:	6939      	ldr	r1, [r7, #16]
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff feb1 	bl	8005584 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fdbf 	bl	80053aa <_PreparePacket>
 800582c:	4602      	mov	r2, r0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	611a      	str	r2, [r3, #16]
  }
}
 8005842:	bf00      	nop
 8005844:	3728      	adds	r7, #40	; 0x28
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	; 0x28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800585e:	2301      	movs	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005862:	2301      	movs	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005866:	e007      	b.n	8005878 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005868:	6a3a      	ldr	r2, [r7, #32]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	623b      	str	r3, [r7, #32]
    Width++;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3301      	adds	r3, #1
 8005876:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005878:	6a3a      	ldr	r2, [r7, #32]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d2f3      	bcs.n	8005868 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	429a      	cmp	r2, r3
 8005886:	d901      	bls.n	800588c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d11f      	bne.n	80058d6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01c      	beq.n	80058d6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800589c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <_PrintUnsigned+0x66>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <_PrintUnsigned+0x66>
        c = '0';
 80058ac:	2330      	movs	r3, #48	; 0x30
 80058ae:	76fb      	strb	r3, [r7, #27]
 80058b0:	e001      	b.n	80058b6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80058b2:	2320      	movs	r3, #32
 80058b4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058b6:	e007      	b.n	80058c8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	3b01      	subs	r3, #1
 80058bc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80058be:	7efb      	ldrb	r3, [r7, #27]
 80058c0:	4619      	mov	r1, r3
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff ff46 	bl	8005754 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <_PrintUnsigned+0x8a>
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3f0      	bcc.n	80058b8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d903      	bls.n	80058e4 <_PrintUnsigned+0x98>
      NumDigits--;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	3b01      	subs	r3, #1
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	e009      	b.n	80058f8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d200      	bcs.n	80058f8 <_PrintUnsigned+0xac>
        break;
 80058f6:	e005      	b.n	8005904 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	fb02 f303 	mul.w	r3, r2, r3
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005902:	e7e8      	b.n	80058d6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	fbb2 f3f3 	udiv	r3, r2, r3
 800590c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <_PrintUnsigned+0x128>)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	4619      	mov	r1, r3
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff ff14 	bl	8005754 <_StoreChar>
    Digit /= Base;
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e3      	bne.n	8005904 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d011      	beq.n	800596a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00e      	beq.n	800596a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800594c:	e006      	b.n	800595c <_PrintUnsigned+0x110>
        FieldWidth--;
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	3b01      	subs	r3, #1
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005954:	2120      	movs	r1, #32
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff fefc 	bl	8005754 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <_PrintUnsigned+0x11e>
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	429a      	cmp	r2, r3
 8005968:	d3f1      	bcc.n	800594e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800596a:	bf00      	nop
 800596c:	3728      	adds	r7, #40	; 0x28
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	08007058 	.word	0x08007058

08005978 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	bfb8      	it	lt
 800598c:	425b      	neglt	r3, r3
 800598e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005990:	2301      	movs	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005994:	e007      	b.n	80059a6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	fb92 f3f3 	sdiv	r3, r2, r3
 800599e:	613b      	str	r3, [r7, #16]
    Width++;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3301      	adds	r3, #1
 80059a4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	daf3      	bge.n	8005996 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d901      	bls.n	80059ba <_PrintInt+0x42>
    Width = NumDigits;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <_PrintInt+0x5e>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	db04      	blt.n	80059d0 <_PrintInt+0x58>
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <_PrintInt+0x5e>
    FieldWidth--;
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <_PrintInt+0x6e>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d016      	beq.n	8005a14 <_PrintInt+0x9c>
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d111      	bne.n	8005a14 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00e      	beq.n	8005a14 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059f6:	e006      	b.n	8005a06 <_PrintInt+0x8e>
        FieldWidth--;
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80059fe:	2120      	movs	r1, #32
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f7ff fea7 	bl	8005754 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <_PrintInt+0x9c>
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d3f1      	bcc.n	80059f8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da07      	bge.n	8005a2a <_PrintInt+0xb2>
    v = -v;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	425b      	negs	r3, r3
 8005a1e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005a20:	212d      	movs	r1, #45	; 0x2d
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff fe96 	bl	8005754 <_StoreChar>
 8005a28:	e008      	b.n	8005a3c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005a34:	212b      	movs	r1, #43	; 0x2b
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff fe8c 	bl	8005754 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d019      	beq.n	8005a7a <_PrintInt+0x102>
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d114      	bne.n	8005a7a <_PrintInt+0x102>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d111      	bne.n	8005a7a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00e      	beq.n	8005a7a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a5c:	e006      	b.n	8005a6c <_PrintInt+0xf4>
        FieldWidth--;
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005a64:	2130      	movs	r1, #48	; 0x30
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff fe74 	bl	8005754 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <_PrintInt+0x102>
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d3f1      	bcc.n	8005a5e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7ff fedf 	bl	800584c <_PrintUnsigned>
}
 8005a8e:	bf00      	nop
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b098      	sub	sp, #96	; 0x60
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa8:	f04f 0120 	mov.w	r1, #32
 8005aac:	f381 8811 	msr	BASEPRI, r1
 8005ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab2:	48ac      	ldr	r0, [pc, #688]	; (8005d64 <_VPrintTarget+0x2cc>)
 8005ab4:	f7ff fc79 	bl	80053aa <_PreparePacket>
 8005ab8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005aba:	4baa      	ldr	r3, [pc, #680]	; (8005d64 <_VPrintTarget+0x2cc>)
 8005abc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005ade:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 8140 	beq.w	8005d68 <_VPrintTarget+0x2d0>
      break;
    }
    if (c == '%') {
 8005ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aec:	2b25      	cmp	r3, #37	; 0x25
 8005aee:	f040 812a 	bne.w	8005d46 <_VPrintTarget+0x2ae>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005af2:	2300      	movs	r3, #0
 8005af4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005af6:	2301      	movs	r3, #1
 8005af8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005b02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b06:	3b23      	subs	r3, #35	; 0x23
 8005b08:	2b0d      	cmp	r3, #13
 8005b0a:	d83f      	bhi.n	8005b8c <_VPrintTarget+0xf4>
 8005b0c:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <_VPrintTarget+0x7c>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005b8d 	.word	0x08005b8d
 8005b1c:	08005b8d 	.word	0x08005b8d
 8005b20:	08005b8d 	.word	0x08005b8d
 8005b24:	08005b8d 	.word	0x08005b8d
 8005b28:	08005b8d 	.word	0x08005b8d
 8005b2c:	08005b8d 	.word	0x08005b8d
 8005b30:	08005b8d 	.word	0x08005b8d
 8005b34:	08005b6d 	.word	0x08005b6d
 8005b38:	08005b8d 	.word	0x08005b8d
 8005b3c:	08005b4d 	.word	0x08005b4d
 8005b40:	08005b8d 	.word	0x08005b8d
 8005b44:	08005b8d 	.word	0x08005b8d
 8005b48:	08005b5d 	.word	0x08005b5d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e01a      	b.n	8005b92 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5e:	f043 0302 	orr.w	r3, r3, #2
 8005b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e012      	b.n	8005b92 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b6e:	f043 0304 	orr.w	r3, r3, #4
 8005b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	e00a      	b.n	8005b92 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7e:	f043 0308 	orr.w	r3, r3, #8
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	e002      	b.n	8005b92 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b90:	bf00      	nop
        }
      } while (v);
 8005b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1b0      	bne.n	8005afa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005ba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ba8:	2b2f      	cmp	r3, #47	; 0x2f
 8005baa:	d912      	bls.n	8005bd2 <_VPrintTarget+0x13a>
 8005bac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bb0:	2b39      	cmp	r3, #57	; 0x39
 8005bb2:	d80e      	bhi.n	8005bd2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bca:	4413      	add	r3, r2
 8005bcc:	3b30      	subs	r3, #48	; 0x30
 8005bce:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005bd0:	e7e4      	b.n	8005b9c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005bde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005be2:	2b2e      	cmp	r3, #46	; 0x2e
 8005be4:	d11d      	bne.n	8005c22 <_VPrintTarget+0x18a>
        sFormat++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bf8:	2b2f      	cmp	r3, #47	; 0x2f
 8005bfa:	d912      	bls.n	8005c22 <_VPrintTarget+0x18a>
 8005bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c00:	2b39      	cmp	r3, #57	; 0x39
 8005c02:	d80e      	bhi.n	8005c22 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	461a      	mov	r2, r3
 8005c16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c1a:	4413      	add	r3, r2
 8005c1c:	3b30      	subs	r3, #48	; 0x30
 8005c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005c20:	e7e4      	b.n	8005bec <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005c2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c2e:	2b6c      	cmp	r3, #108	; 0x6c
 8005c30:	d003      	beq.n	8005c3a <_VPrintTarget+0x1a2>
 8005c32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c36:	2b68      	cmp	r3, #104	; 0x68
 8005c38:	d107      	bne.n	8005c4a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3301      	adds	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005c48:	e7ef      	b.n	8005c2a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c4e:	2b64      	cmp	r3, #100	; 0x64
 8005c50:	d022      	beq.n	8005c98 <_VPrintTarget+0x200>
 8005c52:	2b64      	cmp	r3, #100	; 0x64
 8005c54:	dc06      	bgt.n	8005c64 <_VPrintTarget+0x1cc>
 8005c56:	2b58      	cmp	r3, #88	; 0x58
 8005c58:	d044      	beq.n	8005ce4 <_VPrintTarget+0x24c>
 8005c5a:	2b63      	cmp	r3, #99	; 0x63
 8005c5c:	d009      	beq.n	8005c72 <_VPrintTarget+0x1da>
 8005c5e:	2b25      	cmp	r3, #37	; 0x25
 8005c60:	d066      	beq.n	8005d30 <_VPrintTarget+0x298>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8005c62:	e06c      	b.n	8005d3e <_VPrintTarget+0x2a6>
      switch (c) {
 8005c64:	2b75      	cmp	r3, #117	; 0x75
 8005c66:	d02a      	beq.n	8005cbe <_VPrintTarget+0x226>
 8005c68:	2b78      	cmp	r3, #120	; 0x78
 8005c6a:	d03b      	beq.n	8005ce4 <_VPrintTarget+0x24c>
 8005c6c:	2b70      	cmp	r3, #112	; 0x70
 8005c6e:	d04c      	beq.n	8005d0a <_VPrintTarget+0x272>
        break;
 8005c70:	e065      	b.n	8005d3e <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	1d19      	adds	r1, r3, #4
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6011      	str	r1, [r2, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005c86:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005c8a:	f107 0314 	add.w	r3, r7, #20
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fd5f 	bl	8005754 <_StoreChar>
        break;
 8005c96:	e052      	b.n	8005d3e <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	1d19      	adds	r1, r3, #4
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6011      	str	r1, [r2, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005ca6:	f107 0014 	add.w	r0, r7, #20
 8005caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb4:	220a      	movs	r2, #10
 8005cb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cb8:	f7ff fe5e 	bl	8005978 <_PrintInt>
        break;
 8005cbc:	e03f      	b.n	8005d3e <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	1d19      	adds	r1, r3, #4
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6011      	str	r1, [r2, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005ccc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cce:	f107 0014 	add.w	r0, r7, #20
 8005cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cdc:	220a      	movs	r2, #10
 8005cde:	f7ff fdb5 	bl	800584c <_PrintUnsigned>
        break;
 8005ce2:	e02c      	b.n	8005d3e <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	1d19      	adds	r1, r3, #4
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6011      	str	r1, [r2, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005cf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cf4:	f107 0014 	add.w	r0, r7, #20
 8005cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d02:	2210      	movs	r2, #16
 8005d04:	f7ff fda2 	bl	800584c <_PrintUnsigned>
        break;
 8005d08:	e019      	b.n	8005d3e <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	1d19      	adds	r1, r3, #4
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6011      	str	r1, [r2, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005d18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d1a:	f107 0014 	add.w	r0, r7, #20
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	2308      	movs	r3, #8
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2308      	movs	r3, #8
 8005d28:	2210      	movs	r2, #16
 8005d2a:	f7ff fd8f 	bl	800584c <_PrintUnsigned>
        break;
 8005d2e:	e006      	b.n	8005d3e <_VPrintTarget+0x2a6>
        _StoreChar(&BufferDesc, '%');
 8005d30:	f107 0314 	add.w	r3, r7, #20
 8005d34:	2125      	movs	r1, #37	; 0x25
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff fd0c 	bl	8005754 <_StoreChar>
        break;
 8005d3c:	bf00      	nop
      }
      sFormat++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3301      	adds	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	e007      	b.n	8005d56 <_VPrintTarget+0x2be>
    } else {
      _StoreChar(&BufferDesc, c);
 8005d46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005d4a:	f107 0314 	add.w	r3, r7, #20
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fcff 	bl	8005754 <_StoreChar>
    }
  } while (*sFormat);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f47f aeb8 	bne.w	8005ad0 <_VPrintTarget+0x38>
 8005d60:	e003      	b.n	8005d6a <_VPrintTarget+0x2d2>
 8005d62:	bf00      	nop
 8005d64:	20014294 	.word	0x20014294
      break;
 8005d68:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d041      	beq.n	8005df4 <_VPrintTarget+0x35c>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d80:	e00b      	b.n	8005d9a <_VPrintTarget+0x302>
 8005d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d88:	1c59      	adds	r1, r3, #1
 8005d8a:	6439      	str	r1, [r7, #64]	; 0x40
 8005d8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d96:	09db      	lsrs	r3, r3, #7
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d9e:	d8f0      	bhi.n	8005d82 <_VPrintTarget+0x2ea>
 8005da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	643a      	str	r2, [r7, #64]	; 0x40
 8005da6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dae:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db4:	2300      	movs	r3, #0
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
 8005db8:	e00b      	b.n	8005dd2 <_VPrintTarget+0x33a>
 8005dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	1c59      	adds	r1, r3, #1
 8005dc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	09db      	lsrs	r3, r3, #7
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd6:	d8f0      	bhi.n	8005dba <_VPrintTarget+0x322>
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	63ba      	str	r2, [r7, #56]	; 0x38
 8005dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	69b9      	ldr	r1, [r7, #24]
 8005dec:	221a      	movs	r2, #26
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff fbc8 	bl	8005584 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005dfa:	bf00      	nop
 8005dfc:	3758      	adds	r7, #88	; 0x58
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop

08005e04 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e12:	2300      	movs	r3, #0
 8005e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e18:	4917      	ldr	r1, [pc, #92]	; (8005e78 <SEGGER_SYSVIEW_Init+0x74>)
 8005e1a:	4818      	ldr	r0, [pc, #96]	; (8005e7c <SEGGER_SYSVIEW_Init+0x78>)
 8005e1c:	f7ff f984 	bl	8005128 <SEGGER_RTT_AllocUpBuffer>
 8005e20:	4603      	mov	r3, r0
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e26:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e28:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e2a:	785a      	ldrb	r2, [r3, #1]
 8005e2c:	4b14      	ldr	r3, [pc, #80]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e2e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e30:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e32:	7e1b      	ldrb	r3, [r3, #24]
 8005e34:	4618      	mov	r0, r3
 8005e36:	2300      	movs	r3, #0
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	4a11      	ldr	r2, [pc, #68]	; (8005e84 <SEGGER_SYSVIEW_Init+0x80>)
 8005e3e:	490f      	ldr	r1, [pc, #60]	; (8005e7c <SEGGER_SYSVIEW_Init+0x78>)
 8005e40:	f7ff f9f6 	bl	8005230 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e44:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <SEGGER_SYSVIEW_Init+0x84>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a0c      	ldr	r2, [pc, #48]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e50:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e52:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e58:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e5e:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e64:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	2001325c 	.word	0x2001325c
 8005e7c:	08007020 	.word	0x08007020
 8005e80:	20014264 	.word	0x20014264
 8005e84:	2001425c 	.word	0x2001425c
 8005e88:	e0001004 	.word	0xe0001004

08005e8c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005e94:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6113      	str	r3, [r2, #16]
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20014264 	.word	0x20014264

08005eac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb8:	f04f 0120 	mov.w	r1, #32
 8005ebc:	f381 8811 	msr	BASEPRI, r1
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	4808      	ldr	r0, [pc, #32]	; (8005ee4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ec4:	f7ff fa71 	bl	80053aa <_PreparePacket>
 8005ec8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	68b8      	ldr	r0, [r7, #8]
 8005ed0:	f7ff fb58 	bl	8005584 <_SendPacket>
  RECORD_END();
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f383 8811 	msr	BASEPRI, r3
}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20014294 	.word	0x20014294

08005ee8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ef6:	f04f 0120 	mov.w	r1, #32
 8005efa:	f381 8811 	msr	BASEPRI, r1
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	4816      	ldr	r0, [pc, #88]	; (8005f5c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f02:	f7ff fa52 	bl	80053aa <_PreparePacket>
 8005f06:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	61bb      	str	r3, [r7, #24]
 8005f14:	e00b      	b.n	8005f2e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	1c59      	adds	r1, r3, #1
 8005f1e:	61f9      	str	r1, [r7, #28]
 8005f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	09db      	lsrs	r3, r3, #7
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b7f      	cmp	r3, #127	; 0x7f
 8005f32:	d8f0      	bhi.n	8005f16 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	61fa      	str	r2, [r7, #28]
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	6938      	ldr	r0, [r7, #16]
 8005f4a:	f7ff fb1b 	bl	8005584 <_SendPacket>
  RECORD_END();
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f383 8811 	msr	BASEPRI, r3
}
 8005f54:	bf00      	nop
 8005f56:	3720      	adds	r7, #32
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20014294 	.word	0x20014294

08005f60 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	; 0x30
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f70:	f04f 0120 	mov.w	r1, #32
 8005f74:	f381 8811 	msr	BASEPRI, r1
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	4825      	ldr	r0, [pc, #148]	; (8006010 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f7c:	f7ff fa15 	bl	80053aa <_PreparePacket>
 8005f80:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f8e:	e00b      	b.n	8005fa8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	1c59      	adds	r1, r3, #1
 8005f98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	09db      	lsrs	r3, r3, #7
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	2b7f      	cmp	r3, #127	; 0x7f
 8005fac:	d8f0      	bhi.n	8005f90 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	623b      	str	r3, [r7, #32]
 8005fc6:	e00b      	b.n	8005fe0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	1c59      	adds	r1, r3, #1
 8005fd0:	6279      	str	r1, [r7, #36]	; 0x24
 8005fd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	09db      	lsrs	r3, r3, #7
 8005fde:	623b      	str	r3, [r7, #32]
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe4:	d8f0      	bhi.n	8005fc8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	627a      	str	r2, [r7, #36]	; 0x24
 8005fec:	6a3a      	ldr	r2, [r7, #32]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	6979      	ldr	r1, [r7, #20]
 8005ffa:	69b8      	ldr	r0, [r7, #24]
 8005ffc:	f7ff fac2 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f383 8811 	msr	BASEPRI, r3
}
 8006006:	bf00      	nop
 8006008:	3730      	adds	r7, #48	; 0x30
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20014294 	.word	0x20014294

08006014 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b08e      	sub	sp, #56	; 0x38
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006022:	f3ef 8311 	mrs	r3, BASEPRI
 8006026:	f04f 0120 	mov.w	r1, #32
 800602a:	f381 8811 	msr	BASEPRI, r1
 800602e:	61fb      	str	r3, [r7, #28]
 8006030:	4832      	ldr	r0, [pc, #200]	; (80060fc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006032:	f7ff f9ba 	bl	80053aa <_PreparePacket>
 8006036:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	637b      	str	r3, [r7, #52]	; 0x34
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	633b      	str	r3, [r7, #48]	; 0x30
 8006044:	e00b      	b.n	800605e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	b2da      	uxtb	r2, r3
 800604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604c:	1c59      	adds	r1, r3, #1
 800604e:	6379      	str	r1, [r7, #52]	; 0x34
 8006050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	09db      	lsrs	r3, r3, #7
 800605c:	633b      	str	r3, [r7, #48]	; 0x30
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2b7f      	cmp	r3, #127	; 0x7f
 8006062:	d8f0      	bhi.n	8006046 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	637a      	str	r2, [r7, #52]	; 0x34
 800606a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
 800607c:	e00b      	b.n	8006096 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	b2da      	uxtb	r2, r3
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	1c59      	adds	r1, r3, #1
 8006086:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	09db      	lsrs	r3, r3, #7
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	2b7f      	cmp	r3, #127	; 0x7f
 800609a:	d8f0      	bhi.n	800607e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	e00b      	b.n	80060ce <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1c59      	adds	r1, r3, #1
 80060be:	6279      	str	r1, [r7, #36]	; 0x24
 80060c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	09db      	lsrs	r3, r3, #7
 80060cc:	623b      	str	r3, [r7, #32]
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	2b7f      	cmp	r3, #127	; 0x7f
 80060d2:	d8f0      	bhi.n	80060b6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	627a      	str	r2, [r7, #36]	; 0x24
 80060da:	6a3a      	ldr	r2, [r7, #32]
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	6979      	ldr	r1, [r7, #20]
 80060e8:	69b8      	ldr	r0, [r7, #24]
 80060ea:	f7ff fa4b 	bl	8005584 <_SendPacket>
  RECORD_END();
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f383 8811 	msr	BASEPRI, r3
}
 80060f4:	bf00      	nop
 80060f6:	3738      	adds	r7, #56	; 0x38
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20014294 	.word	0x20014294

08006100 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b090      	sub	sp, #64	; 0x40
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800610e:	f3ef 8311 	mrs	r3, BASEPRI
 8006112:	f04f 0120 	mov.w	r1, #32
 8006116:	f381 8811 	msr	BASEPRI, r1
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	4840      	ldr	r0, [pc, #256]	; (8006220 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800611e:	f7ff f944 	bl	80053aa <_PreparePacket>
 8006122:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006130:	e00b      	b.n	800614a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	b2da      	uxtb	r2, r3
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800613c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	09db      	lsrs	r3, r3, #7
 8006148:	63bb      	str	r3, [r7, #56]	; 0x38
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	2b7f      	cmp	r3, #127	; 0x7f
 800614e:	d8f0      	bhi.n	8006132 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	633b      	str	r3, [r7, #48]	; 0x30
 8006168:	e00b      	b.n	8006182 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	b2da      	uxtb	r2, r3
 800616e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	6379      	str	r1, [r7, #52]	; 0x34
 8006174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	09db      	lsrs	r3, r3, #7
 8006180:	633b      	str	r3, [r7, #48]	; 0x30
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	2b7f      	cmp	r3, #127	; 0x7f
 8006186:	d8f0      	bhi.n	800616a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	637a      	str	r2, [r7, #52]	; 0x34
 800618e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
 80061a0:	e00b      	b.n	80061ba <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	09db      	lsrs	r3, r3, #7
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	2b7f      	cmp	r3, #127	; 0x7f
 80061be:	d8f0      	bhi.n	80061a2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
 80061d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	e00b      	b.n	80061f2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	6279      	str	r1, [r7, #36]	; 0x24
 80061e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	09db      	lsrs	r3, r3, #7
 80061f0:	623b      	str	r3, [r7, #32]
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	2b7f      	cmp	r3, #127	; 0x7f
 80061f6:	d8f0      	bhi.n	80061da <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	627a      	str	r2, [r7, #36]	; 0x24
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	6979      	ldr	r1, [r7, #20]
 800620c:	69b8      	ldr	r0, [r7, #24]
 800620e:	f7ff f9b9 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	f383 8811 	msr	BASEPRI, r3
}
 8006218:	bf00      	nop
 800621a:	3740      	adds	r7, #64	; 0x40
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20014294 	.word	0x20014294

08006224 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b08c      	sub	sp, #48	; 0x30
 8006228:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800622a:	4b59      	ldr	r3, [pc, #356]	; (8006390 <SEGGER_SYSVIEW_Start+0x16c>)
 800622c:	2201      	movs	r2, #1
 800622e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006230:	f3ef 8311 	mrs	r3, BASEPRI
 8006234:	f04f 0120 	mov.w	r1, #32
 8006238:	f381 8811 	msr	BASEPRI, r1
 800623c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800623e:	4b54      	ldr	r3, [pc, #336]	; (8006390 <SEGGER_SYSVIEW_Start+0x16c>)
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	220a      	movs	r2, #10
 8006244:	4953      	ldr	r1, [pc, #332]	; (8006394 <SEGGER_SYSVIEW_Start+0x170>)
 8006246:	4618      	mov	r0, r3
 8006248:	f7f9 ffe2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006252:	f7fe fc3f 	bl	8004ad4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006256:	200a      	movs	r0, #10
 8006258:	f7ff fe28 	bl	8005eac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800625c:	f3ef 8311 	mrs	r3, BASEPRI
 8006260:	f04f 0120 	mov.w	r1, #32
 8006264:	f381 8811 	msr	BASEPRI, r1
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	484b      	ldr	r0, [pc, #300]	; (8006398 <SEGGER_SYSVIEW_Start+0x174>)
 800626c:	f7ff f89d 	bl	80053aa <_PreparePacket>
 8006270:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627a:	4b45      	ldr	r3, [pc, #276]	; (8006390 <SEGGER_SYSVIEW_Start+0x16c>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006280:	e00b      	b.n	800629a <SEGGER_SYSVIEW_Start+0x76>
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	b2da      	uxtb	r2, r3
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	1c59      	adds	r1, r3, #1
 800628a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800628c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	09db      	lsrs	r3, r3, #7
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	2b7f      	cmp	r3, #127	; 0x7f
 800629e:	d8f0      	bhi.n	8006282 <SEGGER_SYSVIEW_Start+0x5e>
 80062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
 80062b4:	4b36      	ldr	r3, [pc, #216]	; (8006390 <SEGGER_SYSVIEW_Start+0x16c>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	623b      	str	r3, [r7, #32]
 80062ba:	e00b      	b.n	80062d4 <SEGGER_SYSVIEW_Start+0xb0>
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	1c59      	adds	r1, r3, #1
 80062c4:	6279      	str	r1, [r7, #36]	; 0x24
 80062c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	09db      	lsrs	r3, r3, #7
 80062d2:	623b      	str	r3, [r7, #32]
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	2b7f      	cmp	r3, #127	; 0x7f
 80062d8:	d8f0      	bhi.n	80062bc <SEGGER_SYSVIEW_Start+0x98>
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	627a      	str	r2, [r7, #36]	; 0x24
 80062e0:	6a3a      	ldr	r2, [r7, #32]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	4b28      	ldr	r3, [pc, #160]	; (8006390 <SEGGER_SYSVIEW_Start+0x16c>)
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	61bb      	str	r3, [r7, #24]
 80062f4:	e00b      	b.n	800630e <SEGGER_SYSVIEW_Start+0xea>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	1c59      	adds	r1, r3, #1
 80062fe:	61f9      	str	r1, [r7, #28]
 8006300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b7f      	cmp	r3, #127	; 0x7f
 8006312:	d8f0      	bhi.n	80062f6 <SEGGER_SYSVIEW_Start+0xd2>
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	61fa      	str	r2, [r7, #28]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	2300      	movs	r3, #0
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	e00b      	b.n	8006346 <SEGGER_SYSVIEW_Start+0x122>
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	b2da      	uxtb	r2, r3
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	6179      	str	r1, [r7, #20]
 8006338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	09db      	lsrs	r3, r3, #7
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b7f      	cmp	r3, #127	; 0x7f
 800634a:	d8f0      	bhi.n	800632e <SEGGER_SYSVIEW_Start+0x10a>
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	617a      	str	r2, [r7, #20]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800635c:	2218      	movs	r2, #24
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff f90f 	bl	8005584 <_SendPacket>
      RECORD_END();
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800636c:	4b08      	ldr	r3, [pc, #32]	; (8006390 <SEGGER_SYSVIEW_Start+0x16c>)
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006374:	4b06      	ldr	r3, [pc, #24]	; (8006390 <SEGGER_SYSVIEW_Start+0x16c>)
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800637a:	f000 f9eb 	bl	8006754 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800637e:	f000 f9b1 	bl	80066e4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006382:	f000 fc81 	bl	8006c88 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006386:	bf00      	nop
 8006388:	3730      	adds	r7, #48	; 0x30
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20014264 	.word	0x20014264
 8006394:	0800704c 	.word	0x0800704c
 8006398:	20014294 	.word	0x20014294

0800639c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063a2:	f3ef 8311 	mrs	r3, BASEPRI
 80063a6:	f04f 0120 	mov.w	r1, #32
 80063aa:	f381 8811 	msr	BASEPRI, r1
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	480b      	ldr	r0, [pc, #44]	; (80063e0 <SEGGER_SYSVIEW_Stop+0x44>)
 80063b2:	f7fe fffa 	bl	80053aa <_PreparePacket>
 80063b6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <SEGGER_SYSVIEW_Stop+0x48>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063c0:	220b      	movs	r2, #11
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6838      	ldr	r0, [r7, #0]
 80063c6:	f7ff f8dd 	bl	8005584 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <SEGGER_SYSVIEW_Stop+0x48>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f383 8811 	msr	BASEPRI, r3
}
 80063d6:	bf00      	nop
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20014294 	.word	0x20014294
 80063e4:	20014264 	.word	0x20014264

080063e8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08c      	sub	sp, #48	; 0x30
 80063ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063ee:	f3ef 8311 	mrs	r3, BASEPRI
 80063f2:	f04f 0120 	mov.w	r1, #32
 80063f6:	f381 8811 	msr	BASEPRI, r1
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	4845      	ldr	r0, [pc, #276]	; (8006514 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80063fe:	f7fe ffd4 	bl	80053aa <_PreparePacket>
 8006402:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800640c:	4b42      	ldr	r3, [pc, #264]	; (8006518 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
 8006412:	e00b      	b.n	800642c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	b2da      	uxtb	r2, r3
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800641e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	09db      	lsrs	r3, r3, #7
 800642a:	62bb      	str	r3, [r7, #40]	; 0x28
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	2b7f      	cmp	r3, #127	; 0x7f
 8006430:	d8f0      	bhi.n	8006414 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
 8006446:	4b34      	ldr	r3, [pc, #208]	; (8006518 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	623b      	str	r3, [r7, #32]
 800644c:	e00b      	b.n	8006466 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	6279      	str	r1, [r7, #36]	; 0x24
 8006458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	09db      	lsrs	r3, r3, #7
 8006464:	623b      	str	r3, [r7, #32]
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	2b7f      	cmp	r3, #127	; 0x7f
 800646a:	d8f0      	bhi.n	800644e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	627a      	str	r2, [r7, #36]	; 0x24
 8006472:	6a3a      	ldr	r2, [r7, #32]
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	4b25      	ldr	r3, [pc, #148]	; (8006518 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	e00b      	b.n	80064a0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	1c59      	adds	r1, r3, #1
 8006490:	61f9      	str	r1, [r7, #28]
 8006492:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	09db      	lsrs	r3, r3, #7
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b7f      	cmp	r3, #127	; 0x7f
 80064a4:	d8f0      	bhi.n	8006488 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	61fa      	str	r2, [r7, #28]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	2300      	movs	r3, #0
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	e00b      	b.n	80064d8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	1c59      	adds	r1, r3, #1
 80064c8:	6179      	str	r1, [r7, #20]
 80064ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	09db      	lsrs	r3, r3, #7
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b7f      	cmp	r3, #127	; 0x7f
 80064dc:	d8f0      	bhi.n	80064c0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	617a      	str	r2, [r7, #20]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064ee:	2218      	movs	r2, #24
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	68b8      	ldr	r0, [r7, #8]
 80064f4:	f7ff f846 	bl	8005584 <_SendPacket>
  RECORD_END();
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006506:	4b04      	ldr	r3, [pc, #16]	; (8006518 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	4798      	blx	r3
  }
}
 800650c:	bf00      	nop
 800650e:	3730      	adds	r7, #48	; 0x30
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20014294 	.word	0x20014294
 8006518:	20014264 	.word	0x20014264

0800651c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800651c:	b580      	push	{r7, lr}
 800651e:	b092      	sub	sp, #72	; 0x48
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006524:	f3ef 8311 	mrs	r3, BASEPRI
 8006528:	f04f 0120 	mov.w	r1, #32
 800652c:	f381 8811 	msr	BASEPRI, r1
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	486a      	ldr	r0, [pc, #424]	; (80066dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006534:	f7fe ff39 	bl	80053aa <_PreparePacket>
 8006538:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	647b      	str	r3, [r7, #68]	; 0x44
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b66      	ldr	r3, [pc, #408]	; (80066e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	643b      	str	r3, [r7, #64]	; 0x40
 800654e:	e00b      	b.n	8006568 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006552:	b2da      	uxtb	r2, r3
 8006554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006556:	1c59      	adds	r1, r3, #1
 8006558:	6479      	str	r1, [r7, #68]	; 0x44
 800655a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006564:	09db      	lsrs	r3, r3, #7
 8006566:	643b      	str	r3, [r7, #64]	; 0x40
 8006568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656a:	2b7f      	cmp	r3, #127	; 0x7f
 800656c:	d8f0      	bhi.n	8006550 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800656e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	647a      	str	r2, [r7, #68]	; 0x44
 8006574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	63bb      	str	r3, [r7, #56]	; 0x38
 8006588:	e00b      	b.n	80065a2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	b2da      	uxtb	r2, r3
 800658e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006590:	1c59      	adds	r1, r3, #1
 8006592:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659e:	09db      	lsrs	r3, r3, #7
 80065a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	2b7f      	cmp	r3, #127	; 0x7f
 80065a6:	d8f0      	bhi.n	800658a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	4619      	mov	r1, r3
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7fe fea5 	bl	8005310 <_EncodeStr>
 80065c6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065c8:	2209      	movs	r2, #9
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	6938      	ldr	r0, [r7, #16]
 80065ce:	f7fe ffd9 	bl	8005584 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	637b      	str	r3, [r7, #52]	; 0x34
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4b40      	ldr	r3, [pc, #256]	; (80066e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	633b      	str	r3, [r7, #48]	; 0x30
 80065e6:	e00b      	b.n	8006600 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	1c59      	adds	r1, r3, #1
 80065f0:	6379      	str	r1, [r7, #52]	; 0x34
 80065f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	09db      	lsrs	r3, r3, #7
 80065fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	2b7f      	cmp	r3, #127	; 0x7f
 8006604:	d8f0      	bhi.n	80065e8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	637a      	str	r2, [r7, #52]	; 0x34
 800660c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006620:	e00b      	b.n	800663a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	b2da      	uxtb	r2, r3
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800662c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	09db      	lsrs	r3, r3, #7
 8006638:	62bb      	str	r3, [r7, #40]	; 0x28
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	2b7f      	cmp	r3, #127	; 0x7f
 800663e:	d8f0      	bhi.n	8006622 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	e00b      	b.n	8006674 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	1c59      	adds	r1, r3, #1
 8006664:	6279      	str	r1, [r7, #36]	; 0x24
 8006666:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	09db      	lsrs	r3, r3, #7
 8006672:	623b      	str	r3, [r7, #32]
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b7f      	cmp	r3, #127	; 0x7f
 8006678:	d8f0      	bhi.n	800665c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	627a      	str	r2, [r7, #36]	; 0x24
 8006680:	6a3a      	ldr	r2, [r7, #32]
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	2300      	movs	r3, #0
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	e00b      	b.n	80066ac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	b2da      	uxtb	r2, r3
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	61f9      	str	r1, [r7, #28]
 800669e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	09db      	lsrs	r3, r3, #7
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b7f      	cmp	r3, #127	; 0x7f
 80066b0:	d8f0      	bhi.n	8006694 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	61fa      	str	r2, [r7, #28]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066c2:	2215      	movs	r2, #21
 80066c4:	68f9      	ldr	r1, [r7, #12]
 80066c6:	6938      	ldr	r0, [r7, #16]
 80066c8:	f7fe ff5c 	bl	8005584 <_SendPacket>
  RECORD_END();
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f383 8811 	msr	BASEPRI, r3
}
 80066d2:	bf00      	nop
 80066d4:	3748      	adds	r7, #72	; 0x48
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20014294 	.word	0x20014294
 80066e0:	20014264 	.word	0x20014264

080066e4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80066e8:	4b07      	ldr	r3, [pc, #28]	; (8006708 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4798      	blx	r3
  }
}
 8006702:	bf00      	nop
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20014264 	.word	0x20014264

0800670c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006714:	f3ef 8311 	mrs	r3, BASEPRI
 8006718:	f04f 0120 	mov.w	r1, #32
 800671c:	f381 8811 	msr	BASEPRI, r1
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	480b      	ldr	r0, [pc, #44]	; (8006750 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006724:	f7fe fe41 	bl	80053aa <_PreparePacket>
 8006728:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800672a:	2280      	movs	r2, #128	; 0x80
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	6938      	ldr	r0, [r7, #16]
 8006730:	f7fe fdee 	bl	8005310 <_EncodeStr>
 8006734:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006736:	220e      	movs	r2, #14
 8006738:	68f9      	ldr	r1, [r7, #12]
 800673a:	6938      	ldr	r0, [r7, #16]
 800673c:	f7fe ff22 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f383 8811 	msr	BASEPRI, r3
}
 8006746:	bf00      	nop
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20014294 	.word	0x20014294

08006754 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006754:	b590      	push	{r4, r7, lr}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800675a:	4b14      	ldr	r3, [pc, #80]	; (80067ac <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d019      	beq.n	8006796 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006762:	4b12      	ldr	r3, [pc, #72]	; (80067ac <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d014      	beq.n	8006796 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800676c:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4798      	blx	r3
 8006774:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006778:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800677a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800677e:	f04f 0300 	mov.w	r3, #0
 8006782:	f04f 0400 	mov.w	r4, #0
 8006786:	0013      	movs	r3, r2
 8006788:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800678a:	461a      	mov	r2, r3
 800678c:	4601      	mov	r1, r0
 800678e:	200d      	movs	r0, #13
 8006790:	f7ff fbe6 	bl	8005f60 <SEGGER_SYSVIEW_RecordU32x2>
 8006794:	e005      	b.n	80067a2 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006796:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4619      	mov	r1, r3
 800679c:	200c      	movs	r0, #12
 800679e:	f7ff fba3 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd90      	pop	{r4, r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20014264 	.word	0x20014264
 80067b0:	e0001004 	.word	0xe0001004

080067b4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067ba:	f3ef 8311 	mrs	r3, BASEPRI
 80067be:	f04f 0120 	mov.w	r1, #32
 80067c2:	f381 8811 	msr	BASEPRI, r1
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	4819      	ldr	r0, [pc, #100]	; (8006830 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80067ca:	f7fe fdee 	bl	80053aa <_PreparePacket>
 80067ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80067d4:	4b17      	ldr	r3, [pc, #92]	; (8006834 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067dc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	e00b      	b.n	8006800 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1c59      	adds	r1, r3, #1
 80067f0:	6179      	str	r1, [r7, #20]
 80067f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	09db      	lsrs	r3, r3, #7
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	2b7f      	cmp	r3, #127	; 0x7f
 8006804:	d8f0      	bhi.n	80067e8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	617a      	str	r2, [r7, #20]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006816:	2202      	movs	r2, #2
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	68b8      	ldr	r0, [r7, #8]
 800681c:	f7fe feb2 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f383 8811 	msr	BASEPRI, r3
}
 8006826:	bf00      	nop
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20014294 	.word	0x20014294
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800683e:	f3ef 8311 	mrs	r3, BASEPRI
 8006842:	f04f 0120 	mov.w	r1, #32
 8006846:	f381 8811 	msr	BASEPRI, r1
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	4807      	ldr	r0, [pc, #28]	; (800686c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800684e:	f7fe fdac 	bl	80053aa <_PreparePacket>
 8006852:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006854:	2203      	movs	r2, #3
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6838      	ldr	r0, [r7, #0]
 800685a:	f7fe fe93 	bl	8005584 <_SendPacket>
  RECORD_END();
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f383 8811 	msr	BASEPRI, r3
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20014294 	.word	0x20014294

08006870 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006876:	f3ef 8311 	mrs	r3, BASEPRI
 800687a:	f04f 0120 	mov.w	r1, #32
 800687e:	f381 8811 	msr	BASEPRI, r1
 8006882:	607b      	str	r3, [r7, #4]
 8006884:	4807      	ldr	r0, [pc, #28]	; (80068a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006886:	f7fe fd90 	bl	80053aa <_PreparePacket>
 800688a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800688c:	2212      	movs	r2, #18
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6838      	ldr	r0, [r7, #0]
 8006892:	f7fe fe77 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f383 8811 	msr	BASEPRI, r3
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20014294 	.word	0x20014294

080068a8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068ae:	f3ef 8311 	mrs	r3, BASEPRI
 80068b2:	f04f 0120 	mov.w	r1, #32
 80068b6:	f381 8811 	msr	BASEPRI, r1
 80068ba:	607b      	str	r3, [r7, #4]
 80068bc:	4807      	ldr	r0, [pc, #28]	; (80068dc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80068be:	f7fe fd74 	bl	80053aa <_PreparePacket>
 80068c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80068c4:	2211      	movs	r2, #17
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6838      	ldr	r0, [r7, #0]
 80068ca:	f7fe fe5b 	bl	8005584 <_SendPacket>
  RECORD_END();
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f383 8811 	msr	BASEPRI, r3
}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20014294 	.word	0x20014294

080068e0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068e8:	f3ef 8311 	mrs	r3, BASEPRI
 80068ec:	f04f 0120 	mov.w	r1, #32
 80068f0:	f381 8811 	msr	BASEPRI, r1
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	4819      	ldr	r0, [pc, #100]	; (800695c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80068f8:	f7fe fd57 	bl	80053aa <_PreparePacket>
 80068fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006902:	4b17      	ldr	r3, [pc, #92]	; (8006960 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	e00b      	b.n	800692e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	b2da      	uxtb	r2, r3
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	1c59      	adds	r1, r3, #1
 800691e:	61f9      	str	r1, [r7, #28]
 8006920:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	09db      	lsrs	r3, r3, #7
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b7f      	cmp	r3, #127	; 0x7f
 8006932:	d8f0      	bhi.n	8006916 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	61fa      	str	r2, [r7, #28]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006944:	2208      	movs	r2, #8
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	6938      	ldr	r0, [r7, #16]
 800694a:	f7fe fe1b 	bl	8005584 <_SendPacket>
  RECORD_END();
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f383 8811 	msr	BASEPRI, r3
}
 8006954:	bf00      	nop
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20014294 	.word	0x20014294
 8006960:	20014264 	.word	0x20014264

08006964 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800696c:	f3ef 8311 	mrs	r3, BASEPRI
 8006970:	f04f 0120 	mov.w	r1, #32
 8006974:	f381 8811 	msr	BASEPRI, r1
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	4819      	ldr	r0, [pc, #100]	; (80069e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800697c:	f7fe fd15 	bl	80053aa <_PreparePacket>
 8006980:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006986:	4b17      	ldr	r3, [pc, #92]	; (80069e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	e00b      	b.n	80069b2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	b2da      	uxtb	r2, r3
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	61f9      	str	r1, [r7, #28]
 80069a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	09db      	lsrs	r3, r3, #7
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b7f      	cmp	r3, #127	; 0x7f
 80069b6:	d8f0      	bhi.n	800699a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	61fa      	str	r2, [r7, #28]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80069c8:	2204      	movs	r2, #4
 80069ca:	68f9      	ldr	r1, [r7, #12]
 80069cc:	6938      	ldr	r0, [r7, #16]
 80069ce:	f7fe fdd9 	bl	8005584 <_SendPacket>
  RECORD_END();
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f383 8811 	msr	BASEPRI, r3
}
 80069d8:	bf00      	nop
 80069da:	3720      	adds	r7, #32
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20014294 	.word	0x20014294
 80069e4:	20014264 	.word	0x20014264

080069e8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069f0:	f3ef 8311 	mrs	r3, BASEPRI
 80069f4:	f04f 0120 	mov.w	r1, #32
 80069f8:	f381 8811 	msr	BASEPRI, r1
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	4819      	ldr	r0, [pc, #100]	; (8006a64 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006a00:	f7fe fcd3 	bl	80053aa <_PreparePacket>
 8006a04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	e00b      	b.n	8006a36 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	1c59      	adds	r1, r3, #1
 8006a26:	61f9      	str	r1, [r7, #28]
 8006a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	09db      	lsrs	r3, r3, #7
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3a:	d8f0      	bhi.n	8006a1e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	61fa      	str	r2, [r7, #28]
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a4c:	2206      	movs	r2, #6
 8006a4e:	68f9      	ldr	r1, [r7, #12]
 8006a50:	6938      	ldr	r0, [r7, #16]
 8006a52:	f7fe fd97 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f383 8811 	msr	BASEPRI, r3
}
 8006a5c:	bf00      	nop
 8006a5e:	3720      	adds	r7, #32
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	20014294 	.word	0x20014294
 8006a68:	20014264 	.word	0x20014264

08006a6c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08a      	sub	sp, #40	; 0x28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a76:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7a:	f04f 0120 	mov.w	r1, #32
 8006a7e:	f381 8811 	msr	BASEPRI, r1
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	4827      	ldr	r0, [pc, #156]	; (8006b24 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006a86:	f7fe fc90 	bl	80053aa <_PreparePacket>
 8006a8a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a90:	4b25      	ldr	r3, [pc, #148]	; (8006b28 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	623b      	str	r3, [r7, #32]
 8006aa2:	e00b      	b.n	8006abc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	1c59      	adds	r1, r3, #1
 8006aac:	6279      	str	r1, [r7, #36]	; 0x24
 8006aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	09db      	lsrs	r3, r3, #7
 8006aba:	623b      	str	r3, [r7, #32]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac0:	d8f0      	bhi.n	8006aa4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	e00b      	b.n	8006af4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	1c59      	adds	r1, r3, #1
 8006ae4:	61f9      	str	r1, [r7, #28]
 8006ae6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	09db      	lsrs	r3, r3, #7
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b7f      	cmp	r3, #127	; 0x7f
 8006af8:	d8f0      	bhi.n	8006adc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	61fa      	str	r2, [r7, #28]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006b0a:	2207      	movs	r2, #7
 8006b0c:	68f9      	ldr	r1, [r7, #12]
 8006b0e:	6938      	ldr	r0, [r7, #16]
 8006b10:	f7fe fd38 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f383 8811 	msr	BASEPRI, r3
}
 8006b1a:	bf00      	nop
 8006b1c:	3728      	adds	r7, #40	; 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20014294 	.word	0x20014294
 8006b28:	20014264 	.word	0x20014264

08006b2c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b34:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	1ad3      	subs	r3, r2, r3
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	20014264 	.word	0x20014264

08006b4c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08c      	sub	sp, #48	; 0x30
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b56:	4b3b      	ldr	r3, [pc, #236]	; (8006c44 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d06d      	beq.n	8006c3a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006b5e:	4b39      	ldr	r3, [pc, #228]	; (8006c44 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b64:	2300      	movs	r3, #0
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b68:	e008      	b.n	8006b7c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	3301      	adds	r3, #1
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d3f2      	bcc.n	8006b6a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b84:	e000      	b.n	8006b88 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b86:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d055      	beq.n	8006c3a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b92:	f04f 0120 	mov.w	r1, #32
 8006b96:	f381 8811 	msr	BASEPRI, r1
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	482a      	ldr	r0, [pc, #168]	; (8006c48 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006b9e:	f7fe fc04 	bl	80053aa <_PreparePacket>
 8006ba2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	623b      	str	r3, [r7, #32]
 8006bb0:	e00b      	b.n	8006bca <SEGGER_SYSVIEW_SendModule+0x7e>
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	1c59      	adds	r1, r3, #1
 8006bba:	6279      	str	r1, [r7, #36]	; 0x24
 8006bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	09db      	lsrs	r3, r3, #7
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bce:	d8f0      	bhi.n	8006bb2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	627a      	str	r2, [r7, #36]	; 0x24
 8006bd6:	6a3a      	ldr	r2, [r7, #32]
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e00b      	b.n	8006c04 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	1c59      	adds	r1, r3, #1
 8006bf4:	61f9      	str	r1, [r7, #28]
 8006bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	09db      	lsrs	r3, r3, #7
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b7f      	cmp	r3, #127	; 0x7f
 8006c08:	d8f0      	bhi.n	8006bec <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	61fa      	str	r2, [r7, #28]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2280      	movs	r2, #128	; 0x80
 8006c20:	4619      	mov	r1, r3
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f7fe fb74 	bl	8005310 <_EncodeStr>
 8006c28:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c2a:	2216      	movs	r2, #22
 8006c2c:	68f9      	ldr	r1, [r7, #12]
 8006c2e:	6938      	ldr	r0, [r7, #16]
 8006c30:	f7fe fca8 	bl	8005584 <_SendPacket>
      RECORD_END();
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006c3a:	bf00      	nop
 8006c3c:	3730      	adds	r7, #48	; 0x30
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	2001428c 	.word	0x2001428c
 8006c48:	20014294 	.word	0x20014294

08006c4c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c52:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00f      	beq.n	8006c7a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f2      	bne.n	8006c60 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	2001428c 	.word	0x2001428c

08006c88 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c92:	f04f 0120 	mov.w	r1, #32
 8006c96:	f381 8811 	msr	BASEPRI, r1
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	4817      	ldr	r0, [pc, #92]	; (8006cfc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006c9e:	f7fe fb84 	bl	80053aa <_PreparePacket>
 8006ca2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	4b14      	ldr	r3, [pc, #80]	; (8006d00 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e00b      	b.n	8006ccc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	1c59      	adds	r1, r3, #1
 8006cbc:	6179      	str	r1, [r7, #20]
 8006cbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	09db      	lsrs	r3, r3, #7
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd0:	d8f0      	bhi.n	8006cb4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	617a      	str	r2, [r7, #20]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ce2:	221b      	movs	r2, #27
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	68b8      	ldr	r0, [r7, #8]
 8006ce8:	f7fe fc4c 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f383 8811 	msr	BASEPRI, r3
}
 8006cf2:	bf00      	nop
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20014294 	.word	0x20014294
 8006d00:	20014290 	.word	0x20014290

08006d04 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006d04:	b40f      	push	{r0, r1, r2, r3}
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006d12:	1d3b      	adds	r3, r7, #4
 8006d14:	461a      	mov	r2, r3
 8006d16:	2100      	movs	r1, #0
 8006d18:	6938      	ldr	r0, [r7, #16]
 8006d1a:	f7fe febd 	bl	8005a98 <_VPrintTarget>
  va_end(ParamList);
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d28:	b004      	add	sp, #16
 8006d2a:	4770      	bx	lr

08006d2c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d34:	f3ef 8311 	mrs	r3, BASEPRI
 8006d38:	f04f 0120 	mov.w	r1, #32
 8006d3c:	f381 8811 	msr	BASEPRI, r1
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	4827      	ldr	r0, [pc, #156]	; (8006de0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d44:	f7fe fb31 	bl	80053aa <_PreparePacket>
 8006d48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d4a:	2280      	movs	r2, #128	; 0x80
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	6938      	ldr	r0, [r7, #16]
 8006d50:	f7fe fade 	bl	8005310 <_EncodeStr>
 8006d54:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	623b      	str	r3, [r7, #32]
 8006d5e:	e00b      	b.n	8006d78 <SEGGER_SYSVIEW_Warn+0x4c>
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	1c59      	adds	r1, r3, #1
 8006d68:	6279      	str	r1, [r7, #36]	; 0x24
 8006d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	09db      	lsrs	r3, r3, #7
 8006d76:	623b      	str	r3, [r7, #32]
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d7c:	d8f0      	bhi.n	8006d60 <SEGGER_SYSVIEW_Warn+0x34>
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	627a      	str	r2, [r7, #36]	; 0x24
 8006d84:	6a3a      	ldr	r2, [r7, #32]
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	2300      	movs	r3, #0
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	e00b      	b.n	8006db0 <SEGGER_SYSVIEW_Warn+0x84>
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	1c59      	adds	r1, r3, #1
 8006da0:	61f9      	str	r1, [r7, #28]
 8006da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	09db      	lsrs	r3, r3, #7
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	2b7f      	cmp	r3, #127	; 0x7f
 8006db4:	d8f0      	bhi.n	8006d98 <SEGGER_SYSVIEW_Warn+0x6c>
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	61fa      	str	r2, [r7, #28]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006dc6:	221a      	movs	r2, #26
 8006dc8:	68f9      	ldr	r1, [r7, #12]
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f7fe fbda 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f383 8811 	msr	BASEPRI, r3
}
 8006dd6:	bf00      	nop
 8006dd8:	3728      	adds	r7, #40	; 0x28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20014294 	.word	0x20014294

08006de4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006de8:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006dea:	7e1b      	ldrb	r3, [r3, #24]
 8006dec:	4619      	mov	r1, r3
 8006dee:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006df0:	460b      	mov	r3, r1
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	440b      	add	r3, r1
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	4413      	add	r3, r2
 8006dfa:	336c      	adds	r3, #108	; 0x6c
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b0e      	ldr	r3, [pc, #56]	; (8006e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e00:	7e1b      	ldrb	r3, [r3, #24]
 8006e02:	4618      	mov	r0, r3
 8006e04:	490d      	ldr	r1, [pc, #52]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006e06:	4603      	mov	r3, r0
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	4403      	add	r3, r0
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	440b      	add	r3, r1
 8006e10:	3370      	adds	r3, #112	; 0x70
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d00b      	beq.n	8006e30 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006e18:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e1a:	789b      	ldrb	r3, [r3, #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006e26:	f7fe facd 	bl	80053c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006e2a:	4b03      	ldr	r3, [pc, #12]	; (8006e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006e30:	4b01      	ldr	r3, [pc, #4]	; (8006e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20014264 	.word	0x20014264
 8006e3c:	200143fc 	.word	0x200143fc

08006e40 <__libc_init_array>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4e0d      	ldr	r6, [pc, #52]	; (8006e78 <__libc_init_array+0x38>)
 8006e44:	4c0d      	ldr	r4, [pc, #52]	; (8006e7c <__libc_init_array+0x3c>)
 8006e46:	1ba4      	subs	r4, r4, r6
 8006e48:	10a4      	asrs	r4, r4, #2
 8006e4a:	2500      	movs	r5, #0
 8006e4c:	42a5      	cmp	r5, r4
 8006e4e:	d109      	bne.n	8006e64 <__libc_init_array+0x24>
 8006e50:	4e0b      	ldr	r6, [pc, #44]	; (8006e80 <__libc_init_array+0x40>)
 8006e52:	4c0c      	ldr	r4, [pc, #48]	; (8006e84 <__libc_init_array+0x44>)
 8006e54:	f000 f83a 	bl	8006ecc <_init>
 8006e58:	1ba4      	subs	r4, r4, r6
 8006e5a:	10a4      	asrs	r4, r4, #2
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	42a5      	cmp	r5, r4
 8006e60:	d105      	bne.n	8006e6e <__libc_init_array+0x2e>
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e68:	4798      	blx	r3
 8006e6a:	3501      	adds	r5, #1
 8006e6c:	e7ee      	b.n	8006e4c <__libc_init_array+0xc>
 8006e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e72:	4798      	blx	r3
 8006e74:	3501      	adds	r5, #1
 8006e76:	e7f2      	b.n	8006e5e <__libc_init_array+0x1e>
 8006e78:	08007070 	.word	0x08007070
 8006e7c:	08007070 	.word	0x08007070
 8006e80:	08007070 	.word	0x08007070
 8006e84:	08007074 	.word	0x08007074

08006e88 <memcmp>:
 8006e88:	b530      	push	{r4, r5, lr}
 8006e8a:	2400      	movs	r4, #0
 8006e8c:	42a2      	cmp	r2, r4
 8006e8e:	d101      	bne.n	8006e94 <memcmp+0xc>
 8006e90:	2000      	movs	r0, #0
 8006e92:	e007      	b.n	8006ea4 <memcmp+0x1c>
 8006e94:	5d03      	ldrb	r3, [r0, r4]
 8006e96:	3401      	adds	r4, #1
 8006e98:	190d      	adds	r5, r1, r4
 8006e9a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006e9e:	42ab      	cmp	r3, r5
 8006ea0:	d0f4      	beq.n	8006e8c <memcmp+0x4>
 8006ea2:	1b58      	subs	r0, r3, r5
 8006ea4:	bd30      	pop	{r4, r5, pc}

08006ea6 <memcpy>:
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	1e43      	subs	r3, r0, #1
 8006eaa:	440a      	add	r2, r1
 8006eac:	4291      	cmp	r1, r2
 8006eae:	d100      	bne.n	8006eb2 <memcpy+0xc>
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eba:	e7f7      	b.n	8006eac <memcpy+0x6>

08006ebc <memset>:
 8006ebc:	4402      	add	r2, r0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d100      	bne.n	8006ec6 <memset+0xa>
 8006ec4:	4770      	bx	lr
 8006ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eca:	e7f9      	b.n	8006ec0 <memset+0x4>

08006ecc <_init>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	bf00      	nop
 8006ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed2:	bc08      	pop	{r3}
 8006ed4:	469e      	mov	lr, r3
 8006ed6:	4770      	bx	lr

08006ed8 <_fini>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	bf00      	nop
 8006edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ede:	bc08      	pop	{r3}
 8006ee0:	469e      	mov	lr, r3
 8006ee2:	4770      	bx	lr
