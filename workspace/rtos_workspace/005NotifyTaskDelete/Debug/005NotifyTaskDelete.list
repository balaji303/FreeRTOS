
005NotifyTaskDelete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080076cc  080076cc  000176cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800785c  0800785c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007864  08007864  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800786c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a0  2000001c  08007888  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144bc  08007888  000244bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bf5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003577  00000000  00000000  00039c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d20  00000000  00000000  0003f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158a1  00000000  00000000  00063460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db71f  00000000  00000000  00078d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154420  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005158  00000000  00000000  00154474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076b4 	.word	0x080076b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	080076b4 	.word	0x080076b4

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014414 	.word	0x20014414

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fb87 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f8a5 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f90f 	bl	80007cc <MX_GPIO_Init>

  //To Start the Sysview recording we have to Call these
  SEGGER_UART_init(250000);//UART
 80005ae:	4841      	ldr	r0, [pc, #260]	; (80006b4 <main+0x118>)
 80005b0:	f004 fdda 	bl	8005168 <SEGGER_UART_init>

  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0); //Set the zeroth bit to one //SEGGER UART
 80005b4:	4b40      	ldr	r3, [pc, #256]	; (80006b8 <main+0x11c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a3f      	ldr	r2, [pc, #252]	; (80006b8 <main+0x11c>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c0:	f004 fb48 	bl	8004c54 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start(); //Already done in UART

  status = xTaskCreate( LedGreenTask, "Led_Green_Task", 200, NULL , 2, &GreenTaskHandle );
 80005c4:	4b3d      	ldr	r3, [pc, #244]	; (80006bc <main+0x120>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	22c8      	movs	r2, #200	; 0xc8
 80005d0:	493b      	ldr	r1, [pc, #236]	; (80006c0 <main+0x124>)
 80005d2:	483c      	ldr	r0, [pc, #240]	; (80006c4 <main+0x128>)
 80005d4:	f002 f9d8 	bl	8002988 <xTaskCreate>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a3b      	ldr	r2, [pc, #236]	; (80006c8 <main+0x12c>)
 80005dc:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <main+0x12c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x5e>

  Next_Task_Handle = GreenTaskHandle;
 80005fc:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <main+0x120>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a32      	ldr	r2, [pc, #200]	; (80006cc <main+0x130>)
 8000602:	6013      	str	r3, [r2, #0]

  status = xTaskCreate( LedRedTask, "Led_Red_Task", 200, NULL , 2, &RedTaskHandle );
 8000604:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <main+0x134>)
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	22c8      	movs	r2, #200	; 0xc8
 8000610:	4930      	ldr	r1, [pc, #192]	; (80006d4 <main+0x138>)
 8000612:	4831      	ldr	r0, [pc, #196]	; (80006d8 <main+0x13c>)
 8000614:	f002 f9b8 	bl	8002988 <xTaskCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <main+0x12c>)
 800061c:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <main+0x12c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00a      	beq.n	800063c <main+0xa0>
        __asm volatile
 8000626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800062a:	f383 8811 	msr	BASEPRI, r3
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	60bb      	str	r3, [r7, #8]
    }
 8000638:	bf00      	nop
 800063a:	e7fe      	b.n	800063a <main+0x9e>
  status = xTaskCreate( LedYellowTask, "Led_Yellow_Task", 200, NULL , 2, &YellowTaskHandle );
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0x140>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	4925      	ldr	r1, [pc, #148]	; (80006e0 <main+0x144>)
 800064a:	4826      	ldr	r0, [pc, #152]	; (80006e4 <main+0x148>)
 800064c:	f002 f99c 	bl	8002988 <xTaskCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a1d      	ldr	r2, [pc, #116]	; (80006c8 <main+0x12c>)
 8000654:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <main+0x12c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d00a      	beq.n	8000674 <main+0xd8>
        __asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
    }
 8000670:	bf00      	nop
 8000672:	e7fe      	b.n	8000672 <main+0xd6>
  status = xTaskCreate( ButtonTask, "Button_Task", 200, NULL , 2, &ButtonTaskHandle );
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0x14c>)
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2302      	movs	r3, #2
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	491a      	ldr	r1, [pc, #104]	; (80006ec <main+0x150>)
 8000682:	481b      	ldr	r0, [pc, #108]	; (80006f0 <main+0x154>)
 8000684:	f002 f980 	bl	8002988 <xTaskCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <main+0x12c>)
 800068c:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <main+0x12c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d00a      	beq.n	80006ac <main+0x110>
        __asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	603b      	str	r3, [r7, #0]
    }
 80006a8:	bf00      	nop
 80006aa:	e7fe      	b.n	80006aa <main+0x10e>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 80006ac:	f002 fbec 	bl	8002e88 <vTaskStartScheduler>
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x114>
 80006b2:	bf00      	nop
 80006b4:	0003d090 	.word	0x0003d090
 80006b8:	e0001000 	.word	0xe0001000
 80006bc:	20014388 	.word	0x20014388
 80006c0:	080076cc 	.word	0x080076cc
 80006c4:	08000921 	.word	0x08000921
 80006c8:	2001438c 	.word	0x2001438c
 80006cc:	20000038 	.word	0x20000038
 80006d0:	2001437c 	.word	0x2001437c
 80006d4:	080076dc 	.word	0x080076dc
 80006d8:	0800098d 	.word	0x0800098d
 80006dc:	20014380 	.word	0x20014380
 80006e0:	080076ec 	.word	0x080076ec
 80006e4:	080009fd 	.word	0x080009fd
 80006e8:	20014384 	.word	0x20014384
 80006ec:	080076fc 	.word	0x080076fc
 80006f0:	08000a65 	.word	0x08000a65

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2234      	movs	r2, #52	; 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f006 ffce 	bl	80076a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <SystemClock_Config+0xd0>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <SystemClock_Config+0xd0>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <SystemClock_Config+0xd0>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <SystemClock_Config+0xd4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <SystemClock_Config+0xd4>)
 800073e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <SystemClock_Config+0xd4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000764:	2308      	movs	r3, #8
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000768:	23a8      	movs	r3, #168	; 0xa8
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f887 	bl	8001890 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000788:	f000 f9a6 	bl	8000ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000798:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	2105      	movs	r1, #5
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fd86 	bl	80012bc <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007b6:	f000 f98f 	bl	8000ad8 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	; 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b49      	ldr	r3, [pc, #292]	; (800090c <MX_GPIO_Init+0x140>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a48      	ldr	r2, [pc, #288]	; (800090c <MX_GPIO_Init+0x140>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b46      	ldr	r3, [pc, #280]	; (800090c <MX_GPIO_Init+0x140>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b42      	ldr	r3, [pc, #264]	; (800090c <MX_GPIO_Init+0x140>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a41      	ldr	r2, [pc, #260]	; (800090c <MX_GPIO_Init+0x140>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b3f      	ldr	r3, [pc, #252]	; (800090c <MX_GPIO_Init+0x140>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <MX_GPIO_Init+0x140>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a3a      	ldr	r2, [pc, #232]	; (800090c <MX_GPIO_Init+0x140>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b38      	ldr	r3, [pc, #224]	; (800090c <MX_GPIO_Init+0x140>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <MX_GPIO_Init+0x140>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a33      	ldr	r2, [pc, #204]	; (800090c <MX_GPIO_Init+0x140>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <MX_GPIO_Init+0x140>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000858:	482d      	ldr	r0, [pc, #180]	; (8000910 <MX_GPIO_Init+0x144>)
 800085a:	f000 fcfb 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	482c      	ldr	r0, [pc, #176]	; (8000914 <MX_GPIO_Init+0x148>)
 8000864:	f000 fcf6 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2140      	movs	r1, #64	; 0x40
 800086c:	482a      	ldr	r0, [pc, #168]	; (8000918 <MX_GPIO_Init+0x14c>)
 800086e:	f000 fcf1 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <MX_GPIO_Init+0x150>)
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4823      	ldr	r0, [pc, #140]	; (8000914 <MX_GPIO_Init+0x148>)
 8000888:	f000 fb38 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088c:	230c      	movs	r3, #12
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089c:	2307      	movs	r3, #7
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	481a      	ldr	r0, [pc, #104]	; (8000910 <MX_GPIO_Init+0x144>)
 80008a8:	f000 fb28 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80008ac:	f44f 7308 	mov.w	r3, #544	; 0x220
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4812      	ldr	r0, [pc, #72]	; (8000910 <MX_GPIO_Init+0x144>)
 80008c6:	f000 fb19 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_GPIO_Init+0x148>)
 80008e2:	f000 fb0b 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_GPIO_Init+0x14c>)
 80008fe:	f000 fafd 	bl	8000efc <HAL_GPIO_Init>

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000
 8000914:	40020800 	.word	0x40020800
 8000918:	40020400 	.word	0x40020400
 800091c:	10210000 	.word	0x10210000

08000920 <LedGreenTask>:

/* USER CODE BEGIN 4 */
void LedGreenTask(void *parameter){
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af02      	add	r7, sp, #8
 8000926:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	BaseType_t NotifyTaskStatus;
	last_wakeup_time = xTaskGetTickCount();
 8000928:	f002 fc1e 	bl	8003168 <xTaskGetTickCount>
 800092c:	60f8      	str	r0, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("GREEN LED Task");
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <LedGreenTask+0x5c>)
 8000930:	f006 fdda 	bl	80074e8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); //D8 or PA9
 8000934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <LedGreenTask+0x60>)
 800093a:	f000 fca4 	bl	8001286 <HAL_GPIO_TogglePin>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2300      	movs	r3, #0
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2000      	movs	r0, #0
 800094c:	f003 f84e 	bl	80039ec <xTaskGenericNotifyWait>
 8000950:	60b8      	str	r0, [r7, #8]
		if(NotifyTaskStatus == pdTRUE)
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d1ea      	bne.n	800092e <LedGreenTask+0xe>
		{
			vTaskSuspendAll();
 8000958:	f002 faf8 	bl	8002f4c <vTaskSuspendAll>
			Next_Task_Handle = YellowTaskHandle;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <LedGreenTask+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a09      	ldr	r2, [pc, #36]	; (8000988 <LedGreenTask+0x68>)
 8000962:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000964:	f002 fb00 	bl	8002f68 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096e:	4804      	ldr	r0, [pc, #16]	; (8000980 <LedGreenTask+0x60>)
 8000970:	f000 fc70 	bl	8001254 <HAL_GPIO_WritePin>
			vTaskDelete(NULL); //Self-Delete
 8000974:	2000      	movs	r0, #0
 8000976:	f002 f9a1 	bl	8002cbc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("GREEN LED Task");
 800097a:	e7d8      	b.n	800092e <LedGreenTask+0xe>
 800097c:	08007708 	.word	0x08007708
 8000980:	40020000 	.word	0x40020000
 8000984:	20014380 	.word	0x20014380
 8000988:	20000038 	.word	0x20000038

0800098c <LedRedTask>:
		}

	}/*End of Infinite Loop*/
}

void LedRedTask(void *parameter){
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	BaseType_t NotifyTaskStatus;
	last_wakeup_time = xTaskGetTickCount();
 8000994:	f002 fbe8 	bl	8003168 <xTaskGetTickCount>
 8000998:	60f8      	str	r0, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("RED LED Task");
 800099a:	4814      	ldr	r0, [pc, #80]	; (80009ec <LedRedTask+0x60>)
 800099c:	f006 fda4 	bl	80074e8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //D10 or PB6
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	4813      	ldr	r0, [pc, #76]	; (80009f0 <LedRedTask+0x64>)
 80009a4:	f000 fc6f 	bl	8001286 <HAL_GPIO_TogglePin>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80009a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f003 f819 	bl	80039ec <xTaskGenericNotifyWait>
 80009ba:	60b8      	str	r0, [r7, #8]
		if(NotifyTaskStatus == pdTRUE)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d1eb      	bne.n	800099a <LedRedTask+0xe>
		{
			vTaskSuspendAll();
 80009c2:	f002 fac3 	bl	8002f4c <vTaskSuspendAll>
			Next_Task_Handle = NULL;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <LedRedTask+0x68>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80009cc:	f002 facc 	bl	8002f68 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <LedRedTask+0x64>)
 80009d6:	f000 fc3d 	bl	8001254 <HAL_GPIO_WritePin>
			vTaskDelete(ButtonTaskHandle);
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <LedRedTask+0x6c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 f96c 	bl	8002cbc <vTaskDelete>
			vTaskDelete(NULL); //Self-Delete
 80009e4:	2000      	movs	r0, #0
 80009e6:	f002 f969 	bl	8002cbc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("RED LED Task");
 80009ea:	e7d6      	b.n	800099a <LedRedTask+0xe>
 80009ec:	08007718 	.word	0x08007718
 80009f0:	40020400 	.word	0x40020400
 80009f4:	20000038 	.word	0x20000038
 80009f8:	20014384 	.word	0x20014384

080009fc <LedYellowTask>:
			//Do Nothing
		}
	}/*End of Infinite Loop*/
}

void LedYellowTask(void *parameter){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	BaseType_t NotifyTaskStatus;
	last_wakeup_time = xTaskGetTickCount();
 8000a04:	f002 fbb0 	bl	8003168 <xTaskGetTickCount>
 8000a08:	60f8      	str	r0, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("YELLOW LED Task");
 8000a0a:	4812      	ldr	r0, [pc, #72]	; (8000a54 <LedYellowTask+0x58>)
 8000a0c:	f006 fd6c 	bl	80074e8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9 or PC7
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	4811      	ldr	r0, [pc, #68]	; (8000a58 <LedYellowTask+0x5c>)
 8000a14:	f000 fc37 	bl	8001286 <HAL_GPIO_TogglePin>
		NotifyTaskStatus = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f002 ffe1 	bl	80039ec <xTaskGenericNotifyWait>
 8000a2a:	60b8      	str	r0, [r7, #8]
		if(NotifyTaskStatus == pdTRUE)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d1eb      	bne.n	8000a0a <LedYellowTask+0xe>
		{
			vTaskSuspendAll();
 8000a32:	f002 fa8b 	bl	8002f4c <vTaskSuspendAll>
			Next_Task_Handle = RedTaskHandle;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <LedYellowTask+0x60>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <LedYellowTask+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a3e:	f002 fa93 	bl	8002f68 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <LedYellowTask+0x5c>)
 8000a48:	f000 fc04 	bl	8001254 <HAL_GPIO_WritePin>
			vTaskDelete(NULL); //Self-Delete
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f002 f935 	bl	8002cbc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("YELLOW LED Task");
 8000a52:	e7da      	b.n	8000a0a <LedYellowTask+0xe>
 8000a54:	08007728 	.word	0x08007728
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	2001437c 	.word	0x2001437c
 8000a60:	20000038 	.word	0x20000038

08000a64 <ButtonTask>:
			//Do Nothing
		}
	}/*End of Infinite Loop*/
}

void ButtonTask(void *parameter){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	6078      	str	r0, [r7, #4]
	uint8_t currentState = 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73bb      	strb	r3, [r7, #14]
	uint8_t prevState = 1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
	while(1){
		currentState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <ButtonTask+0x48>)
 8000a7a:	f000 fbd3 	bl	8001224 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	73bb      	strb	r3, [r7, #14]
		if (currentState == GPIO_PIN_RESET)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10b      	bne.n	8000aa0 <ButtonTask+0x3c>
		{
			if(prevState)
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <ButtonTask+0x3c>
			{
				xTaskNotify(Next_Task_Handle,0,eNoAction);
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <ButtonTask+0x4c>)
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	2300      	movs	r3, #0
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f003 f82e 	bl	8003afc <xTaskGenericNotify>
			}

		}
		prevState = currentState;
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f002 f9b7 	bl	8002e18 <vTaskDelay>
		currentState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000aaa:	e7e3      	b.n	8000a74 <ButtonTask+0x10>
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	20000038 	.word	0x20000038

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac6:	f000 f917 	bl	8000cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40000c00 	.word	0x40000c00

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2032      	movs	r0, #50	; 0x32
 8000b4e:	f000 f9ab 	bl	8000ea8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000b52:	2032      	movs	r0, #50	; 0x32
 8000b54:	f000 f9c4 	bl	8000ee0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fca2 	bl	80014c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b84:	f000 fc8c 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_InitTick+0xa8>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_InitTick+0xac>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_InitTick+0xb0>)
 8000ba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_InitTick+0xac>)
 8000ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_InitTick+0xac>)
 8000bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bae:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_InitTick+0xac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_InitTick+0xac>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_InitTick+0xac>)
 8000bbe:	f001 f8c1 	bl	8001d44 <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d104      	bne.n	8000bd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <HAL_InitTick+0xac>)
 8000bca:	f001 f8f0 	bl	8001dae <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3730      	adds	r7, #48	; 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	20014390 	.word	0x20014390
 8000be8:	40000c00 	.word	0x40000c00

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM5_IRQHandler+0x10>)
 8000c26:	f001 f8e6 	bl	8001df6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20014390 	.word	0x20014390

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <SystemInit+0x28>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <SystemInit+0x28>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SystemInit+0x28>)
 8000c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c66:	e003      	b.n	8000c70 <LoopCopyDataInit>

08000c68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c6e:	3104      	adds	r1, #4

08000c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c78:	d3f6      	bcc.n	8000c68 <CopyDataInit>
  ldr  r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c7c:	e002      	b.n	8000c84 <LoopFillZerobss>

08000c7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c80:	f842 3b04 	str.w	r3, [r2], #4

08000c84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c88:	d3f9      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c8a:	f7ff ffd3 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f006 fcc9 	bl	8007624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fc83 	bl	800059c <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c9c:	0800786c 	.word	0x0800786c
  ldr  r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ca4:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000ca8:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000cac:	200144bc 	.word	0x200144bc

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f8d8 	bl	8000e92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ff28 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fefe 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200143d0 	.word	0x200143d0

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	200143d0 	.word	0x200143d0

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff4c 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eba:	f7ff ff61 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ebe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f7ff ffb1 	bl	8000e2c <NVIC_EncodePriority>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff80 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff54 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	e165      	b.n	80011e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f040 8154 	bne.w	80011de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d00b      	beq.n	8000f56 <HAL_GPIO_Init+0x5a>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4a:	2b11      	cmp	r3, #17
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0xfc>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b12      	cmp	r3, #18
 8000ff6:	d123      	bne.n	8001040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	69b9      	ldr	r1, [r7, #24]
 800103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0203 	and.w	r2, r3, #3
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80ae 	beq.w	80011de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HAL_GPIO_Init+0x300>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a5c      	ldr	r2, [pc, #368]	; (80011fc <HAL_GPIO_Init+0x300>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <HAL_GPIO_Init+0x300>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109e:	4a58      	ldr	r2, [pc, #352]	; (8001200 <HAL_GPIO_Init+0x304>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <HAL_GPIO_Init+0x308>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d025      	beq.n	8001116 <HAL_GPIO_Init+0x21a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <HAL_GPIO_Init+0x30c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d01f      	beq.n	8001112 <HAL_GPIO_Init+0x216>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4d      	ldr	r2, [pc, #308]	; (800120c <HAL_GPIO_Init+0x310>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x212>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_GPIO_Init+0x314>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x20e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <HAL_GPIO_Init+0x318>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x20a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4a      	ldr	r2, [pc, #296]	; (8001218 <HAL_GPIO_Init+0x31c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x206>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <HAL_GPIO_Init+0x320>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x202>
 80010fa:	2306      	movs	r3, #6
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x21c>
 80010fe:	2307      	movs	r3, #7
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x21c>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x21c>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x21c>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x21c>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x21c>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x21c>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4935      	ldr	r1, [pc, #212]	; (8001200 <HAL_GPIO_Init+0x304>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <HAL_GPIO_Init+0x324>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <HAL_GPIO_Init+0x324>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x324>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001184:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_GPIO_Init+0x324>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_GPIO_Init+0x324>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_GPIO_Init+0x324>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_GPIO_Init+0x324>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_GPIO_Init+0x324>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f ae96 	bls.w	8000f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40013800 	.word	0x40013800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40021400 	.word	0x40021400
 800121c:	40021800 	.word	0x40021800
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e001      	b.n	8001246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695a      	ldr	r2, [r3, #20]
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	401a      	ands	r2, r3
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	429a      	cmp	r2, r3
 800129e:	d104      	bne.n	80012aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	041a      	lsls	r2, r3, #16
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0cc      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b68      	ldr	r3, [pc, #416]	; (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d90c      	bls.n	80012f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b65      	ldr	r3, [pc, #404]	; (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	4b63      	ldr	r3, [pc, #396]	; (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0b8      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001310:	4b59      	ldr	r3, [pc, #356]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	4a58      	ldr	r2, [pc, #352]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800131a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001328:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001334:	4b50      	ldr	r3, [pc, #320]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	494d      	ldr	r1, [pc, #308]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	4313      	orrs	r3, r2
 8001344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d044      	beq.n	80013dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d107      	bne.n	800136a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d119      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e07f      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d003      	beq.n	800137a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001376:	2b03      	cmp	r3, #3
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137a:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e06f      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e067      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f023 0203 	bic.w	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4934      	ldr	r1, [pc, #208]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013ac:	f7ff fcb8 	bl	8000d20 <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b4:	f7ff fcb4 	bl	8000d20 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e04f      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 020c 	and.w	r2, r3, #12
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	429a      	cmp	r2, r3
 80013da:	d1eb      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d20c      	bcs.n	8001404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e032      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4916      	ldr	r1, [pc, #88]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	4313      	orrs	r3, r2
 8001420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	490e      	ldr	r1, [pc, #56]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	4313      	orrs	r3, r2
 8001440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001442:	f000 f873 	bl	800152c <HAL_RCC_GetSysClockFreq>
 8001446:	4602      	mov	r2, r0
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	490a      	ldr	r1, [pc, #40]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	5ccb      	ldrb	r3, [r1, r3]
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_ClockConfig+0x1c8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fb68 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023c00 	.word	0x40023c00
 8001478:	40023800 	.word	0x40023800
 800147c:	0800781c 	.word	0x0800781c
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004

08001488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_RCC_GetHCLKFreq+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000000 	.word	0x20000000

080014a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014a4:	f7ff fff0 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	0a9b      	lsrs	r3, r3, #10
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	4903      	ldr	r1, [pc, #12]	; (80014c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	0800782c 	.word	0x0800782c

080014c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	220f      	movs	r2, #15
 80014d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_RCC_GetClockConfig+0x5c>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_RCC_GetClockConfig+0x5c>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_RCC_GetClockConfig+0x5c>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_GetClockConfig+0x5c>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <HAL_RCC_GetClockConfig+0x60>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 020f 	and.w	r2, r3, #15
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40023c00 	.word	0x40023c00

0800152c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800152c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001530:	b088      	sub	sp, #32
 8001532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001548:	4bce      	ldr	r3, [pc, #824]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b0c      	cmp	r3, #12
 8001552:	f200 818d 	bhi.w	8001870 <HAL_RCC_GetSysClockFreq+0x344>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <HAL_RCC_GetSysClockFreq+0x30>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	08001591 	.word	0x08001591
 8001560:	08001871 	.word	0x08001871
 8001564:	08001871 	.word	0x08001871
 8001568:	08001871 	.word	0x08001871
 800156c:	08001597 	.word	0x08001597
 8001570:	08001871 	.word	0x08001871
 8001574:	08001871 	.word	0x08001871
 8001578:	08001871 	.word	0x08001871
 800157c:	0800159d 	.word	0x0800159d
 8001580:	08001871 	.word	0x08001871
 8001584:	08001871 	.word	0x08001871
 8001588:	08001871 	.word	0x08001871
 800158c:	08001711 	.word	0x08001711
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001590:	4bbd      	ldr	r3, [pc, #756]	; (8001888 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001592:	61bb      	str	r3, [r7, #24]
       break;
 8001594:	e16f      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001596:	4bbd      	ldr	r3, [pc, #756]	; (800188c <HAL_RCC_GetSysClockFreq+0x360>)
 8001598:	61bb      	str	r3, [r7, #24]
      break;
 800159a:	e16c      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800159c:	4bb9      	ldr	r3, [pc, #740]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015a4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	4bb7      	ldr	r3, [pc, #732]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d053      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b2:	4bb4      	ldr	r3, [pc, #720]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	099b      	lsrs	r3, r3, #6
 80015b8:	461a      	mov	r2, r3
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	ea02 0400 	and.w	r4, r2, r0
 80015ca:	603c      	str	r4, [r7, #0]
 80015cc:	400b      	ands	r3, r1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	014b      	lsls	r3, r1, #5
 80015e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015e6:	0142      	lsls	r2, r0, #5
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	4623      	mov	r3, r4
 80015ee:	1ac0      	subs	r0, r0, r3
 80015f0:	462b      	mov	r3, r5
 80015f2:	eb61 0103 	sbc.w	r1, r1, r3
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	018b      	lsls	r3, r1, #6
 8001600:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001604:	0182      	lsls	r2, r0, #6
 8001606:	1a12      	subs	r2, r2, r0
 8001608:	eb63 0301 	sbc.w	r3, r3, r1
 800160c:	f04f 0000 	mov.w	r0, #0
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	00d9      	lsls	r1, r3, #3
 8001616:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800161a:	00d0      	lsls	r0, r2, #3
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4621      	mov	r1, r4
 8001622:	1852      	adds	r2, r2, r1
 8001624:	4629      	mov	r1, r5
 8001626:	eb43 0101 	adc.w	r1, r3, r1
 800162a:	460b      	mov	r3, r1
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	0259      	lsls	r1, r3, #9
 8001636:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800163a:	0250      	lsls	r0, r2, #9
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	461a      	mov	r2, r3
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	f7fe fe2a 	bl	80002a4 <__aeabi_uldivmod>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4613      	mov	r3, r2
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	e04c      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800165a:	4b8a      	ldr	r3, [pc, #552]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	099b      	lsrs	r3, r3, #6
 8001660:	461a      	mov	r2, r3
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	f240 10ff 	movw	r0, #511	; 0x1ff
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	ea02 0a00 	and.w	sl, r2, r0
 8001672:	ea03 0b01 	and.w	fp, r3, r1
 8001676:	4650      	mov	r0, sl
 8001678:	4659      	mov	r1, fp
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	014b      	lsls	r3, r1, #5
 8001684:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001688:	0142      	lsls	r2, r0, #5
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	ebb0 000a 	subs.w	r0, r0, sl
 8001692:	eb61 010b 	sbc.w	r1, r1, fp
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	018b      	lsls	r3, r1, #6
 80016a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016a4:	0182      	lsls	r2, r0, #6
 80016a6:	1a12      	subs	r2, r2, r0
 80016a8:	eb63 0301 	sbc.w	r3, r3, r1
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	00d9      	lsls	r1, r3, #3
 80016b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016ba:	00d0      	lsls	r0, r2, #3
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	eb12 020a 	adds.w	r2, r2, sl
 80016c4:	eb43 030b 	adc.w	r3, r3, fp
 80016c8:	f04f 0000 	mov.w	r0, #0
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	0299      	lsls	r1, r3, #10
 80016d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016d6:	0290      	lsls	r0, r2, #10
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	461a      	mov	r2, r3
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	f7fe fddc 	bl	80002a4 <__aeabi_uldivmod>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4613      	mov	r3, r2
 80016f2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016f4:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	3301      	adds	r3, #1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	61bb      	str	r3, [r7, #24]
      break;
 800170e:	e0b2      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001710:	4b5c      	ldr	r3, [pc, #368]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001718:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171a:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d04d      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001726:	4b57      	ldr	r3, [pc, #348]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	099b      	lsrs	r3, r3, #6
 800172c:	461a      	mov	r2, r3
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	ea02 0800 	and.w	r8, r2, r0
 800173e:	ea03 0901 	and.w	r9, r3, r1
 8001742:	4640      	mov	r0, r8
 8001744:	4649      	mov	r1, r9
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	014b      	lsls	r3, r1, #5
 8001750:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001754:	0142      	lsls	r2, r0, #5
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	ebb0 0008 	subs.w	r0, r0, r8
 800175e:	eb61 0109 	sbc.w	r1, r1, r9
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	018b      	lsls	r3, r1, #6
 800176c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001770:	0182      	lsls	r2, r0, #6
 8001772:	1a12      	subs	r2, r2, r0
 8001774:	eb63 0301 	sbc.w	r3, r3, r1
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	00d9      	lsls	r1, r3, #3
 8001782:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001786:	00d0      	lsls	r0, r2, #3
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	eb12 0208 	adds.w	r2, r2, r8
 8001790:	eb43 0309 	adc.w	r3, r3, r9
 8001794:	f04f 0000 	mov.w	r0, #0
 8001798:	f04f 0100 	mov.w	r1, #0
 800179c:	0259      	lsls	r1, r3, #9
 800179e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017a2:	0250      	lsls	r0, r2, #9
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	461a      	mov	r2, r3
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	f7fe fd76 	bl	80002a4 <__aeabi_uldivmod>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4613      	mov	r3, r2
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	e04a      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	461a      	mov	r2, r3
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	ea02 0400 	and.w	r4, r2, r0
 80017da:	ea03 0501 	and.w	r5, r3, r1
 80017de:	4620      	mov	r0, r4
 80017e0:	4629      	mov	r1, r5
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	014b      	lsls	r3, r1, #5
 80017ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017f0:	0142      	lsls	r2, r0, #5
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	1b00      	subs	r0, r0, r4
 80017f8:	eb61 0105 	sbc.w	r1, r1, r5
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	018b      	lsls	r3, r1, #6
 8001806:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800180a:	0182      	lsls	r2, r0, #6
 800180c:	1a12      	subs	r2, r2, r0
 800180e:	eb63 0301 	sbc.w	r3, r3, r1
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	00d9      	lsls	r1, r3, #3
 800181c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001820:	00d0      	lsls	r0, r2, #3
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	1912      	adds	r2, r2, r4
 8001828:	eb45 0303 	adc.w	r3, r5, r3
 800182c:	f04f 0000 	mov.w	r0, #0
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	0299      	lsls	r1, r3, #10
 8001836:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800183a:	0290      	lsls	r0, r2, #10
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	461a      	mov	r2, r3
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	f7fe fd2a 	bl	80002a4 <__aeabi_uldivmod>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4613      	mov	r3, r2
 8001856:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	0f1b      	lsrs	r3, r3, #28
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	61bb      	str	r3, [r7, #24]
      break;
 800186e:	e002      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001872:	61bb      	str	r3, [r7, #24]
      break;
 8001874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001876:	69bb      	ldr	r3, [r7, #24]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	00f42400 	.word	0x00f42400
 800188c:	007a1200 	.word	0x007a1200

08001890 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8083 	beq.w	80019b0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018aa:	4b95      	ldr	r3, [pc, #596]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d019      	beq.n	80018ea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018b6:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d106      	bne.n	80018d0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018c2:	4b8f      	ldr	r3, [pc, #572]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ce:	d00c      	beq.n	80018ea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d0:	4b8b      	ldr	r3, [pc, #556]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	d112      	bne.n	8001902 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018dc:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e8:	d10b      	bne.n	8001902 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ea:	4b85      	ldr	r3, [pc, #532]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d05b      	beq.n	80019ae <HAL_RCC_OscConfig+0x11e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d157      	bne.n	80019ae <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e216      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x8a>
 800190c:	4b7c      	ldr	r3, [pc, #496]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a7b      	ldr	r2, [pc, #492]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e01d      	b.n	8001956 <HAL_RCC_OscConfig+0xc6>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0xae>
 8001924:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a75      	ldr	r2, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 800192a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a72      	ldr	r2, [pc, #456]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e00b      	b.n	8001956 <HAL_RCC_OscConfig+0xc6>
 800193e:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6f      	ldr	r2, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6c      	ldr	r2, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d013      	beq.n	8001986 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff f9df 	bl	8000d20 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001966:	f7ff f9db 	bl	8000d20 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b64      	cmp	r3, #100	; 0x64
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1db      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001978:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0xd6>
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f9cb 	bl	8000d20 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198e:	f7ff f9c7 	bl	8000d20 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	; 0x64
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1c7      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a0:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0xfe>
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d06f      	beq.n	8001a9c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d017      	beq.n	80019f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019c8:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019d4:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00b      	beq.n	80019f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	d11c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ec:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d116      	bne.n	8001a26 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_OscConfig+0x180>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e18f      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a10:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4938      	ldr	r1, [pc, #224]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a24:	e03a      	b.n	8001a9c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d020      	beq.n	8001a70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2e:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f974 	bl	8000d20 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f970 	bl	8000d20 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e170      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4925      	ldr	r1, [pc, #148]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
 8001a6e:	e015      	b.n	8001a9c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f953 	bl	8000d20 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff f94f 	bl	8000d20 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e14f      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d037      	beq.n	8001b18 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d016      	beq.n	8001ade <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_RCC_OscConfig+0x278>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab6:	f7ff f933 	bl	8000d20 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abe:	f7ff f92f 	bl	8000d20 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e12f      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x22e>
 8001adc:	e01c      	b.n	8001b18 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_RCC_OscConfig+0x278>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f91c 	bl	8000d20 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aea:	e00f      	b.n	8001b0c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f918 	bl	8000d20 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d908      	bls.n	8001b0c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e118      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	42470000 	.word	0x42470000
 8001b08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	4b8a      	ldr	r3, [pc, #552]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1e9      	bne.n	8001aec <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8097 	beq.w	8001c54 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2a:	4b83      	ldr	r3, [pc, #524]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b52:	2301      	movs	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b79      	ldr	r3, [pc, #484]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d118      	bne.n	8001b94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b62:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a75      	ldr	r2, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f8d7 	bl	8000d20 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7ff f8d3 	bl	8000d20 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0d3      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	4b6c      	ldr	r3, [pc, #432]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x31a>
 8001b9c:	4b66      	ldr	r3, [pc, #408]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a65      	ldr	r2, [pc, #404]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba8:	e01c      	b.n	8001be4 <HAL_RCC_OscConfig+0x354>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x33c>
 8001bb2:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a60      	ldr	r2, [pc, #384]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	4b5e      	ldr	r3, [pc, #376]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	4a5d      	ldr	r2, [pc, #372]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0x354>
 8001bcc:	4b5a      	ldr	r3, [pc, #360]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a59      	ldr	r2, [pc, #356]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd8:	4b57      	ldr	r3, [pc, #348]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a56      	ldr	r2, [pc, #344]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001bde:	f023 0304 	bic.w	r3, r3, #4
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d015      	beq.n	8001c18 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff f898 	bl	8000d20 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7ff f894 	bl	8000d20 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e092      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0a:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0ee      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x364>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f882 	bl	8000d20 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7ff f87e 	bl	8000d20 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e07c      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c36:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1ee      	bne.n	8001c20 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	4a3a      	ldr	r2, [pc, #232]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d068      	beq.n	8001d2e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d060      	beq.n	8001d2a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d145      	bne.n	8001cfc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <HAL_RCC_OscConfig+0x4b0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff f853 	bl	8000d20 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff f84f 	bl	8000d20 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e04f      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69da      	ldr	r2, [r3, #28]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	019b      	lsls	r3, r3, #6
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	061b      	lsls	r3, r3, #24
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	071b      	lsls	r3, r3, #28
 8001cc8:	491b      	ldr	r1, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_RCC_OscConfig+0x4b0>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f824 	bl	8000d20 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f820 	bl	8000d20 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e020      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x44c>
 8001cfa:	e018      	b.n	8001d2e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_RCC_OscConfig+0x4b0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff f80d 	bl	8000d20 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff f809 	bl	8000d20 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_RCC_OscConfig+0x4a8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x47a>
 8001d28:	e001      	b.n	8001d2e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	42470060 	.word	0x42470060

08001d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e01d      	b.n	8001d92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f815 	bl	8001d9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f000 f968 	bl	8002058 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b06      	cmp	r3, #6
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d122      	bne.n	8001e52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d11b      	bne.n	8001e52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f06f 0202 	mvn.w	r2, #2
 8001e22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f8ee 	bl	800201a <HAL_TIM_IC_CaptureCallback>
 8001e3e:	e005      	b.n	8001e4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8e0 	bl	8002006 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8f1 	bl	800202e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d122      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d11b      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f06f 0204 	mvn.w	r2, #4
 8001e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f8c4 	bl	800201a <HAL_TIM_IC_CaptureCallback>
 8001e92:	e005      	b.n	8001ea0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8b6 	bl	8002006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8c7 	bl	800202e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d122      	bne.n	8001efa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d11b      	bne.n	8001efa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f06f 0208 	mvn.w	r2, #8
 8001eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f89a 	bl	800201a <HAL_TIM_IC_CaptureCallback>
 8001ee6:	e005      	b.n	8001ef4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f88c 	bl	8002006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f89d 	bl	800202e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d122      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d11b      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f06f 0210 	mvn.w	r2, #16
 8001f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2208      	movs	r2, #8
 8001f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f870 	bl	800201a <HAL_TIM_IC_CaptureCallback>
 8001f3a:	e005      	b.n	8001f48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f862 	bl	8002006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f873 	bl	800202e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10e      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f06f 0201 	mvn.w	r2, #1
 8001f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fd9d 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d10e      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d107      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f903 	bl	80021ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d10e      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbe:	2b40      	cmp	r3, #64	; 0x40
 8001fc0:	d107      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f838 	bl	8002042 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d10e      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d107      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0220 	mvn.w	r2, #32
 8001ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f8cd 	bl	8002198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a40      	ldr	r2, [pc, #256]	; (800216c <TIM_Base_SetConfig+0x114>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002076:	d00f      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3d      	ldr	r2, [pc, #244]	; (8002170 <TIM_Base_SetConfig+0x118>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00b      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3c      	ldr	r2, [pc, #240]	; (8002174 <TIM_Base_SetConfig+0x11c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d007      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3b      	ldr	r2, [pc, #236]	; (8002178 <TIM_Base_SetConfig+0x120>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3a      	ldr	r2, [pc, #232]	; (800217c <TIM_Base_SetConfig+0x124>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d108      	bne.n	80020aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2f      	ldr	r2, [pc, #188]	; (800216c <TIM_Base_SetConfig+0x114>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02b      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b8:	d027      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <TIM_Base_SetConfig+0x118>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d023      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a2b      	ldr	r2, [pc, #172]	; (8002174 <TIM_Base_SetConfig+0x11c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a2a      	ldr	r2, [pc, #168]	; (8002178 <TIM_Base_SetConfig+0x120>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01b      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a29      	ldr	r2, [pc, #164]	; (800217c <TIM_Base_SetConfig+0x124>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d017      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a28      	ldr	r2, [pc, #160]	; (8002180 <TIM_Base_SetConfig+0x128>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a27      	ldr	r2, [pc, #156]	; (8002184 <TIM_Base_SetConfig+0x12c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00f      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a26      	ldr	r2, [pc, #152]	; (8002188 <TIM_Base_SetConfig+0x130>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00b      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a25      	ldr	r2, [pc, #148]	; (800218c <TIM_Base_SetConfig+0x134>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a24      	ldr	r2, [pc, #144]	; (8002190 <TIM_Base_SetConfig+0x138>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a23      	ldr	r2, [pc, #140]	; (8002194 <TIM_Base_SetConfig+0x13c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d108      	bne.n	800211c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <TIM_Base_SetConfig+0x114>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d003      	beq.n	8002150 <TIM_Base_SetConfig+0xf8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <TIM_Base_SetConfig+0x124>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d103      	bne.n	8002158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	615a      	str	r2, [r3, #20]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40010000 	.word	0x40010000
 8002170:	40000400 	.word	0x40000400
 8002174:	40000800 	.word	0x40000800
 8002178:	40000c00 	.word	0x40000c00
 800217c:	40010400 	.word	0x40010400
 8002180:	40014000 	.word	0x40014000
 8002184:	40014400 	.word	0x40014400
 8002188:	40014800 	.word	0x40014800
 800218c:	40001800 	.word	0x40001800
 8002190:	40001c00 	.word	0x40001c00
 8002194:	40002000 	.word	0x40002000

08002198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f103 0208 	add.w	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f103 0208 	add.w	r2, r3, #8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f103 0208 	add.w	r2, r3, #8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	601a      	str	r2, [r3, #0]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d103      	bne.n	8002282 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	e00c      	b.n	800229c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3308      	adds	r3, #8
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e002      	b.n	8002290 <vListInsert+0x2e>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	429a      	cmp	r2, r3
 800229a:	d2f6      	bcs.n	800228a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	601a      	str	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6892      	ldr	r2, [r2, #8]
 80022ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6852      	ldr	r2, [r2, #4]
 80022f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d103      	bne.n	8002308 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002332:	2301      	movs	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <xQueueGenericReset+0x2e>
        __asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	60fb      	str	r3, [r7, #12]
    }
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d05d      	beq.n	8002418 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002360:	2b00      	cmp	r3, #0
 8002362:	d059      	beq.n	8002418 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236c:	2100      	movs	r1, #0
 800236e:	fba3 2302 	umull	r2, r3, r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d000      	beq.n	8002378 <xQueueGenericReset+0x50>
 8002376:	2101      	movs	r1, #1
 8002378:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800237a:	2b00      	cmp	r3, #0
 800237c:	d14c      	bne.n	8002418 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800237e:	f002 f933 	bl	80045e8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	6939      	ldr	r1, [r7, #16]
 800238c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	441a      	add	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2200      	movs	r2, #0
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6939      	ldr	r1, [r7, #16]
 80023b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	441a      	add	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	22ff      	movs	r2, #255	; 0xff
 80023c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	22ff      	movs	r2, #255	; 0xff
 80023ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d114      	bne.n	80023fe <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01a      	beq.n	8002412 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	3310      	adds	r3, #16
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 f8d3 	bl	800358c <xTaskRemoveFromEventList>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d012      	beq.n	8002412 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <xQueueGenericReset+0x11c>)
 80023ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	e009      	b.n	8002412 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	3310      	adds	r3, #16
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fedc 	bl	80021c0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	3324      	adds	r3, #36	; 0x24
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fed7 	bl	80021c0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002412:	f002 f919 	bl	8004648 <vPortExitCritical>
 8002416:	e001      	b.n	800241c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <xQueueGenericReset+0x110>
        __asm volatile
 8002422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	60bb      	str	r3, [r7, #8]
    }
 8002434:	bf00      	nop
 8002436:	e7fe      	b.n	8002436 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002438:	697b      	ldr	r3, [r7, #20]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000ed04 	.word	0xe000ed04

08002448 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02e      	beq.n	80024be <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002460:	2100      	movs	r1, #0
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	fba3 2302 	umull	r2, r3, r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d000      	beq.n	8002470 <xQueueGenericCreate+0x28>
 800246e:	2101      	movs	r1, #1
 8002470:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	d123      	bne.n	80024be <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800247e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002482:	d81c      	bhi.n	80024be <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3350      	adds	r3, #80	; 0x50
 8002492:	4618      	mov	r0, r3
 8002494:	f002 f9d2 	bl	800483c <pvPortMalloc>
 8002498:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01c      	beq.n	80024da <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3350      	adds	r3, #80	; 0x50
 80024a8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024aa:	79fa      	ldrb	r2, [r7, #7]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f814 	bl	80024e4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80024bc:	e00d      	b.n	80024da <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <xQueueGenericCreate+0x92>
        __asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	613b      	str	r3, [r7, #16]
    }
 80024d6:	bf00      	nop
 80024d8:	e7fe      	b.n	80024d8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80024da:	69fb      	ldr	r3, [r7, #28]
    }
 80024dc:	4618      	mov	r0, r3
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d103      	bne.n	8002500 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e002      	b.n	8002506 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002512:	2101      	movs	r1, #1
 8002514:	69b8      	ldr	r0, [r7, #24]
 8002516:	f7ff ff07 	bl	8002328 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	2073      	movs	r0, #115	; 0x73
 800252a:	f004 f963 	bl	80067f4 <SEGGER_SYSVIEW_RecordU32x3>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b08f      	sub	sp, #60	; 0x3c
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <xQueueReceive+0x30>
        __asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	623b      	str	r3, [r7, #32]
    }
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <xQueueReceive+0x3e>
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <xQueueReceive+0x42>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <xQueueReceive+0x44>
 800257a:	2300      	movs	r3, #0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <xQueueReceive+0x5e>
        __asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	61fb      	str	r3, [r7, #28]
    }
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002596:	f001 fa0b 	bl	80039b0 <xTaskGetSchedulerState>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <xQueueReceive+0x6e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <xQueueReceive+0x72>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <xQueueReceive+0x74>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <xQueueReceive+0x8e>
        __asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	61bb      	str	r3, [r7, #24]
    }
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025c6:	f002 f80f 	bl	80045e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d02f      	beq.n	8002636 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025da:	f000 f8bd 	bl	8002758 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 fe95 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 80025e6:	4604      	mov	r4, r0
 80025e8:	2000      	movs	r0, #0
 80025ea:	f004 fe91 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2101      	movs	r1, #1
 80025f4:	9100      	str	r1, [sp, #0]
 80025f6:	4621      	mov	r1, r4
 80025f8:	205c      	movs	r0, #92	; 0x5c
 80025fa:	f004 f971 	bl	80068e0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00f      	beq.n	800262e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	3310      	adds	r3, #16
 8002612:	4618      	mov	r0, r3
 8002614:	f000 ffba 	bl	800358c <xTaskRemoveFromEventList>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800261e:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <xQueueReceive+0x21c>)
 8002620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800262e:	f002 f80b 	bl	8004648 <vPortExitCritical>
                return pdPASS;
 8002632:	2301      	movs	r3, #1
 8002634:	e08a      	b.n	800274c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d113      	bne.n	8002664 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800263c:	f002 f804 	bl	8004648 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	4618      	mov	r0, r3
 8002644:	f004 fe64 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 8002648:	4604      	mov	r4, r0
 800264a:	2000      	movs	r0, #0
 800264c:	f004 fe60 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 8002650:	4602      	mov	r2, r0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2101      	movs	r1, #1
 8002656:	9100      	str	r1, [sp, #0]
 8002658:	4621      	mov	r1, r4
 800265a:	205c      	movs	r0, #92	; 0x5c
 800265c:	f004 f940 	bl	80068e0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002660:	2300      	movs	r3, #0
 8002662:	e073      	b.n	800274c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4618      	mov	r0, r3
 8002670:	f001 f864 	bl	800373c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002674:	2301      	movs	r3, #1
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002678:	f001 ffe6 	bl	8004648 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800267c:	f000 fc66 	bl	8002f4c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002680:	f001 ffb2 	bl	80045e8 <vPortEnterCritical>
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800268a:	b25b      	sxtb	r3, r3
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d103      	bne.n	800269a <xQueueReceive+0x162>
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a6:	d103      	bne.n	80026b0 <xQueueReceive+0x178>
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b0:	f001 ffca 	bl	8004648 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026b4:	1d3a      	adds	r2, r7, #4
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 f853 	bl	8003768 <xTaskCheckForTimeOut>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d124      	bne.n	8002712 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ca:	f000 f8bd 	bl	8002848 <prvIsQueueEmpty>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d018      	beq.n	8002706 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	3324      	adds	r3, #36	; 0x24
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fee9 	bl	80034b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80026e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026e4:	f000 f85e 	bl	80027a4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80026e8:	f000 fc3e 	bl	8002f68 <xTaskResumeAll>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f47f af69 	bne.w	80025c6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <xQueueReceive+0x21c>)
 80026f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	e75f      	b.n	80025c6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002708:	f000 f84c 	bl	80027a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800270c:	f000 fc2c 	bl	8002f68 <xTaskResumeAll>
 8002710:	e759      	b.n	80025c6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002714:	f000 f846 	bl	80027a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002718:	f000 fc26 	bl	8002f68 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800271c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800271e:	f000 f893 	bl	8002848 <prvIsQueueEmpty>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	f43f af4e 	beq.w	80025c6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	4618      	mov	r0, r3
 800272e:	f004 fdef 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 8002732:	4604      	mov	r4, r0
 8002734:	2000      	movs	r0, #0
 8002736:	f004 fdeb 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 800273a:	4602      	mov	r2, r0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2101      	movs	r1, #1
 8002740:	9100      	str	r1, [sp, #0]
 8002742:	4621      	mov	r1, r4
 8002744:	205c      	movs	r0, #92	; 0x5c
 8002746:	f004 f8cb 	bl	80068e0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800274a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800274c:	4618      	mov	r0, r3
 800274e:	3734      	adds	r7, #52	; 0x34
 8002750:	46bd      	mov	sp, r7
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	e000ed04 	.word	0xe000ed04

08002758 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d018      	beq.n	800279c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	441a      	add	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	d303      	bcc.n	800278c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68d9      	ldr	r1, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	461a      	mov	r2, r3
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	f004 ff76 	bl	8007688 <memcpy>
    }
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027ac:	f001 ff1c 	bl	80045e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027b6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027b8:	e011      	b.n	80027de <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d012      	beq.n	80027e8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3324      	adds	r3, #36	; 0x24
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fee0 	bl	800358c <xTaskRemoveFromEventList>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80027d2:	f001 f82f 	bl	8003834 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	3b01      	subs	r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	dce9      	bgt.n	80027ba <prvUnlockQueue+0x16>
 80027e6:	e000      	b.n	80027ea <prvUnlockQueue+0x46>
                        break;
 80027e8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	22ff      	movs	r2, #255	; 0xff
 80027ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80027f2:	f001 ff29 	bl	8004648 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80027f6:	f001 fef7 	bl	80045e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002800:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002802:	e011      	b.n	8002828 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3310      	adds	r3, #16
 8002810:	4618      	mov	r0, r3
 8002812:	f000 febb 	bl	800358c <xTaskRemoveFromEventList>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800281c:	f001 f80a 	bl	8003834 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	3b01      	subs	r3, #1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800282c:	2b00      	cmp	r3, #0
 800282e:	dce9      	bgt.n	8002804 <prvUnlockQueue+0x60>
 8002830:	e000      	b.n	8002834 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002832:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	22ff      	movs	r2, #255	; 0xff
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800283c:	f001 ff04 	bl	8004648 <vPortExitCritical>
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002850:	f001 feca 	bl	80045e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800285c:	2301      	movs	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e001      	b.n	8002866 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002866:	f001 feef 	bl	8004648 <vPortExitCritical>

    return xReturn;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <vQueueAddToRegistry+0x26>
        __asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	60fb      	str	r3, [r7, #12]
    }
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d024      	beq.n	80028ee <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e01e      	b.n	80028e8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <vQueueAddToRegistry+0xa8>)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d105      	bne.n	80028c6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4a17      	ldr	r2, [pc, #92]	; (800291c <vQueueAddToRegistry+0xa8>)
 80028c0:	4413      	add	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
                    break;
 80028c4:	e013      	b.n	80028ee <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <vQueueAddToRegistry+0x6e>
 80028cc:	4a13      	ldr	r2, [pc, #76]	; (800291c <vQueueAddToRegistry+0xa8>)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d104      	bne.n	80028e2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <vQueueAddToRegistry+0xa8>)
 80028de:	4413      	add	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b07      	cmp	r3, #7
 80028ec:	d9dd      	bls.n	80028aa <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00f      	beq.n	8002914 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	f004 fd04 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 8002908:	4601      	mov	r1, r0
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	2071      	movs	r0, #113	; 0x71
 8002910:	f003 ff16 	bl	8006740 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200143d4 	.word	0x200143d4

08002920 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002930:	f001 fe5a 	bl	80045e8 <vPortEnterCritical>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800293a:	b25b      	sxtb	r3, r3
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d103      	bne.n	800294a <vQueueWaitForMessageRestricted+0x2a>
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002950:	b25b      	sxtb	r3, r3
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d103      	bne.n	8002960 <vQueueWaitForMessageRestricted+0x40>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002960:	f001 fe72 	bl	8004648 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3324      	adds	r3, #36	; 0x24
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fdc1 	bl	80034fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff12 	bl	80027a4 <prvUnlockQueue>
    }
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	; 0x30
 800298c:	af04      	add	r7, sp, #16
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4618      	mov	r0, r3
 800299e:	f001 ff4d 	bl	800483c <pvPortMalloc>
 80029a2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00e      	beq.n	80029c8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029aa:	2058      	movs	r0, #88	; 0x58
 80029ac:	f001 ff46 	bl	800483c <pvPortMalloc>
 80029b0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
 80029be:	e005      	b.n	80029cc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80029c0:	6978      	ldr	r0, [r7, #20]
 80029c2:	f002 f81b 	bl	80049fc <vPortFree>
 80029c6:	e001      	b.n	80029cc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d013      	beq.n	80029fa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	2300      	movs	r3, #0
 80029d6:	9303      	str	r3, [sp, #12]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	9302      	str	r3, [sp, #8]
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f80e 	bl	8002a0a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029ee:	69f8      	ldr	r0, [r7, #28]
 80029f0:	f000 f8b0 	bl	8002b54 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029f4:	2301      	movs	r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	e002      	b.n	8002a00 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
 80029fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a00:	69bb      	ldr	r3, [r7, #24]
    }
 8002a02:	4618      	mov	r0, r3
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b088      	sub	sp, #32
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	461a      	mov	r2, r3
 8002a22:	21a5      	movs	r1, #165	; 0xa5
 8002a24:	f004 fe3e 	bl	80076a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a32:	3b01      	subs	r3, #1
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f023 0307 	bic.w	r3, r3, #7
 8002a40:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	617b      	str	r3, [r7, #20]
    }
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01f      	beq.n	8002aa8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	e012      	b.n	8002a94 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	7819      	ldrb	r1, [r3, #0]
 8002a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3334      	adds	r3, #52	; 0x34
 8002a7e:	460a      	mov	r2, r1
 8002a80:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	4413      	add	r3, r2
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3301      	adds	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b09      	cmp	r3, #9
 8002a98:	d9e9      	bls.n	8002a6e <prvInitialiseNewTask+0x64>
 8002a9a:	e000      	b.n	8002a9e <prvInitialiseNewTask+0x94>
            {
                break;
 8002a9c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002aa6:	e003      	b.n	8002ab0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d90a      	bls.n	8002acc <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	613b      	str	r3, [r7, #16]
    }
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d901      	bls.n	8002ad6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	3304      	adds	r3, #4
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fb87 	bl	8002200 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	3318      	adds	r3, #24
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fb82 	bl	8002200 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b00:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	f1c3 0205 	rsb	r2, r3, #5
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	3350      	adds	r3, #80	; 0x50
 8002b16:	2204      	movs	r2, #4
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 fdc2 	bl	80076a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	3354      	adds	r3, #84	; 0x54
 8002b24:	2201      	movs	r2, #1
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f004 fdbb 	bl	80076a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	69b8      	ldr	r0, [r7, #24]
 8002b34:	f001 fc26 	bl	8004384 <pxPortInitialiseStack>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b4a:	bf00      	nop
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b5c:	f001 fd44 	bl	80045e8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <prvAddNewTaskToReadyList+0x14c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <prvAddNewTaskToReadyList+0x14c>)
 8002b68:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ca4 <prvAddNewTaskToReadyList+0x150>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b72:	4a4c      	ldr	r2, [pc, #304]	; (8002ca4 <prvAddNewTaskToReadyList+0x150>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b78:	4b49      	ldr	r3, [pc, #292]	; (8002ca0 <prvAddNewTaskToReadyList+0x14c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d110      	bne.n	8002ba2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b80:	f000 fe7c 	bl	800387c <prvInitialiseTaskLists>
 8002b84:	e00d      	b.n	8002ba2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b86:	4b48      	ldr	r3, [pc, #288]	; (8002ca8 <prvAddNewTaskToReadyList+0x154>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b8e:	4b45      	ldr	r3, [pc, #276]	; (8002ca4 <prvAddNewTaskToReadyList+0x150>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d802      	bhi.n	8002ba2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b9c:	4a41      	ldr	r2, [pc, #260]	; (8002ca4 <prvAddNewTaskToReadyList+0x150>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ba2:	4b42      	ldr	r3, [pc, #264]	; (8002cac <prvAddNewTaskToReadyList+0x158>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	4a40      	ldr	r2, [pc, #256]	; (8002cac <prvAddNewTaskToReadyList+0x158>)
 8002baa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bac:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <prvAddNewTaskToReadyList+0x158>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <prvAddNewTaskToReadyList+0x94>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f004 fa81 	bl	80070c4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	461d      	mov	r5, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	461c      	mov	r4, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	1ae3      	subs	r3, r4, r3
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	462b      	mov	r3, r5
 8002be4:	f002 f8d0 	bl	8004d88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 faee 	bl	80071cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <prvAddNewTaskToReadyList+0x15c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	; (8002cb0 <prvAddNewTaskToReadyList+0x15c>)
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c06:	492b      	ldr	r1, [pc, #172]	; (8002cb4 <prvAddNewTaskToReadyList+0x160>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3304      	adds	r3, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	3204      	adds	r2, #4
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	1d1a      	adds	r2, r3, #4
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <prvAddNewTaskToReadyList+0x160>)
 8002c46:	441a      	add	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	615a      	str	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	4918      	ldr	r1, [pc, #96]	; (8002cb4 <prvAddNewTaskToReadyList+0x160>)
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1c59      	adds	r1, r3, #1
 8002c60:	4814      	ldr	r0, [pc, #80]	; (8002cb4 <prvAddNewTaskToReadyList+0x160>)
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4403      	add	r3, r0
 8002c6c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c6e:	f001 fceb 	bl	8004648 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <prvAddNewTaskToReadyList+0x154>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00e      	beq.n	8002c98 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <prvAddNewTaskToReadyList+0x150>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d207      	bcs.n	8002c98 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <prvAddNewTaskToReadyList+0x164>)
 8002c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca0:	20000114 	.word	0x20000114
 8002ca4:	2000003c 	.word	0x2000003c
 8002ca8:	20000120 	.word	0x20000120
 8002cac:	20000130 	.word	0x20000130
 8002cb0:	2000011c 	.word	0x2000011c
 8002cb4:	20000040 	.word	0x20000040
 8002cb8:	e000ed04 	.word	0xe000ed04

08002cbc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002cc4:	f001 fc90 	bl	80045e8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <vTaskDelete+0x18>
 8002cce:	4b48      	ldr	r3, [pc, #288]	; (8002df0 <vTaskDelete+0x134>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	e000      	b.n	8002cd6 <vTaskDelete+0x1a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff faf9 	bl	80022d4 <uxListRemove>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d115      	bne.n	8002d14 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4941      	ldr	r1, [pc, #260]	; (8002df4 <vTaskDelete+0x138>)
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <vTaskDelete+0x58>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	2201      	movs	r2, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <vTaskDelete+0x13c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	4a39      	ldr	r2, [pc, #228]	; (8002df8 <vTaskDelete+0x13c>)
 8002d12:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3318      	adds	r3, #24
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fad7 	bl	80022d4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002d26:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <vTaskDelete+0x140>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	4a33      	ldr	r2, [pc, #204]	; (8002dfc <vTaskDelete+0x140>)
 8002d2e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002d30:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <vTaskDelete+0x134>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d118      	bne.n	8002d6c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	482f      	ldr	r0, [pc, #188]	; (8002e00 <vTaskDelete+0x144>)
 8002d42:	f7ff fa6a 	bl	800221a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002d46:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <vTaskDelete+0x148>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	4a2d      	ldr	r2, [pc, #180]	; (8002e04 <vTaskDelete+0x148>)
 8002d4e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 fadc 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	2022      	movs	r0, #34	; 0x22
 8002d5e:	f003 fcb3 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 f877 	bl	8004e58 <SYSVIEW_DeleteTask>
 8002d6a:	e013      	b.n	8002d94 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <vTaskDelete+0x14c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <vTaskDelete+0x14c>)
 8002d74:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 fac9 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4619      	mov	r1, r3
 8002d82:	2022      	movs	r0, #34	; 0x22
 8002d84:	f003 fca0 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f002 f864 	bl	8004e58 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002d90:	f000 fdf2 	bl	8003978 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002d94:	f001 fc58 	bl	8004648 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <vTaskDelete+0x134>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d002      	beq.n	8002da8 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fdd8 	bl	8003958 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002da8:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <vTaskDelete+0x150>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01b      	beq.n	8002de8 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <vTaskDelete+0x134>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d116      	bne.n	8002de8 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <vTaskDelete+0x154>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <vTaskDelete+0x11c>
        __asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	60bb      	str	r3, [r7, #8]
    }
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <vTaskDelete+0x158>)
 8002dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000003c 	.word	0x2000003c
 8002df4:	20000040 	.word	0x20000040
 8002df8:	2000011c 	.word	0x2000011c
 8002dfc:	20000130 	.word	0x20000130
 8002e00:	200000e8 	.word	0x200000e8
 8002e04:	200000fc 	.word	0x200000fc
 8002e08:	20000114 	.word	0x20000114
 8002e0c:	20000120 	.word	0x20000120
 8002e10:	2000013c 	.word	0x2000013c
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01b      	beq.n	8002e62 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <vTaskDelay+0x68>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <vTaskDelay+0x30>
        __asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	60bb      	str	r3, [r7, #8]
    }
 8002e44:	bf00      	nop
 8002e46:	e7fe      	b.n	8002e46 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002e48:	f000 f880 	bl	8002f4c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	2023      	movs	r0, #35	; 0x23
 8002e50:	f003 fc3a 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e54:	2100      	movs	r1, #0
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 ff84 	bl	8003d64 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e5c:	f000 f884 	bl	8002f68 <xTaskResumeAll>
 8002e60:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <vTaskDelay+0x6c>)
 8002e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	2000013c 	.word	0x2000013c
 8002e84:	e000ed04 	.word	0xe000ed04

08002e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <vTaskStartScheduler+0xa4>)
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	2282      	movs	r2, #130	; 0x82
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <vTaskStartScheduler+0xa8>)
 8002e9c:	4825      	ldr	r0, [pc, #148]	; (8002f34 <vTaskStartScheduler+0xac>)
 8002e9e:	f7ff fd73 	bl	8002988 <xTaskCreate>
 8002ea2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d102      	bne.n	8002eb0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002eaa:	f000 ffe7 	bl	8003e7c <xTimerCreateTimerTask>
 8002eae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d124      	bne.n	8002f00 <vTaskStartScheduler+0x78>
        __asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	60bb      	str	r3, [r7, #8]
    }
 8002ec8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002eca:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <vTaskStartScheduler+0xb0>)
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <vTaskStartScheduler+0xb4>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <vTaskStartScheduler+0xb8>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <vTaskStartScheduler+0xbc>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <vTaskStartScheduler+0xa4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d102      	bne.n	8002ef0 <vTaskStartScheduler+0x68>
 8002eea:	f004 f8cf 	bl	800708c <SEGGER_SYSVIEW_OnIdle>
 8002eee:	e004      	b.n	8002efa <vTaskStartScheduler+0x72>
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <vTaskStartScheduler+0xbc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f004 f927 	bl	8007148 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002efa:	f001 fad3 	bl	80044a4 <xPortStartScheduler>
 8002efe:	e00e      	b.n	8002f1e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d10a      	bne.n	8002f1e <vTaskStartScheduler+0x96>
        __asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	607b      	str	r3, [r7, #4]
    }
 8002f1a:	bf00      	nop
 8002f1c:	e7fe      	b.n	8002f1c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <vTaskStartScheduler+0xc0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000138 	.word	0x20000138
 8002f30:	08007738 	.word	0x08007738
 8002f34:	0800384d 	.word	0x0800384d
 8002f38:	20000134 	.word	0x20000134
 8002f3c:	20000120 	.word	0x20000120
 8002f40:	20000118 	.word	0x20000118
 8002f44:	2000003c 	.word	0x2000003c
 8002f48:	2000000c 	.word	0x2000000c

08002f4c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <vTaskSuspendAll+0x18>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3301      	adds	r3, #1
 8002f56:	4a03      	ldr	r2, [pc, #12]	; (8002f64 <vTaskSuspendAll+0x18>)
 8002f58:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	2000013c 	.word	0x2000013c

08002f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f76:	4b73      	ldr	r3, [pc, #460]	; (8003144 <xTaskResumeAll+0x1dc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <xTaskResumeAll+0x2c>
        __asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	607b      	str	r3, [r7, #4]
    }
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f94:	f001 fb28 	bl	80045e8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <xTaskResumeAll+0x1dc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	4a69      	ldr	r2, [pc, #420]	; (8003144 <xTaskResumeAll+0x1dc>)
 8002fa0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fa2:	4b68      	ldr	r3, [pc, #416]	; (8003144 <xTaskResumeAll+0x1dc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 80c4 	bne.w	8003134 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fac:	4b66      	ldr	r3, [pc, #408]	; (8003148 <xTaskResumeAll+0x1e0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80bf 	beq.w	8003134 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb6:	e08e      	b.n	80030d6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb8:	4b64      	ldr	r3, [pc, #400]	; (800314c <xTaskResumeAll+0x1e4>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	6a12      	ldr	r2, [r2, #32]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	69d2      	ldr	r2, [r2, #28]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3318      	adds	r3, #24
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d103      	bne.n	8002fee <xTaskResumeAll+0x86>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1e5a      	subs	r2, r3, #1
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	68d2      	ldr	r2, [r2, #12]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	6892      	ldr	r2, [r2, #8]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	3304      	adds	r3, #4
 8003020:	429a      	cmp	r2, r3
 8003022:	d103      	bne.n	800302c <xTaskResumeAll+0xc4>
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2200      	movs	r2, #0
 8003030:	615a      	str	r2, [r3, #20]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4618      	mov	r0, r3
 8003040:	f004 f8c4 	bl	80071cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	2201      	movs	r2, #1
 800304a:	409a      	lsls	r2, r3
 800304c:	4b40      	ldr	r3, [pc, #256]	; (8003150 <xTaskResumeAll+0x1e8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4313      	orrs	r3, r2
 8003052:	4a3f      	ldr	r2, [pc, #252]	; (8003150 <xTaskResumeAll+0x1e8>)
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305a:	493e      	ldr	r1, [pc, #248]	; (8003154 <xTaskResumeAll+0x1ec>)
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3304      	adds	r3, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	3204      	adds	r2, #4
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	1d1a      	adds	r2, r3, #4
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <xTaskResumeAll+0x1ec>)
 800309a:	441a      	add	r2, r3
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	615a      	str	r2, [r3, #20]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	492b      	ldr	r1, [pc, #172]	; (8003154 <xTaskResumeAll+0x1ec>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	1c59      	adds	r1, r3, #1
 80030b4:	4827      	ldr	r0, [pc, #156]	; (8003154 <xTaskResumeAll+0x1ec>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4403      	add	r3, r0
 80030c0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <xTaskResumeAll+0x1f0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d302      	bcc.n	80030d6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80030d0:	4b22      	ldr	r3, [pc, #136]	; (800315c <xTaskResumeAll+0x1f4>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030d6:	4b1d      	ldr	r3, [pc, #116]	; (800314c <xTaskResumeAll+0x1e4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f47f af6c 	bne.w	8002fb8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030e6:	f000 fc47 	bl	8003978 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030ea:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <xTaskResumeAll+0x1f8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030f6:	f000 f859 	bl	80031ac <xTaskIncrementTick>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <xTaskResumeAll+0x1f4>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3b01      	subs	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f1      	bne.n	80030f6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <xTaskResumeAll+0x1f8>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <xTaskResumeAll+0x1f4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003120:	2301      	movs	r3, #1
 8003122:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <xTaskResumeAll+0x1fc>)
 8003126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003134:	f001 fa88 	bl	8004648 <vPortExitCritical>

    return xAlreadyYielded;
 8003138:	69bb      	ldr	r3, [r7, #24]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	2000013c 	.word	0x2000013c
 8003148:	20000114 	.word	0x20000114
 800314c:	200000d4 	.word	0x200000d4
 8003150:	2000011c 	.word	0x2000011c
 8003154:	20000040 	.word	0x20000040
 8003158:	2000003c 	.word	0x2000003c
 800315c:	20000128 	.word	0x20000128
 8003160:	20000124 	.word	0x20000124
 8003164:	e000ed04 	.word	0xe000ed04

08003168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <xTaskGetTickCount+0x1c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003174:	687b      	ldr	r3, [r7, #4]
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000118 	.word	0x20000118

08003188 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800318e:	f001 fb15 	bl	80047bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <xTaskGetTickCountFromISR+0x20>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800319c:	683b      	ldr	r3, [r7, #0]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000118 	.word	0x20000118

080031ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b6:	4b7f      	ldr	r3, [pc, #508]	; (80033b4 <xTaskIncrementTick+0x208>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 80f0 	bne.w	80033a0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031c0:	4b7d      	ldr	r3, [pc, #500]	; (80033b8 <xTaskIncrementTick+0x20c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031c8:	4a7b      	ldr	r2, [pc, #492]	; (80033b8 <xTaskIncrementTick+0x20c>)
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d120      	bne.n	8003216 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031d4:	4b79      	ldr	r3, [pc, #484]	; (80033bc <xTaskIncrementTick+0x210>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <xTaskIncrementTick+0x48>
        __asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	607b      	str	r3, [r7, #4]
    }
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <xTaskIncrementTick+0x46>
 80031f4:	4b71      	ldr	r3, [pc, #452]	; (80033bc <xTaskIncrementTick+0x210>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	4b71      	ldr	r3, [pc, #452]	; (80033c0 <xTaskIncrementTick+0x214>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a6f      	ldr	r2, [pc, #444]	; (80033bc <xTaskIncrementTick+0x210>)
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4a6f      	ldr	r2, [pc, #444]	; (80033c0 <xTaskIncrementTick+0x214>)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b6e      	ldr	r3, [pc, #440]	; (80033c4 <xTaskIncrementTick+0x218>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	4a6d      	ldr	r2, [pc, #436]	; (80033c4 <xTaskIncrementTick+0x218>)
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	f000 fbb1 	bl	8003978 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003216:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <xTaskIncrementTick+0x21c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6a3a      	ldr	r2, [r7, #32]
 800321c:	429a      	cmp	r2, r3
 800321e:	f0c0 80aa 	bcc.w	8003376 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003222:	4b66      	ldr	r3, [pc, #408]	; (80033bc <xTaskIncrementTick+0x210>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800322c:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <xTaskIncrementTick+0x21c>)
 800322e:	f04f 32ff 	mov.w	r2, #4294967295
 8003232:	601a      	str	r2, [r3, #0]
                    break;
 8003234:	e09f      	b.n	8003376 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003236:	4b61      	ldr	r3, [pc, #388]	; (80033bc <xTaskIncrementTick+0x210>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003246:	6a3a      	ldr	r2, [r7, #32]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	429a      	cmp	r2, r3
 800324c:	d203      	bcs.n	8003256 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800324e:	4a5e      	ldr	r2, [pc, #376]	; (80033c8 <xTaskIncrementTick+0x21c>)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003254:	e08f      	b.n	8003376 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	68d2      	ldr	r2, [r2, #12]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	6892      	ldr	r2, [r2, #8]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	3304      	adds	r3, #4
 8003278:	429a      	cmp	r2, r3
 800327a:	d103      	bne.n	8003284 <xTaskIncrementTick+0xd8>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	1e5a      	subs	r2, r3, #1
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01e      	beq.n	80032da <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	6a12      	ldr	r2, [r2, #32]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	69d2      	ldr	r2, [r2, #28]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	3318      	adds	r3, #24
 80032be:	429a      	cmp	r2, r3
 80032c0:	d103      	bne.n	80032ca <xTaskIncrementTick+0x11e>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2200      	movs	r2, #0
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	1e5a      	subs	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 ff75 	bl	80071cc <SEGGER_SYSVIEW_OnTaskStartReady>
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	2201      	movs	r2, #1
 80032e8:	409a      	lsls	r2, r3
 80032ea:	4b38      	ldr	r3, [pc, #224]	; (80033cc <xTaskIncrementTick+0x220>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	4a36      	ldr	r2, [pc, #216]	; (80033cc <xTaskIncrementTick+0x220>)
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	4935      	ldr	r1, [pc, #212]	; (80033d0 <xTaskIncrementTick+0x224>)
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	3304      	adds	r3, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	3204      	adds	r2, #4
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	1d1a      	adds	r2, r3, #4
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <xTaskIncrementTick+0x224>)
 8003338:	441a      	add	r2, r3
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	615a      	str	r2, [r3, #20]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003342:	4923      	ldr	r1, [pc, #140]	; (80033d0 <xTaskIncrementTick+0x224>)
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	481f      	ldr	r0, [pc, #124]	; (80033d0 <xTaskIncrementTick+0x224>)
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4403      	add	r3, r0
 800335e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <xTaskIncrementTick+0x228>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	429a      	cmp	r2, r3
 800336c:	f4ff af59 	bcc.w	8003222 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003370:	2301      	movs	r3, #1
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003374:	e755      	b.n	8003222 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <xTaskIncrementTick+0x228>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337c:	4914      	ldr	r1, [pc, #80]	; (80033d0 <xTaskIncrementTick+0x224>)
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d901      	bls.n	8003392 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 800338e:	2301      	movs	r3, #1
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <xTaskIncrementTick+0x22c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 800339a:	2301      	movs	r3, #1
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e004      	b.n	80033aa <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <xTaskIncrementTick+0x230>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <xTaskIncrementTick+0x230>)
 80033a8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3728      	adds	r7, #40	; 0x28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2000013c 	.word	0x2000013c
 80033b8:	20000118 	.word	0x20000118
 80033bc:	200000cc 	.word	0x200000cc
 80033c0:	200000d0 	.word	0x200000d0
 80033c4:	2000012c 	.word	0x2000012c
 80033c8:	20000134 	.word	0x20000134
 80033cc:	2000011c 	.word	0x2000011c
 80033d0:	20000040 	.word	0x20000040
 80033d4:	2000003c 	.word	0x2000003c
 80033d8:	20000128 	.word	0x20000128
 80033dc:	20000124 	.word	0x20000124

080033e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <vTaskSwitchContext+0xbc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033ee:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <vTaskSwitchContext+0xc0>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80033f4:	e04d      	b.n	8003492 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80033f6:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <vTaskSwitchContext+0xc0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033fc:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <vTaskSwitchContext+0xc4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	f1c3 031f 	rsb	r3, r3, #31
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	4925      	ldr	r1, [pc, #148]	; (80034a8 <vTaskSwitchContext+0xc8>)
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	607b      	str	r3, [r7, #4]
    }
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <vTaskSwitchContext+0x5a>
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <vTaskSwitchContext+0xc8>)
 8003448:	4413      	add	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	3308      	adds	r3, #8
 800345e:	429a      	cmp	r2, r3
 8003460:	d104      	bne.n	800346c <vTaskSwitchContext+0x8c>
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <vTaskSwitchContext+0xcc>)
 8003474:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <vTaskSwitchContext+0xcc>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <vTaskSwitchContext+0xd0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d102      	bne.n	8003488 <vTaskSwitchContext+0xa8>
 8003482:	f003 fe03 	bl	800708c <SEGGER_SYSVIEW_OnIdle>
}
 8003486:	e004      	b.n	8003492 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <vTaskSwitchContext+0xcc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fe5b 	bl	8007148 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000013c 	.word	0x2000013c
 80034a0:	20000128 	.word	0x20000128
 80034a4:	2000011c 	.word	0x2000011c
 80034a8:	20000040 	.word	0x20000040
 80034ac:	2000003c 	.word	0x2000003c
 80034b0:	20000138 	.word	0x20000138

080034b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	60fb      	str	r3, [r7, #12]
    }
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <vTaskPlaceOnEventList+0x44>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3318      	adds	r3, #24
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fe febd 	bl	8002262 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034e8:	2101      	movs	r1, #1
 80034ea:	6838      	ldr	r0, [r7, #0]
 80034ec:	f000 fc3a 	bl	8003d64 <prvAddCurrentTaskToDelayedList>
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	2000003c 	.word	0x2000003c

080034fc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	613b      	str	r3, [r7, #16]
    }
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	4b17      	ldr	r3, [pc, #92]	; (8003588 <vTaskPlaceOnEventListRestricted+0x8c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	61da      	str	r2, [r3, #28]
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	6892      	ldr	r2, [r2, #8]
 800353a:	621a      	str	r2, [r3, #32]
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <vTaskPlaceOnEventListRestricted+0x8c>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	3218      	adds	r2, #24
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <vTaskPlaceOnEventListRestricted+0x8c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f103 0218 	add.w	r2, r3, #24
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003572:	2024      	movs	r0, #36	; 0x24
 8003574:	f003 f88a 	bl	800668c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	68b8      	ldr	r0, [r7, #8]
 800357c:	f000 fbf2 	bl	8003d64 <prvAddCurrentTaskToDelayedList>
    }
 8003580:	bf00      	nop
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	2000003c 	.word	0x2000003c

0800358c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	60fb      	str	r3, [r7, #12]
    }
 80035b4:	bf00      	nop
 80035b6:	e7fe      	b.n	80035b6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	61fb      	str	r3, [r7, #28]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	6a3a      	ldr	r2, [r7, #32]
 80035c4:	6a12      	ldr	r2, [r2, #32]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	69d2      	ldr	r2, [r2, #28]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	3318      	adds	r3, #24
 80035da:	429a      	cmp	r2, r3
 80035dc:	d103      	bne.n	80035e6 <xTaskRemoveFromEventList+0x5a>
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	6a1a      	ldr	r2, [r3, #32]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2200      	movs	r2, #0
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	1e5a      	subs	r2, r3, #1
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035f6:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <xTaskRemoveFromEventList+0x198>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d162      	bne.n	80036c4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	68d2      	ldr	r2, [r2, #12]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	6a3a      	ldr	r2, [r7, #32]
 8003614:	6892      	ldr	r2, [r2, #8]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	3304      	adds	r3, #4
 8003620:	429a      	cmp	r2, r3
 8003622:	d103      	bne.n	800362c <xTaskRemoveFromEventList+0xa0>
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	2200      	movs	r2, #0
 8003630:	615a      	str	r2, [r3, #20]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	1e5a      	subs	r2, r3, #1
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	4618      	mov	r0, r3
 8003640:	f003 fdc4 	bl	80071cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	2201      	movs	r2, #1
 800364a:	409a      	lsls	r2, r3
 800364c:	4b36      	ldr	r3, [pc, #216]	; (8003728 <xTaskRemoveFromEventList+0x19c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4313      	orrs	r3, r2
 8003652:	4a35      	ldr	r2, [pc, #212]	; (8003728 <xTaskRemoveFromEventList+0x19c>)
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	4934      	ldr	r1, [pc, #208]	; (800372c <xTaskRemoveFromEventList+0x1a0>)
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3304      	adds	r3, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	3204      	adds	r2, #4
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	1d1a      	adds	r2, r3, #4
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4a24      	ldr	r2, [pc, #144]	; (800372c <xTaskRemoveFromEventList+0x1a0>)
 800369a:	441a      	add	r2, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	4921      	ldr	r1, [pc, #132]	; (800372c <xTaskRemoveFromEventList+0x1a0>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	481d      	ldr	r0, [pc, #116]	; (800372c <xTaskRemoveFromEventList+0x1a0>)
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4403      	add	r3, r0
 80036c0:	6019      	str	r1, [r3, #0]
 80036c2:	e01b      	b.n	80036fc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <xTaskRemoveFromEventList+0x1a4>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	61da      	str	r2, [r3, #28]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	621a      	str	r2, [r3, #32]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	3218      	adds	r2, #24
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	f103 0218 	add.w	r2, r3, #24
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	4a10      	ldr	r2, [pc, #64]	; (8003730 <xTaskRemoveFromEventList+0x1a4>)
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <xTaskRemoveFromEventList+0x1a4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <xTaskRemoveFromEventList+0x1a4>)
 80036fa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <xTaskRemoveFromEventList+0x1a8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	429a      	cmp	r2, r3
 8003708:	d905      	bls.n	8003716 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800370a:	2301      	movs	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <xTaskRemoveFromEventList+0x1ac>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e001      	b.n	800371a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800371c:	4618      	mov	r0, r3
 800371e:	3728      	adds	r7, #40	; 0x28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	2000013c 	.word	0x2000013c
 8003728:	2000011c 	.word	0x2000011c
 800372c:	20000040 	.word	0x20000040
 8003730:	200000d4 	.word	0x200000d4
 8003734:	2000003c 	.word	0x2000003c
 8003738:	20000128 	.word	0x20000128

0800373c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <vTaskInternalSetTimeOutState+0x24>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <vTaskInternalSetTimeOutState+0x28>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	605a      	str	r2, [r3, #4]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	2000012c 	.word	0x2000012c
 8003764:	20000118 	.word	0x20000118

08003768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	613b      	str	r3, [r7, #16]
    }
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	60fb      	str	r3, [r7, #12]
    }
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80037aa:	f000 ff1d 	bl	80045e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037ae:	4b1f      	ldr	r3, [pc, #124]	; (800382c <xTaskCheckForTimeOut+0xc4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d102      	bne.n	80037ce <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	e026      	b.n	800381c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <xTaskCheckForTimeOut+0xc8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d00a      	beq.n	80037f0 <xTaskCheckForTimeOut+0x88>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d305      	bcc.n	80037f0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e015      	b.n	800381c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d20b      	bcs.n	8003812 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad2      	subs	r2, r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ff98 	bl	800373c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	e004      	b.n	800381c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003818:	2301      	movs	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800381c:	f000 ff14 	bl	8004648 <vPortExitCritical>

    return xReturn;
 8003820:	69fb      	ldr	r3, [r7, #28]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000118 	.word	0x20000118
 8003830:	2000012c 	.word	0x2000012c

08003834 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <vTaskMissedYield+0x14>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	20000128 	.word	0x20000128

0800384c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003854:	f000 f852 	bl	80038fc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <prvIdleTask+0x28>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d9f9      	bls.n	8003854 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <prvIdleTask+0x2c>)
 8003862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003870:	e7f0      	b.n	8003854 <prvIdleTask+0x8>
 8003872:	bf00      	nop
 8003874:	20000040 	.word	0x20000040
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	e00c      	b.n	80038a2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4a12      	ldr	r2, [pc, #72]	; (80038dc <prvInitialiseTaskLists+0x60>)
 8003894:	4413      	add	r3, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fc92 	bl	80021c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3301      	adds	r3, #1
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d9ef      	bls.n	8003888 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038a8:	480d      	ldr	r0, [pc, #52]	; (80038e0 <prvInitialiseTaskLists+0x64>)
 80038aa:	f7fe fc89 	bl	80021c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038ae:	480d      	ldr	r0, [pc, #52]	; (80038e4 <prvInitialiseTaskLists+0x68>)
 80038b0:	f7fe fc86 	bl	80021c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038b4:	480c      	ldr	r0, [pc, #48]	; (80038e8 <prvInitialiseTaskLists+0x6c>)
 80038b6:	f7fe fc83 	bl	80021c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80038ba:	480c      	ldr	r0, [pc, #48]	; (80038ec <prvInitialiseTaskLists+0x70>)
 80038bc:	f7fe fc80 	bl	80021c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038c0:	480b      	ldr	r0, [pc, #44]	; (80038f0 <prvInitialiseTaskLists+0x74>)
 80038c2:	f7fe fc7d 	bl	80021c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <prvInitialiseTaskLists+0x78>)
 80038c8:	4a05      	ldr	r2, [pc, #20]	; (80038e0 <prvInitialiseTaskLists+0x64>)
 80038ca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <prvInitialiseTaskLists+0x7c>)
 80038ce:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <prvInitialiseTaskLists+0x68>)
 80038d0:	601a      	str	r2, [r3, #0]
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000040 	.word	0x20000040
 80038e0:	200000a4 	.word	0x200000a4
 80038e4:	200000b8 	.word	0x200000b8
 80038e8:	200000d4 	.word	0x200000d4
 80038ec:	200000e8 	.word	0x200000e8
 80038f0:	20000100 	.word	0x20000100
 80038f4:	200000cc 	.word	0x200000cc
 80038f8:	200000d0 	.word	0x200000d0

080038fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003902:	e019      	b.n	8003938 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003904:	f000 fe70 	bl	80045e8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <prvCheckTasksWaitingTermination+0x50>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe fcdd 	bl	80022d4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <prvCheckTasksWaitingTermination+0x54>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3b01      	subs	r3, #1
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <prvCheckTasksWaitingTermination+0x54>)
 8003922:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <prvCheckTasksWaitingTermination+0x58>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3b01      	subs	r3, #1
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <prvCheckTasksWaitingTermination+0x58>)
 800392c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800392e:	f000 fe8b 	bl	8004648 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f810 	bl	8003958 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <prvCheckTasksWaitingTermination+0x58>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e1      	bne.n	8003904 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200000e8 	.word	0x200000e8
 8003950:	20000114 	.word	0x20000114
 8003954:	200000fc 	.word	0x200000fc

08003958 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4618      	mov	r0, r3
 8003966:	f001 f849 	bl	80049fc <vPortFree>
                vPortFree( pxTCB );
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f001 f846 	bl	80049fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <prvResetNextTaskUnblockTime+0x30>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <prvResetNextTaskUnblockTime+0x34>)
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800398e:	e005      	b.n	800399c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <prvResetNextTaskUnblockTime+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <prvResetNextTaskUnblockTime+0x34>)
 800399a:	6013      	str	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	200000cc 	.word	0x200000cc
 80039ac:	20000134 	.word	0x20000134

080039b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <xTaskGetSchedulerState+0x34>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039be:	2301      	movs	r3, #1
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	e008      	b.n	80039d6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <xTaskGetSchedulerState+0x38>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039cc:	2302      	movs	r3, #2
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	e001      	b.n	80039d6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039d6:	687b      	ldr	r3, [r7, #4]
    }
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	20000120 	.word	0x20000120
 80039e8:	2000013c 	.word	0x2000013c

080039ec <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	613b      	str	r3, [r7, #16]
    }
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003a16:	f000 fde7 	bl	80045e8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003a1a:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <xTaskGenericNotifyWait+0x108>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	3354      	adds	r3, #84	; 0x54
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d022      	beq.n	8003a72 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <xTaskGenericNotifyWait+0x108>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	3214      	adds	r2, #20
 8003a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	43d2      	mvns	r2, r2
 8003a3c:	4011      	ands	r1, r2
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	3214      	adds	r2, #20
 8003a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003a46:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <xTaskGenericNotifyWait+0x108>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3354      	adds	r3, #84	; 0x54
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	6a38      	ldr	r0, [r7, #32]
 8003a5e:	f000 f981 	bl	8003d64 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003a62:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <xTaskGenericNotifyWait+0x10c>)
 8003a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a72:	f000 fde9 	bl	8004648 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003a76:	f000 fdb7 	bl	80045e8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	2040      	movs	r0, #64	; 0x40
 8003a88:	f002 ff2a 	bl	80068e0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003a92:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <xTaskGenericNotifyWait+0x108>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	3214      	adds	r2, #20
 8003a9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <xTaskGenericNotifyWait+0x108>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3354      	adds	r3, #84	; 0x54
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d002      	beq.n	8003aba <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	e00e      	b.n	8003ad8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <xTaskGenericNotifyWait+0x108>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	3214      	adds	r2, #20
 8003ac2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	43d2      	mvns	r2, r2
 8003aca:	4011      	ands	r1, r2
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	3214      	adds	r2, #20
 8003ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <xTaskGenericNotifyWait+0x108>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	3354      	adds	r3, #84	; 0x54
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003ae6:	f000 fdaf 	bl	8004648 <vPortExitCritical>

        return xReturn;
 8003aea:	697b      	ldr	r3, [r7, #20]
    }
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	2000003c 	.word	0x2000003c
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b090      	sub	sp, #64	; 0x40
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <xTaskGenericNotify+0x2e>
        __asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	623b      	str	r3, [r7, #32]
    }
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61fb      	str	r3, [r7, #28]
    }
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003b4a:	f000 fd4d 	bl	80045e8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d006      	beq.n	8003b62 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	3214      	adds	r2, #20
 8003b5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b60:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4413      	add	r3, r2
 8003b68:	3354      	adds	r3, #84	; 0x54
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4413      	add	r3, r2
 8003b76:	3354      	adds	r3, #84	; 0x54
 8003b78:	2202      	movs	r2, #2
 8003b7a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d83b      	bhi.n	8003bfa <xTaskGenericNotify+0xfe>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <xTaskGenericNotify+0x8c>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003c19 	.word	0x08003c19
 8003b8c:	08003b9d 	.word	0x08003b9d
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bd1 	.word	0x08003bd1
 8003b98:	08003bdf 	.word	0x08003bdf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	3214      	adds	r2, #20
 8003ba2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	3214      	adds	r2, #20
 8003bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003bb6:	e032      	b.n	8003c1e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	3214      	adds	r2, #20
 8003bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc2:	1c59      	adds	r1, r3, #1
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	3214      	adds	r2, #20
 8003bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003bce:	e026      	b.n	8003c1e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	3214      	adds	r2, #20
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003bdc:	e01f      	b.n	8003c1e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003bde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d006      	beq.n	8003bf4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	3214      	adds	r2, #20
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003bf2:	e014      	b.n	8003c1e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003bf8:	e011      	b.n	8003c1e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003bfa:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <xTaskGenericNotify+0x254>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <xTaskGenericNotify+0x120>
        __asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	61bb      	str	r3, [r7, #24]
    }
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <xTaskGenericNotify+0x11a>
                    break;
 8003c18:	bf00      	nop
 8003c1a:	e000      	b.n	8003c1e <xTaskGenericNotify+0x122>

                    break;
 8003c1c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	4618      	mov	r0, r3
 8003c22:	f003 fb75 	bl	8007310 <SEGGER_SYSVIEW_ShrinkId>
 8003c26:	4601      	mov	r1, r0
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	203e      	movs	r0, #62	; 0x3e
 8003c34:	f002 fe54 	bl	80068e0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d17f      	bne.n	8003d40 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4c:	68d2      	ldr	r2, [r2, #12]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	6892      	ldr	r2, [r2, #8]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	3304      	adds	r3, #4
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d103      	bne.n	8003c6e <xTaskGenericNotify+0x172>
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	1e5a      	subs	r2, r3, #1
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	4618      	mov	r0, r3
 8003c82:	f003 faa3 	bl	80071cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <xTaskGenericNotify+0x258>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	4a2f      	ldr	r2, [pc, #188]	; (8003d54 <xTaskGenericNotify+0x258>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	492e      	ldr	r1, [pc, #184]	; (8003d58 <xTaskGenericNotify+0x25c>)
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3304      	adds	r3, #4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc2:	3204      	adds	r2, #4
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	609a      	str	r2, [r3, #8]
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <xTaskGenericNotify+0x25c>)
 8003cdc:	441a      	add	r2, r3
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	615a      	str	r2, [r3, #20]
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	491c      	ldr	r1, [pc, #112]	; (8003d58 <xTaskGenericNotify+0x25c>)
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	1c59      	adds	r1, r3, #1
 8003cf6:	4818      	ldr	r0, [pc, #96]	; (8003d58 <xTaskGenericNotify+0x25c>)
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4403      	add	r3, r0
 8003d02:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <xTaskGenericNotify+0x226>
        __asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	617b      	str	r3, [r7, #20]
    }
 8003d1e:	bf00      	nop
 8003d20:	e7fe      	b.n	8003d20 <xTaskGenericNotify+0x224>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <xTaskGenericNotify+0x260>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d907      	bls.n	8003d40 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <xTaskGenericNotify+0x264>)
 8003d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d40:	f000 fc82 	bl	8004648 <vPortExitCritical>

        return xReturn;
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003d46:	4618      	mov	r0, r3
 8003d48:	3738      	adds	r7, #56	; 0x38
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000118 	.word	0x20000118
 8003d54:	2000011c 	.word	0x2000011c
 8003d58:	20000040 	.word	0x20000040
 8003d5c:	2000003c 	.word	0x2000003c
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d74:	4b3b      	ldr	r3, [pc, #236]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe faaa 	bl	80022d4 <uxListRemove>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d86:	4b37      	ldr	r3, [pc, #220]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <prvAddCurrentTaskToDelayedList+0x104>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	4a33      	ldr	r2, [pc, #204]	; (8003e68 <prvAddCurrentTaskToDelayedList+0x104>)
 8003d9c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d124      	bne.n	8003df0 <prvAddCurrentTaskToDelayedList+0x8c>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d021      	beq.n	8003df0 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dac:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <prvAddCurrentTaskToDelayedList+0x108>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	6892      	ldr	r2, [r2, #8]
 8003dc2:	60da      	str	r2, [r3, #12]
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	3204      	adds	r2, #4
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1d1a      	adds	r2, r3, #4
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <prvAddCurrentTaskToDelayedList+0x108>)
 8003de0:	615a      	str	r2, [r3, #20]
 8003de2:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <prvAddCurrentTaskToDelayedList+0x108>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <prvAddCurrentTaskToDelayedList+0x108>)
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dee:	e032      	b.n	8003e56 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d20f      	bcs.n	8003e28 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e08:	4b16      	ldr	r3, [pc, #88]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2104      	movs	r1, #4
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f003 fa1e 	bl	8007250 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f7fe fa1e 	bl	8002262 <vListInsert>
}
 8003e26:	e016      	b.n	8003e56 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003e28:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f003 fa0e 	bl	8007250 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <prvAddCurrentTaskToDelayedList+0x110>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f7fe fa0e 	bl	8002262 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d202      	bcs.n	8003e56 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6013      	str	r3, [r2, #0]
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000118 	.word	0x20000118
 8003e64:	2000003c 	.word	0x2000003c
 8003e68:	2000011c 	.word	0x2000011c
 8003e6c:	20000100 	.word	0x20000100
 8003e70:	200000d0 	.word	0x200000d0
 8003e74:	200000cc 	.word	0x200000cc
 8003e78:	20000134 	.word	0x20000134

08003e7c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e86:	f000 fa47 	bl	8004318 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e8a:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <xTimerCreateTimerTask+0x54>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <xTimerCreateTimerTask+0x58>)
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	2302      	movs	r3, #2
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ea0:	490d      	ldr	r1, [pc, #52]	; (8003ed8 <xTimerCreateTimerTask+0x5c>)
 8003ea2:	480e      	ldr	r0, [pc, #56]	; (8003edc <xTimerCreateTimerTask+0x60>)
 8003ea4:	f7fe fd70 	bl	8002988 <xTaskCreate>
 8003ea8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	603b      	str	r3, [r7, #0]
    }
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ec6:	687b      	ldr	r3, [r7, #4]
    }
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000170 	.word	0x20000170
 8003ed4:	20000174 	.word	0x20000174
 8003ed8:	08007740 	.word	0x08007740
 8003edc:	08003f85 	.word	0x08003f85

08003ee0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003eec:	e008      	b.n	8003f00 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	699a      	ldr	r2, [r3, #24]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	18d1      	adds	r1, r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f8dd 	bl	80040cc <prvInsertTimerInActiveList>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ea      	bne.n	8003eee <prvReloadTimer+0xe>
        }
    }
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <prvProcessExpiredTimer+0x5c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe f9c9 	bl	80022d4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff ffc3 	bl	8003ee0 <prvReloadTimer>
 8003f5a:	e008      	b.n	8003f6e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	4798      	blx	r3
    }
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000168 	.word	0x20000168

08003f84 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f8c:	f107 0308 	add.w	r3, r7, #8
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f857 	bl	8004044 <prvGetNextExpireTime>
 8003f96:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f803 	bl	8003fa8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003fa2:	f000 f8d5 	bl	8004150 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fa6:	e7f1      	b.n	8003f8c <prvTimerTask+0x8>

08003fa8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003fb2:	f7fe ffcb 	bl	8002f4c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fb6:	f107 0308 	add.w	r3, r7, #8
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f866 	bl	800408c <prvSampleTimeNow>
 8003fc0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d130      	bne.n	800402a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <prvProcessTimerOrBlockTask+0x3c>
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d806      	bhi.n	8003fe4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fd6:	f7fe ffc7 	bl	8002f68 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fda:	68f9      	ldr	r1, [r7, #12]
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ffa1 	bl	8003f24 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003fe2:	e024      	b.n	800402e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <prvProcessTimerOrBlockTask+0x90>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <prvProcessTimerOrBlockTask+0x50>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <prvProcessTimerOrBlockTask+0x52>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <prvProcessTimerOrBlockTask+0x94>)
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	f7fe fc89 	bl	8002920 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800400e:	f7fe ffab 	bl	8002f68 <xTaskResumeAll>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <prvProcessTimerOrBlockTask+0x98>)
 800401a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	f3bf 8f6f 	isb	sy
    }
 8004028:	e001      	b.n	800402e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800402a:	f7fe ff9d 	bl	8002f68 <xTaskResumeAll>
    }
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	2000016c 	.word	0x2000016c
 800403c:	20000170 	.word	0x20000170
 8004040:	e000ed04 	.word	0xe000ed04

08004044 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <prvGetNextExpireTime+0x44>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <prvGetNextExpireTime+0x16>
 8004056:	2201      	movs	r2, #1
 8004058:	e000      	b.n	800405c <prvGetNextExpireTime+0x18>
 800405a:	2200      	movs	r2, #0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <prvGetNextExpireTime+0x44>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	e001      	b.n	8004078 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004078:	68fb      	ldr	r3, [r7, #12]
    }
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000168 	.word	0x20000168

0800408c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004094:	f7ff f868 	bl	8003168 <xTaskGetTickCount>
 8004098:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800409a:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <prvSampleTimeNow+0x3c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d205      	bcs.n	80040b0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040a4:	f000 f912 	bl	80042cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e002      	b.n	80040b6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040b6:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <prvSampleTimeNow+0x3c>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040bc:	68fb      	ldr	r3, [r7, #12]
    }
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000178 	.word	0x20000178

080040cc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d812      	bhi.n	8004118 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	1ad2      	subs	r2, r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d302      	bcc.n	8004106 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e01b      	b.n	800413e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <prvInsertTimerInActiveList+0x7c>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3304      	adds	r3, #4
 800410e:	4619      	mov	r1, r3
 8004110:	4610      	mov	r0, r2
 8004112:	f7fe f8a6 	bl	8002262 <vListInsert>
 8004116:	e012      	b.n	800413e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d206      	bcs.n	800412e <prvInsertTimerInActiveList+0x62>
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d302      	bcc.n	800412e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e007      	b.n	800413e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <prvInsertTimerInActiveList+0x80>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3304      	adds	r3, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7fe f892 	bl	8002262 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800413e:	697b      	ldr	r3, [r7, #20]
    }
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	2000016c 	.word	0x2000016c
 800414c:	20000168 	.word	0x20000168

08004150 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004156:	e0a6      	b.n	80042a6 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f2c0 80a2 	blt.w	80042a4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d004      	beq.n	8004176 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	3304      	adds	r3, #4
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe f8af 	bl	80022d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ff87 	bl	800408c <prvSampleTimeNow>
 800417e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3b01      	subs	r3, #1
 8004184:	2b08      	cmp	r3, #8
 8004186:	f200 808e 	bhi.w	80042a6 <prvProcessReceivedCommands+0x156>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <prvProcessReceivedCommands+0x40>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041b5 	.word	0x080041b5
 8004198:	0800421d 	.word	0x0800421d
 800419c:	08004231 	.word	0x08004231
 80041a0:	0800427b 	.word	0x0800427b
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041b5 	.word	0x080041b5
 80041ac:	0800421d 	.word	0x0800421d
 80041b0:	08004231 	.word	0x08004231
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	18d1      	adds	r1, r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	69f8      	ldr	r0, [r7, #28]
 80041d4:	f7ff ff7a 	bl	80040cc <prvInsertTimerInActiveList>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d063      	beq.n	80042a6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4619      	mov	r1, r3
 80041f8:	69f8      	ldr	r0, [r7, #28]
 80041fa:	f7ff fe71 	bl	8003ee0 <prvReloadTimer>
 80041fe:	e008      	b.n	8004212 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	69f8      	ldr	r0, [r7, #28]
 8004218:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800421a:	e044      	b.n	80042a6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	b2da      	uxtb	r2, r3
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800422e:	e03a      	b.n	80042a6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	b2da      	uxtb	r2, r3
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	617b      	str	r3, [r7, #20]
    }
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	18d1      	adds	r1, r2, r3
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	69f8      	ldr	r0, [r7, #28]
 8004274:	f7ff ff2a 	bl	80040cc <prvInsertTimerInActiveList>
                        break;
 8004278:	e015      	b.n	80042a6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d103      	bne.n	8004290 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004288:	69f8      	ldr	r0, [r7, #28]
 800428a:	f000 fbb7 	bl	80049fc <vPortFree>
 800428e:	e00a      	b.n	80042a6 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042a2:	e000      	b.n	80042a6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80042a4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <prvProcessReceivedCommands+0x178>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f107 0108 	add.w	r1, r7, #8
 80042ae:	2200      	movs	r2, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe f941 	bl	8002538 <xQueueReceive>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f47f af4d 	bne.w	8004158 <prvProcessReceivedCommands+0x8>
        }
    }
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000170 	.word	0x20000170

080042cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042d2:	e009      	b.n	80042e8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042d4:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <prvSwitchTimerLists+0x44>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80042de:	f04f 31ff 	mov.w	r1, #4294967295
 80042e2:	6838      	ldr	r0, [r7, #0]
 80042e4:	f7ff fe1e 	bl	8003f24 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <prvSwitchTimerLists+0x44>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <prvSwitchTimerLists+0x44>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <prvSwitchTimerLists+0x48>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a04      	ldr	r2, [pc, #16]	; (8004310 <prvSwitchTimerLists+0x44>)
 80042fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004300:	4a04      	ldr	r2, [pc, #16]	; (8004314 <prvSwitchTimerLists+0x48>)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6013      	str	r3, [r2, #0]
    }
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000168 	.word	0x20000168
 8004314:	2000016c 	.word	0x2000016c

08004318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800431c:	f000 f964 	bl	80045e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004320:	4b12      	ldr	r3, [pc, #72]	; (800436c <prvCheckForValidListAndQueue+0x54>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d11d      	bne.n	8004364 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004328:	4811      	ldr	r0, [pc, #68]	; (8004370 <prvCheckForValidListAndQueue+0x58>)
 800432a:	f7fd ff49 	bl	80021c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800432e:	4811      	ldr	r0, [pc, #68]	; (8004374 <prvCheckForValidListAndQueue+0x5c>)
 8004330:	f7fd ff46 	bl	80021c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <prvCheckForValidListAndQueue+0x60>)
 8004336:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <prvCheckForValidListAndQueue+0x58>)
 8004338:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <prvCheckForValidListAndQueue+0x64>)
 800433c:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <prvCheckForValidListAndQueue+0x5c>)
 800433e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004340:	2200      	movs	r2, #0
 8004342:	210c      	movs	r1, #12
 8004344:	200a      	movs	r0, #10
 8004346:	f7fe f87f 	bl	8002448 <xQueueGenericCreate>
 800434a:	4603      	mov	r3, r0
 800434c:	4a07      	ldr	r2, [pc, #28]	; (800436c <prvCheckForValidListAndQueue+0x54>)
 800434e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <prvCheckForValidListAndQueue+0x54>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <prvCheckForValidListAndQueue+0x54>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4908      	ldr	r1, [pc, #32]	; (8004380 <prvCheckForValidListAndQueue+0x68>)
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fa88 	bl	8002874 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004364:	f000 f970 	bl	8004648 <vPortExitCritical>
    }
 8004368:	bf00      	nop
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000170 	.word	0x20000170
 8004370:	20000140 	.word	0x20000140
 8004374:	20000154 	.word	0x20000154
 8004378:	20000168 	.word	0x20000168
 800437c:	2000016c 	.word	0x2000016c
 8004380:	08007748 	.word	0x08007748

08004384 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3b04      	subs	r3, #4
 8004394:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800439c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3b04      	subs	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f023 0201 	bic.w	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b04      	subs	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043b4:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <pxPortInitialiseStack+0x64>)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3b14      	subs	r3, #20
 80043be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b04      	subs	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f06f 0202 	mvn.w	r2, #2
 80043d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3b20      	subs	r3, #32
 80043d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	080043ed 	.word	0x080043ed

080043ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <prvTaskExitError+0x54>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d00a      	beq.n	8004416 <prvTaskExitError+0x2a>
        __asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60fb      	str	r3, [r7, #12]
    }
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <prvTaskExitError+0x28>
        __asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60bb      	str	r3, [r7, #8]
    }
 8004428:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800442a:	bf00      	nop
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0fc      	beq.n	800442c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	20000010 	.word	0x20000010
	...

08004450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <pxCurrentTCBConst2>)
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	f380 8809 	msr	PSP, r0
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8811 	msr	BASEPRI, r0
 800446a:	4770      	bx	lr
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst2>:
 8004470:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004478:	4808      	ldr	r0, [pc, #32]	; (800449c <prvPortStartFirstTask+0x24>)
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	6800      	ldr	r0, [r0, #0]
 800447e:	f380 8808 	msr	MSP, r0
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8814 	msr	CONTROL, r0
 800448a:	b662      	cpsie	i
 800448c:	b661      	cpsie	f
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	df00      	svc	0
 8004498:	bf00      	nop
 800449a:	0000      	.short	0x0000
 800449c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop

080044a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044aa:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <xPortStartScheduler+0x120>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a46      	ldr	r2, [pc, #280]	; (80045c8 <xPortStartScheduler+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10a      	bne.n	80044ca <xPortStartScheduler+0x26>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044ca:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <xPortStartScheduler+0x120>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <xPortStartScheduler+0x128>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10a      	bne.n	80044ea <xPortStartScheduler+0x46>
        __asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	60fb      	str	r3, [r7, #12]
    }
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ea:	4b39      	ldr	r3, [pc, #228]	; (80045d0 <xPortStartScheduler+0x12c>)
 80044ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	22ff      	movs	r2, #255	; 0xff
 80044fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <xPortStartScheduler+0x130>)
 8004510:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004512:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <xPortStartScheduler+0x134>)
 8004514:	2207      	movs	r2, #7
 8004516:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004518:	e009      	b.n	800452e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <xPortStartScheduler+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3b01      	subs	r3, #1
 8004520:	4a2d      	ldr	r2, [pc, #180]	; (80045d8 <xPortStartScheduler+0x134>)
 8004522:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d0ef      	beq.n	800451a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <xPortStartScheduler+0x134>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1c3 0307 	rsb	r3, r3, #7
 8004542:	2b04      	cmp	r3, #4
 8004544:	d00a      	beq.n	800455c <xPortStartScheduler+0xb8>
        __asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	60bb      	str	r3, [r7, #8]
    }
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <xPortStartScheduler+0x134>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <xPortStartScheduler+0x134>)
 8004564:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <xPortStartScheduler+0x134>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <xPortStartScheduler+0x134>)
 8004570:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <xPortStartScheduler+0x138>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <xPortStartScheduler+0x138>)
 8004580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004584:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <xPortStartScheduler+0x138>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a14      	ldr	r2, [pc, #80]	; (80045dc <xPortStartScheduler+0x138>)
 800458c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004592:	f000 f8e3 	bl	800475c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <xPortStartScheduler+0x13c>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800459c:	f000 f902 	bl	80047a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <xPortStartScheduler+0x140>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <xPortStartScheduler+0x140>)
 80045a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045ac:	f7ff ff64 	bl	8004478 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045b0:	f7fe ff16 	bl	80033e0 <vTaskSwitchContext>
    prvTaskExitError();
 80045b4:	f7ff ff1a 	bl	80043ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	e000ed00 	.word	0xe000ed00
 80045c8:	410fc271 	.word	0x410fc271
 80045cc:	410fc270 	.word	0x410fc270
 80045d0:	e000e400 	.word	0xe000e400
 80045d4:	2000017c 	.word	0x2000017c
 80045d8:	20000180 	.word	0x20000180
 80045dc:	e000ed20 	.word	0xe000ed20
 80045e0:	20000010 	.word	0x20000010
 80045e4:	e000ef34 	.word	0xe000ef34

080045e8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
        __asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
    }
 8004600:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <vPortEnterCritical+0x58>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <vPortEnterCritical+0x58>)
 800460a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800460c:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <vPortEnterCritical+0x58>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d10f      	bne.n	8004634 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <vPortEnterCritical+0x5c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <vPortEnterCritical+0x4c>
        __asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	603b      	str	r3, [r7, #0]
    }
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <vPortEnterCritical+0x4a>
    }
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	20000010 	.word	0x20000010
 8004644:	e000ed04 	.word	0xe000ed04

08004648 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <vPortExitCritical+0x50>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <vPortExitCritical+0x24>
        __asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	607b      	str	r3, [r7, #4]
    }
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <vPortExitCritical+0x50>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3b01      	subs	r3, #1
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <vPortExitCritical+0x50>)
 8004674:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <vPortExitCritical+0x50>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d105      	bne.n	800468a <vPortExitCritical+0x42>
 800467e:	2300      	movs	r3, #0
 8004680:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004688:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000010 	.word	0x20000010
 800469c:	00000000 	.word	0x00000000

080046a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046a0:	f3ef 8009 	mrs	r0, PSP
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <pxCurrentTCBConst>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f01e 0f10 	tst.w	lr, #16
 80046b0:	bf08      	it	eq
 80046b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	6010      	str	r0, [r2, #0]
 80046bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046c4:	f380 8811 	msr	BASEPRI, r0
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f7fe fe86 	bl	80033e0 <vTaskSwitchContext>
 80046d4:	f04f 0000 	mov.w	r0, #0
 80046d8:	f380 8811 	msr	BASEPRI, r0
 80046dc:	bc09      	pop	{r0, r3}
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	6808      	ldr	r0, [r1, #0]
 80046e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e6:	f01e 0f10 	tst.w	lr, #16
 80046ea:	bf08      	it	eq
 80046ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046f0:	f380 8809 	msr	PSP, r0
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst>:
 8004700:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
        __asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	607b      	str	r3, [r7, #4]
    }
 8004720:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004722:	f002 fc39 	bl	8006f98 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004726:	f7fe fd41 	bl	80031ac <xTaskIncrementTick>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004730:	f002 fc90 	bl	8007054 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <SysTick_Handler+0x50>)
 8004736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e001      	b.n	8004742 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800473e:	f002 fc6d 	bl	800701c <SEGGER_SYSVIEW_RecordExitISR>
 8004742:	2300      	movs	r3, #0
 8004744:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f383 8811 	msr	BASEPRI, r3
    }
 800474c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	e000ed04 	.word	0xe000ed04

0800475c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <vPortSetupTimerInterrupt+0x34>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <vPortSetupTimerInterrupt+0x38>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <vPortSetupTimerInterrupt+0x3c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0a      	ldr	r2, [pc, #40]	; (800479c <vPortSetupTimerInterrupt+0x40>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <vPortSetupTimerInterrupt+0x44>)
 800477a:	3b01      	subs	r3, #1
 800477c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <vPortSetupTimerInterrupt+0x34>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000e010 	.word	0xe000e010
 8004794:	e000e018 	.word	0xe000e018
 8004798:	20000000 	.word	0x20000000
 800479c:	10624dd3 	.word	0x10624dd3
 80047a0:	e000e014 	.word	0xe000e014

080047a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047b4 <vPortEnableVFP+0x10>
 80047a8:	6801      	ldr	r1, [r0, #0]
 80047aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ae:	6001      	str	r1, [r0, #0]
 80047b0:	4770      	bx	lr
 80047b2:	0000      	.short	0x0000
 80047b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop

080047bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047c2:	f3ef 8305 	mrs	r3, IPSR
 80047c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	d914      	bls.n	80047f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047ce:	4a17      	ldr	r2, [pc, #92]	; (800482c <vPortValidateInterruptPriority+0x70>)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <vPortValidateInterruptPriority+0x74>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	7afa      	ldrb	r2, [r7, #11]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d20a      	bcs.n	80047f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	607b      	str	r3, [r7, #4]
    }
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <vPortValidateInterruptPriority+0x78>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004800:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <vPortValidateInterruptPriority+0x7c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d90a      	bls.n	800481e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	603b      	str	r3, [r7, #0]
    }
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <vPortValidateInterruptPriority+0x60>
    }
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000e3f0 	.word	0xe000e3f0
 8004830:	2000017c 	.word	0x2000017c
 8004834:	e000ed0c 	.word	0xe000ed0c
 8004838:	20000180 	.word	0x20000180

0800483c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004848:	f7fe fb80 	bl	8002f4c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800484c:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <pvPortMalloc+0x1a8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004854:	f000 f934 	bl	8004ac0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004858:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <pvPortMalloc+0x1ac>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	f040 80a7 	bne.w	80049b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02d      	beq.n	80048c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800486c:	2208      	movs	r2, #8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	429a      	cmp	r2, r3
 8004876:	d227      	bcs.n	80048c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004878:	2208      	movs	r2, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d021      	beq.n	80048ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f023 0307 	bic.w	r3, r3, #7
 8004890:	3308      	adds	r3, #8
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d214      	bcs.n	80048c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f023 0307 	bic.w	r3, r3, #7
 800489e:	3308      	adds	r3, #8
 80048a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <pvPortMalloc+0x92>
        __asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	617b      	str	r3, [r7, #20]
    }
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048c6:	e002      	b.n	80048ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	e000      	b.n	80048d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d06e      	beq.n	80049b4 <pvPortMalloc+0x178>
 80048d6:	4b45      	ldr	r3, [pc, #276]	; (80049ec <pvPortMalloc+0x1b0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d869      	bhi.n	80049b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80048e0:	4b43      	ldr	r3, [pc, #268]	; (80049f0 <pvPortMalloc+0x1b4>)
 80048e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80048e4:	4b42      	ldr	r3, [pc, #264]	; (80049f0 <pvPortMalloc+0x1b4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ea:	e004      	b.n	80048f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d903      	bls.n	8004908 <pvPortMalloc+0xcc>
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f1      	bne.n	80048ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <pvPortMalloc+0x1a8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490e:	429a      	cmp	r2, r3
 8004910:	d050      	beq.n	80049b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2208      	movs	r2, #8
 8004918:	4413      	add	r3, r2
 800491a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1ad2      	subs	r2, r2, r3
 800492c:	2308      	movs	r3, #8
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	429a      	cmp	r2, r3
 8004932:	d91f      	bls.n	8004974 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <pvPortMalloc+0x120>
        __asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	613b      	str	r3, [r7, #16]
    }
 8004958:	bf00      	nop
 800495a:	e7fe      	b.n	800495a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800496e:	69b8      	ldr	r0, [r7, #24]
 8004970:	f000 f908 	bl	8004b84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004974:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <pvPortMalloc+0x1b0>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <pvPortMalloc+0x1b0>)
 8004980:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <pvPortMalloc+0x1b0>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <pvPortMalloc+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d203      	bcs.n	8004996 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800498e:	4b17      	ldr	r3, [pc, #92]	; (80049ec <pvPortMalloc+0x1b0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <pvPortMalloc+0x1b8>)
 8004994:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <pvPortMalloc+0x1ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	431a      	orrs	r2, r3
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <pvPortMalloc+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3301      	adds	r3, #1
 80049b0:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <pvPortMalloc+0x1bc>)
 80049b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80049b4:	f7fe fad8 	bl	8002f68 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <pvPortMalloc+0x19c>
        __asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60fb      	str	r3, [r7, #12]
    }
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80049d8:	69fb      	ldr	r3, [r7, #28]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3728      	adds	r7, #40	; 0x28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20012d8c 	.word	0x20012d8c
 80049e8:	20012da0 	.word	0x20012da0
 80049ec:	20012d90 	.word	0x20012d90
 80049f0:	20012d84 	.word	0x20012d84
 80049f4:	20012d94 	.word	0x20012d94
 80049f8:	20012d98 	.word	0x20012d98

080049fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d04d      	beq.n	8004aaa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a0e:	2308      	movs	r3, #8
 8004a10:	425b      	negs	r3, r3
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4413      	add	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	4b24      	ldr	r3, [pc, #144]	; (8004ab4 <vPortFree+0xb8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <vPortFree+0x44>
        __asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60fb      	str	r3, [r7, #12]
    }
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <vPortFree+0x62>
        __asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	60bb      	str	r3, [r7, #8]
    }
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <vPortFree+0xb8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01e      	beq.n	8004aaa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11a      	bne.n	8004aaa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <vPortFree+0xb8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	401a      	ands	r2, r3
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004a84:	f7fe fa62 	bl	8002f4c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <vPortFree+0xbc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4413      	add	r3, r2
 8004a92:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <vPortFree+0xbc>)
 8004a94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a96:	6938      	ldr	r0, [r7, #16]
 8004a98:	f000 f874 	bl	8004b84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <vPortFree+0xc0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	4a06      	ldr	r2, [pc, #24]	; (8004abc <vPortFree+0xc0>)
 8004aa4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004aa6:	f7fe fa5f 	bl	8002f68 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004aaa:	bf00      	nop
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20012da0 	.word	0x20012da0
 8004ab8:	20012d90 	.word	0x20012d90
 8004abc:	20012d9c 	.word	0x20012d9c

08004ac0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ac6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004aca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <prvHeapInit+0xac>)
 8004ace:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00c      	beq.n	8004af4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3307      	adds	r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0307 	bic.w	r3, r3, #7
 8004ae6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	4a1f      	ldr	r2, [pc, #124]	; (8004b6c <prvHeapInit+0xac>)
 8004af0:	4413      	add	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004af8:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <prvHeapInit+0xb0>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004afe:	4b1c      	ldr	r3, [pc, #112]	; (8004b70 <prvHeapInit+0xb0>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4413      	add	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <prvHeapInit+0xb4>)
 8004b20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b22:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <prvHeapInit+0xb4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2200      	movs	r2, #0
 8004b28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <prvHeapInit+0xb4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b40:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <prvHeapInit+0xb4>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <prvHeapInit+0xb8>)
 8004b4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <prvHeapInit+0xbc>)
 8004b56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b58:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <prvHeapInit+0xc0>)
 8004b5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b5e:	601a      	str	r2, [r3, #0]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	20000184 	.word	0x20000184
 8004b70:	20012d84 	.word	0x20012d84
 8004b74:	20012d8c 	.word	0x20012d8c
 8004b78:	20012d94 	.word	0x20012d94
 8004b7c:	20012d90 	.word	0x20012d90
 8004b80:	20012da0 	.word	0x20012da0

08004b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b8c:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <prvInsertBlockIntoFreeList+0xac>)
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e002      	b.n	8004b98 <prvInsertBlockIntoFreeList+0x14>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d8f7      	bhi.n	8004b92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4413      	add	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d108      	bne.n	8004bc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	441a      	add	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	441a      	add	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d118      	bne.n	8004c0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <prvInsertBlockIntoFreeList+0xb0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d00d      	beq.n	8004c02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e008      	b.n	8004c14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <prvInsertBlockIntoFreeList+0xb0>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e003      	b.n	8004c14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d002      	beq.n	8004c22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20012d84 	.word	0x20012d84
 8004c34:	20012d8c 	.word	0x20012d8c

08004c38 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c3c:	4803      	ldr	r0, [pc, #12]	; (8004c4c <_cbSendSystemDesc+0x14>)
 8004c3e:	f002 f955 	bl	8006eec <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c42:	4803      	ldr	r0, [pc, #12]	; (8004c50 <_cbSendSystemDesc+0x18>)
 8004c44:	f002 f952 	bl	8006eec <SEGGER_SYSVIEW_SendSysDesc>
}
 8004c48:	bf00      	nop
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	08007750 	.word	0x08007750
 8004c50:	08007794 	.word	0x08007794

08004c54 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c5e:	6819      	ldr	r1, [r3, #0]
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <SEGGER_SYSVIEW_Conf+0x24>)
 8004c62:	4a06      	ldr	r2, [pc, #24]	; (8004c7c <SEGGER_SYSVIEW_Conf+0x28>)
 8004c64:	f001 fcbe 	bl	80065e4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004c68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004c6c:	f001 fcfe 	bl	800666c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004c70:	bf00      	nop
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000000 	.word	0x20000000
 8004c78:	08004c39 	.word	0x08004c39
 8004c7c:	08007834 	.word	0x08007834

08004c80 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	e033      	b.n	8004cf4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004c8c:	491e      	ldr	r1, [pc, #120]	; (8004d08 <_cbSendTaskList+0x88>)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	491a      	ldr	r1, [pc, #104]	; (8004d08 <_cbSendTaskList+0x88>)
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	3304      	adds	r3, #4
 8004cac:	6819      	ldr	r1, [r3, #0]
 8004cae:	4c16      	ldr	r4, [pc, #88]	; (8004d08 <_cbSendTaskList+0x88>)
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4423      	add	r3, r4
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	681c      	ldr	r4, [r3, #0]
 8004cc0:	4d11      	ldr	r5, [pc, #68]	; (8004d08 <_cbSendTaskList+0x88>)
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	442b      	add	r3, r5
 8004cce:	330c      	adds	r3, #12
 8004cd0:	681d      	ldr	r5, [r3, #0]
 8004cd2:	4e0d      	ldr	r6, [pc, #52]	; (8004d08 <_cbSendTaskList+0x88>)
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4433      	add	r3, r6
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	4622      	mov	r2, r4
 8004cea:	f000 f971 	bl	8004fd0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <_cbSendTaskList+0x8c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3c6      	bcc.n	8004c8c <_cbSendTaskList+0xc>
  }
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d08:	20012da4 	.word	0x20012da4
 8004d0c:	20012e44 	.word	0x20012e44

08004d10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d10:	b5b0      	push	{r4, r5, r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d16:	f7fe fa37 	bl	8003188 <xTaskGetTickCountFromISR>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	f04f 0400 	mov.w	r4, #0
 8004d32:	f04f 0500 	mov.w	r5, #0
 8004d36:	015d      	lsls	r5, r3, #5
 8004d38:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004d3c:	0154      	lsls	r4, r2, #5
 8004d3e:	4622      	mov	r2, r4
 8004d40:	462b      	mov	r3, r5
 8004d42:	1a12      	subs	r2, r2, r0
 8004d44:	eb63 0301 	sbc.w	r3, r3, r1
 8004d48:	f04f 0400 	mov.w	r4, #0
 8004d4c:	f04f 0500 	mov.w	r5, #0
 8004d50:	009d      	lsls	r5, r3, #2
 8004d52:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004d56:	0094      	lsls	r4, r2, #2
 8004d58:	4622      	mov	r2, r4
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	1812      	adds	r2, r2, r0
 8004d5e:	eb41 0303 	adc.w	r3, r1, r3
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f04f 0100 	mov.w	r1, #0
 8004d6a:	00d9      	lsls	r1, r3, #3
 8004d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d70:	00d0      	lsls	r0, r2, #3
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004d7e:	4610      	mov	r0, r2
 8004d80:	4619      	mov	r1, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bdb0      	pop	{r4, r5, r7, pc}

08004d88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d96:	2205      	movs	r2, #5
 8004d98:	492b      	ldr	r1, [pc, #172]	; (8004e48 <SYSVIEW_AddTask+0xc0>)
 8004d9a:	68b8      	ldr	r0, [r7, #8]
 8004d9c:	f002 fc66 	bl	800766c <memcmp>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d04b      	beq.n	8004e3e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004da6:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <SYSVIEW_AddTask+0xc4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b07      	cmp	r3, #7
 8004dac:	d903      	bls.n	8004db6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004dae:	4828      	ldr	r0, [pc, #160]	; (8004e50 <SYSVIEW_AddTask+0xc8>)
 8004db0:	f002 fbae 	bl	8007510 <SEGGER_SYSVIEW_Warn>
    return;
 8004db4:	e044      	b.n	8004e40 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004db6:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <SYSVIEW_AddTask+0xc4>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4926      	ldr	r1, [pc, #152]	; (8004e54 <SYSVIEW_AddTask+0xcc>)
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004dca:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <SYSVIEW_AddTask+0xc4>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4921      	ldr	r1, [pc, #132]	; (8004e54 <SYSVIEW_AddTask+0xcc>)
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	3304      	adds	r3, #4
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004de0:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <SYSVIEW_AddTask+0xc4>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	491b      	ldr	r1, [pc, #108]	; (8004e54 <SYSVIEW_AddTask+0xcc>)
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	3308      	adds	r3, #8
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004df6:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <SYSVIEW_AddTask+0xc4>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4916      	ldr	r1, [pc, #88]	; (8004e54 <SYSVIEW_AddTask+0xcc>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	330c      	adds	r3, #12
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <SYSVIEW_AddTask+0xc4>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4910      	ldr	r1, [pc, #64]	; (8004e54 <SYSVIEW_AddTask+0xcc>)
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3310      	adds	r3, #16
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <SYSVIEW_AddTask+0xc4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3301      	adds	r3, #1
 8004e28:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <SYSVIEW_AddTask+0xc4>)
 8004e2a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f8ca 	bl	8004fd0 <SYSVIEW_SendTaskInfo>
 8004e3c:	e000      	b.n	8004e40 <SYSVIEW_AddTask+0xb8>
    return;
 8004e3e:	bf00      	nop

}
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	080077a4 	.word	0x080077a4
 8004e4c:	20012e44 	.word	0x20012e44
 8004e50:	080077ac 	.word	0x080077ac
 8004e54:	20012da4 	.word	0x20012da4

08004e58 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004e60:	4b59      	ldr	r3, [pc, #356]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80ab 	beq.w	8004fc0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e00d      	b.n	8004e8c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004e70:	4956      	ldr	r1, [pc, #344]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d008      	beq.n	8004e98 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	4b4e      	ldr	r3, [pc, #312]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d3ec      	bcc.n	8004e70 <SYSVIEW_DeleteTask+0x18>
 8004e96:	e000      	b.n	8004e9a <SYSVIEW_DeleteTask+0x42>
      break;
 8004e98:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004e9a:	4b4b      	ldr	r3, [pc, #300]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d111      	bne.n	8004eca <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4a46      	ldr	r2, [pc, #280]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004eb2:	4413      	add	r3, r2
 8004eb4:	2214      	movs	r2, #20
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f002 fbf3 	bl	80076a4 <memset>
    _NumTasks--;
 8004ebe:	4b42      	ldr	r3, [pc, #264]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	4a40      	ldr	r2, [pc, #256]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e07b      	b.n	8004fc2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004eca:	4b3f      	ldr	r3, [pc, #252]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d276      	bcs.n	8004fc2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004ed4:	4b3c      	ldr	r3, [pc, #240]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	493c      	ldr	r1, [pc, #240]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	6819      	ldr	r1, [r3, #0]
 8004ee8:	4838      	ldr	r0, [pc, #224]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4403      	add	r3, r0
 8004ef6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004ef8:	4b33      	ldr	r3, [pc, #204]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	1e5a      	subs	r2, r3, #1
 8004efe:	4933      	ldr	r1, [pc, #204]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	6819      	ldr	r1, [r3, #0]
 8004f0e:	482f      	ldr	r0, [pc, #188]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4403      	add	r3, r0
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004f20:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	4929      	ldr	r1, [pc, #164]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3308      	adds	r3, #8
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	4825      	ldr	r0, [pc, #148]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4403      	add	r3, r0
 8004f44:	3308      	adds	r3, #8
 8004f46:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004f48:	4b1f      	ldr	r3, [pc, #124]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	1e5a      	subs	r2, r3, #1
 8004f4e:	491f      	ldr	r1, [pc, #124]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	6819      	ldr	r1, [r3, #0]
 8004f5e:	481b      	ldr	r0, [pc, #108]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4403      	add	r3, r0
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004f70:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	1e5a      	subs	r2, r3, #1
 8004f76:	4915      	ldr	r1, [pc, #84]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	3310      	adds	r3, #16
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	4811      	ldr	r0, [pc, #68]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4403      	add	r3, r0
 8004f94:	3310      	adds	r3, #16
 8004f96:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	1e5a      	subs	r2, r3, #1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <SYSVIEW_DeleteTask+0x174>)
 8004fa8:	4413      	add	r3, r2
 8004faa:	2214      	movs	r2, #20
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f002 fb78 	bl	80076a4 <memset>
    _NumTasks--;
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	4a03      	ldr	r2, [pc, #12]	; (8004fc8 <SYSVIEW_DeleteTask+0x170>)
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e000      	b.n	8004fc2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004fc0:	bf00      	nop
  }
}
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20012e44 	.word	0x20012e44
 8004fcc:	20012da4 	.word	0x20012da4

08004fd0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004fde:	f107 0314 	add.w	r3, r7, #20
 8004fe2:	2214      	movs	r2, #20
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f002 fb5c 	bl	80076a4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005000:	f107 0314 	add.w	r3, r7, #20
 8005004:	4618      	mov	r0, r3
 8005006:	f001 fe79 	bl	8006cfc <SEGGER_SYSVIEW_SendTaskInfo>
}
 800500a:	bf00      	nop
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <__NVIC_EnableIRQ>:
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005022:	2b00      	cmp	r3, #0
 8005024:	db0b      	blt.n	800503e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	f003 021f 	and.w	r2, r3, #31
 800502c:	4907      	ldr	r1, [pc, #28]	; (800504c <__NVIC_EnableIRQ+0x38>)
 800502e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2001      	movs	r0, #1
 8005036:	fa00 f202 	lsl.w	r2, r0, r2
 800503a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	e000e100 	.word	0xe000e100

08005050 <__NVIC_SetPriority>:
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005060:	2b00      	cmp	r3, #0
 8005062:	db0a      	blt.n	800507a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	490c      	ldr	r1, [pc, #48]	; (800509c <__NVIC_SetPriority+0x4c>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	0112      	lsls	r2, r2, #4
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	440b      	add	r3, r1
 8005074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005078:	e00a      	b.n	8005090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4908      	ldr	r1, [pc, #32]	; (80050a0 <__NVIC_SetPriority+0x50>)
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	3b04      	subs	r3, #4
 8005088:	0112      	lsls	r2, r2, #4
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	440b      	add	r3, r1
 800508e:	761a      	strb	r2, [r3, #24]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	e000e100 	.word	0xe000e100
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80050aa:	f002 fa8d 	bl	80075c8 <SEGGER_SYSVIEW_IsStarted>
 80050ae:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80050b6:	f001 fca5 	bl	8006a04 <SEGGER_SYSVIEW_Start>
  }
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <_cbOnUARTRx+0x3c>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d806      	bhi.n	80050e4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <_cbOnUARTRx+0x3c>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	3301      	adds	r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <_cbOnUARTRx+0x3c>)
 80050e0:	701a      	strb	r2, [r3, #0]
    goto Done;
 80050e2:	e009      	b.n	80050f8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80050e4:	f7ff ffde 	bl	80050a4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <_cbOnUARTRx+0x3c>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4618      	mov	r0, r3
 80050ee:	1dfb      	adds	r3, r7, #7
 80050f0:	2201      	movs	r2, #1
 80050f2:	4619      	mov	r1, r3
 80050f4:	f000 fb9a 	bl	800582c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80050f8:	bf00      	nop
}
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20000014 	.word	0x20000014

08005104 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800510c:	4b14      	ldr	r3, [pc, #80]	; (8005160 <_cbOnUARTTx+0x5c>)
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d80f      	bhi.n	8005134 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <_cbOnUARTTx+0x5c>)
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	461a      	mov	r2, r3
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <_cbOnUARTTx+0x60>)
 800511c:	5c9a      	ldrb	r2, [r3, r2]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005122:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <_cbOnUARTTx+0x5c>)
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	3301      	adds	r3, #1
 8005128:	b2da      	uxtb	r2, r3
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <_cbOnUARTTx+0x5c>)
 800512c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800512e:	2301      	movs	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005132:	e00f      	b.n	8005154 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <_cbOnUARTTx+0x5c>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fa19 	bl	8005574 <SEGGER_RTT_ReadUpBufferNoLock>
 8005142:	4603      	mov	r3, r0
 8005144:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	da02      	bge.n	8005152 <_cbOnUARTTx+0x4e>
    r = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e000      	b.n	8005154 <_cbOnUARTTx+0x50>
  }
Done:
 8005152:	bf00      	nop
  return r;
 8005154:	68fb      	ldr	r3, [r7, #12]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000014 	.word	0x20000014
 8005164:	0800783c 	.word	0x0800783c

08005168 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <SEGGER_UART_init+0x1c>)
 8005172:	4905      	ldr	r1, [pc, #20]	; (8005188 <SEGGER_UART_init+0x20>)
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f863 	bl	8005240 <HIF_UART_Init>
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	080050c5 	.word	0x080050c5
 8005188:	08005105 	.word	0x08005105

0800518c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005192:	4b1e      	ldr	r3, [pc, #120]	; (800520c <USART2_IRQHandler+0x80>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80051a2:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <USART2_IRQHandler+0x84>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 030b 	and.w	r3, r3, #11
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d108      	bne.n	80051c6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80051b4:	4b17      	ldr	r3, [pc, #92]	; (8005214 <USART2_IRQHandler+0x88>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d004      	beq.n	80051c6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80051bc:	4b15      	ldr	r3, [pc, #84]	; (8005214 <USART2_IRQHandler+0x88>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	79fa      	ldrb	r2, [r7, #7]
 80051c2:	4610      	mov	r0, r2
 80051c4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01a      	beq.n	8005206 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <USART2_IRQHandler+0x8c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d015      	beq.n	8005204 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80051d8:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <USART2_IRQHandler+0x8c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	1dfa      	adds	r2, r7, #7
 80051de:	4610      	mov	r0, r2
 80051e0:	4798      	blx	r3
 80051e2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80051ea:	4b0c      	ldr	r3, [pc, #48]	; (800521c <USART2_IRQHandler+0x90>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a0b      	ldr	r2, [pc, #44]	; (800521c <USART2_IRQHandler+0x90>)
 80051f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e006      	b.n	8005206 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <USART2_IRQHandler+0x80>)
 80051fa:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80051fc:	79fa      	ldrb	r2, [r7, #7]
 80051fe:	4b04      	ldr	r3, [pc, #16]	; (8005210 <USART2_IRQHandler+0x84>)
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e000      	b.n	8005206 <USART2_IRQHandler+0x7a>
      return;
 8005204:	bf00      	nop
    }
  }
}
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40004400 	.word	0x40004400
 8005210:	40004404 	.word	0x40004404
 8005214:	20012e48 	.word	0x20012e48
 8005218:	20012e4c 	.word	0x20012e4c
 800521c:	4000440c 	.word	0x4000440c

08005220 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a04      	ldr	r2, [pc, #16]	; (800523c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522e:	6013      	str	r3, [r2, #0]
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	4000440c 	.word	0x4000440c

08005240 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800524c:	4b2e      	ldr	r3, [pc, #184]	; (8005308 <HIF_UART_Init+0xc8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2d      	ldr	r2, [pc, #180]	; (8005308 <HIF_UART_Init+0xc8>)
 8005252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005256:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005258:	4b2c      	ldr	r3, [pc, #176]	; (800530c <HIF_UART_Init+0xcc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2b      	ldr	r2, [pc, #172]	; (800530c <HIF_UART_Init+0xcc>)
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005264:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HIF_UART_Init+0xd0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005270:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005278:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800527a:	4a25      	ldr	r2, [pc, #148]	; (8005310 <HIF_UART_Init+0xd0>)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005280:	4b24      	ldr	r3, [pc, #144]	; (8005314 <HIF_UART_Init+0xd4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800528c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005294:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005296:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <HIF_UART_Init+0xd4>)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800529c:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <HIF_UART_Init+0xd8>)
 800529e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80052a2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80052a4:	4b1d      	ldr	r3, [pc, #116]	; (800531c <HIF_UART_Init+0xdc>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80052aa:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <HIF_UART_Init+0xe0>)
 80052ac:	2280      	movs	r2, #128	; 0x80
 80052ae:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80052b6:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <HIF_UART_Init+0xe4>)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	3301      	adds	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ce:	d302      	bcc.n	80052d6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80052d0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80052d4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	4a11      	ldr	r2, [pc, #68]	; (8005328 <HIF_UART_Init+0xe8>)
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80052e6:	4a11      	ldr	r2, [pc, #68]	; (800532c <HIF_UART_Init+0xec>)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80052ec:	4a10      	ldr	r2, [pc, #64]	; (8005330 <HIF_UART_Init+0xf0>)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80052f2:	2106      	movs	r1, #6
 80052f4:	2026      	movs	r0, #38	; 0x26
 80052f6:	f7ff feab 	bl	8005050 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80052fa:	2026      	movs	r0, #38	; 0x26
 80052fc:	f7ff fe8a 	bl	8005014 <__NVIC_EnableIRQ>
}
 8005300:	bf00      	nop
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40023840 	.word	0x40023840
 800530c:	40023830 	.word	0x40023830
 8005310:	40020020 	.word	0x40020020
 8005314:	40020000 	.word	0x40020000
 8005318:	4000440c 	.word	0x4000440c
 800531c:	40004410 	.word	0x40004410
 8005320:	40004414 	.word	0x40004414
 8005324:	0501bd00 	.word	0x0501bd00
 8005328:	40004408 	.word	0x40004408
 800532c:	20012e48 	.word	0x20012e48
 8005330:	20012e4c 	.word	0x20012e4c

08005334 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800533a:	4b24      	ldr	r3, [pc, #144]	; (80053cc <_DoInit+0x98>)
 800533c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2203      	movs	r2, #3
 8005342:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2203      	movs	r2, #3
 8005348:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <_DoInit+0x9c>)
 800534e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <_DoInit+0xa0>)
 8005354:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800535c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <_DoInit+0x9c>)
 8005374:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <_DoInit+0xa4>)
 800537a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2210      	movs	r2, #16
 8005380:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3307      	adds	r3, #7
 8005398:	4a10      	ldr	r2, [pc, #64]	; (80053dc <_DoInit+0xa8>)
 800539a:	6810      	ldr	r0, [r2, #0]
 800539c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800539e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a0e      	ldr	r2, [pc, #56]	; (80053e0 <_DoInit+0xac>)
 80053a6:	6810      	ldr	r0, [r2, #0]
 80053a8:	6018      	str	r0, [r3, #0]
 80053aa:	8891      	ldrh	r1, [r2, #4]
 80053ac:	7992      	ldrb	r2, [r2, #6]
 80053ae:	8099      	strh	r1, [r3, #4]
 80053b0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80053b2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80053bc:	f3bf 8f5f 	dmb	sy
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	20014414 	.word	0x20014414
 80053d0:	080077fc 	.word	0x080077fc
 80053d4:	20012e50 	.word	0x20012e50
 80053d8:	20013250 	.word	0x20013250
 80053dc:	08007808 	.word	0x08007808
 80053e0:	0800780c 	.word	0x0800780c

080053e4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80053f0:	2300      	movs	r3, #0
 80053f2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	429a      	cmp	r2, r3
 8005406:	d905      	bls.n	8005414 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
 8005412:	e007      	b.n	8005424 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	1acb      	subs	r3, r1, r3
 800541e:	4413      	add	r3, r2
 8005420:	3b01      	subs	r3, #1
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542e:	4293      	cmp	r3, r2
 8005430:	bf28      	it	cs
 8005432:	4613      	movcs	r3, r2
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4293      	cmp	r3, r2
 800543c:	bf28      	it	cs
 800543e:	4613      	movcs	r3, r2
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800544c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	6978      	ldr	r0, [r7, #20]
 8005452:	f002 f919 	bl	8007688 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005456:	6a3a      	ldr	r2, [r7, #32]
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	4413      	add	r3, r2
 800545c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	4413      	add	r3, r2
 8005464:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	4413      	add	r3, r2
 8005474:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	429a      	cmp	r2, r3
 800547e:	d101      	bne.n	8005484 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005480:	2300      	movs	r3, #0
 8005482:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005484:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1b2      	bne.n	80053fa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005494:	6a3b      	ldr	r3, [r7, #32]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3728      	adds	r7, #40	; 0x28
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800549e:	b580      	push	{r7, lr}
 80054a0:	b088      	sub	sp, #32
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d911      	bls.n	80054e6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	6938      	ldr	r0, [r7, #16]
 80054d2:	f002 f8d9 	bl	8007688 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054d6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	441a      	add	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80054e4:	e01f      	b.n	8005526 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	6938      	ldr	r0, [r7, #16]
 80054fa:	f002 f8c5 	bl	8007688 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	4413      	add	r3, r2
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4619      	mov	r1, r3
 8005516:	6938      	ldr	r0, [r7, #16]
 8005518:	f002 f8b6 	bl	8007688 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800551c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	60da      	str	r2, [r3, #12]
}
 8005526:	bf00      	nop
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800552e:	b480      	push	{r7}
 8005530:	b087      	sub	sp, #28
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	429a      	cmp	r2, r3
 8005548:	d808      	bhi.n	800555c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	4413      	add	r3, r2
 8005556:	3b01      	subs	r3, #1
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e004      	b.n	8005566 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005566:	697b      	ldr	r3, [r7, #20]
}
 8005568:	4618      	mov	r0, r3
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b08c      	sub	sp, #48	; 0x30
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005580:	4b3e      	ldr	r3, [pc, #248]	; (800567c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800558e:	f7ff fed1 	bl	8005334 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	4613      	mov	r3, r2
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4413      	add	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4a37      	ldr	r2, [pc, #220]	; (800567c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80055a0:	4413      	add	r3, r2
 80055a2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80055b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d92b      	bls.n	8005618 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bf28      	it	cs
 80055d2:	4613      	movcs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	4413      	add	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055e6:	f002 f84f 	bl	8007688 <memcpy>
    NumBytesRead += NumBytesRem;
 80055ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	4413      	add	r3, r2
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80055f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	4413      	add	r3, r2
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	4413      	add	r3, r2
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005610:	429a      	cmp	r2, r3
 8005612:	d101      	bne.n	8005618 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005614:	2300      	movs	r3, #0
 8005616:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4293      	cmp	r3, r2
 8005626:	bf28      	it	cs
 8005628:	4613      	movcs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d019      	beq.n	8005666 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	4413      	add	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	6939      	ldr	r1, [r7, #16]
 8005640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005642:	f002 f821 	bl	8007688 <memcpy>
    NumBytesRead += NumBytesRem;
 8005646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	4413      	add	r3, r2
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800564e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	4413      	add	r3, r2
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800565e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4413      	add	r3, r2
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005670:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005674:	4618      	mov	r0, r3
 8005676:	3730      	adds	r7, #48	; 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20014414 	.word	0x20014414

08005680 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	; 0x30
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800568c:	4b3e      	ldr	r3, [pc, #248]	; (8005788 <SEGGER_RTT_ReadNoLock+0x108>)
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <SEGGER_RTT_ReadNoLock+0x1e>
 800569a:	f7ff fe4b 	bl	8005334 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	4413      	add	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	3360      	adds	r3, #96	; 0x60
 80056aa:	4a37      	ldr	r2, [pc, #220]	; (8005788 <SEGGER_RTT_ReadNoLock+0x108>)
 80056ac:	4413      	add	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80056c0:	2300      	movs	r3, #0
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d92b      	bls.n	8005724 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4293      	cmp	r3, r2
 80056dc:	bf28      	it	cs
 80056de:	4613      	movcs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	4413      	add	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	6939      	ldr	r1, [r7, #16]
 80056f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056f2:	f001 ffc9 	bl	8007688 <memcpy>
    NumBytesRead += NumBytesRem;
 80056f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4413      	add	r3, r2
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	4413      	add	r3, r2
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800570e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800571c:	429a      	cmp	r2, r3
 800571e:	d101      	bne.n	8005724 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005720:	2300      	movs	r3, #0
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4293      	cmp	r3, r2
 8005732:	bf28      	it	cs
 8005734:	4613      	movcs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d019      	beq.n	8005772 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	4413      	add	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	6939      	ldr	r1, [r7, #16]
 800574c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800574e:	f001 ff9b 	bl	8007688 <memcpy>
    NumBytesRead += NumBytesRem;
 8005752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	4413      	add	r3, r2
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800575a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800576a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	4413      	add	r3, r2
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800577c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005780:	4618      	mov	r0, r3
 8005782:	3730      	adds	r7, #48	; 0x30
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20014414 	.word	0x20014414

0800578c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	3360      	adds	r3, #96	; 0x60
 80057a8:	4a1f      	ldr	r2, [pc, #124]	; (8005828 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80057aa:	4413      	add	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d029      	beq.n	800580a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d82e      	bhi.n	8005818 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d013      	beq.n	80057ea <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80057c2:	e029      	b.n	8005818 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80057c4:	6978      	ldr	r0, [r7, #20]
 80057c6:	f7ff feb2 	bl	800552e <_GetAvailWriteSpace>
 80057ca:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d202      	bcs.n	80057da <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80057d8:	e021      	b.n	800581e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	69b9      	ldr	r1, [r7, #24]
 80057e2:	6978      	ldr	r0, [r7, #20]
 80057e4:	f7ff fe5b 	bl	800549e <_WriteNoCheck>
    break;
 80057e8:	e019      	b.n	800581e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80057ea:	6978      	ldr	r0, [r7, #20]
 80057ec:	f7ff fe9f 	bl	800552e <_GetAvailWriteSpace>
 80057f0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4293      	cmp	r3, r2
 80057f8:	bf28      	it	cs
 80057fa:	4613      	movcs	r3, r2
 80057fc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	69b9      	ldr	r1, [r7, #24]
 8005802:	6978      	ldr	r0, [r7, #20]
 8005804:	f7ff fe4b 	bl	800549e <_WriteNoCheck>
    break;
 8005808:	e009      	b.n	800581e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	6978      	ldr	r0, [r7, #20]
 8005810:	f7ff fde8 	bl	80053e4 <_WriteBlocking>
 8005814:	61f8      	str	r0, [r7, #28]
    break;
 8005816:	e002      	b.n	800581e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]
    break;
 800581c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800581e:	69fb      	ldr	r3, [r7, #28]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20014414 	.word	0x20014414

0800582c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005838:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005846:	f7ff fd75 	bl	8005334 <_DoInit>
  SEGGER_RTT_LOCK();
 800584a:	f3ef 8311 	mrs	r3, BASEPRI
 800584e:	f04f 0120 	mov.w	r1, #32
 8005852:	f381 8811 	msr	BASEPRI, r1
 8005856:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff ff95 	bl	800578c <SEGGER_RTT_WriteDownBufferNoLock>
 8005862:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800586a:	697b      	ldr	r3, [r7, #20]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20014414 	.word	0x20014414

08005878 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005886:	4b3d      	ldr	r3, [pc, #244]	; (800597c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005894:	f7ff fd4e 	bl	8005334 <_DoInit>
  SEGGER_RTT_LOCK();
 8005898:	f3ef 8311 	mrs	r3, BASEPRI
 800589c:	f04f 0120 	mov.w	r1, #32
 80058a0:	f381 8811 	msr	BASEPRI, r1
 80058a4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058a6:	4b35      	ldr	r3, [pc, #212]	; (800597c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80058a8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80058ae:	6939      	ldr	r1, [r7, #16]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	4613      	mov	r3, r2
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	4413      	add	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	440b      	add	r3, r1
 80058be:	3304      	adds	r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	dbeb      	blt.n	80058ae <SEGGER_RTT_AllocUpBuffer+0x36>
 80058d6:	e000      	b.n	80058da <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80058d8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	da3f      	bge.n	8005964 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80058e4:	6939      	ldr	r1, [r7, #16]
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	4613      	mov	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	4413      	add	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	440b      	add	r3, r1
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80058f8:	6939      	ldr	r1, [r7, #16]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	4613      	mov	r3, r2
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	4413      	add	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	440b      	add	r3, r1
 8005908:	3304      	adds	r3, #4
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800590e:	6939      	ldr	r1, [r7, #16]
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	440b      	add	r3, r1
 800591c:	3320      	adds	r3, #32
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005922:	6939      	ldr	r1, [r7, #16]
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	4613      	mov	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	3328      	adds	r3, #40	; 0x28
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005936:	6939      	ldr	r1, [r7, #16]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	4613      	mov	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	3324      	adds	r3, #36	; 0x24
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800594a:	6939      	ldr	r1, [r7, #16]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	4613      	mov	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4413      	add	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	440b      	add	r3, r1
 8005958:	332c      	adds	r3, #44	; 0x2c
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800595e:	f3bf 8f5f 	dmb	sy
 8005962:	e002      	b.n	800596a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005964:	f04f 33ff 	mov.w	r3, #4294967295
 8005968:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005970:	69fb      	ldr	r3, [r7, #28]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20014414 	.word	0x20014414

08005980 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800598e:	4b33      	ldr	r3, [pc, #204]	; (8005a5c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800599c:	f7ff fcca 	bl	8005334 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059a0:	4b2e      	ldr	r3, [pc, #184]	; (8005a5c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80059a2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	461a      	mov	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d24d      	bcs.n	8005a4c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80059b0:	f3ef 8311 	mrs	r3, BASEPRI
 80059b4:	f04f 0120 	mov.w	r1, #32
 80059b8:	f381 8811 	msr	BASEPRI, r1
 80059bc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d031      	beq.n	8005a28 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80059c4:	6979      	ldr	r1, [r7, #20]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4613      	mov	r3, r2
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	4413      	add	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	440b      	add	r3, r1
 80059d2:	3360      	adds	r3, #96	; 0x60
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80059d8:	6979      	ldr	r1, [r7, #20]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4613      	mov	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	4413      	add	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	440b      	add	r3, r1
 80059e6:	3364      	adds	r3, #100	; 0x64
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4613      	mov	r3, r2
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4413      	add	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	440b      	add	r3, r1
 80059fa:	3368      	adds	r3, #104	; 0x68
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005a00:	6979      	ldr	r1, [r7, #20]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4613      	mov	r3, r2
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	4413      	add	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3370      	adds	r3, #112	; 0x70
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005a14:	6979      	ldr	r1, [r7, #20]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	336c      	adds	r3, #108	; 0x6c
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005a28:	6979      	ldr	r1, [r7, #20]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	440b      	add	r3, r1
 8005a36:	3374      	adds	r3, #116	; 0x74
 8005a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a3c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	e002      	b.n	8005a52 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a50:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005a52:	69fb      	ldr	r3, [r7, #28]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3720      	adds	r7, #32
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20014414 	.word	0x20014414

08005a60 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005a70:	e002      	b.n	8005a78 <_EncodeStr+0x18>
    Len++;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	3301      	adds	r3, #1
 8005a76:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f6      	bne.n	8005a72 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d901      	bls.n	8005a90 <_EncodeStr+0x30>
    Len = Limit;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2bfe      	cmp	r3, #254	; 0xfe
 8005a94:	d806      	bhi.n	8005aa4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	60fa      	str	r2, [r7, #12]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e011      	b.n	8005ac8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	60fa      	str	r2, [r7, #12]
 8005aaa:	22ff      	movs	r2, #255	; 0xff
 8005aac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	60fa      	str	r2, [r7, #12]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	0a19      	lsrs	r1, r3, #8
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	60fa      	str	r2, [r7, #12]
 8005ac4:	b2ca      	uxtb	r2, r1
 8005ac6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005acc:	e00a      	b.n	8005ae4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	1c53      	adds	r3, r2, #1
 8005ad2:	60bb      	str	r3, [r7, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	60f9      	str	r1, [r7, #12]
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	701a      	strb	r2, [r3, #0]
    n++;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d3f0      	bcc.n	8005ace <_EncodeStr+0x6e>
  }
  return pPayload;
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b1a:	4b36      	ldr	r3, [pc, #216]	; (8005bf4 <_HandleIncomingPacket+0xe0>)
 8005b1c:	7e1b      	ldrb	r3, [r3, #24]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	1cfb      	adds	r3, r7, #3
 8005b22:	2201      	movs	r2, #1
 8005b24:	4619      	mov	r1, r3
 8005b26:	f7ff fdab 	bl	8005680 <SEGGER_RTT_ReadNoLock>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dd54      	ble.n	8005bde <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d032      	beq.n	8005ba0 <_HandleIncomingPacket+0x8c>
 8005b3a:	2b80      	cmp	r3, #128	; 0x80
 8005b3c:	dc42      	bgt.n	8005bc4 <_HandleIncomingPacket+0xb0>
 8005b3e:	2b07      	cmp	r3, #7
 8005b40:	dc16      	bgt.n	8005b70 <_HandleIncomingPacket+0x5c>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dd3e      	ble.n	8005bc4 <_HandleIncomingPacket+0xb0>
 8005b46:	3b01      	subs	r3, #1
 8005b48:	2b06      	cmp	r3, #6
 8005b4a:	d83b      	bhi.n	8005bc4 <_HandleIncomingPacket+0xb0>
 8005b4c:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <_HandleIncomingPacket+0x40>)
 8005b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b52:	bf00      	nop
 8005b54:	08005b77 	.word	0x08005b77
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b83 	.word	0x08005b83
 8005b60:	08005b89 	.word	0x08005b89
 8005b64:	08005b8f 	.word	0x08005b8f
 8005b68:	08005b95 	.word	0x08005b95
 8005b6c:	08005b9b 	.word	0x08005b9b
 8005b70:	2b7f      	cmp	r3, #127	; 0x7f
 8005b72:	d036      	beq.n	8005be2 <_HandleIncomingPacket+0xce>
 8005b74:	e026      	b.n	8005bc4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005b76:	f000 ff45 	bl	8006a04 <SEGGER_SYSVIEW_Start>
      break;
 8005b7a:	e037      	b.n	8005bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005b7c:	f000 fffe 	bl	8006b7c <SEGGER_SYSVIEW_Stop>
      break;
 8005b80:	e034      	b.n	8005bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005b82:	f001 f9d7 	bl	8006f34 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005b86:	e031      	b.n	8005bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005b88:	f001 f99c 	bl	8006ec4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005b8c:	e02e      	b.n	8005bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005b8e:	f001 f81b 	bl	8006bc8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005b92:	e02b      	b.n	8005bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005b94:	f001 fc6a 	bl	800746c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005b98:	e028      	b.n	8005bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005b9a:	f001 fc49 	bl	8007430 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005b9e:	e025      	b.n	8005bec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <_HandleIncomingPacket+0xe0>)
 8005ba2:	7e1b      	ldrb	r3, [r3, #24]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	1cfb      	adds	r3, r7, #3
 8005ba8:	2201      	movs	r2, #1
 8005baa:	4619      	mov	r1, r3
 8005bac:	f7ff fd68 	bl	8005680 <SEGGER_RTT_ReadNoLock>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	dd15      	ble.n	8005be6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 fbb7 	bl	8007330 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005bc2:	e010      	b.n	8005be6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	b25b      	sxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	da0e      	bge.n	8005bea <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <_HandleIncomingPacket+0xe0>)
 8005bce:	7e1b      	ldrb	r3, [r3, #24]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	1cfb      	adds	r3, r7, #3
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f7ff fd52 	bl	8005680 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005bdc:	e005      	b.n	8005bea <_HandleIncomingPacket+0xd6>
    }
  }
 8005bde:	bf00      	nop
 8005be0:	e004      	b.n	8005bec <_HandleIncomingPacket+0xd8>
      break;
 8005be2:	bf00      	nop
 8005be4:	e002      	b.n	8005bec <_HandleIncomingPacket+0xd8>
      break;
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <_HandleIncomingPacket+0xd8>
      break;
 8005bea:	bf00      	nop
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20014268 	.word	0x20014268

08005bf8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08c      	sub	sp, #48	; 0x30
 8005bfc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005bfe:	2301      	movs	r3, #1
 8005c00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	3301      	adds	r3, #1
 8005c06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c0c:	4b32      	ldr	r3, [pc, #200]	; (8005cd8 <_TrySendOverflowPacket+0xe0>)
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c12:	e00b      	b.n	8005c2c <_TrySendOverflowPacket+0x34>
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	09db      	lsrs	r3, r3, #7
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c30:	d8f0      	bhi.n	8005c14 <_TrySendOverflowPacket+0x1c>
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c42:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <_TrySendOverflowPacket+0xe4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c48:	4b23      	ldr	r3, [pc, #140]	; (8005cd8 <_TrySendOverflowPacket+0xe0>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	623b      	str	r3, [r7, #32]
 8005c5a:	e00b      	b.n	8005c74 <_TrySendOverflowPacket+0x7c>
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	1c59      	adds	r1, r3, #1
 8005c64:	6279      	str	r1, [r7, #36]	; 0x24
 8005c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	09db      	lsrs	r3, r3, #7
 8005c72:	623b      	str	r3, [r7, #32]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	2b7f      	cmp	r3, #127	; 0x7f
 8005c78:	d8f0      	bhi.n	8005c5c <_TrySendOverflowPacket+0x64>
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	627a      	str	r2, [r7, #36]	; 0x24
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <_TrySendOverflowPacket+0xe0>)
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	1d3b      	adds	r3, r7, #4
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	1d3b      	adds	r3, r7, #4
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f7fa fab8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005ca4:	f7ff fabc 	bl	8005220 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005cae:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <_TrySendOverflowPacket+0xe0>)
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005cb4:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <_TrySendOverflowPacket+0xe0>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <_TrySendOverflowPacket+0xe0>)
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	e004      	b.n	8005ccc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005cc2:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <_TrySendOverflowPacket+0xe0>)
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	4a03      	ldr	r2, [pc, #12]	; (8005cd8 <_TrySendOverflowPacket+0xe0>)
 8005cca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005ccc:	693b      	ldr	r3, [r7, #16]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3730      	adds	r7, #48	; 0x30
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20014268 	.word	0x20014268
 8005cdc:	e0001004 	.word	0xe0001004

08005ce0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005cec:	4b6d      	ldr	r3, [pc, #436]	; (8005ea4 <_SendPacket+0x1c4>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d010      	beq.n	8005d16 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005cf4:	4b6b      	ldr	r3, [pc, #428]	; (8005ea4 <_SendPacket+0x1c4>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80a5 	beq.w	8005e48 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005cfe:	4b69      	ldr	r3, [pc, #420]	; (8005ea4 <_SendPacket+0x1c4>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d109      	bne.n	8005d1a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d06:	f7ff ff77 	bl	8005bf8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005d0a:	4b66      	ldr	r3, [pc, #408]	; (8005ea4 <_SendPacket+0x1c4>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	f040 809c 	bne.w	8005e4c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005d14:	e001      	b.n	8005d1a <_SendPacket+0x3a>
    goto Send;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <_SendPacket+0x3c>
Send:
 8005d1a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b1f      	cmp	r3, #31
 8005d20:	d809      	bhi.n	8005d36 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005d22:	4b60      	ldr	r3, [pc, #384]	; (8005ea4 <_SendPacket+0x1c4>)
 8005d24:	69da      	ldr	r2, [r3, #28]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 808d 	bne.w	8005e50 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b17      	cmp	r3, #23
 8005d3a:	d807      	bhi.n	8005d4c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	e03d      	b.n	8005dc8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2b7f      	cmp	r3, #127	; 0x7f
 8005d58:	d912      	bls.n	8005d80 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	09da      	lsrs	r2, r3, #7
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	3a01      	subs	r2, #1
 8005d72:	60fa      	str	r2, [r7, #12]
 8005d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e006      	b.n	8005d8e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b7f      	cmp	r3, #127	; 0x7f
 8005d92:	d912      	bls.n	8005dba <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	09da      	lsrs	r2, r3, #7
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	3a01      	subs	r2, #1
 8005dac:	60fa      	str	r2, [r7, #12]
 8005dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	e006      	b.n	8005dc8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005dc8:	4b37      	ldr	r3, [pc, #220]	; (8005ea8 <_SendPacket+0x1c8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005dce:	4b35      	ldr	r3, [pc, #212]	; (8005ea4 <_SendPacket+0x1c4>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	e00b      	b.n	8005dfa <_SendPacket+0x11a>
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	1c59      	adds	r1, r3, #1
 8005dea:	6279      	str	r1, [r7, #36]	; 0x24
 8005dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	09db      	lsrs	r3, r3, #7
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfe:	d8f0      	bhi.n	8005de2 <_SendPacket+0x102>
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	627a      	str	r2, [r7, #36]	; 0x24
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005e10:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <_SendPacket+0x1c4>)
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	4618      	mov	r0, r3
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	f7fa f9f6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e24:	4603      	mov	r3, r0
 8005e26:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005e28:	f7ff f9fa 	bl	8005220 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e32:	4a1c      	ldr	r2, [pc, #112]	; (8005ea4 <_SendPacket+0x1c4>)
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	60d3      	str	r3, [r2, #12]
 8005e38:	e00b      	b.n	8005e52 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005e3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <_SendPacket+0x1c4>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <_SendPacket+0x1c4>)
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	e004      	b.n	8005e52 <_SendPacket+0x172>
    goto SendDone;
 8005e48:	bf00      	nop
 8005e4a:	e002      	b.n	8005e52 <_SendPacket+0x172>
      goto SendDone;
 8005e4c:	bf00      	nop
 8005e4e:	e000      	b.n	8005e52 <_SendPacket+0x172>
      goto SendDone;
 8005e50:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e52:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <_SendPacket+0x1c4>)
 8005e54:	7e1b      	ldrb	r3, [r3, #24]
 8005e56:	4619      	mov	r1, r3
 8005e58:	4a14      	ldr	r2, [pc, #80]	; (8005eac <_SendPacket+0x1cc>)
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	440b      	add	r3, r1
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4413      	add	r3, r2
 8005e64:	336c      	adds	r3, #108	; 0x6c
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <_SendPacket+0x1c4>)
 8005e6a:	7e1b      	ldrb	r3, [r3, #24]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	490f      	ldr	r1, [pc, #60]	; (8005eac <_SendPacket+0x1cc>)
 8005e70:	4603      	mov	r3, r0
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	4403      	add	r3, r0
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	440b      	add	r3, r1
 8005e7a:	3370      	adds	r3, #112	; 0x70
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d00b      	beq.n	8005e9a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005e82:	4b08      	ldr	r3, [pc, #32]	; (8005ea4 <_SendPacket+0x1c4>)
 8005e84:	789b      	ldrb	r3, [r3, #2]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d107      	bne.n	8005e9a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005e8a:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <_SendPacket+0x1c4>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005e90:	f7ff fe40 	bl	8005b14 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005e94:	4b03      	ldr	r3, [pc, #12]	; (8005ea4 <_SendPacket+0x1c4>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005e9a:	bf00      	nop
 8005e9c:	3728      	adds	r7, #40	; 0x28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20014268 	.word	0x20014268
 8005ea8:	e0001004 	.word	0xe0001004
 8005eac:	20014414 	.word	0x20014414

08005eb0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	; 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	2b80      	cmp	r3, #128	; 0x80
 8005ec8:	d80a      	bhi.n	8005ee0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	1c59      	adds	r1, r3, #1
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6051      	str	r1, [r2, #4]
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b80      	cmp	r3, #128	; 0x80
 8005ee6:	d15a      	bne.n	8005f9e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	623b      	str	r3, [r7, #32]
 8005f08:	e00b      	b.n	8005f22 <_StoreChar+0x72>
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	1c59      	adds	r1, r3, #1
 8005f12:	6279      	str	r1, [r7, #36]	; 0x24
 8005f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	09db      	lsrs	r3, r3, #7
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	2b7f      	cmp	r3, #127	; 0x7f
 8005f26:	d8f0      	bhi.n	8005f0a <_StoreChar+0x5a>
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005f2e:	6a3a      	ldr	r2, [r7, #32]
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	e00b      	b.n	8005f5a <_StoreChar+0xaa>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	1c59      	adds	r1, r3, #1
 8005f4a:	61f9      	str	r1, [r7, #28]
 8005f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	09db      	lsrs	r3, r3, #7
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5e:	d8f0      	bhi.n	8005f42 <_StoreChar+0x92>
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	61fa      	str	r2, [r7, #28]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	221a      	movs	r2, #26
 8005f76:	6939      	ldr	r1, [r7, #16]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff feb1 	bl	8005ce0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fdb9 	bl	8005afa <_PreparePacket>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	611a      	str	r2, [r3, #16]
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	3728      	adds	r7, #40	; 0x28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005fc2:	e007      	b.n	8005fd4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005fc4:	6a3a      	ldr	r2, [r7, #32]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fcc:	623b      	str	r3, [r7, #32]
    Width++;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005fd4:	6a3a      	ldr	r2, [r7, #32]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d2f3      	bcs.n	8005fc4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d901      	bls.n	8005fe8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d11f      	bne.n	8006032 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01c      	beq.n	8006032 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <_PrintUnsigned+0x66>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <_PrintUnsigned+0x66>
        c = '0';
 8006008:	2330      	movs	r3, #48	; 0x30
 800600a:	76fb      	strb	r3, [r7, #27]
 800600c:	e001      	b.n	8006012 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800600e:	2320      	movs	r3, #32
 8006010:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006012:	e007      	b.n	8006024 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	3b01      	subs	r3, #1
 8006018:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800601a:	7efb      	ldrb	r3, [r7, #27]
 800601c:	4619      	mov	r1, r3
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7ff ff46 	bl	8005eb0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <_PrintUnsigned+0x8a>
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	429a      	cmp	r2, r3
 8006030:	d3f0      	bcc.n	8006014 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d903      	bls.n	8006040 <_PrintUnsigned+0x98>
      NumDigits--;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	3b01      	subs	r3, #1
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	e009      	b.n	8006054 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	429a      	cmp	r2, r3
 8006050:	d200      	bcs.n	8006054 <_PrintUnsigned+0xac>
        break;
 8006052:	e005      	b.n	8006060 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	fb02 f303 	mul.w	r3, r2, r3
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800605e:	e7e8      	b.n	8006032 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006078:	4a15      	ldr	r2, [pc, #84]	; (80060d0 <_PrintUnsigned+0x128>)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	4413      	add	r3, r2
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff ff14 	bl	8005eb0 <_StoreChar>
    Digit /= Base;
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e3      	bne.n	8006060 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d011      	beq.n	80060c6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00e      	beq.n	80060c6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060a8:	e006      	b.n	80060b8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	3b01      	subs	r3, #1
 80060ae:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80060b0:	2120      	movs	r1, #32
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff fefc 	bl	8005eb0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <_PrintUnsigned+0x11e>
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d3f1      	bcc.n	80060aa <_PrintUnsigned+0x102>
      }
    }
  }
}
 80060c6:	bf00      	nop
 80060c8:	3728      	adds	r7, #40	; 0x28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	0800784c 	.word	0x0800784c

080060d4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bfb8      	it	lt
 80060e8:	425b      	neglt	r3, r3
 80060ea:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80060ec:	2301      	movs	r3, #1
 80060ee:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80060f0:	e007      	b.n	8006102 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80060fa:	613b      	str	r3, [r7, #16]
    Width++;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	3301      	adds	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	429a      	cmp	r2, r3
 8006108:	daf3      	bge.n	80060f2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	429a      	cmp	r2, r3
 8006110:	d901      	bls.n	8006116 <_PrintInt+0x42>
    Width = NumDigits;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <_PrintInt+0x5e>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	db04      	blt.n	800612c <_PrintInt+0x58>
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <_PrintInt+0x5e>
    FieldWidth--;
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	3b01      	subs	r3, #1
 8006130:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <_PrintInt+0x6e>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d016      	beq.n	8006170 <_PrintInt+0x9c>
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d111      	bne.n	8006170 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00e      	beq.n	8006170 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006152:	e006      	b.n	8006162 <_PrintInt+0x8e>
        FieldWidth--;
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	3b01      	subs	r3, #1
 8006158:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800615a:	2120      	movs	r1, #32
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff fea7 	bl	8005eb0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <_PrintInt+0x9c>
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	429a      	cmp	r2, r3
 800616e:	d3f1      	bcc.n	8006154 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	da07      	bge.n	8006186 <_PrintInt+0xb2>
    v = -v;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	425b      	negs	r3, r3
 800617a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800617c:	212d      	movs	r1, #45	; 0x2d
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fe96 	bl	8005eb0 <_StoreChar>
 8006184:	e008      	b.n	8006198 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006190:	212b      	movs	r1, #43	; 0x2b
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff fe8c 	bl	8005eb0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d019      	beq.n	80061d6 <_PrintInt+0x102>
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d114      	bne.n	80061d6 <_PrintInt+0x102>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d111      	bne.n	80061d6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00e      	beq.n	80061d6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061b8:	e006      	b.n	80061c8 <_PrintInt+0xf4>
        FieldWidth--;
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	3b01      	subs	r3, #1
 80061be:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80061c0:	2130      	movs	r1, #48	; 0x30
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f7ff fe74 	bl	8005eb0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <_PrintInt+0x102>
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d3f1      	bcc.n	80061ba <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff fedf 	bl	8005fa8 <_PrintUnsigned>
}
 80061ea:	bf00      	nop
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b098      	sub	sp, #96	; 0x60
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006200:	f3ef 8311 	mrs	r3, BASEPRI
 8006204:	f04f 0120 	mov.w	r1, #32
 8006208:	f381 8811 	msr	BASEPRI, r1
 800620c:	633b      	str	r3, [r7, #48]	; 0x30
 800620e:	48b7      	ldr	r0, [pc, #732]	; (80064ec <_VPrintTarget+0x2f8>)
 8006210:	f7ff fc73 	bl	8005afa <_PreparePacket>
 8006214:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006216:	4bb5      	ldr	r3, [pc, #724]	; (80064ec <_VPrintTarget+0x2f8>)
 8006218:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800621a:	2300      	movs	r3, #0
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006220:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	3301      	adds	r3, #1
 8006226:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800623a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8183 	beq.w	800654a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006248:	2b25      	cmp	r3, #37	; 0x25
 800624a:	f040 8170 	bne.w	800652e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800624e:	2300      	movs	r3, #0
 8006250:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006252:	2301      	movs	r3, #1
 8006254:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800625e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006262:	3b23      	subs	r3, #35	; 0x23
 8006264:	2b0d      	cmp	r3, #13
 8006266:	d83f      	bhi.n	80062e8 <_VPrintTarget+0xf4>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <_VPrintTarget+0x7c>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	080062d9 	.word	0x080062d9
 8006274:	080062e9 	.word	0x080062e9
 8006278:	080062e9 	.word	0x080062e9
 800627c:	080062e9 	.word	0x080062e9
 8006280:	080062e9 	.word	0x080062e9
 8006284:	080062e9 	.word	0x080062e9
 8006288:	080062e9 	.word	0x080062e9
 800628c:	080062e9 	.word	0x080062e9
 8006290:	080062c9 	.word	0x080062c9
 8006294:	080062e9 	.word	0x080062e9
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062e9 	.word	0x080062e9
 80062a0:	080062e9 	.word	0x080062e9
 80062a4:	080062b9 	.word	0x080062b9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80062a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e01a      	b.n	80062ee <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80062b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ba:	f043 0302 	orr.w	r3, r3, #2
 80062be:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	e012      	b.n	80062ee <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80062c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ca:	f043 0304 	orr.w	r3, r3, #4
 80062ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e00a      	b.n	80062ee <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80062d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062da:	f043 0308 	orr.w	r3, r3, #8
 80062de:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e002      	b.n	80062ee <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80062e8:	2300      	movs	r3, #0
 80062ea:	653b      	str	r3, [r7, #80]	; 0x50
 80062ec:	bf00      	nop
        }
      } while (v);
 80062ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1b0      	bne.n	8006256 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80062f4:	2300      	movs	r3, #0
 80062f6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006304:	2b2f      	cmp	r3, #47	; 0x2f
 8006306:	d912      	bls.n	800632e <_VPrintTarget+0x13a>
 8006308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800630c:	2b39      	cmp	r3, #57	; 0x39
 800630e:	d80e      	bhi.n	800632e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	461a      	mov	r2, r3
 8006322:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006326:	4413      	add	r3, r2
 8006328:	3b30      	subs	r3, #48	; 0x30
 800632a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800632c:	e7e4      	b.n	80062f8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800632e:	2300      	movs	r3, #0
 8006330:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800633a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800633e:	2b2e      	cmp	r3, #46	; 0x2e
 8006340:	d11d      	bne.n	800637e <_VPrintTarget+0x18a>
        sFormat++;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3301      	adds	r3, #1
 8006346:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006354:	2b2f      	cmp	r3, #47	; 0x2f
 8006356:	d912      	bls.n	800637e <_VPrintTarget+0x18a>
 8006358:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800635c:	2b39      	cmp	r3, #57	; 0x39
 800635e:	d80e      	bhi.n	800637e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3301      	adds	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	461a      	mov	r2, r3
 8006372:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006376:	4413      	add	r3, r2
 8006378:	3b30      	subs	r3, #48	; 0x30
 800637a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800637c:	e7e4      	b.n	8006348 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006386:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800638a:	2b6c      	cmp	r3, #108	; 0x6c
 800638c:	d003      	beq.n	8006396 <_VPrintTarget+0x1a2>
 800638e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006392:	2b68      	cmp	r3, #104	; 0x68
 8006394:	d107      	bne.n	80063a6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80063a4:	e7ef      	b.n	8006386 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80063a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063aa:	2b25      	cmp	r3, #37	; 0x25
 80063ac:	f000 80b3 	beq.w	8006516 <_VPrintTarget+0x322>
 80063b0:	2b25      	cmp	r3, #37	; 0x25
 80063b2:	f2c0 80b7 	blt.w	8006524 <_VPrintTarget+0x330>
 80063b6:	2b78      	cmp	r3, #120	; 0x78
 80063b8:	f300 80b4 	bgt.w	8006524 <_VPrintTarget+0x330>
 80063bc:	2b58      	cmp	r3, #88	; 0x58
 80063be:	f2c0 80b1 	blt.w	8006524 <_VPrintTarget+0x330>
 80063c2:	3b58      	subs	r3, #88	; 0x58
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	f200 80ad 	bhi.w	8006524 <_VPrintTarget+0x330>
 80063ca:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <_VPrintTarget+0x1dc>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	080064c7 	.word	0x080064c7
 80063d4:	08006525 	.word	0x08006525
 80063d8:	08006525 	.word	0x08006525
 80063dc:	08006525 	.word	0x08006525
 80063e0:	08006525 	.word	0x08006525
 80063e4:	08006525 	.word	0x08006525
 80063e8:	08006525 	.word	0x08006525
 80063ec:	08006525 	.word	0x08006525
 80063f0:	08006525 	.word	0x08006525
 80063f4:	08006525 	.word	0x08006525
 80063f8:	08006525 	.word	0x08006525
 80063fc:	08006455 	.word	0x08006455
 8006400:	0800647b 	.word	0x0800647b
 8006404:	08006525 	.word	0x08006525
 8006408:	08006525 	.word	0x08006525
 800640c:	08006525 	.word	0x08006525
 8006410:	08006525 	.word	0x08006525
 8006414:	08006525 	.word	0x08006525
 8006418:	08006525 	.word	0x08006525
 800641c:	08006525 	.word	0x08006525
 8006420:	08006525 	.word	0x08006525
 8006424:	08006525 	.word	0x08006525
 8006428:	08006525 	.word	0x08006525
 800642c:	08006525 	.word	0x08006525
 8006430:	080064f1 	.word	0x080064f1
 8006434:	08006525 	.word	0x08006525
 8006438:	08006525 	.word	0x08006525
 800643c:	08006525 	.word	0x08006525
 8006440:	08006525 	.word	0x08006525
 8006444:	080064a1 	.word	0x080064a1
 8006448:	08006525 	.word	0x08006525
 800644c:	08006525 	.word	0x08006525
 8006450:	080064c7 	.word	0x080064c7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	1d19      	adds	r1, r3, #4
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6011      	str	r1, [r2, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006468:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4611      	mov	r1, r2
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff fd1c 	bl	8005eb0 <_StoreChar>
        break;
 8006478:	e055      	b.n	8006526 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	1d19      	adds	r1, r3, #4
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6011      	str	r1, [r2, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006488:	f107 0014 	add.w	r0, r7, #20
 800648c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006496:	220a      	movs	r2, #10
 8006498:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800649a:	f7ff fe1b 	bl	80060d4 <_PrintInt>
        break;
 800649e:	e042      	b.n	8006526 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	1d19      	adds	r1, r3, #4
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80064ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064b0:	f107 0014 	add.w	r0, r7, #20
 80064b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064be:	220a      	movs	r2, #10
 80064c0:	f7ff fd72 	bl	8005fa8 <_PrintUnsigned>
        break;
 80064c4:	e02f      	b.n	8006526 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	1d19      	adds	r1, r3, #4
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6011      	str	r1, [r2, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80064d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064d6:	f107 0014 	add.w	r0, r7, #20
 80064da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e4:	2210      	movs	r2, #16
 80064e6:	f7ff fd5f 	bl	8005fa8 <_PrintUnsigned>
        break;
 80064ea:	e01c      	b.n	8006526 <_VPrintTarget+0x332>
 80064ec:	20014298 	.word	0x20014298
      case 'p':
        v = va_arg(*pParamList, int);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	1d19      	adds	r1, r3, #4
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6011      	str	r1, [r2, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80064fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006500:	f107 0014 	add.w	r0, r7, #20
 8006504:	2300      	movs	r3, #0
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	2308      	movs	r3, #8
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2308      	movs	r3, #8
 800650e:	2210      	movs	r2, #16
 8006510:	f7ff fd4a 	bl	8005fa8 <_PrintUnsigned>
        break;
 8006514:	e007      	b.n	8006526 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	2125      	movs	r1, #37	; 0x25
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fcc7 	bl	8005eb0 <_StoreChar>
        break;
 8006522:	e000      	b.n	8006526 <_VPrintTarget+0x332>
      default:
        break;
 8006524:	bf00      	nop
      }
      sFormat++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e007      	b.n	800653e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800652e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006532:	f107 0314 	add.w	r3, r7, #20
 8006536:	4611      	mov	r1, r2
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fcb9 	bl	8005eb0 <_StoreChar>
    }
  } while (*sFormat);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f47f ae72 	bne.w	800622c <_VPrintTarget+0x38>
 8006548:	e000      	b.n	800654c <_VPrintTarget+0x358>
      break;
 800654a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	d041      	beq.n	80065d6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	643b      	str	r3, [r7, #64]	; 0x40
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006562:	e00b      	b.n	800657c <_VPrintTarget+0x388>
 8006564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006566:	b2da      	uxtb	r2, r3
 8006568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656a:	1c59      	adds	r1, r3, #1
 800656c:	6439      	str	r1, [r7, #64]	; 0x40
 800656e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006578:	09db      	lsrs	r3, r3, #7
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800657e:	2b7f      	cmp	r3, #127	; 0x7f
 8006580:	d8f0      	bhi.n	8006564 <_VPrintTarget+0x370>
 8006582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	643a      	str	r2, [r7, #64]	; 0x40
 8006588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006590:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	63bb      	str	r3, [r7, #56]	; 0x38
 8006596:	2300      	movs	r3, #0
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
 800659a:	e00b      	b.n	80065b4 <_VPrintTarget+0x3c0>
 800659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a2:	1c59      	adds	r1, r3, #1
 80065a4:	63b9      	str	r1, [r7, #56]	; 0x38
 80065a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b0:	09db      	lsrs	r3, r3, #7
 80065b2:	637b      	str	r3, [r7, #52]	; 0x34
 80065b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b6:	2b7f      	cmp	r3, #127	; 0x7f
 80065b8:	d8f0      	bhi.n	800659c <_VPrintTarget+0x3a8>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	63ba      	str	r2, [r7, #56]	; 0x38
 80065c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	69b9      	ldr	r1, [r7, #24]
 80065ce:	221a      	movs	r2, #26
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fb85 	bl	8005ce0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80065dc:	bf00      	nop
 80065de:	3758      	adds	r7, #88	; 0x58
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065f2:	2300      	movs	r3, #0
 80065f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065f8:	4917      	ldr	r1, [pc, #92]	; (8006658 <SEGGER_SYSVIEW_Init+0x74>)
 80065fa:	4818      	ldr	r0, [pc, #96]	; (800665c <SEGGER_SYSVIEW_Init+0x78>)
 80065fc:	f7ff f93c 	bl	8005878 <SEGGER_RTT_AllocUpBuffer>
 8006600:	4603      	mov	r3, r0
 8006602:	b2da      	uxtb	r2, r3
 8006604:	4b16      	ldr	r3, [pc, #88]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 8006606:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006608:	4b15      	ldr	r3, [pc, #84]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 800660a:	785a      	ldrb	r2, [r3, #1]
 800660c:	4b14      	ldr	r3, [pc, #80]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 800660e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006610:	4b13      	ldr	r3, [pc, #76]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 8006612:	7e1b      	ldrb	r3, [r3, #24]
 8006614:	4618      	mov	r0, r3
 8006616:	2300      	movs	r3, #0
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	2308      	movs	r3, #8
 800661c:	4a11      	ldr	r2, [pc, #68]	; (8006664 <SEGGER_SYSVIEW_Init+0x80>)
 800661e:	490f      	ldr	r1, [pc, #60]	; (800665c <SEGGER_SYSVIEW_Init+0x78>)
 8006620:	f7ff f9ae 	bl	8005980 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 8006626:	2200      	movs	r2, #0
 8006628:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800662a:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <SEGGER_SYSVIEW_Init+0x84>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 8006630:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006632:	4a0b      	ldr	r2, [pc, #44]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006638:	4a09      	ldr	r2, [pc, #36]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800663e:	4a08      	ldr	r2, [pc, #32]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006644:	4a06      	ldr	r2, [pc, #24]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <SEGGER_SYSVIEW_Init+0x7c>)
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006650:	bf00      	nop
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20013260 	.word	0x20013260
 800665c:	08007814 	.word	0x08007814
 8006660:	20014268 	.word	0x20014268
 8006664:	20014260 	.word	0x20014260
 8006668:	e0001004 	.word	0xe0001004

0800666c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006674:	4a04      	ldr	r2, [pc, #16]	; (8006688 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6113      	str	r3, [r2, #16]
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20014268 	.word	0x20014268

0800668c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006694:	f3ef 8311 	mrs	r3, BASEPRI
 8006698:	f04f 0120 	mov.w	r1, #32
 800669c:	f381 8811 	msr	BASEPRI, r1
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	4808      	ldr	r0, [pc, #32]	; (80066c4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80066a4:	f7ff fa29 	bl	8005afa <_PreparePacket>
 80066a8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	68b8      	ldr	r0, [r7, #8]
 80066b0:	f7ff fb16 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f383 8811 	msr	BASEPRI, r3
}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20014298 	.word	0x20014298

080066c8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066d2:	f3ef 8311 	mrs	r3, BASEPRI
 80066d6:	f04f 0120 	mov.w	r1, #32
 80066da:	f381 8811 	msr	BASEPRI, r1
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	4816      	ldr	r0, [pc, #88]	; (800673c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80066e2:	f7ff fa0a 	bl	8005afa <_PreparePacket>
 80066e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	e00b      	b.n	800670e <SEGGER_SYSVIEW_RecordU32+0x46>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	61f9      	str	r1, [r7, #28]
 8006700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	09db      	lsrs	r3, r3, #7
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b7f      	cmp	r3, #127	; 0x7f
 8006712:	d8f0      	bhi.n	80066f6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	61fa      	str	r2, [r7, #28]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	6938      	ldr	r0, [r7, #16]
 800672a:	f7ff fad9 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f383 8811 	msr	BASEPRI, r3
}
 8006734:	bf00      	nop
 8006736:	3720      	adds	r7, #32
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20014298 	.word	0x20014298

08006740 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	; 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800674c:	f3ef 8311 	mrs	r3, BASEPRI
 8006750:	f04f 0120 	mov.w	r1, #32
 8006754:	f381 8811 	msr	BASEPRI, r1
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	4825      	ldr	r0, [pc, #148]	; (80067f0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800675c:	f7ff f9cd 	bl	8005afa <_PreparePacket>
 8006760:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
 800676e:	e00b      	b.n	8006788 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	b2da      	uxtb	r2, r3
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	1c59      	adds	r1, r3, #1
 8006778:	62f9      	str	r1, [r7, #44]	; 0x2c
 800677a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	09db      	lsrs	r3, r3, #7
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	2b7f      	cmp	r3, #127	; 0x7f
 800678c:	d8f0      	bhi.n	8006770 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	623b      	str	r3, [r7, #32]
 80067a6:	e00b      	b.n	80067c0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	1c59      	adds	r1, r3, #1
 80067b0:	6279      	str	r1, [r7, #36]	; 0x24
 80067b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	09db      	lsrs	r3, r3, #7
 80067be:	623b      	str	r3, [r7, #32]
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2b7f      	cmp	r3, #127	; 0x7f
 80067c4:	d8f0      	bhi.n	80067a8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	627a      	str	r2, [r7, #36]	; 0x24
 80067cc:	6a3a      	ldr	r2, [r7, #32]
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	6979      	ldr	r1, [r7, #20]
 80067da:	69b8      	ldr	r0, [r7, #24]
 80067dc:	f7ff fa80 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f383 8811 	msr	BASEPRI, r3
}
 80067e6:	bf00      	nop
 80067e8:	3730      	adds	r7, #48	; 0x30
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20014298 	.word	0x20014298

080067f4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08e      	sub	sp, #56	; 0x38
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006802:	f3ef 8311 	mrs	r3, BASEPRI
 8006806:	f04f 0120 	mov.w	r1, #32
 800680a:	f381 8811 	msr	BASEPRI, r1
 800680e:	61fb      	str	r3, [r7, #28]
 8006810:	4832      	ldr	r0, [pc, #200]	; (80068dc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006812:	f7ff f972 	bl	8005afa <_PreparePacket>
 8006816:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	633b      	str	r3, [r7, #48]	; 0x30
 8006824:	e00b      	b.n	800683e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	b2da      	uxtb	r2, r3
 800682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682c:	1c59      	adds	r1, r3, #1
 800682e:	6379      	str	r1, [r7, #52]	; 0x34
 8006830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	09db      	lsrs	r3, r3, #7
 800683c:	633b      	str	r3, [r7, #48]	; 0x30
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	2b7f      	cmp	r3, #127	; 0x7f
 8006842:	d8f0      	bhi.n	8006826 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	637a      	str	r2, [r7, #52]	; 0x34
 800684a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
 800685c:	e00b      	b.n	8006876 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	b2da      	uxtb	r2, r3
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	1c59      	adds	r1, r3, #1
 8006866:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	09db      	lsrs	r3, r3, #7
 8006874:	62bb      	str	r3, [r7, #40]	; 0x28
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	2b7f      	cmp	r3, #127	; 0x7f
 800687a:	d8f0      	bhi.n	800685e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	e00b      	b.n	80068ae <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	b2da      	uxtb	r2, r3
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	1c59      	adds	r1, r3, #1
 800689e:	6279      	str	r1, [r7, #36]	; 0x24
 80068a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	09db      	lsrs	r3, r3, #7
 80068ac:	623b      	str	r3, [r7, #32]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	2b7f      	cmp	r3, #127	; 0x7f
 80068b2:	d8f0      	bhi.n	8006896 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	627a      	str	r2, [r7, #36]	; 0x24
 80068ba:	6a3a      	ldr	r2, [r7, #32]
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	6979      	ldr	r1, [r7, #20]
 80068c8:	69b8      	ldr	r0, [r7, #24]
 80068ca:	f7ff fa09 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	f383 8811 	msr	BASEPRI, r3
}
 80068d4:	bf00      	nop
 80068d6:	3738      	adds	r7, #56	; 0x38
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20014298 	.word	0x20014298

080068e0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b090      	sub	sp, #64	; 0x40
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80068ee:	f3ef 8311 	mrs	r3, BASEPRI
 80068f2:	f04f 0120 	mov.w	r1, #32
 80068f6:	f381 8811 	msr	BASEPRI, r1
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	4840      	ldr	r0, [pc, #256]	; (8006a00 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80068fe:	f7ff f8fc 	bl	8005afa <_PreparePacket>
 8006902:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006910:	e00b      	b.n	800692a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	b2da      	uxtb	r2, r3
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	1c59      	adds	r1, r3, #1
 800691a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800691c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	09db      	lsrs	r3, r3, #7
 8006928:	63bb      	str	r3, [r7, #56]	; 0x38
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	2b7f      	cmp	r3, #127	; 0x7f
 800692e:	d8f0      	bhi.n	8006912 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	633b      	str	r3, [r7, #48]	; 0x30
 8006948:	e00b      	b.n	8006962 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	b2da      	uxtb	r2, r3
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	1c59      	adds	r1, r3, #1
 8006952:	6379      	str	r1, [r7, #52]	; 0x34
 8006954:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	09db      	lsrs	r3, r3, #7
 8006960:	633b      	str	r3, [r7, #48]	; 0x30
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	2b7f      	cmp	r3, #127	; 0x7f
 8006966:	d8f0      	bhi.n	800694a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	637a      	str	r2, [r7, #52]	; 0x34
 800696e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006980:	e00b      	b.n	800699a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	b2da      	uxtb	r2, r3
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006988:	1c59      	adds	r1, r3, #1
 800698a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800698c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	09db      	lsrs	r3, r3, #7
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	2b7f      	cmp	r3, #127	; 0x7f
 800699e:	d8f0      	bhi.n	8006982 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
 80069b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b6:	623b      	str	r3, [r7, #32]
 80069b8:	e00b      	b.n	80069d2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	1c59      	adds	r1, r3, #1
 80069c2:	6279      	str	r1, [r7, #36]	; 0x24
 80069c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	09db      	lsrs	r3, r3, #7
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	2b7f      	cmp	r3, #127	; 0x7f
 80069d6:	d8f0      	bhi.n	80069ba <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	627a      	str	r2, [r7, #36]	; 0x24
 80069de:	6a3a      	ldr	r2, [r7, #32]
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	6979      	ldr	r1, [r7, #20]
 80069ec:	69b8      	ldr	r0, [r7, #24]
 80069ee:	f7ff f977 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	f383 8811 	msr	BASEPRI, r3
}
 80069f8:	bf00      	nop
 80069fa:	3740      	adds	r7, #64	; 0x40
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20014298 	.word	0x20014298

08006a04 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08c      	sub	sp, #48	; 0x30
 8006a08:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006a0a:	4b59      	ldr	r3, [pc, #356]	; (8006b70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006a10:	f3ef 8311 	mrs	r3, BASEPRI
 8006a14:	f04f 0120 	mov.w	r1, #32
 8006a18:	f381 8811 	msr	BASEPRI, r1
 8006a1c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006a1e:	4b54      	ldr	r3, [pc, #336]	; (8006b70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	220a      	movs	r2, #10
 8006a24:	4953      	ldr	r1, [pc, #332]	; (8006b74 <SEGGER_SYSVIEW_Start+0x170>)
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7f9 fbf2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006a32:	f7fe fbf5 	bl	8005220 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006a36:	200a      	movs	r0, #10
 8006a38:	f7ff fe28 	bl	800668c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a40:	f04f 0120 	mov.w	r1, #32
 8006a44:	f381 8811 	msr	BASEPRI, r1
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	484b      	ldr	r0, [pc, #300]	; (8006b78 <SEGGER_SYSVIEW_Start+0x174>)
 8006a4c:	f7ff f855 	bl	8005afa <_PreparePacket>
 8006a50:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a5a:	4b45      	ldr	r3, [pc, #276]	; (8006b70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a60:	e00b      	b.n	8006a7a <SEGGER_SYSVIEW_Start+0x76>
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	09db      	lsrs	r3, r3, #7
 8006a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a7e:	d8f0      	bhi.n	8006a62 <SEGGER_SYSVIEW_Start+0x5e>
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
 8006a94:	4b36      	ldr	r3, [pc, #216]	; (8006b70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	623b      	str	r3, [r7, #32]
 8006a9a:	e00b      	b.n	8006ab4 <SEGGER_SYSVIEW_Start+0xb0>
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	1c59      	adds	r1, r3, #1
 8006aa4:	6279      	str	r1, [r7, #36]	; 0x24
 8006aa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	09db      	lsrs	r3, r3, #7
 8006ab2:	623b      	str	r3, [r7, #32]
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab8:	d8f0      	bhi.n	8006a9c <SEGGER_SYSVIEW_Start+0x98>
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	627a      	str	r2, [r7, #36]	; 0x24
 8006ac0:	6a3a      	ldr	r2, [r7, #32]
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	61fb      	str	r3, [r7, #28]
 8006ace:	4b28      	ldr	r3, [pc, #160]	; (8006b70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	e00b      	b.n	8006aee <SEGGER_SYSVIEW_Start+0xea>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	1c59      	adds	r1, r3, #1
 8006ade:	61f9      	str	r1, [r7, #28]
 8006ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	09db      	lsrs	r3, r3, #7
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b7f      	cmp	r3, #127	; 0x7f
 8006af2:	d8f0      	bhi.n	8006ad6 <SEGGER_SYSVIEW_Start+0xd2>
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	61fa      	str	r2, [r7, #28]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	e00b      	b.n	8006b26 <SEGGER_SYSVIEW_Start+0x122>
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	1c59      	adds	r1, r3, #1
 8006b16:	6179      	str	r1, [r7, #20]
 8006b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	09db      	lsrs	r3, r3, #7
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b7f      	cmp	r3, #127	; 0x7f
 8006b2a:	d8f0      	bhi.n	8006b0e <SEGGER_SYSVIEW_Start+0x10a>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	617a      	str	r2, [r7, #20]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b3c:	2218      	movs	r2, #24
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff f8cd 	bl	8005ce0 <_SendPacket>
      RECORD_END();
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006b4c:	4b08      	ldr	r3, [pc, #32]	; (8006b70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006b54:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006b5a:	f000 f9eb 	bl	8006f34 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006b5e:	f000 f9b1 	bl	8006ec4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006b62:	f000 fc83 	bl	800746c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006b66:	bf00      	nop
 8006b68:	3730      	adds	r7, #48	; 0x30
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20014268 	.word	0x20014268
 8006b74:	08007840 	.word	0x08007840
 8006b78:	20014298 	.word	0x20014298

08006b7c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b82:	f3ef 8311 	mrs	r3, BASEPRI
 8006b86:	f04f 0120 	mov.w	r1, #32
 8006b8a:	f381 8811 	msr	BASEPRI, r1
 8006b8e:	607b      	str	r3, [r7, #4]
 8006b90:	480b      	ldr	r0, [pc, #44]	; (8006bc0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006b92:	f7fe ffb2 	bl	8005afa <_PreparePacket>
 8006b96:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006ba0:	220b      	movs	r2, #11
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6838      	ldr	r0, [r7, #0]
 8006ba6:	f7ff f89b 	bl	8005ce0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006baa:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f383 8811 	msr	BASEPRI, r3
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20014298 	.word	0x20014298
 8006bc4:	20014268 	.word	0x20014268

08006bc8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08c      	sub	sp, #48	; 0x30
 8006bcc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bce:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd2:	f04f 0120 	mov.w	r1, #32
 8006bd6:	f381 8811 	msr	BASEPRI, r1
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	4845      	ldr	r0, [pc, #276]	; (8006cf4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006bde:	f7fe ff8c 	bl	8005afa <_PreparePacket>
 8006be2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bec:	4b42      	ldr	r3, [pc, #264]	; (8006cf8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf2:	e00b      	b.n	8006c0c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	09db      	lsrs	r3, r3, #7
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c10:	d8f0      	bhi.n	8006bf4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
 8006c26:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	623b      	str	r3, [r7, #32]
 8006c2c:	e00b      	b.n	8006c46 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	1c59      	adds	r1, r3, #1
 8006c36:	6279      	str	r1, [r7, #36]	; 0x24
 8006c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	09db      	lsrs	r3, r3, #7
 8006c44:	623b      	str	r3, [r7, #32]
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	2b7f      	cmp	r3, #127	; 0x7f
 8006c4a:	d8f0      	bhi.n	8006c2e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	627a      	str	r2, [r7, #36]	; 0x24
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e00b      	b.n	8006c80 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	1c59      	adds	r1, r3, #1
 8006c70:	61f9      	str	r1, [r7, #28]
 8006c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	09db      	lsrs	r3, r3, #7
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b7f      	cmp	r3, #127	; 0x7f
 8006c84:	d8f0      	bhi.n	8006c68 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	61fa      	str	r2, [r7, #28]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	e00b      	b.n	8006cb8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	1c59      	adds	r1, r3, #1
 8006ca8:	6179      	str	r1, [r7, #20]
 8006caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	09db      	lsrs	r3, r3, #7
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2b7f      	cmp	r3, #127	; 0x7f
 8006cbc:	d8f0      	bhi.n	8006ca0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	617a      	str	r2, [r7, #20]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006cce:	2218      	movs	r2, #24
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	68b8      	ldr	r0, [r7, #8]
 8006cd4:	f7ff f804 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006cde:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006ce6:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	4798      	blx	r3
  }
}
 8006cec:	bf00      	nop
 8006cee:	3730      	adds	r7, #48	; 0x30
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20014298 	.word	0x20014298
 8006cf8:	20014268 	.word	0x20014268

08006cfc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b092      	sub	sp, #72	; 0x48
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006d04:	f3ef 8311 	mrs	r3, BASEPRI
 8006d08:	f04f 0120 	mov.w	r1, #32
 8006d0c:	f381 8811 	msr	BASEPRI, r1
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	486a      	ldr	r0, [pc, #424]	; (8006ebc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006d14:	f7fe fef1 	bl	8005afa <_PreparePacket>
 8006d18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	647b      	str	r3, [r7, #68]	; 0x44
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b66      	ldr	r3, [pc, #408]	; (8006ec0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8006d2e:	e00b      	b.n	8006d48 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d36:	1c59      	adds	r1, r3, #1
 8006d38:	6479      	str	r1, [r7, #68]	; 0x44
 8006d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d44:	09db      	lsrs	r3, r3, #7
 8006d46:	643b      	str	r3, [r7, #64]	; 0x40
 8006d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d4c:	d8f0      	bhi.n	8006d30 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	647a      	str	r2, [r7, #68]	; 0x44
 8006d54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d68:	e00b      	b.n	8006d82 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d70:	1c59      	adds	r1, r3, #1
 8006d72:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	09db      	lsrs	r3, r3, #7
 8006d80:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	2b7f      	cmp	r3, #127	; 0x7f
 8006d86:	d8f0      	bhi.n	8006d6a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d96:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7fe fe5d 	bl	8005a60 <_EncodeStr>
 8006da6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006da8:	2209      	movs	r2, #9
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	6938      	ldr	r0, [r7, #16]
 8006dae:	f7fe ff97 	bl	8005ce0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b40      	ldr	r3, [pc, #256]	; (8006ec0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006dc6:	e00b      	b.n	8006de0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dce:	1c59      	adds	r1, r3, #1
 8006dd0:	6379      	str	r1, [r7, #52]	; 0x34
 8006dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	09db      	lsrs	r3, r3, #7
 8006dde:	633b      	str	r3, [r7, #48]	; 0x30
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	2b7f      	cmp	r3, #127	; 0x7f
 8006de4:	d8f0      	bhi.n	8006dc8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	637a      	str	r2, [r7, #52]	; 0x34
 8006dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e00:	e00b      	b.n	8006e1a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	1c59      	adds	r1, r3, #1
 8006e0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	09db      	lsrs	r3, r3, #7
 8006e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e1e:	d8f0      	bhi.n	8006e02 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	623b      	str	r3, [r7, #32]
 8006e3a:	e00b      	b.n	8006e54 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	1c59      	adds	r1, r3, #1
 8006e44:	6279      	str	r1, [r7, #36]	; 0x24
 8006e46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	09db      	lsrs	r3, r3, #7
 8006e52:	623b      	str	r3, [r7, #32]
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	2b7f      	cmp	r3, #127	; 0x7f
 8006e58:	d8f0      	bhi.n	8006e3c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e60:	6a3a      	ldr	r2, [r7, #32]
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	e00b      	b.n	8006e8c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	1c59      	adds	r1, r3, #1
 8006e7c:	61f9      	str	r1, [r7, #28]
 8006e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	09db      	lsrs	r3, r3, #7
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e90:	d8f0      	bhi.n	8006e74 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	61fa      	str	r2, [r7, #28]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006ea2:	2215      	movs	r2, #21
 8006ea4:	68f9      	ldr	r1, [r7, #12]
 8006ea6:	6938      	ldr	r0, [r7, #16]
 8006ea8:	f7fe ff1a 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f383 8811 	msr	BASEPRI, r3
}
 8006eb2:	bf00      	nop
 8006eb4:	3748      	adds	r7, #72	; 0x48
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20014298 	.word	0x20014298
 8006ec0:	20014268 	.word	0x20014268

08006ec4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006eda:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4798      	blx	r3
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20014268 	.word	0x20014268

08006eec <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ef4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef8:	f04f 0120 	mov.w	r1, #32
 8006efc:	f381 8811 	msr	BASEPRI, r1
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	480b      	ldr	r0, [pc, #44]	; (8006f30 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006f04:	f7fe fdf9 	bl	8005afa <_PreparePacket>
 8006f08:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f0a:	2280      	movs	r2, #128	; 0x80
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	6938      	ldr	r0, [r7, #16]
 8006f10:	f7fe fda6 	bl	8005a60 <_EncodeStr>
 8006f14:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006f16:	220e      	movs	r2, #14
 8006f18:	68f9      	ldr	r1, [r7, #12]
 8006f1a:	6938      	ldr	r0, [r7, #16]
 8006f1c:	f7fe fee0 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f383 8811 	msr	BASEPRI, r3
}
 8006f26:	bf00      	nop
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20014298 	.word	0x20014298

08006f34 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006f3a:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d01a      	beq.n	8006f78 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006f42:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d015      	beq.n	8006f78 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006f4c:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4798      	blx	r3
 8006f54:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f58:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	000a      	movs	r2, r1
 8006f68:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4621      	mov	r1, r4
 8006f70:	200d      	movs	r0, #13
 8006f72:	f7ff fbe5 	bl	8006740 <SEGGER_SYSVIEW_RecordU32x2>
 8006f76:	e006      	b.n	8006f86 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	200c      	movs	r0, #12
 8006f80:	f7ff fba2 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd90      	pop	{r4, r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20014268 	.word	0x20014268
 8006f94:	e0001004 	.word	0xe0001004

08006f98 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa2:	f04f 0120 	mov.w	r1, #32
 8006fa6:	f381 8811 	msr	BASEPRI, r1
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	4819      	ldr	r0, [pc, #100]	; (8007014 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006fae:	f7fe fda4 	bl	8005afa <_PreparePacket>
 8006fb2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006fb8:	4b17      	ldr	r3, [pc, #92]	; (8007018 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	e00b      	b.n	8006fe4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	1c59      	adds	r1, r3, #1
 8006fd4:	6179      	str	r1, [r7, #20]
 8006fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	09db      	lsrs	r3, r3, #7
 8006fe2:	613b      	str	r3, [r7, #16]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe8:	d8f0      	bhi.n	8006fcc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	617a      	str	r2, [r7, #20]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	68b8      	ldr	r0, [r7, #8]
 8007000:	f7fe fe6e 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f383 8811 	msr	BASEPRI, r3
}
 800700a:	bf00      	nop
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20014298 	.word	0x20014298
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007022:	f3ef 8311 	mrs	r3, BASEPRI
 8007026:	f04f 0120 	mov.w	r1, #32
 800702a:	f381 8811 	msr	BASEPRI, r1
 800702e:	607b      	str	r3, [r7, #4]
 8007030:	4807      	ldr	r0, [pc, #28]	; (8007050 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007032:	f7fe fd62 	bl	8005afa <_PreparePacket>
 8007036:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007038:	2203      	movs	r2, #3
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6838      	ldr	r0, [r7, #0]
 800703e:	f7fe fe4f 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f383 8811 	msr	BASEPRI, r3
}
 8007048:	bf00      	nop
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20014298 	.word	0x20014298

08007054 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800705a:	f3ef 8311 	mrs	r3, BASEPRI
 800705e:	f04f 0120 	mov.w	r1, #32
 8007062:	f381 8811 	msr	BASEPRI, r1
 8007066:	607b      	str	r3, [r7, #4]
 8007068:	4807      	ldr	r0, [pc, #28]	; (8007088 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800706a:	f7fe fd46 	bl	8005afa <_PreparePacket>
 800706e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007070:	2212      	movs	r2, #18
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6838      	ldr	r0, [r7, #0]
 8007076:	f7fe fe33 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f383 8811 	msr	BASEPRI, r3
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	20014298 	.word	0x20014298

0800708c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007092:	f3ef 8311 	mrs	r3, BASEPRI
 8007096:	f04f 0120 	mov.w	r1, #32
 800709a:	f381 8811 	msr	BASEPRI, r1
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	4807      	ldr	r0, [pc, #28]	; (80070c0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80070a2:	f7fe fd2a 	bl	8005afa <_PreparePacket>
 80070a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80070a8:	2211      	movs	r2, #17
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6838      	ldr	r0, [r7, #0]
 80070ae:	f7fe fe17 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f383 8811 	msr	BASEPRI, r3
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20014298 	.word	0x20014298

080070c4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070cc:	f3ef 8311 	mrs	r3, BASEPRI
 80070d0:	f04f 0120 	mov.w	r1, #32
 80070d4:	f381 8811 	msr	BASEPRI, r1
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	4819      	ldr	r0, [pc, #100]	; (8007140 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80070dc:	f7fe fd0d 	bl	8005afa <_PreparePacket>
 80070e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070e6:	4b17      	ldr	r3, [pc, #92]	; (8007144 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	61fb      	str	r3, [r7, #28]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	61bb      	str	r3, [r7, #24]
 80070f8:	e00b      	b.n	8007112 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	1c59      	adds	r1, r3, #1
 8007102:	61f9      	str	r1, [r7, #28]
 8007104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	09db      	lsrs	r3, r3, #7
 8007110:	61bb      	str	r3, [r7, #24]
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b7f      	cmp	r3, #127	; 0x7f
 8007116:	d8f0      	bhi.n	80070fa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	61fa      	str	r2, [r7, #28]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	b2d2      	uxtb	r2, r2
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007128:	2208      	movs	r2, #8
 800712a:	68f9      	ldr	r1, [r7, #12]
 800712c:	6938      	ldr	r0, [r7, #16]
 800712e:	f7fe fdd7 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f383 8811 	msr	BASEPRI, r3
}
 8007138:	bf00      	nop
 800713a:	3720      	adds	r7, #32
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20014298 	.word	0x20014298
 8007144:	20014268 	.word	0x20014268

08007148 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007150:	f3ef 8311 	mrs	r3, BASEPRI
 8007154:	f04f 0120 	mov.w	r1, #32
 8007158:	f381 8811 	msr	BASEPRI, r1
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	4819      	ldr	r0, [pc, #100]	; (80071c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007160:	f7fe fccb 	bl	8005afa <_PreparePacket>
 8007164:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	e00b      	b.n	8007196 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	1c59      	adds	r1, r3, #1
 8007186:	61f9      	str	r1, [r7, #28]
 8007188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	09db      	lsrs	r3, r3, #7
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b7f      	cmp	r3, #127	; 0x7f
 800719a:	d8f0      	bhi.n	800717e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	61fa      	str	r2, [r7, #28]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80071ac:	2204      	movs	r2, #4
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	6938      	ldr	r0, [r7, #16]
 80071b2:	f7fe fd95 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f383 8811 	msr	BASEPRI, r3
}
 80071bc:	bf00      	nop
 80071be:	3720      	adds	r7, #32
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20014298 	.word	0x20014298
 80071c8:	20014268 	.word	0x20014268

080071cc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071d4:	f3ef 8311 	mrs	r3, BASEPRI
 80071d8:	f04f 0120 	mov.w	r1, #32
 80071dc:	f381 8811 	msr	BASEPRI, r1
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	4819      	ldr	r0, [pc, #100]	; (8007248 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80071e4:	f7fe fc89 	bl	8005afa <_PreparePacket>
 80071e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071ee:	4b17      	ldr	r3, [pc, #92]	; (800724c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e00b      	b.n	800721a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	1c59      	adds	r1, r3, #1
 800720a:	61f9      	str	r1, [r7, #28]
 800720c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	09db      	lsrs	r3, r3, #7
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b7f      	cmp	r3, #127	; 0x7f
 800721e:	d8f0      	bhi.n	8007202 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	61fa      	str	r2, [r7, #28]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007230:	2206      	movs	r2, #6
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	6938      	ldr	r0, [r7, #16]
 8007236:	f7fe fd53 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f383 8811 	msr	BASEPRI, r3
}
 8007240:	bf00      	nop
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	20014298 	.word	0x20014298
 800724c:	20014268 	.word	0x20014268

08007250 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800725a:	f3ef 8311 	mrs	r3, BASEPRI
 800725e:	f04f 0120 	mov.w	r1, #32
 8007262:	f381 8811 	msr	BASEPRI, r1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	4827      	ldr	r0, [pc, #156]	; (8007308 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800726a:	f7fe fc46 	bl	8005afa <_PreparePacket>
 800726e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007274:	4b25      	ldr	r3, [pc, #148]	; (800730c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	623b      	str	r3, [r7, #32]
 8007286:	e00b      	b.n	80072a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	b2da      	uxtb	r2, r3
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	6279      	str	r1, [r7, #36]	; 0x24
 8007292:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	09db      	lsrs	r3, r3, #7
 800729e:	623b      	str	r3, [r7, #32]
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	2b7f      	cmp	r3, #127	; 0x7f
 80072a4:	d8f0      	bhi.n	8007288 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	627a      	str	r2, [r7, #36]	; 0x24
 80072ac:	6a3a      	ldr	r2, [r7, #32]
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	e00b      	b.n	80072d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	1c59      	adds	r1, r3, #1
 80072c8:	61f9      	str	r1, [r7, #28]
 80072ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	09db      	lsrs	r3, r3, #7
 80072d6:	61bb      	str	r3, [r7, #24]
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2b7f      	cmp	r3, #127	; 0x7f
 80072dc:	d8f0      	bhi.n	80072c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	61fa      	str	r2, [r7, #28]
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80072ee:	2207      	movs	r2, #7
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	6938      	ldr	r0, [r7, #16]
 80072f4:	f7fe fcf4 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f383 8811 	msr	BASEPRI, r3
}
 80072fe:	bf00      	nop
 8007300:	3728      	adds	r7, #40	; 0x28
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20014298 	.word	0x20014298
 800730c:	20014268 	.word	0x20014268

08007310 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007318:	4b04      	ldr	r3, [pc, #16]	; (800732c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	1ad3      	subs	r3, r2, r3
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	20014268 	.word	0x20014268

08007330 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b08c      	sub	sp, #48	; 0x30
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800733a:	4b3b      	ldr	r3, [pc, #236]	; (8007428 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d06d      	beq.n	800741e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007342:	4b39      	ldr	r3, [pc, #228]	; (8007428 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007348:	2300      	movs	r3, #0
 800734a:	62bb      	str	r3, [r7, #40]	; 0x28
 800734c:	e008      	b.n	8007360 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	3301      	adds	r3, #1
 800735e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007360:	79fb      	ldrb	r3, [r7, #7]
 8007362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007364:	429a      	cmp	r2, r3
 8007366:	d3f2      	bcc.n	800734e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007368:	e000      	b.n	800736c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800736a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d055      	beq.n	800741e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007372:	f3ef 8311 	mrs	r3, BASEPRI
 8007376:	f04f 0120 	mov.w	r1, #32
 800737a:	f381 8811 	msr	BASEPRI, r1
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	482a      	ldr	r0, [pc, #168]	; (800742c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007382:	f7fe fbba 	bl	8005afa <_PreparePacket>
 8007386:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	623b      	str	r3, [r7, #32]
 8007394:	e00b      	b.n	80073ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	b2da      	uxtb	r2, r3
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	1c59      	adds	r1, r3, #1
 800739e:	6279      	str	r1, [r7, #36]	; 0x24
 80073a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073a4:	b2d2      	uxtb	r2, r2
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	09db      	lsrs	r3, r3, #7
 80073ac:	623b      	str	r3, [r7, #32]
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	2b7f      	cmp	r3, #127	; 0x7f
 80073b2:	d8f0      	bhi.n	8007396 <SEGGER_SYSVIEW_SendModule+0x66>
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	627a      	str	r2, [r7, #36]	; 0x24
 80073ba:	6a3a      	ldr	r2, [r7, #32]
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	61fb      	str	r3, [r7, #28]
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	e00b      	b.n	80073e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	1c59      	adds	r1, r3, #1
 80073d8:	61f9      	str	r1, [r7, #28]
 80073da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	09db      	lsrs	r3, r3, #7
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	2b7f      	cmp	r3, #127	; 0x7f
 80073ec:	d8f0      	bhi.n	80073d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	61fa      	str	r2, [r7, #28]
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2280      	movs	r2, #128	; 0x80
 8007404:	4619      	mov	r1, r3
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7fe fb2a 	bl	8005a60 <_EncodeStr>
 800740c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800740e:	2216      	movs	r2, #22
 8007410:	68f9      	ldr	r1, [r7, #12]
 8007412:	6938      	ldr	r0, [r7, #16]
 8007414:	f7fe fc64 	bl	8005ce0 <_SendPacket>
      RECORD_END();
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800741e:	bf00      	nop
 8007420:	3730      	adds	r7, #48	; 0x30
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20014290 	.word	0x20014290
 800742c:	20014298 	.word	0x20014298

08007430 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00f      	beq.n	800745e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800743e:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1f2      	bne.n	8007444 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20014290 	.word	0x20014290

0800746c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007472:	f3ef 8311 	mrs	r3, BASEPRI
 8007476:	f04f 0120 	mov.w	r1, #32
 800747a:	f381 8811 	msr	BASEPRI, r1
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	4817      	ldr	r0, [pc, #92]	; (80074e0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007482:	f7fe fb3a 	bl	8005afa <_PreparePacket>
 8007486:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	e00b      	b.n	80074b0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	b2da      	uxtb	r2, r3
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	1c59      	adds	r1, r3, #1
 80074a0:	6179      	str	r1, [r7, #20]
 80074a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	09db      	lsrs	r3, r3, #7
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b7f      	cmp	r3, #127	; 0x7f
 80074b4:	d8f0      	bhi.n	8007498 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	617a      	str	r2, [r7, #20]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80074c6:	221b      	movs	r2, #27
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	68b8      	ldr	r0, [r7, #8]
 80074cc:	f7fe fc08 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f383 8811 	msr	BASEPRI, r3
}
 80074d6:	bf00      	nop
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20014298 	.word	0x20014298
 80074e4:	20014294 	.word	0x20014294

080074e8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80074e8:	b40f      	push	{r0, r1, r2, r3}
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80074f0:	f107 0314 	add.w	r3, r7, #20
 80074f4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80074f6:	1d3b      	adds	r3, r7, #4
 80074f8:	461a      	mov	r2, r3
 80074fa:	2100      	movs	r1, #0
 80074fc:	6938      	ldr	r0, [r7, #16]
 80074fe:	f7fe fe79 	bl	80061f4 <_VPrintTarget>
  va_end(ParamList);
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750c:	b004      	add	sp, #16
 800750e:	4770      	bx	lr

08007510 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007518:	f3ef 8311 	mrs	r3, BASEPRI
 800751c:	f04f 0120 	mov.w	r1, #32
 8007520:	f381 8811 	msr	BASEPRI, r1
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	4827      	ldr	r0, [pc, #156]	; (80075c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007528:	f7fe fae7 	bl	8005afa <_PreparePacket>
 800752c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	6938      	ldr	r0, [r7, #16]
 8007534:	f7fe fa94 	bl	8005a60 <_EncodeStr>
 8007538:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
 800753e:	2301      	movs	r3, #1
 8007540:	623b      	str	r3, [r7, #32]
 8007542:	e00b      	b.n	800755c <SEGGER_SYSVIEW_Warn+0x4c>
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	b2da      	uxtb	r2, r3
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	1c59      	adds	r1, r3, #1
 800754c:	6279      	str	r1, [r7, #36]	; 0x24
 800754e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	09db      	lsrs	r3, r3, #7
 800755a:	623b      	str	r3, [r7, #32]
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	2b7f      	cmp	r3, #127	; 0x7f
 8007560:	d8f0      	bhi.n	8007544 <SEGGER_SYSVIEW_Warn+0x34>
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	627a      	str	r2, [r7, #36]	; 0x24
 8007568:	6a3a      	ldr	r2, [r7, #32]
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	2300      	movs	r3, #0
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e00b      	b.n	8007594 <SEGGER_SYSVIEW_Warn+0x84>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	1c59      	adds	r1, r3, #1
 8007584:	61f9      	str	r1, [r7, #28]
 8007586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	09db      	lsrs	r3, r3, #7
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b7f      	cmp	r3, #127	; 0x7f
 8007598:	d8f0      	bhi.n	800757c <SEGGER_SYSVIEW_Warn+0x6c>
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	61fa      	str	r2, [r7, #28]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80075aa:	221a      	movs	r2, #26
 80075ac:	68f9      	ldr	r1, [r7, #12]
 80075ae:	6938      	ldr	r0, [r7, #16]
 80075b0:	f7fe fb96 	bl	8005ce0 <_SendPacket>
  RECORD_END();
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f383 8811 	msr	BASEPRI, r3
}
 80075ba:	bf00      	nop
 80075bc:	3728      	adds	r7, #40	; 0x28
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20014298 	.word	0x20014298

080075c8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80075cc:	4b13      	ldr	r3, [pc, #76]	; (800761c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075ce:	7e1b      	ldrb	r3, [r3, #24]
 80075d0:	4619      	mov	r1, r3
 80075d2:	4a13      	ldr	r2, [pc, #76]	; (8007620 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80075d4:	460b      	mov	r3, r1
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	440b      	add	r3, r1
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	4413      	add	r3, r2
 80075de:	336c      	adds	r3, #108	; 0x6c
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b0e      	ldr	r3, [pc, #56]	; (800761c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075e4:	7e1b      	ldrb	r3, [r3, #24]
 80075e6:	4618      	mov	r0, r3
 80075e8:	490d      	ldr	r1, [pc, #52]	; (8007620 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80075ea:	4603      	mov	r3, r0
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	4403      	add	r3, r0
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	440b      	add	r3, r1
 80075f4:	3370      	adds	r3, #112	; 0x70
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d00b      	beq.n	8007614 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80075fc:	4b07      	ldr	r3, [pc, #28]	; (800761c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075fe:	789b      	ldrb	r3, [r3, #2]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d107      	bne.n	8007614 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007604:	4b05      	ldr	r3, [pc, #20]	; (800761c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007606:	2201      	movs	r2, #1
 8007608:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800760a:	f7fe fa83 	bl	8005b14 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007610:	2200      	movs	r2, #0
 8007612:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007614:	4b01      	ldr	r3, [pc, #4]	; (800761c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007616:	781b      	ldrb	r3, [r3, #0]
}
 8007618:	4618      	mov	r0, r3
 800761a:	bd80      	pop	{r7, pc}
 800761c:	20014268 	.word	0x20014268
 8007620:	20014414 	.word	0x20014414

08007624 <__libc_init_array>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	4d0d      	ldr	r5, [pc, #52]	; (800765c <__libc_init_array+0x38>)
 8007628:	4c0d      	ldr	r4, [pc, #52]	; (8007660 <__libc_init_array+0x3c>)
 800762a:	1b64      	subs	r4, r4, r5
 800762c:	10a4      	asrs	r4, r4, #2
 800762e:	2600      	movs	r6, #0
 8007630:	42a6      	cmp	r6, r4
 8007632:	d109      	bne.n	8007648 <__libc_init_array+0x24>
 8007634:	4d0b      	ldr	r5, [pc, #44]	; (8007664 <__libc_init_array+0x40>)
 8007636:	4c0c      	ldr	r4, [pc, #48]	; (8007668 <__libc_init_array+0x44>)
 8007638:	f000 f83c 	bl	80076b4 <_init>
 800763c:	1b64      	subs	r4, r4, r5
 800763e:	10a4      	asrs	r4, r4, #2
 8007640:	2600      	movs	r6, #0
 8007642:	42a6      	cmp	r6, r4
 8007644:	d105      	bne.n	8007652 <__libc_init_array+0x2e>
 8007646:	bd70      	pop	{r4, r5, r6, pc}
 8007648:	f855 3b04 	ldr.w	r3, [r5], #4
 800764c:	4798      	blx	r3
 800764e:	3601      	adds	r6, #1
 8007650:	e7ee      	b.n	8007630 <__libc_init_array+0xc>
 8007652:	f855 3b04 	ldr.w	r3, [r5], #4
 8007656:	4798      	blx	r3
 8007658:	3601      	adds	r6, #1
 800765a:	e7f2      	b.n	8007642 <__libc_init_array+0x1e>
 800765c:	08007864 	.word	0x08007864
 8007660:	08007864 	.word	0x08007864
 8007664:	08007864 	.word	0x08007864
 8007668:	08007868 	.word	0x08007868

0800766c <memcmp>:
 800766c:	b530      	push	{r4, r5, lr}
 800766e:	3901      	subs	r1, #1
 8007670:	2400      	movs	r4, #0
 8007672:	42a2      	cmp	r2, r4
 8007674:	d101      	bne.n	800767a <memcmp+0xe>
 8007676:	2000      	movs	r0, #0
 8007678:	e005      	b.n	8007686 <memcmp+0x1a>
 800767a:	5d03      	ldrb	r3, [r0, r4]
 800767c:	3401      	adds	r4, #1
 800767e:	5d0d      	ldrb	r5, [r1, r4]
 8007680:	42ab      	cmp	r3, r5
 8007682:	d0f6      	beq.n	8007672 <memcmp+0x6>
 8007684:	1b58      	subs	r0, r3, r5
 8007686:	bd30      	pop	{r4, r5, pc}

08007688 <memcpy>:
 8007688:	440a      	add	r2, r1
 800768a:	4291      	cmp	r1, r2
 800768c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007690:	d100      	bne.n	8007694 <memcpy+0xc>
 8007692:	4770      	bx	lr
 8007694:	b510      	push	{r4, lr}
 8007696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800769a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800769e:	4291      	cmp	r1, r2
 80076a0:	d1f9      	bne.n	8007696 <memcpy+0xe>
 80076a2:	bd10      	pop	{r4, pc}

080076a4 <memset>:
 80076a4:	4402      	add	r2, r0
 80076a6:	4603      	mov	r3, r0
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d100      	bne.n	80076ae <memset+0xa>
 80076ac:	4770      	bx	lr
 80076ae:	f803 1b01 	strb.w	r1, [r3], #1
 80076b2:	e7f9      	b.n	80076a8 <memset+0x4>

080076b4 <_init>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	bf00      	nop
 80076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ba:	bc08      	pop	{r3}
 80076bc:	469e      	mov	lr, r3
 80076be:	4770      	bx	lr

080076c0 <_fini>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr
